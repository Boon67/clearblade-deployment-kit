app=angular.module("adminPortal",["ui.grid","ui.grid.pagination","ui.grid.resizeColumns","ui.grid.edit","ui.grid.selection","ui.bootstrap","ui.router","loadDisplay","ui.ace","angular-clipboard","ngStorage","credit-cards","toastr","ngSanitize","ngPrettyJson"]).config(["$stateProvider","$urlRouterProvider","$logProvider","$localStorageProvider",function($stateProvider,$urlRouterProvider,$logProvider,$localStorageProvider){$localStorageProvider.setDeserializer(function(value){try{return JSON.parse(value)}catch(e){return value}}),$logProvider.debugEnabled(!1),$urlRouterProvider.when("","/"),$urlRouterProvider.otherwise(function($injector){return $injector.get("DevUser").loggedIn()?"/dashboard":"/"}),$stateProvider.state("app",{url:"/",templateUrl:"partials/header.html",controller:"headerCtrl"}).state("app.dashboard",{url:"dashboard",templateUrl:"partials/dashboard.html",controller:"dashboardCtrl",authRequired:!0,resolve:{platformURL:function($localStorage,$location,platformRequest){platformURL=platformRequest.GetUrl()}}}).state("app.system",{url:":systemKey",abstract:!0,authRequired:!0,resolve:{system:function(currentSystem,$stateParams,$state){return currentSystem.updateFromCache($stateParams.systemKey).then(function(data){return data},function(err){return $state.go("app.dashboard"),{}})}},template:"<ui-view/>"}).state("app.admin",{url:"admin",abstract:!0,authRequired:!0,template:"<ui-view/>"}).state("app.admin.dashboard",{url:"/dashboard",templateUrl:"partials/admin/adminDashboard.html",controller:"adminDashboardCtrl",authRequired:!0}).state("app.admin.manage",{url:"/manage",templateUrl:"partials/admin/adminManage.html",controller:"adminManageCtrl",authRequired:!0,resolve:{developerData:function($q,developers,loadDisplay){var deferred=$q.defer(),queryObject={pageSize:0,pageNum:0},promise=developers.getAllDevelopers(queryObject.pageSize,queryObject.pageNum);return loadDisplay.addDisplay(promise,"Loading info..."),promise.then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise}}}).state("app.admin.manage.developers",{url:"/developers",templateUrl:"partials/admin/adminManageDevelopers.html",controller:"adminManageDevelopersCtrl",authRequired:!0,resolve:{listOfDevelopers:function(developerData,developers){return developers.structureDevelopers(developerData.developers)}}}).state("app.admin.manage.systems",{url:"/systems",templateUrl:"partials/admin/adminManageSystems.html",controller:"adminManageSystemsCtrl",authRequired:!0,resolve:{listOfSystems:function($q,developerData,loadDisplay,consoleConstants,System){for(var deferred=$q.defer(),systemPromises=[],systemConfig={},i=0,len=developerData.developers.length;i<len;i++)for(system in developerData.developers[i].systems)systemConfig[consoleConstants.internal.SYSTEM_KEY]=system,systemConfig[consoleConstants.internal.SYSTEM_NAME]=developerData.developers[i].systems[system],systemConfig[consoleConstants.external.EMAIL]=developerData.developers[i][consoleConstants.external.EMAIL],systemPromises.push(new System(systemConfig));var systemPromisesWatch=$q.all(systemPromises);return loadDisplay.addDisplay(systemPromisesWatch,"Loading systems..."),systemPromisesWatch.then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise}}}).state("app.admin.manage.edges",{url:"/edges",templateUrl:"partials/admin/adminManageEdges.html",controller:"adminManageEdgesCtrl",authRequired:!0}).state("app.admin.operations",{url:"/operations",templateUrl:"partials/admin/adminOperations.html",controller:"adminOperationsCtrl",authRequired:!0}).state("app.accountSettings",{url:"account",templateUrl:"partials/accountSettings/main.html",controller:"accountSettingsMainCtrl",authRequired:!0,resolve:{resolvedPaymentProfile:function($q,saas,$localStorage,loadDisplay){var deferred=$q.defer();return loadDisplay.addDisplay(deferred.promise,"Loading profile..."),saas.getPaymentProfile($localStorage.dev_info.email).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},isSaas:function($q,saas,$state){var deferred=$q.defer();return saas.getStatus().then(function(isSaas){isSaas?deferred.resolve(!0):deferred.resolve(!1)},function(err){deferred.reject(err)}),deferred.promise},resolvedUserInfo:function($localStorage){return $localStorage.dev_info}}}).state("app.accountSettings.details",{url:"/details",templateUrl:"partials/accountSettings/details.html",controller:"AccountSettingsDetailCtrl",authRequired:!0,resolve:{resolvedDevToken:function($localStorage){return $localStorage.cb_platform_dev_token},resolvedGithubToken:function($localStorage){return $localStorage.github_access_token?$localStorage.github_access_token:""}}}).state("app.accountSettings.usage",{url:"/usage",templateUrl:"partials/accountSettings/usage.html",controller:"AccountSettingsUsageCtrl",authRequired:!0,resolve:{resolvedSystems:function($q,systemList){var deferred=$q.defer();return systemList.get().then(function(data){deferred.resolve(data)}),deferred.promise}}}).state("app.accountSettings.billing",{url:"/billing",templateUrl:"partials/accountSettings/billing.html",controller:"AccountSettingsBillingCtrl",authRequired:!0}).state("app.system.data",{url:"/data",templateUrl:"partials/resources.html",controller:"resourceCtrl",authRequired:!0,resolve:{resolvedCollectionList:function(system,$q,loadDisplay,CollectionList,consoleConstants,errorDialog){var deferred=$q.defer(),shouldGetColumns=!0,config={};config[consoleConstants.internal.SYSTEM_KEY]=system.getSystemKey(),config[consoleConstants.internal.SYSTEM_SECRET]=system.getSystemSecret();var collList=new CollectionList(config),promise=collList.fetch(shouldGetColumns);return loadDisplay.addDisplay(promise,"Loading collections..."),promise.then(function(){deferred.resolve(collList)},function(err){errorDialog.show("Error!","Unable to load collections",err),deferred.reject(err)}),deferred.promise}}}).state("app.system.data.collectionID",{url:"/:collectionID",params:{filter:null},templateUrl:"partials/collectionView.html",controller:"collectionViewCtrl",authRequired:!0,resolve:{resolvedCollection:function(system,resolvedCollectionList,$state,$stateParams){if(0===resolvedCollectionList.results.length)$state.go("app.system.data",{systemKey:system.getUniqueSystemKey()},{reload:!0});else{var collectionWanted=resolvedCollectionList.getCollectionByID($stateParams.collectionID);if(collectionWanted)return resolvedCollectionList.setCurrentCollection(collectionWanted);$state.go("app.system.data",{systemKey:system.getUniqueSystemKey()})}}}}).state("app.system.message",{url:"/message",templateUrl:"partials/messaging.html",controller:"messagingCtrl",authRequired:!0}).state("app.system.message.mqtt",{url:"/mqtt",templateUrl:"partials/messaging-mqtt.html",controller:"mqttMessageCtrl",authRequired:!0}).state("app.system.code",{url:"/code",templateUrl:"partials/code.html",controller:"codeCtrl",authRequired:!0,resolve:{serviceList:function(system,$q,loadDisplay,CodeList){var deferred=$q.defer(),list=new CodeList({type:"service"}),promise=list.fetch();return loadDisplay.addDisplay(promise,"Loading services..."),promise.then(function(){deferred.resolve(list)},function(err){deferred.reject(err)}),deferred.promise},libraryList:function(system,$q,loadDisplay,CodeList){var deferred=$q.defer(),list=new CodeList({type:"library"}),promise=list.fetch();return loadDisplay.addDisplay(promise,"Loading libraries..."),promise.then(function(){deferred.resolve(list)},function(err){deferred.reject(err)}),deferred.promise},triggerList:function(system,$q,loadDisplay,CodeList){var deferred=$q.defer(),list=new CodeList({type:"trigger"}),promise=list.fetch();return loadDisplay.addDisplay(promise,"Loading triggers..."),promise.then(function(){deferred.resolve(list)},function(err){deferred.reject(err)}),deferred.promise},timerList:function(system,$q,loadDisplay,CodeList){var deferred=$q.defer(),list=new CodeList({type:"timer"}),promise=list.fetch();return loadDisplay.addDisplay(promise,"Loading timers..."),promise.then(function(){deferred.resolve(list)},function(err){deferred.reject(err)}),deferred.promise},resolvedSystem:function(system){return system},resolvedPropOptions:function($q,system,triggerList,serviceList,CollectionList,DeviceList,consoleConstants,resource,CodeUtils){var deferred=$q.defer(),propOptions={collections:[],devices:[],services:serviceList.list,triggerDefs:[]},sysConfig={};sysConfig[consoleConstants.internal.SYSTEM_KEY]=system.getSystemKey(),sysConfig[consoleConstants.internal.SYSTEM_SECRET]=system.getSystemSecret();var collList=new CollectionList(sysConfig),deviceList=new DeviceList(sysConfig),promiseArray=[],collectionFetch=$q.defer();collList.fetch().then(function(data){propOptions.collections=data,propOptions.collections.unshift({appID:sysConfig[consoleConstants.internal.SYSTEM_KEY],name:"All",internalName:""}),collectionFetch.resolve(propOptions)},function(err){collectionFetch.reject("Unable to retrieve collection list")}),promiseArray.push(collectionFetch.promise);var deviceFetch=$q.defer();deviceList.fetch().then(function(data){propOptions.devices=data,propOptions.devices.unshift({name:"All",internalDeviceName:""}),deviceFetch.resolve()},function(err){deviceFetch.reject("Unable to retrieve device list")}),promiseArray.push(deviceFetch.promise);var userFetch=$q.defer();resource.getUsers().then(function(data){propOptions.users=data,propOptions.users.unshift({email:"All",user_id:"*"}),userFetch.resolve()},function(err){userFetch.reject("Unable to retrieve user list")}),promiseArray.push(userFetch.promise);var triggerDefFetch=$q.defer();return CodeUtils.getTriggerDefs().then(function(defs){propOptions.triggerDefs=defs,triggerDefFetch.resolve()},function(err){triggerDefFetch.reject("Unable to retrieve triggers")}),promiseArray.push(triggerDefFetch.promise),$q.all(promiseArray).then(function(){deferred.resolve(propOptions)}),deferred.promise}}}).state("app.system.code.services",{url:"/services/:name",templateUrl:"partials/codeViewer.html",controller:"codeViewerCtrl",resolve:{resolvedCode:function(system,serviceList,$stateParams,$q,$state){var deferred=$q.defer();if(0===serviceList.list.length)$state.go("app.system.code",{systemKey:system.getUniqueSystemKey()});else for(var i=0,len=serviceList.list.length;i<len;i++)if(serviceList.list[i].name===$stateParams.name){deferred.resolve(serviceList.list[i]);break}return deferred.promise}},authRequired:!0}).state("app.system.code.libraries",{url:"/libraries/:name",templateUrl:"partials/codeViewer.html",controller:"codeViewerCtrl",authRequired:!0,resolve:{resolvedCode:function(system,libraryList,$stateParams,$q){for(var deferred=$q.defer(),i=0,len=libraryList.list.length;i<len;i++)if(libraryList.list[i].name===$stateParams.name){deferred.resolve(libraryList.list[i]);break}return deferred.promise}}}).state("app.system.code.trigger",{url:"/triggers/:name",templateUrl:"partials/triggerViewer.html",controller:"triggerViewerCtrl",authRequired:!0,resolve:{resolvedTrigger:function(triggerList,$stateParams){for(var i=0,trigCount=triggerList.list.length;i<trigCount;i++)if(triggerList.list[i].name===$stateParams.name)return triggerList.list[i]}}}).state("app.system.code.timer",{url:"/timers/:name",templateUrl:"partials/timerViewer.html",controller:"timerViewerCtrl",authRequired:!0,resolve:{resolvedTimer:function(timerList,$stateParams){for(var i=0,trigCount=timerList.list.length;i<trigCount;i++)if(timerList.list[i].name===$stateParams.name)return timerList.list[i]}}}).state("app.system.auth",{url:"/auth",templateUrl:"partials/auth/auth.html",controller:"authCtrl",authRequired:!0}).state("app.system.auth.users",{url:"/users",params:{filter:null},templateUrl:"partials/auth/users.html",controller:"usersCtrl",authRequired:!0}).state("app.system.auth.edges",{url:"/edges",params:{filter:null},templateUrl:"partials/auth/edges.html",controller:"edgesCtrl",authRequired:!0,resolve:{resolvedPortalList:function($q,DashboardList,currentSystem,consoleConstants,loadDisplay,errorDialog){var deferred=$q.defer(),config={};config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),config.type=consoleConstants.external.DASHBOARD.KNOWN_TYPES.EDGE_MONITORING;var dl=new DashboardList(config),promise=dl.fetch();return loadDisplay.addDisplay(promise,"Loading portals..."),promise.then(function(){deferred.resolve(dl)},function(err){errorDialog.show("Error!","Unable to load portals",err),deferred.reject(err)}),deferred.promise}}}).state("app.system.auth.devices",{url:"/devices",params:{filter:null},templateUrl:"partials/auth/devices.html",controller:"devicesCtrl",authRequired:!0,resolve:{resolvedDeviceList:function(currentSystem,DeviceList,consoleConstants){var deviceListConfig={};return deviceListConfig[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),new DeviceList(deviceListConfig)}}}).state("app.system.auth.roles",{url:"/roles",templateUrl:"partials/auth/roles.html",controller:"rolesCtrl",authRequired:!0}).state("app.system.analytics",{url:"/analytics",templateUrl:"partials/analytics.html",controller:"analyticsCtrl",authRequired:!0}).state("app.system.portal",{url:"/portal",templateUrl:"partials/systemDash.html",controller:"systemDashCtrl",resolve:{resolvedDashList:function($q,DashboardList,currentSystem,consoleConstants,loadDisplay,errorDialog){var deferred=$q.defer(),config={};config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),config.types=[consoleConstants.external.DASHBOARD.KNOWN_TYPES.CUSTOM,consoleConstants.external.DASHBOARD.KNOWN_VERSIONS.V2,consoleConstants.external.DASHBOARD.KNOWN_TYPES.CUSTOM_V2,consoleConstants.external.DASHBOARD.KNOWN_TYPES.EDGE_MONITORING,consoleConstants.external.DASHBOARD.KNOWN_TYPES.EDGE_MONITORING_V2];var dl=new DashboardList(config),promise=dl.fetch();return loadDisplay.addDisplay(promise,"Loading portals..."),promise.then(function(){deferred.resolve(dl)},function(err){errorDialog.show("Error!","Unable to load portals",err),deferred.reject(err)}),deferred.promise},resolvedPluginList:function($q,PluginList,currentSystem,consoleConstants,loadDisplay,errorDialog){var deferred=$q.defer(),config={};config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID();var pl=new PluginList(config),promise=pl.fetch();return loadDisplay.addDisplay(promise,"Loading plugins..."),promise.then(function(){deferred.resolve(pl)},function(err){errorDialog.show("Error!","Unable to load plugins",err),deferred.reject(err)}),deferred.promise},resolvedRoles:function(roles){return roles.getAllRoles()}},authRequired:!0}).state("app.register",{url:"register",templateUrl:"partials/onPremRegistration.html",controller:"onPremRegistrationCtrl",resolve:{isSaas:function($q,saas,$state){var deferred=$q.defer();return saas.getStatus().then(function(isSaas){isSaas?($state.go("app.registerFlex"),deferred.reject()):deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise}}}).state("app.registerFlex",{url:"register/flex",templateUrl:"partials/saasRegistration.html",controller:"saasRegistrationCtrl"}).state("app.resetpass",{url:"resetpass",templateUrl:"partials/resetPass.html",controller:"resetPassCtrl"}).state("app.system.adapters",{url:"/adapters",templateUrl:"partials/adapters.html",controller:"adaptersCtrl",authRequired:!0,resolve:{resolvedAdapterList:function(system,$q,loadDisplay,AdapterList,consoleConstants,errorDialog){var deferred=$q.defer(),config={};config[consoleConstants.internal.SYSTEM_KEY]=system.getSystemKey(),config[consoleConstants.internal.SYSTEM_SECRET]=system.getSystemSecret();var adapterList=new AdapterList(config),promise=adapterList.fetch();return loadDisplay.addDisplay(promise,"Loading adapters...","adapterListTable"),promise.then(function(){deferred.resolve(adapterList)},function(err){errorDialog.show("Error!","Unable to load adapters",err),deferred.reject(err)}),deferred.promise}}}).state("app.system.adapters.adapter",{url:"/:adapterName",templateUrl:"partials/adapterView.html",controller:"adapterViewCtrl",authRequired:!0,resolve:{resolvedAdapter:function(system,resolvedAdapterList,$state,$stateParams){var adapterWanted=resolvedAdapterList.getAdapterByName($stateParams.adapterName);if(adapterWanted)return resolvedAdapterList.setCurrentAdapter(adapterWanted);$state.go("app.system.adapters",{systemKey:system.getUniqueSystemKey()})}}})}]).run(["$rootScope","DevUser","loadDisplay","currentSystem","$state","platformRequest","githubPageManager","$q",function($rootScope,DevUser,loadDisplay,currentSystem,$state,platformRequest,githubPageManager,$q){githubPageManager.manage();var _navigateToPage=function(stateName,state,stateParams,fromState,fromParams){$state.go(stateName,stateParams,{notify:!1}).then(function(){$rootScope.$broadcast("$stateChangeSuccess",state,stateParams,fromState,fromParams)})};$rootScope.$on("$stateChangeStart",function(event,next,toParams,fromState,fromParams){if(DevUser.loggedIn())DevUser.loggedIn()&&"app"===next.name&&(event.preventDefault(),_navigateToPage("app.dashboard",next,toParams,fromState,fromParams));else{event.preventDefault();var promise=DevUser.checkAuth();promise.then(function(){"app"===next.name?_navigateToPage("app.dashboard",next,toParams,fromState,fromParams):_navigateToPage(next.name,next,toParams,fromState,fromParams)},function(err){platformRequest.disconnectEdge(),platformRequest.clearAvailableEdges(),next.authRequired?(currentSystem.clear(),_navigateToPage("app",next,toParams,fromState,fromParams)):_navigateToPage(next.name,next,toParams,fromState,fromParams)}),loadDisplay.addDisplay(promise,"Authenticating")}})}]),app.controller("AccountSettingsBillingCtrl",["$scope","saas","errorDialog","DevUser","loadDisplay","resolvedPaymentProfile","consoleConstants","resolvedUserInfo",function($scope,saas,errorDialog,DevUser,loadDisplay,resolvedPaymentProfile,consoleConstants,resolvedUserInfo){$scope.status={date:new Date,maxDate:new Date,opened:!1},$scope.billingInfo={},$scope.userInfo=resolvedPaymentProfile,$scope.getBillingError=!1,$scope.datepickerOptions={datepickerMode:"month",closeText:"Close",minMode:"month",maxDate:new Date,minDate:new Date(1e3*resolvedUserInfo[consoleConstants.external.CREATION_DATE])},$scope.openDatePicker=function(){$scope.status.opened=!0},$scope.$watch("status.date",function(newVal,oldVal){newVal&&newVal!==oldVal&&getBillingInfo()});var getBillingInfo=function(){var promise=saas.getBillingForPeriod(DevUser.getLoggedUser(),$scope.status.date.getTime());loadDisplay.addDisplay(promise,"Loading bill..."),promise.then(function(data){$scope.getBillingError=!1,$scope.billingInfo=data},function(err){$scope.getBillingError=!0,errorDialog.show("Error!","Unable to fetch billing info; "+JSON.stringify(err))})};getBillingInfo()}]),app.controller("AccountSettingsDetailCtrl",["$scope","resolvedUserInfo","resolvedDevToken","resolvedGithubToken","saas","resolvedPaymentProfile","errorDialog","$uibModal","consoleConstants","loadDisplay","confirmDialog","toastr","$state","DevUser","isSaas","githubService","platformRequest",function($scope,resolvedUserInfo,resolvedDevToken,resolvedGithubToken,saas,resolvedPaymentProfile,errorDialog,$uibModal,consoleConstants,loadDisplay,confirmDialog,toastr,$state,DevUser,isSaas,githubService,platformRequest){$scope.user=resolvedUserInfo,$scope.token=resolvedDevToken,$scope.githubToken=resolvedGithubToken,$scope.saasPlans=saas.plans,$scope.billingObj={plan:resolvedPaymentProfile.tier?resolvedPaymentProfile.tier:saas.plans.FREE.name},$scope.billingObj[consoleConstants.internal.IS_SAAS]=void 0===resolvedPaymentProfile[consoleConstants.internal.IS_SAAS]||resolvedPaymentProfile[consoleConstants.internal.IS_SAAS],$scope.isSaas=isSaas,$scope.billingCtrl={form:{}};var accountActions={UPGRADE:"Upgrade",UPDATE:"Update"},showPaymentModal=function(action,callback){$uibModal.open({templateUrl:"partials/modals/paymentInfo.html",controller:"PaymentInfoCtrl",resolve:{confirmationButtonText:function(){return action}}}).result.then(function(data){saas.attachStripeScript().then(function(){var tokenPromise=saas.createCardToken(data.card);loadDisplay.addDisplay(tokenPromise,"Tokenizing..."),tokenPromise.then(function(token){callback(data,token)},function(err){errorDialog.show("Error processing card",err)})})})};$scope.changePassword=function(){$uibModal.open({templateUrl:"partials/modals/changeDevPassword.html",controller:"changeDevPasswordCtrl"})},$scope.updateCard=function(){var callback=function(data,stripeToken){var changes={source:stripeToken,email:$scope.user[consoleConstants.external.EMAIL]},updatePromise=saas.updateStripeAccount($scope.user[consoleConstants.external.EMAIL],changes);updatePromise.then(function(){$scope.billingObj.plan=data.plan,toastr.success("Your payment information has been updated","Success")},function(err){errorDialog.show("Error updating account",err)}),loadDisplay.addDisplay(updatePromise,"Updating account...")};showPaymentModal(accountActions.UPDATE,callback)},$scope.upgradeToFlex=function(){var callback=function(data,stripeToken){var accountInfo={fname:$scope.user[consoleConstants.external.FIRST_NAME],lname:$scope[consoleConstants.external.LAST_NAME],org:$scope.user[consoleConstants.external.ORGANIZATION],email:$scope.user[consoleConstants.external.EMAIL],tier:data.plan,stripeToken:stripeToken},accountPromise=saas.createStripeAccount(accountInfo);loadDisplay.addDisplay(accountPromise,"Creating account..."),accountPromise.then(function(){$scope.billingObj.plan=data.plan,toastr.success("Your account has been upgraded to Flex","Success")},function(err){errorDialog.show("Error creating account",err)})};showPaymentModal(accountActions.UPGRADE,callback)},$scope.revertToFree=function(){confirmDialog.show("Are You sure you want to revert to Free?").result.then(function(){var changes={tier:saas.plans.FREE.name},updatePromise=saas.updateBillingAccount($scope.user[consoleConstants.external.EMAIL],changes);updatePromise.then(function(data){$scope.billingObj.plan=saas.plans.FREE.name,toastr.success("Your account has been reverted to Free","Success")}),loadDisplay.addDisplay(updatePromise,"Updating account...")})},$scope.deleteAccount=function(){confirmDialog.show("Are You sure you want to delete your account?").result.then(function(){DevUser.logOut().then(function(){var deletePromise=saas.deleteUser($scope.user[consoleConstants.external.EMAIL]);deletePromise.then(function(data){toastr.success("Your account has been deleted","Success"),$state.go("app")}),loadDisplay.addDisplay(deletePromise,"Deleting account...")})})},$scope.revokeGithubAuthorization=function(){var gs=new githubService;confirmDialog.show("Are You sure you want to revoke ClearBlade's authorization to your Github Account?").result.then(function(){gs.revokeUserToken($scope.githubToken).then(function(data){204==data.status&&(toastr.success("Your github account has been unlinked","Success"),platformRequest.clearExistingGithubCredentials()),$scope.isGithubLinked()},function(error){console.log(error),$scope.isGithubLinked()})})},$scope.isGithubLinked=function(){var gs=new githubService,promise=gs.verifyToken($scope.githubToken);loadDisplay.addDisplay(promise,"Verifying user token..."),promise.then(function(data){200==data.status?($scope.gitUsername=data.data.user.login,$scope.isGithubAccountLinked=!0):$scope.isGithubAccountLinked=!1},function(error){console.log(error),$scope.isGithubAccountLinked=!1})},$scope.isGithubLinked()}]),app.controller("accountSettingsMainCtrl",["$scope","$localStorage","consoleConstants","resolvedPaymentProfile","isSaas",function($scope,$localStorage,consoleConstants,resolvedPaymentProfile,isSaas){$scope.consoleConstants=consoleConstants,$scope.userProfile=resolvedPaymentProfile,$scope.isSaas=isSaas}]),app.controller("AccountSettingsUsageCtrl",["$scope","$q","resolvedSystems","consoleConstants","cbGrid","utils","analytics","loadDisplay","errorDialog",function($scope,$q,resolvedSystems,consoleConstants,cbGrid,utils,analytics,loadDisplay,errorDialog){$scope.datepickerOptions={datepickerMode:"month",closeText:"Close",minMode:"month",maxDate:new Date};var gatherUsage=function(){for(var deferred=$q.defer(),promises=[],dateRange=getDateRange(),params={systemKey:"",startDate:dateRange.start,endDate:dateRange.end},i=0,len=resolvedSystems.length;i<len;i++)params.systemKey=resolvedSystems[i][consoleConstants.external.SYSTEM_KEY],promises.push(analytics.userGetUsageForSystem(params));return $q.all(promises).then(function(data){for(var i=0,len=resolvedSystems.length;i<len;i++)for(var j=0,length=data.length;j<length;j++)if(data[j][consoleConstants.external.USAGE.SYSTEM_KEY]===resolvedSystems[i][consoleConstants.external.SYSTEM_KEY]){resolvedSystems[i]&&Object.assign(resolvedSystems[i],data[j]),data.splice(j,1);break}deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},getPagedData=function(){var promise=gatherUsage();loadDisplay.addDisplay(promise,"Loading Systems' Usage"),promise.then(function(){$scope.systems=systemsGrid.paginate(resolvedSystems)},function(err){errorDialog.show("Error","Unable to retrieve systems' usage stats",err)})},getDateRange=function(){var firstDay=new Date($scope.status.date.getFullYear(),$scope.status.date.getMonth(),1),lastDay=new Date($scope.status.date.getFullYear(),$scope.status.date.getMonth()+1,0);return{start:firstDay.toISOString().split("T")[0],end:lastDay.toISOString().split("T")[0]}};$scope.systems=[],$scope.status={date:new Date,maxDate:new Date,opened:!1},$scope.openDatePicker=function(){$scope.status.opened=!0},$scope.$watch("status.date",function(newVal,oldVal){if(newVal&&newVal!==oldVal){for(var i=0,len=resolvedSystems.length;i<len;i++)resolvedSystems[i].isDataStale=!0;getPagedData()}});var systemsGridOptions={columnDefs:[{name:"System Name",field:consoleConstants.external.SYSTEM_NAME,dataType:"string",nableSorting:!0,enableCellEdit:!1},{name:"API Calls",field:consoleConstants.external.USAGE.API_CALLS,displayName:"API Calls",dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Messages Published",field:consoleConstants.external.USAGE.MESSAGES_PUBLISHED,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Messages Recieved",field:consoleConstants.external.USAGE.MESSAGES_RECEIVED,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Storage",field:consoleConstants.external.USAGE.STORAGE_USE,dataType:"string",enableSorting:!1,enableCellEdit:!1}],data:"systems",totalItems:$scope.systems.length,paginationPageSizes:[10,15]},gridCallbacks={get:getPagedData},systemsGrid=new cbGrid($scope,systemsGridOptions,gridCallbacks);$scope.systemsGrid=systemsGrid.val}]),angular.module("adminPortal").controller("adapterViewCtrl",["$scope","currentSystem","$uibModal","loadDisplay","errorDialog","resolvedAdapter","consoleConstants","uiGridConstants","adapterUtils","toastr",function($scope,currentSystem,$uibModal,loadDisplay,errorDialog,resolvedAdapter,consoleConstants,uiGridConstants,adapterUtils,toastr){$scope.currentAdapter=resolvedAdapter,$scope.consoleConstants=consoleConstants,$scope.edgeData=[],adapterEdges={};var loadEdgeData=function(){var edgePromise=currentSystem.getSystem().getEdges();loadDisplay.addDisplay(edgePromise,"Loading edges...","adapterEdgeGrid"),edgePromise.then(function(data){for(var i=0;i<data.length;i++){var edge={};edge[consoleConstants.external.ADAPTER.NAME]=data[i].name,edge[consoleConstants.external.ADAPTER.EDGE_STATUS]="",adapterEdges[data[i].name]=edge}$scope.edgeData=Object.values(adapterEdges),$scope.edgesGridOptions.totalItems=data.length,updateAdapterEdgeStatus()},function(err){errorDialog.show("Error!","Unable to retrieve edges",err)})},updateAdapterEdgeStatus=function(){var thePromise=$scope.currentAdapter.getStatus(Object.keys(adapterEdges));loadDisplay.addDisplay(thePromise,"Retrieving edge statuses for "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME],"loadBlocked"),thePromise.then(function(data){for(var edgeKeys=Object.keys(data.result),i=0;i<edgeKeys.length;i++)adapterEdges[edgeKeys[i]][consoleConstants.external.ADAPTER.EDGE_STATUS]=adapterUtils.translateAdapterStatus("status",data.result[edgeKeys[i]])},function(err){errorDialog.show("Error!","Unable to retrieve the adapter status",err)})},getFilesData=function(){$scope.currentAdapter.getFiles().then(function(data){$scope.currentAdapter.files=data},function(err){errorDialog.show("Error!","Unable to retrieve files for adapter",err)})},getSelectFilterOptions=function(){for(var options=[],keys=Object.keys(consoleConstants.external.ADAPTER.STATUS),i=0;i<keys.length;i++)options.push({value:consoleConstants.external.ADAPTER.STATUS[keys[i]],label:consoleConstants.external.ADAPTER.STATUS[keys[i]]});return options};$scope.edgesGridOptions={columnDefs:[{displayName:consoleConstants.internal.ADAPTERS.LABELS.EDGE_NAME,name:consoleConstants.external.ADAPTER_FILES.NAME,field:consoleConstants.external.ADAPTER_FILES.NAME,removable:!1,enableColumnMenu:!1,enableCellEdit:!1,enableHiding:!1,filter:{condition:uiGridConstants.filter.STARTS_WITH,placeholder:"starts with...",ariaLabel:"Starts with filter for edge name",flags:{caseSensitive:!1},type:uiGridConstants.filter.INPUT,disableCancelFilterButton:!0}},{displayName:consoleConstants.internal.ADAPTERS.LABELS.EDGE_STATUS,name:consoleConstants.external.ADAPTER_FILES.EDGE_STATUS,field:consoleConstants.external.ADAPTER.EDGE_STATUS,removable:!1,enableColumnMenu:!1,enableCellEdit:!1,enableHiding:!0,filter:{condition:uiGridConstants.filter.EQUALS,placeholder:"equals...",ariaLabel:"Equals filter for adapter status",type:uiGridConstants.filter.SELECT,disableCancelFilterButton:!0,selectOptions:getSelectFilterOptions()}},{displayName:"Settings",name:"settings",cellTemplate:'<div class="btn-group-wrap"><span ng-click="grid.appScope.adapterEdgeSettingsModal(row)" class="adapter-settings-cell clickable glyphicon glyphicon-wrench"></span></div>',removable:!1,enableColumnMenu:!1,enableCellEdit:!1,enableHiding:!0,enableFiltering:!1,width:75}],data:"edgeData",totalItems:$scope.edgeData.length,enableSorting:!0,paginationPageSizes:[25,50,75],paginationPageSize:25,enableFiltering:!0,onRegisterApi:function(gridApi){$scope.gridApi=gridApi}},loadEdgeData(),getFilesData(),$scope.refreshTable=function(){loadEdgeData()},$scope.adapterSettingsModal=function(row){$uibModal.open({templateUrl:"partials/modals/adapterSettings.html",controller:"adapterSettingsCtrl",resolve:{currentAdapter:function(){return $scope.currentAdapter}}}).result.then(function(data){$scope.currentAdapter=data},function(data){})},$scope.adapterEdgeSettingsModal=function(row){$uibModal.open({templateUrl:"partials/modals/adapterEdge.html",controller:"adapterEdgeCtrl",resolve:{currentAdapter:function(){return $scope.currentAdapter},currentEdge:function(){return row.entity}}})}}]),app.controller("adaptersCtrl",["$scope","$uibModal","$state","resolvedAdapterList","consoleConstants","errorDialog",function($scope,$uibModal,$state,resolvedAdapterList,consoleConstants,errorDialog){$scope.adapterList=resolvedAdapterList,$scope.panelOpen=!1,$scope.displayOverview=!1,$scope.goToAdapter=function(adapter){$scope.displayOverview=!1,$state.go("app.system.adapters.adapter",{adapterName:adapter[consoleConstants.external.ADAPTER.NAME]})},$scope.addAdapter=function(){$uibModal.open({templateUrl:"partials/modals/newAdapter.html",controller:"newAdapterCtrl",resolve:{newAdapter:function(){return!0}}}).result.then(function(added){$scope.adapterList.fetch().then(function(){added=$scope.adapterList.getAdapterByName(added),$scope.goToAdapter(added)})})},$scope.refreshAdapters=function(){$scope.adapterList.fetch().then(function(){},function(err){errorDialog.show("Error!","Unable to refresh adapter list",err)})};var determineAdapterToView=function(){var adapter={};if($state.params.adapterName&&""!==$state.params.adapterName)for(var i=0;i<$scope.adapterList.results.length;i++)if($scope.adapterList.results[i].name===$state.params.adapterName){adapter=$scope.adapterList.results[i];break}return adapter},navIfPossible=function(){var potentialAdapter=determineAdapterToView();Object.keys(potentialAdapter).length&&potentialAdapter[consoleConstants.external.ADAPTER.NAME]?$scope.goToAdapter(potentialAdapter):$scope.displayOverview=!0};$scope.adapterSettings=function(selectedAdapter){$uibModal.open({templateUrl:"partials/modals/adapterSettings.html",controller:"adapterSettingsCtrl",resolve:{currentAdapter:function(){return selectedAdapter}}}).result.then(function(adapter){adapter&&adapter[consoleConstants.external.ADAPTER.NAME]&&$scope.refreshAdapters()},function(adapter){})},navIfPossible()}]),app.controller("adminDashboardCtrl",[function(){}]),app.controller("adminManageCtrl",[function(){}]),app.controller("adminManageDevelopersCtrl",["$scope","cbColumn","cbGrid","$q","developers","uiGridConstants","$timeout","$log","loadDisplay","errorDialog","$uibModal","cbDataTypes","consoleConstants","listOfDevelopers","$state","$stateParams",function($scope,cbColumn,cbGrid,$q,developers,uiGridConstants,$timeout,$log,loadDisplay,errorDialog,$uibModal,cbDataTypes,consoleConstants,listOfDevelopers,$state,$stateParams){$scope.developerData=listOfDevelopers,$scope.numberOfDevelopers=listOfDevelopers.length,$scope.editDev=function(){var rowsToEdit=developerGrid.val.gridApi.selection.getSelectedRows();if(!rowsToEdit||0===rowsToEdit.length)return void errorDialog.show("Action required","Please select a user from the grid");$uibModal.open({templateUrl:"partials/modals/admin/editDeveloper.html",controller:"editDeveloperCtrl",resolve:{devToEdit:function(){return getDevFromList($scope.developerData,rowsToEdit[0][consoleConstants.external.EMAIL])}}}).result.then(function(updatedDev){setDevInList($scope.developerData,updatedDev)})};var getDevFromList=function(list,email){for(var i=0,len=list.length;i<len;i++)if(list[i][consoleConstants.external.EMAIL]===email)return list[i]},setDevInList=function(list,developer){for(var i=0,len=list.length;i<len;i++)list[i][consoleConstants.external.EMAIL]===developer[consoleConstants.external.EMAIL]&&(list[i]=developer)};$scope.getPagedData=function(){$scope.developerData.length=0,$log.debug("Getting developer data");var promise=developers.getAllDevelopers(developerGrid.val.paginationPageSize,developerGrid.val.paginationCurrentPage,developerGrid.prepareSort(),developerGrid.filterInfo);loadDisplay.addDisplay(promise,"Loading Developers...","blockDeveloperGrid"),promise.then(function(data){$scope.developerData=developers.structureDevelopers(data.developers),$timeout(function(){$scope.developerGridOptions.data=$scope.developerData})},function(error){errorDialog.show("Error!","Unable to retrieve data",error)})},$scope.totalServerItems=0;var gridCallbacks={get:$scope.getPagedData,put:endCellEdit},developerGridOptions={columnDefs:[{name:consoleConstants.external.EMAIL,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.internal.FULL_NAME,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.external.ORGANIZATION,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.external.CREATION_DATE,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.external.LAST_LOGIN,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.internal.NUMBER_OF_SYSTEMS,dataType:"number",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.external.ADMIN,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.internal.ENABLED,dataType:"string",enableSorting:!0,enableCellEdit:!1}],data:"developerData",totalItems:$scope.totalServerItems,shouldGetDataUponInstantiation:!1},developerGrid=new cbGrid($scope,developerGridOptions,gridCallbacks);$scope.developerGridOptions=developerGrid.val;var endCellEdit=function(rowEntity,colDef,newVal,oldVal){}}]),app.controller("adminManageEdgesCtrl",["$scope","adminCalls","toastr",function($scope,adminCalls,toastr){$scope.edgeVersions=[],$scope.selectedVersion="",$scope.recommendedVersion="",adminCalls.GetDisableEdgeVersions().then(function(result){$scope.recommendedVersion=result.preferedEdgeVersion,$scope.edgeVersions.push(result.preferedEdgeVersion);for(var i=0,len=result.disabledEdgeVersions.length;i<len;i++)$scope.edgeVersions.push(result.disabledEdgeVersions[i])}),$scope.enableVersion=function(){var payload={};payload[$scope.selectedVersion]=!0,adminCalls.UpdateDisableEdgeVersions(payload).then(function(){toastr.success("Edge version is now enabled","Success")},function(err){toastr.error("Unable to enable edge version.","Error")})},$scope.disableVersion=function(){var payload={};payload[$scope.selectedVersion]=!1,adminCalls.UpdateDisableEdgeVersions(payload).then(function(){toastr.success("Edge version is now disabled","Success")},function(err){toastr.error("Unable to disable edge version.","Error")})}}]),app.controller("adminManageSystemsCtrl",["$scope","cbColumn","cbGrid","$q","uiGridConstants","$timeout","$log","loadDisplay","errorDialog","$uibModal","cbDataTypes","consoleConstants","listOfSystems","analytics","utils",function($scope,cbColumn,cbGrid,$q,uiGridConstants,$timeout,$log,loadDisplay,errorDialog,$uibModal,cbDataTypes,consoleConstants,listOfSystems,analytics,utils){$scope.systemsData=[];var today=new Date,lastMonthRange=(today.getFullYear(),{start:new Date(today.getFullYear()-1,today.getMonth(),1).toISOString().split("T")[0],end:new Date(today.getFullYear(),today.getMonth()+1,0).toISOString().split("T")[0]}),lastYearRange={start:new Date(today.getFullYear(),today.getMonth(),1).toISOString().split("T")[0],end:new Date(today.getFullYear(),today.getMonth()+1,0).toISOString().split("T")[0]},getUsageStats=function(range,attribute){for(var deferred=$q.defer(),promises=[],params={systemKey:"",startDate:range.start,endDate:range.end},i=0,len=listOfSystems.length;i<len;i++)params.systemKey=listOfSystems[i][consoleConstants.external.SYSTEM_KEY],params.spec=attribute,promises.push(analytics.adminGetUsageForSystem(params));return $q.all(promises).then(function(data){for(var i=0,len=listOfSystems.length;i<len;i++)for(var j=0,length=data.length;j<length;j++)if(data[j][consoleConstants.external.USAGE.SYSTEM_KEY]===listOfSystems[i][consoleConstants.external.SYSTEM_KEY]){Object.assign(listOfSystems[i][attribute],data[j]),data.splice(j,1);break}deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},getPagedData=function(){var usagePromises=[];getTotalsForUsersAndCollections(listOfSystems);var monthFetchPromise=getUsageStats(lastMonthRange,"monthUsage"),yearFetchPromise=getUsageStats(lastYearRange,"yearUsage");usagePromises.push(monthFetchPromise),usagePromises.push(yearFetchPromise),loadDisplay.addDisplay(monthFetchPromise,"Loading Systems' Month Usage"),loadDisplay.addDisplay(yearFetchPromise,"Loading Systems' Year Usage"),$q.all(usagePromises).then(function(){},function(err){errorDialog.show("Error","Unable to retrieve systems' usage stats",err)}).finally(function(){$scope.systemsData=systemsGrid.paginate(listOfSystems)})},systemsGridOptions={columnDefs:[{name:consoleConstants.external.SYSTEM_KEY,field:consoleConstants.external.SYSTEM_KEY,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:consoleConstants.external.SYSTEM_NAME,field:consoleConstants.external.SYSTEM_NAME,dataType:"string",enableSorting:!0,enableCellEdit:!1},{name:"Owner",field:consoleConstants.external.EMAIL,dataType:"number",enableSorting:!0,enableCellEdit:!1},{name:"Collections",field:consoleConstants.external.COLLECTIONS,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Users",field:consoleConstants.external.USERS,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"API/month",field:"monthUsage."+consoleConstants.external.USAGE.API_CALLS,displayName:"API/month",dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"API/year",field:"yearUsage."+consoleConstants.external.USAGE.API_CALLS,displayName:"API/year",dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Messages Published/month",field:"monthUsage."+consoleConstants.external.USAGE.MESSAGES_PUBLISHED,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Messages Received/month",field:"monthUsage."+consoleConstants.external.USAGE.MESSAGES_RECEIVED,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Messages Published/year",field:"yearUsage."+consoleConstants.external.USAGE.MESSAGES_PUBLISHED,dataType:"string",enableSorting:!1,enableCellEdit:!1},{name:"Messages Received/year",field:"yearUsage."+consoleConstants.external.USAGE.MESSAGES_RECEIVED,dataType:"string",enableSorting:!1,enableCellEdit:!1}],data:"systemsData",totalItems:$scope.systemsData.length,paginationPageSizes:[10,15]},gridCallbacks={get:getPagedData},systemsGrid=new cbGrid($scope,systemsGridOptions,gridCallbacks);$scope.systemsGridOptions=systemsGrid.val;var getTotalsForUsersAndCollections=function(systems){var wantedModules=['"Collections"','"Users"'],callback=function(sys){return void 0===sys[consoleConstants.external.COLLECTIONS]||void 0===sys[consoleConstants.external.USERS]?analytics.getCountsForModules(sys[consoleConstants.external.SYSTEM_KEY],wantedModules).then(function(data){sys[consoleConstants.external.COLLECTIONS]=data[consoleConstants.external.COLLECTIONS],sys[consoleConstants.external.USERS]=data[consoleConstants.external.USERS]},function(){sys[consoleConstants.external.COLLECTIONS]=0,sys[consoleConstants.external.USERS]=0}):$q.resolve()};utils.getDataForSystems(systems,callback,"Loading Totals...")}}]),app.controller("adminOperationsCtrl",[function(){}]),app.controller("analyticsCtrl",["$scope","$document","currentSystem","analytics","utils","platformRequest","adminCalls","DevUser","errorDialog","loadDisplay","consoleConstants","CollectionList",function($scope,$document,currentSystem,analytics,utils,platformRequest,adminCalls,DevUser,errorDialog,loadDisplay,consoleConstants,CollectionList){var systemKey=currentSystem.getSystemID(),systemSecret=currentSystem.getSystemSecret();platformRequest.GetUrl(),platformRequest.GetUrl(),platformRequest.GetUrl();$scope.filterOptions=analytics.filterOptions,$scope.dataArray=[];var date=$scope.today=new Date,startDate=new Date((new Date).setMonth(date.getMonth()-1));$scope.filter={startDate:startDate,endDate:date,modules:[],actions:[],general:"Events",id:"",user:"",service:""};var collListConfig={};collListConfig[consoleConstants.internal.SYSTEM_KEY]=systemKey,collListConfig[consoleConstants.internal.SYSTEM_SECRET]=systemSecret,new CollectionList(collListConfig).fetch().then(function(data){$scope.collections=[{name:"All",collectionID:""}].concat(data)}),$scope.eventGroup={systemKey:systemKey},$scope.$watch("panelOpen",function(newValue,oldValue){$scope.panelOpen?$scope.graphWidth="83%":$scope.graphWidth="97%",$scope.generateChart()});var options={};options[consoleConstants.internal.SYSTEM_KEY]=systemKey,adminCalls.GetServiceNames(options).then(function(data,err){serviceNamesProcessed=[],data.forEach(function(name){serviceNamesProcessed.push({appID:systemKey,name:name,value:name})}),$scope.services=[{appID:systemKey,name:"All",value:""}].concat(serviceNamesProcessed)}),adminCalls.GetUsers(systemKey).then(function(data,err){$scope.users=[{user_id:"",email:"All"}].concat(data)}),$scope.addToEventGroup=function(){var eventItem={filter:{modules:[],collection:"",id:"",user:"",service:""}};angular.isDefined($scope.eventGroup.events)?$scope.eventGroup.events.push(eventItem):$scope.eventGroup.events=[eventItem]},$scope.removeFromEventGroup=function(index){$scope.eventGroup.events.splice(index,1),$scope.generateChart()},$scope.closePanel=function(){$scope.panelOpen&&($scope.panelOpen=!1)},$scope.error=!1,$scope.dateOptions={formatYear:"yy",startingDay:1,autoSize:!0},$scope.opened={start:!1,end:!1},$scope.open=function($event,toOpen){$scope.opened[toOpen]=!0},$scope.isModuleEnabled=function(module){return $scope.filter.modules.indexOf(module)>-1?"active":""},$scope.toggleModule=function(module){var modules=$scope.filter.modules,index=modules.indexOf(module);index>-1?modules.splice(index,1):modules.push(module),$scope.filter.modules=modules,$scope.generateChart()},$scope.generateChart=function(){var modules=[],actions=[];if("Counts"===$scope.filter.general?(modules=['"Collections"','"Services"','"Users"'],actions=$scope.filter.actions):(modules=$scope.filter.module,actions=$scope.filter.action),"Counts"===$scope.filter.general&&modules&&modules.length>0){$scope.countChart=!0;var promise=analytics.getCountsForModules(systemKey,modules);loadDisplay.addDisplay(promise,"Fetching totals..."),promise.then(function(data){c3.generate({size:{height:500},data:{json:data,type:"bar",labels:!0},bindto:"#countChart",tooltip:{format:{name:function(name){return utils.toTitleCase(name)}},position:function(data,width,height,element){return{top:-20,left:65}}}})})}else $scope.countChart=!1;if("Users"===$scope.filter.general&&modules&&modules.length>0&&(actions&&actions.length>0||"Service"===$scope.filter.module)){var id=$scope.filter.collection;"Service"==$scope.filter.module&&(actions="execute",id=$scope.filter.service),$scope.usersChart=!0;var params={scope:{system:systemKey},filter:{module:modules,action:actions,users:[$scope.filter.user],id:id}},promise=analytics.getUserEvents(params);loadDisplay.addDisplay(promise,"Loading user events..."),promise.then(function(data){var procData=analytics.processUserRequestData(data),chartObj={size:{height:500},data:{x:"date",y:"AverageResponseTime",y2:"counts",columns:[procData.times,procData.averageResponseTimes,procData.counts],type:"bar",types:{AverageResponseTime:"line"},axes:{AverageResponseTime:"y",TotalRequests:"y2"},names:{AverageResponseTime:"Average Response Time",TotalRequests:"Daily Request Count"}},padding:{left:90,top:20,bottom:150,right:80},axis:{x:{type:"timeseries",tick:{rotate:-60,format:"%Y-%m-%d"}},y:{tick:{format:function(y){return d3.format("d")(y)+" ms"}}},y2:{show:!0,tick:{format:d3.format("d")}}},tooltip:{format:{name:function(name){return"TotalRequests"==name?"Daily Request Count":"AverageResponseTime"==name?"Average Response Time":utils.toTitleCase(name)},value:function(value,ratio,id){if("AverageResponseTime"==id){var format=d3.format(".2f")(value)+" ms";return format}if("TotalRequests"==id){var format=d3.format("d")(value)+" requests";return format}}},position:function(data,width,height,element){return{top:-20,left:65}}},bindto:"#usersChart"};c3.generate(chartObj)},function(err){errorDialog.show("Error!","Unable to retrieve user data: ",err)})}else $scope.usersChart=!1;if("Events"===$scope.filter.general){var filterStart=$scope.filter.startDate,filterEnd=$scope.filter.endDate,startD=new Date(filterStart.getUTCFullYear(),filterStart.getUTCMonth(),filterStart.getUTCDate());$scope.startDate=Math.floor(startD.getTime());var endD=new Date(filterEnd.getUTCFullYear(),filterEnd.getUTCMonth(),filterEnd.getUTCDate(),filterEnd.getUTCHours(),filterEnd.getUTCMinutes(),filterEnd.getUTCSeconds());if($scope.endDate=Math.floor(endD.getTime()),$scope.eventChart=!0,angular.isDefined($scope.eventGroup.events)){var promise=analytics.getTotalsForMultiEvents($scope.eventGroup,$scope.dataArray,$scope.startDate,$scope.endDate,$scope.collections,$scope.users);loadDisplay.addDisplay(promise,"Fetching events..."),promise.then(function(processedData){$scope.dataArray=[],$scope.chartObj={size:{height:500},data:{x:"date",columns:processedData,type:"bar"},padding:{left:90,bottom:150,right:80},axis:{x:{type:"timeseries",tick:{rotate:-60,format:"%Y-%m-%d"}}},subchart:{axis:{x:{show:!1}}},bindto:"#eventChart"};c3.generate($scope.chartObj)},function(err){errorDialog.show("Error!","Unable to retrieve Event data: ",err)})}}else $scope.eventChart=!1;if("Storage"===$scope.filter.general){$scope.storageChart=!0;var params={scope:{system:systemKey}},promise=analytics.getStorageData(params);loadDisplay.addDisplay(promise,"Loading storage data..."),promise.then(function(data){var results=analytics.processStorageRequestData(data);col=results.storageGraphArray,$scope.storageTotalLabel=col[1].toFixed(2)+" "+results.division;var chartObj={bindto:"#storageChart",data:{columns:[col],names:{DashboardMemory:"Total Platform Memory Usage"}},color:{pattern:["#315373"]},subchart:{axis:{x:{show:!1}}},padding:{left:40,top:0,bottom:20,right:20},axis:{x:{tick:{format:function(x){return""}}}},size:{height:500}};chartObj.data.types={},chartObj.data.types.MemoryTotal="bar";c3.generate(chartObj)},function(err){errorDialog.show("Error!","Unable to retrieve storage information",err)})}else $scope.storageChart=!1},$document.ready(function(){$scope.generateChart()})}]),app.controller("authCtrl",["$scope","$log","$uibModal","currentSystem","users","$q","loadDisplay","errorDialog","cbGrid","cbColumn","cbDataTypes","uiGridConstants","$timeout","$state",function($scope,$log,$uibModal,currentSystem,users,$q,loadDisplay,errorDialog,cbGrid,cbColumn,cbDataTypes,uiGridConstants,$timeout,$state){$scope.$state=$state,$scope.panelOpen=!1,$scope.isEdge=currentSystem.getSystem().isEdge,$scope.sysKey=currentSystem.getSystemID()}]),app.controller("codeCtrl",["$scope","$uibModal","$window","errorDialog","loadDisplay","CodeService","CodeLibrary","CodeUtils","serviceList","libraryList","triggerList","timerList","$state","$stateParams","codes","consoleConstants","resolvedPropOptions","utils","toastr","currentSystem",function($scope,$uibModal,$window,errorDialog,loadDisplay,CodeService,CodeLibrary,CodeUtils,serviceList,libraryList,triggerList,timerList,$state,$stateParams,codes,consoleConstants,resolvedPropOptions,utils,toastr,currentSystem){function navToLib(lib){if(lib.isGlobal){var url;url=codes.globalLibs.hasOwnProperty(lib[consoleConstants.external.CODE.LIBRARY.KEY])?codes.globalLibs[lib[consoleConstants.external.CODE.LIBRARY.KEY]]:"https://docs.clearblade.com";var message=lib.name+' is a native library. To view the API documentation, please visit: <a href="'+url+'" target="_blank">'+url+"</a>";errorDialog.show("Native Library",message,null)}else $state.go($scope.listState.libraries.state,{name:lib.name})}function fetchServiceList(){var promise=$scope.listState.services.list.fetch();loadDisplay.addDisplay(promise,"Retrieving functions...","cbPage"),promise.then(function(){},function(err){errorDialog.show("Error!","Unable to update service list",err)})}function fetchLibList(){var promise=$scope.listState.libraries.list.fetch();loadDisplay.addDisplay(promise,"Retrieving libraries...","cbPage"),promise.then(function(){},function(err){errorDialog.show("Error!","Unable to update library list",err)})}function fetchTriggerList(){var promise=$scope.listState.triggers.list.fetch();loadDisplay.addDisplay(promise,"Retrieving triggers...","cbPage"),promise.then(function(){},function(err){errorDialog.show("Error!","Unable to update trigger list",err)})}function fetchTimerList(){var promise=$scope.listState.timers.list.fetch();loadDisplay.addDisplay(promise,"Retrieving timers...","cbPage"),promise.then(function(){},function(err){errorDialog.show("Error!","Unable to update timers list",err)})}function getTriggers(){CodeUtils.getTriggerDefs().then(function(defs){triggerDefs=defs},function(err){errorDialog.show("Error!","Unable to retrieve triggers",err)})}$scope.$state=$state,$scope.isEdge=currentSystem.getSystem().isEdge;var timerDefs=[];$scope.panelOpen=!1,$scope.loggingEnabled=!1,$scope.listState={services:{open:$state.includes("app.system.code.services"),filterText:"",list:serviceList,state:"app.system.code.services"},libraries:{open:$state.includes("app.system.code.libraries"),filterText:"",list:libraryList,state:"app.system.code.libraries"},triggers:{open:$state.includes("app.system.code.trigger"),filterText:"",list:triggerList,state:"app.system.code.trigger"},timers:{open:$state.includes("app.system.code.timer"),filterText:"",list:timerList,state:"app.system.code.timer"}},$scope.isInFilteredList=function(name,filterText){return""===filterText||0===name.toLowerCase().indexOf(filterText.toLowerCase())},$scope.addFunction=function(){$uibModal.open({templateUrl:"partials/modals/addCode.html",controller:"addCodeCtrl"}).result.then(function(data){if("service"===data.type){var newService=new CodeService(data);$scope.listState.services.list.addItem(newService),$state.go($scope.listState.services.state,{name:data.name})}else{var newLib=new CodeLibrary(data);$scope.listState.libraries.list.addItem(newLib),$state.go($scope.listState.libraries.state,{name:data.name})}})},$scope.refresh=function(){fetchServiceList(),fetchLibList(),fetchTriggerList(),fetchTimerList()},$scope.settingsModal=function(options){$uibModal.open({templateUrl:"partials/modals/codeProps.html",controller:"codePropsCtrl",resolve:{specifiedProp:function(){return void 0!==options&&void 0!==options.property?options.property:"props"},currentCode:function(){return options.code},libraries:function(){return $scope.listState.libraries.list.list},timerDefs:function(){return timerDefs},resolvedPropOptions:function(){return resolvedPropOptions}}}).result.then(function(updatedCode){updatedCode.deleted?(updatedCode.isService?$scope.listState.services.list.removeItem(updatedCode):$scope.listState.libraries.list.removeItem(updatedCode),utils.stateReload()):$scope.$broadcast(consoleConstants.internal.CB_EVENTS.CODE_CHANGE,updatedCode)},function(shouldRefresh){!0===shouldRefresh&&$scope.refresh()})},$scope.triggerSettingsModal=function(trigger){$uibModal.open({templateUrl:"partials/modals/triggerProps.html",controller:"triggerPropsCtrl",resolve:{trigger:function(){return trigger}}}).result.then(function(deleted){},function(){})},$scope.timerSettingsModal=function(timer){$uibModal.open({templateUrl:"partials/modals/timerProps.html",controller:"timerPropsCtrl",resolve:{timer:function(){return timer}}}).result.then(function(deleted){},function(){})},$scope.jumpToDependency=function(lib){var wantedLibrary=$scope.listState.libraries.list.list.reduce(function(red,elem){return elem.name===lib&&(red=elem),red},{});return $scope.listState.services.list.setActive(-1),wantedLibrary&&navToLib(wantedLibrary)},$scope.jumpToLibrary=function(idx){var dependency=$scope.listState.libraries.list.list[idx];$scope.panelOpen=!1,$scope.listState.libraries.list.setActive(-1),navToLib(dependency)},$scope.openExample=function(){$uibModal.open({templateUrl:"partials/modals/aceExample.html",controller:"aceExampleCtrl"})},$scope.exportServices=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.listState.services.list},modalConfig:function(){return{modalTitle:["All","services"]}}}})},$scope.exportLibraries=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.listState.libraries.list},modalConfig:function(){return{modalTitle:["All","libraries"]}}}})},$scope.exportTriggers=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.listState.triggers.list},modalConfig:function(){return{modalTitle:["All","triggers"]}}}})},$scope.exportTimers=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.listState.timers.list},modalConfig:function(){return{modalTitle:["All","timers"]}}}})},getTriggers(),CodeUtils.getTriggerHandlers(),CodeUtils.getTimerHandlers();for(var i=0,len=triggerList.list.length;i<len;i++){var validation=utils.validateTrigger(triggerList.list[i],resolvedPropOptions);validation.error&&toastr.warning(validation.message,"Trigger Issue",{timeOut:13e3,extendedTimeOut:13e3,progressBar:!0,onTap:validation.link,closeButton:!0})}}]),angular.module("adminPortal").controller("codeViewerCtrl",["$scope","loadDisplay","$q","errorDialog","$uibModal","$state","codeResponseDialog","toastr","resolvedCode","consoleConstants",function($scope,loadDisplay,$q,errorDialog,$uibModal,$state,codeResponseDialog,toastr,resolvedCode,consoleConstants){function fetch(){var promise=$scope.curCode.fetch();$scope.dependencyDisplayLimit=7,promise.then(function(){setTimeout(function(){$scope.updated=!1,$scope.$apply()})},function(err){errorDialog.show("Error!","Unable to load "+$scope.curCode.name,err)}),loadDisplay.addDisplay(promise,"Loading "+$scope.curCode.name+"...","blockCodePage")}if(""!==$state.params.name&&void 0!==$state.params.name){$scope.updated=!1,$scope.running=!1,$scope.curCode=resolvedCode,$scope.fetch=fetch,fetch();var runProm,saveModal=function(){return $uibModal.open({templateUrl:"partials/modals/saveCode.html",controller:"saveCodeCtrl"})};$scope.testParameters=function(){$uibModal.open({templateUrl:"partials/modals/codeParams.html",controller:"codeParamsCtrl",windowClass:"testParamWindow",resolve:{curCode:function(){return $scope.curCode}}}).result.then(function(changed){changed&&($scope.updated=!0)})},$scope.export=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.curCode},modalConfig:function(){return{modalTitle:[$scope.curCode.name,$scope.curCode.isService?"service":"library"]}}}})},$scope.jumpToSetting=function(setting){$scope.settingsModal({property:setting,code:$scope.curCode})},$scope.saveFunction=function(){var deferred=$q.defer(),promise=($scope.curCode.code,$scope.curCode.params,$scope.curCode.dependenciesArray,$scope.curCode.save());return loadDisplay.addDisplay(promise,"Saving function..."),promise.then(function(){$scope.updated=!1,toastr.success($scope.curCode.name+" has been saved","Save Success"),deferred.resolve()},function(error){errorDialog.show("Error saving code",error),deferred.reject(error)}),deferred.promise},$scope.saveThenRunFunction=function(){var promise=$scope.saveFunction();promise.then(function(){toastr.clear(),runProm=$scope.curCode.run(),$scope.running=!0,loadDisplay.addDisplay(runProm.promise,"Processing function...","codeBody"),runProm.promise.then(function(response){$scope.running=!1,"cancelled"!==response&&(""===response?codeResponseDialog.show("Success!",'""'):codeResponseDialog.show("Success!",response))},function(err){$scope.running=!1,codeResponseDialog.show("Error running code",err)})},function(err){}),loadDisplay.addDisplay(promise,"Saving Code...")},$scope.codeHistory=function(){$uibModal.open({templateUrl:"partials/modals/codeHistory.html",controller:"codeHistoryCtrl",resolve:{currentCode:function(){return $scope.curCode}}})},$scope.cancelProcess=function(){runProm.cancel()},$scope.codeChange=function(){$scope.updated=!0};var keyDownFunc=function(e){var saveKey=navigator.platform.toUpperCase().indexOf("MAC")>=0?e.metaKey:e.ctrlKey;83===e.keyCode&&saveKey&&(e.preventDefault(),$scope.saveFunction())},addKeyDownListener=function(){document.addEventListener("keydown",keyDownFunc,!1)},removeKeyDownListener=function(){document.removeEventListener("keydown",keyDownFunc,!1)};$scope.$on("$stateChangeStart",function(event,next,toParams,fromState,fromParams){if($scope.updated){event.preventDefault();saveModal().result.then(function(saveChanges){if(saveChanges){$scope.saveFunction().then(function(){removeKeyDownListener(),toastr.clear(),$state.go(next.name,toParams)})}else removeKeyDownListener(),$scope.updated=!1,$state.go(next.name,toParams)},function(){})}else toastr.clear(),removeKeyDownListener()}),$scope.$on(consoleConstants.internal.CB_EVENTS.CODE_CHANGE,function(evt,updatedCode){$scope.curCode=updatedCode}),addKeyDownListener()}}]),angular.module("adminPortal").controller("collectionViewCtrl",["$scope","cbGrid","cbColumn","$uibModal","resource","loadDisplay","errorDialog","$timeout","$state","cbDataTypes","confirmDialog","resolvedCollection","consoleConstants","utils","toastr","$stateParams",function($scope,cbGrid,cbColumn,$uibModal,resource,loadDisplay,errorDialog,$timeout,$state,cbDataTypes,confirmDialog,resolvedCollection,consoleConstants,utils,toastr,$stateParams){$scope.currentCollection=resolvedCollection,$scope.consoleConstants=consoleConstants;var getPagedData=function(){getTotalCount(),$stateParams.filter={conditions:collectionGrid.conditions,filterInfo:collectionGrid.filterInfo};var columnsPromise=$scope.currentCollection.getColumns($scope.removeColumn);loadDisplay.addDisplay(columnsPromise,"Loading columns for "+$scope.currentCollection.name,"blockGrid"),columnsPromise.then(function(){$scope.collectionGridOptions.columnDefs=$scope.currentCollection.columns;var rowsPromise=$scope.currentCollection.getData(collectionGrid.val.paginationPageSize,collectionGrid.val.paginationCurrentPage,collectionGrid.prepareSort(),collectionGrid.filterInfo).then(function(data){},function(err){errorDialog.show("Error!","Unable to retrieve data for "+$scope.currentCollection.name,err)});loadDisplay.addDisplay(rowsPromise,"Loading data for "+$scope.currentCollection.name,"blockGrid")})},getTotalCount=function(){$scope.currentCollection.getTotalForQuery(collectionGrid.val.paginationPageSize,0,collectionGrid.prepareSort(),collectionGrid.filterInfo).then(function(data){$scope.collectionGridOptions.totalItems=$scope.currentCollection.totalCount},function(err){errorDialog.show("Error","Unable to retrieve total count for query",err)})},endCellEdit=function(rowEntity,colDef,newVal,oldVal){if(newVal!==oldVal){var col=new cbColumn(colDef.dataType);if(col.isValid(newVal)){var itemID=rowEntity[$scope.currentCollection.PK];$scope.currentCollection.editCell(col.formatCollectionPayload($scope.currentCollection.PK,itemID,newVal,colDef.field)).then(function(){},function(err){rowEntity[colDef.field]=oldVal,col.showError(err)})}else rowEntity[colDef.field]=oldVal,errorDialog.show("Error!",col.validationText)}};$scope.addRow=function(){var promise=$scope.currentCollection.addRow().then(function(){getPagedData()},function(err){errorDialog.show("Error!","Unable to add row",err)});loadDisplay.addDisplay(promise,"Adding Row...","blockGrid")},$scope.deleteRow=function(){var rowsToDelete=collectionGrid.val.gridApi.selection.getSelectedRows();$scope.currentCollection.deleteRows(rowsToDelete).then(function(){},function(err){errorDialog.show("Error!","Unable to delete rows",err)})},$scope.deleteAll=function(){confirmDialog.show("Are you sure you want to delete all the rows in "+$scope.currentCollection.collectionID+"?").result.then(function(){$scope.currentCollection.deleteAllRows().then(function(){collectionGrid.val.gridApi.selection.clearSelectedRows(),getPagedData()},function(err){errorDialog.show("Error!","Unable to delete all rows",err)})})},$scope.addColumn=function(){$uibModal.open({templateUrl:"partials/modals/addColumn.html",controller:"addColumnCtrl",resolve:{currentCollection:function(){return $scope.currentCollection},columnDataTypeOptions:function(){return cbDataTypes}}}).result.then(function(newColumn){$scope.currentCollection.addColumn(newColumn,$scope.removeColumn)},function(){})},$scope.removeColumn=function(column){confirmDialog.show("Are you sure you want to delete '"+column.field+"?'").result.then(function(){var promise=$scope.currentCollection.deleteColumn(column.field);loadDisplay.addDisplay(promise,"Deleting column '"+column.field+"'..."),promise.then(function(data){},function(error){errorDialog.show("Error!","Unable to delete selected column",error)})},function(){})};var gridCallbacks={get:getPagedData,put:endCellEdit},collectionGridOptions={columnDefs:$scope.currentCollection.columns,data:"currentCollection.rows",totalItems:$scope.currentCollection.totalCount},collectionGrid=new cbGrid($scope,collectionGridOptions,gridCallbacks);$stateParams.filter&&(collectionGrid.conditions=$stateParams.filter.conditions,collectionGrid.filterInfo=$stateParams.filter.filterInfo),$scope.collectionGridOptions=collectionGrid.val,$scope.filter=function(){collectionGrid.showFilter($scope.currentCollection.columns,$scope.currentCollection.name)},$scope.uploadFile=function(file,params){function imageHandler(e2){photostore=e2.target.result,endCellEdit(photostore.toString(),"blob",params.colField,$scope.currentCollection.PK,params.itemID)}params=JSON.parse(params),$scope.originalValue=null;var fr=new FileReader;fr.onload=imageHandler,fr.readAsDataURL(file)},$scope.refreshTable=function(){getPagedData()},$scope.showAllColumns=function(){utils.showAllColumns($scope.currentCollection.columns,$stateParams)},$scope.export=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.currentCollection},modalConfig:function(){return{modalTitle:[$scope.currentCollection.name,"collection"]}}}})},$scope.settingsModal=function(){$uibModal.open({templateUrl:"partials/modals/collectionProps.html",controller:"collectionPropsCtrl",resolve:{currentCollection:function(){return $scope.currentCollection}}}).result.then(function(collection){collection.deleted&&$scope.collectionList.removeItem(collection)},function(){})},$scope.$on("$stateChangeStart",function(event,next,toParams,fromState,fromParams){"/data"===next.url&&($scope.$parent.displayOverview=!0)})}]),app.controller("dashboardCtrl",["$localStorage","$scope","$location","$log","currentSystem","loadDisplay","$uibModal","errorDialog","analytics","DevUser","$state","consoleConstants","System","systemList","platformRequest","edgeProxy","githubPageManager",function($localStorage,$scope,$location,$log,currentSystem,loadDisplay,$uibModal,errorDialog,analytics,DevUser,$state,consoleConstants,System,systemList,platformRequest,edgeProxy,githubPageManager){$scope.consoleConstants=consoleConstants,$scope.systems=systemList,currentSystem.clear(),platformRequest.disconnectEdge(),$scope.getSystems=function(){var shouldRefresh=!0,promise=systemList.get(shouldRefresh).then(function(){$log.debug("SystemsAsync value returned dashboardCtrl"),$scope.systems.getEdges()},function(reason){errorDialog.show("Error!","Unable to retrieve all systems",reason),$log.warn("Systems loading failed; "+reason)});loadDisplay.addDisplay(promise,"Loading Systems")};var getStorageData=function(){var params={scope:{developer:DevUser.getLoggedUser()}};analytics.getStorageData(params).then(function(data){var results=analytics.processStorageRequestData(data);col=results.storageGraphArray,$scope.storageTotalLabel=col[1].toFixed(2)+" "+results.division;var chartObj={bindto:"#storageChart",data:{columns:[col],names:{DashboardMemory:"Total Platform Memory Usage"}},color:{pattern:["#315373"]},subchart:{axis:{x:{show:!1}}},padding:{left:40,top:0,bottom:20,right:20},axis:{x:{tick:{format:function(x){return""}}},rotated:!0},size:{height:200}};chartObj.data.types={},chartObj.data.types.DashboardMemory="bar";c3.generate(chartObj)},function(err){errorDialog.show("Error!","Unable to retrieve storage information",err)})},getTotalRequestsForPlatform=function(){var params={scope:{developer:DevUser.getLoggedUser()},filter:{module:"*",action:"*",id:"*",interval:100}};analytics.getTotalsForEvents(params).then(function(data){var results=analytics.processRequestData(data.values,!0);$scope.requestTotalLabel=results.total;var chartObj={bindto:"#requestsChart",data:{x:"date",columns:[results.times,results.counts],type:"bar"},color:{pattern:["#9AAE6A"]},padding:{left:50,top:20,bottom:50,right:20},axis:{x:{type:"timeseries",tick:{rotate:-60,format:"%b %d"}},y:{tick:{format:d3.format("d, ")}}},legend:{hide:!0},size:{height:190}};c3.generate(chartObj)},function(err){errorDialog.show("Error!","Unable to retrieve request totals",err)})},getTotalPublishesForPlatform=function(){var params={scope:{developer:DevUser.getLoggedUser()},filter:{module:"messaging",action:"publish",id:"*",interval:10}};analytics.getTotalsForEvents(params).then(function(data){var results=analytics.processRequestData(data.values,!0);$scope.messagesTotalLabel=results.total;var chartObj={bindto:"#messagesChart",data:{x:"date",columns:[results.times,results.counts],type:"bar"},color:{pattern:["#ff7f0e"]},padding:{left:50,top:20,bottom:50,right:20},axis:{x:{type:"timeseries",tick:{rotate:-60,format:"%b %d"}},y:{tick:{format:d3.format("d, ")}}},legend:{hide:!0},size:{height:190}};c3.generate(chartObj)},function(err){errorDialog.show("Error!","Unable to retrieve publish totals",err)})};$scope.newSystem=function(parentSystem){$uibModal.open({templateUrl:"partials/modals/newSystem.html",controller:"newSystemCtrl",resolve:{resolvedTitle:function(){return parentSystem?"New Edge":"New System"},resolvedSystems:function(){return parentSystem?parentSystem.edges:$scope.systems},isEdge:function(){return!!parentSystem}}}).result.then(function(data){var systemToCreate;if(parentSystem){data.isEdge=!0,systemToCreate=new System(data);var promise=parentSystem.createEdge(systemToCreate);loadDisplay.addDisplay(promise,"Creating "+data.name),promise.then(function(data){},function(err){errorDialog.show("Error!","Unable to create new edge",err)})}else{systemToCreate=new System(data);var promise=systemToCreate.create();loadDisplay.addDisplay(promise,"Creating "+data.name),promise.then(function(newSystem){systemList.addItem(systemToCreate),store.dispatch({type:"CREATE_SYSTEMS_SUCCESS",payload:{Dev:newSystem.Dev,appID:newSystem.systemKey,appSecret:newSystem.systemSecret,auth_service:newSystem.auth_service,description:newSystem.description,name:newSystem.name,reg_service:newSystem.reg_service,registration:"",token_ttl:newSystem.token_ttl}})},function(err){errorDialog.show("Error!","Unable to create new system",err)})}})},$scope.selectSystem=function(system,path){currentSystem.updateCurSystem(system),$state.go("app.system."+path,{systemKey:system[consoleConstants.internal.SYSTEM_KEY]})},$scope.selectEdge=function(edge){currentSystem.updateCurSystem(edge);var edgeRecord={name:edge.name,systemKey:currentSystem.getSystemID()};edgeProxy.connect(edgeRecord)},$scope.exportSystem=function(sys){githubPageManager.setAssetType(githubPageManager.ASSET_TYPES.SYSTEM),githubPageManager.setAssetInfo(sys[consoleConstants.internal.SYSTEM_KEY]),$uibModal.open({templateUrl:"partials/modals/export.html",controller:"ExportCtrl",resolve:{resolvedHeader:function(){return"Export System"},resolvedAssetModalInfo:githubPageManager.createModalObjectForSystemExport(sys)}})},function(){$scope.getSystems(),getStorageData(),getTotalRequestsForPlatform(),getTotalPublishesForPlatform()}()}]),angular.module("adminPortal").controller("devicesCtrl",["$scope","cbColumn","confirmDialog","cbGrid","consoleConstants","deviceConstants","loadDisplay","errorDialog","currentSystem","$uibModal","$q","toastr","resolvedDeviceList","cbDataTypes","utils","$stateParams","roles","Device","$timeout",function($scope,cbColumn,confirmDialog,cbGrid,consoleConstants,deviceConstants,loadDisplay,errorDialog,currentSystem,$uibModal,$q,toastr,resolvedDeviceList,cbDataTypes,utils,$stateParams,roles,Device,$timeout){$scope.deviceList=resolvedDeviceList,$scope.deviceConstants=deviceConstants,$scope.devices=[],$scope.deviceColumns=[];deviceConstants.LAST_ACTIVE_DATE,deviceConstants.CREATED_DATE,deviceConstants.SYSTEM_KEY;$scope.$parent.refresh=function(){$scope.deviceList.fetch()},$scope.addDevice=function(){$uibModal.open({templateUrl:"partials/modals/newDevice.html",controller:"newDeviceCtrl",resolve:{resolvedSystemKey:function(){return currentSystem.getSystemID()}}}).result.then(function(newDevice){var promise=$scope.deviceList.addDevice(newDevice);loadDisplay.addDisplay(promise,"Saving device..."),promise.then(function(){$scope.deviceGridOptions.totalItems=$scope.totalDeviceItems+1},function(err){errorDialog.show("Error!","Unable to save device",err)})})},$scope.settingsModal=function(){$uibModal.open({templateUrl:"partials/modals/deviceProps.html",controller:"devicePropsCtrl",resolve:{}})},$scope.dispRoles=function(device){var deferred=$q.defer();return $uibModal.open({templateUrl:"partials/modals/deviceRolesModal.html",controller:"dispDeviceRolesCtrl",resolve:{device:function(){return device}}}).result.then(function(newRoles){if(newRoles.add.length||newRoles.delete.length){var promise=roles.updateDeviceRoles(device.name,newRoles);promise.then(function(){deferred.resolve(),toastr.success("Device roles updated","Success")},function(){errorDialog.show("Error","There was an error updating device roles"),deferred.reject()}),loadDisplay.addDisplay(promise,"Updating device roles...")}else deferred.resolve()}),deferred.promise},$scope.removeDevice=function(){var selectedRows=$scope.deviceGridOptions.gridApi.selection.getSelectedRows();if(0===selectedRows.length)return void errorDialog.show("Action needed","Please select a device to remove");for(var deletePromises=[],i=0,len=selectedRows.length;i<len;i++)deletePromises.push($scope.deviceList.removeDevice(selectedRows[i]));var messageSuffix="device";selectedRows.length>1&&(messageSuffix+="s"),$q.all(deletePromises).then(function(){toastr.success("Successfully deleted "+messageSuffix);for(var i=0;i<selectedRows.length;i++)$scope.deviceGridOptions.totalItems=$scope.totalDeviceItems-1;$scope.deviceGridOptions.gridApi.selection.clearSelectedRows()},function(err){errorDialog.show("Error!","Unable to delete "+messageSuffix,err)})},$scope.getPagedData=function(){var promise=$scope.deviceList.fetch(deviceGrid.val.paginationPageSize,deviceGrid.val.paginationCurrentPage,deviceGrid.prepareSort(),deviceGrid.filterInfo);$stateParams.filter={conditions:deviceGrid.conditions,filterInfo:deviceGrid.filterInfo},loadDisplay.addDisplay(promise,"Loading devices...","blockDeviceGrid"),promise.then(function(data){$scope.devices=data,$scope.deviceGridOptions.data=data,$scope.totalDeviceItems=data.length,$scope.deviceGridOptions.totalItems=data.length},function(err){errorDialog.show("Error!","Unable to retrieve devices",err)})};$scope.endCellEdit=function(rowEntity,colDef,newVal,oldVal){if(newVal!=oldVal){var col=new cbColumn(colDef.dataType);if(col.isValid(newVal)){var device=new Device(col.formatDevicePayload(rowEntity.name,colDef.field,newVal));device[consoleConstants.external.DEVICE.SYSTEM_KEY]=currentSystem.getSystemID();var promise=device.update();loadDisplay.addDisplay(promise,"Updating device..."),promise.then(function(){},function(err){rowEntity[colDef.field]=oldVal,errorDialog.show("Error!","Unable to update device",err)})}else rowEntity[colDef.field]=oldVal,errorDialog.show("Error!",col.validationText)}},$scope.changeDeviceEnabled=function(rowEntity,oldVal){var colDef={dataType:"bool",field:consoleConstants.external.DEVICE.ENABLED},newVal=rowEntity[consoleConstants.external.DEVICE.ENABLED];$scope.endCellEdit(rowEntity,colDef,newVal.toString(),oldVal.toString())},$scope.changeDeviceCertAuth=function(rowEntity,oldVal){var colDef={dataType:"bool",field:consoleConstants.external.DEVICE.ALLOW_CERTIFICATE_AUTH},newVal=rowEntity[consoleConstants.external.DEVICE.ALLOW_CERTIFICATE_AUTH];$scope.endCellEdit(rowEntity,colDef,newVal.toString(),oldVal.toString())},$scope.changeAllowKeyAuth=function(rowEntity,oldVal){var colDef={dataType:"bool",field:consoleConstants.external.DEVICE.ALLOW_KEY_AUTH},newVal=rowEntity[consoleConstants.external.DEVICE.ALLOW_KEY_AUTH];$scope.endCellEdit(rowEntity,colDef,newVal.toString(),oldVal.toString())},$scope.changeActiveKey=function(device){$uibModal.open({templateUrl:"partials/modals/changeDeviceActiveKey.html",controller:"changeActiveKeyCtrl",resolve:{device:function(){return device}}})},$scope.addColumn=function(){$uibModal.open({templateUrl:"partials/modals/addDeviceColumn.html",controller:"addDeviceColumnCtrl",resolve:{columnDataTypeOptions:function(){return cbDataTypes}}}).result.then(function(newColumn){newColumn.removable=!0;var col=new cbColumn(newColumn.dataType),columnAddedPromise=$scope.deviceList.createColumn(newColumn.displayName,newColumn.dataType);loadDisplay.addDisplay(columnAddedPromise,"Adding column..."),columnAddedPromise.then(function(updatedDevice){$scope.deviceColumns.push(col.createTemplate(newColumn,$scope.removeColumn))},function(error){errorDialog.show("Error!","Unable to add column",error)})},function(){})},$scope.removeColumn=function(col){confirmDialog.show("Are you sure you want to delete '"+col.field+"?'").result.then(function(){var promise=$scope.deviceList.deleteColumn(col.displayName);loadDisplay.addDisplay(promise,"Removing column..."),promise.then(function(){var index=$scope.deviceColumns.indexOf(col);$scope.deviceColumns.splice(index,1)},function(err){errorDialog.show("Error!","Error deleting column.",err)})},function(){})};var setupColumns=function(){$scope.deviceColumns.push(new cbColumn("uuid").createTemplate({displayName:"Settings",field:"roles",removable:!1,enableCellEdit:!1,enableSorting:!1,cellTemplate:"<button style='display:block; margin-left:auto; margin-right:auto;' ng-click='grid.appScope.dispRoles(row.entity)'>Edit</button>"}))},getColumns=function(){setupColumns();var dataType,colType,canEdit,template,canRemove,deferred=$q.defer();return $scope.deviceList.getAllColumns().then(function(data){data.forEach(function(columnInfo){dataType=columnInfo.ColumnType,colType=columnInfo.ColumnType,canEdit=!0,template=null,canRemove=!0,columnInfo.ColumnName!==deviceConstants.KEYS&&columnInfo.ColumnName!==deviceConstants.SALT&&columnInfo.ColumnName!==deviceConstants.SYSTEM_KEY&&columnInfo.ColumnName!==deviceConstants.CREATED_DATE&&columnInfo.ColumnName!==deviceConstants.LAST_ACTIVE_DATE&&(columnInfo.ColumnName===deviceConstants.DEVICE_KEY&&(colType="uuid",canEdit=!1,canRemove=!1),columnInfo.ColumnName===deviceConstants.NAME&&(canEdit=!1,canRemove=!1),columnInfo.ColumnName===deviceConstants.ENABLED&&(dataType="bool",canEdit=!1,template="<input type='checkbox' ng-model='row.entity[grid.appScope.deviceConstants.ENABLED]' ng-change='grid.appScope.changeDeviceEnabled(row.entity, {{row.entity[grid.appScope.deviceConstants.ENABLED]}})'/>",canRemove=!1),columnInfo.ColumnName===deviceConstants.ALLOW_CERTIFICATE_AUTH&&(dataType="bool",canEdit=!1,template="<input type='checkbox' ng-model='row.entity[grid.appScope.deviceConstants.ALLOW_CERTIFICATE_AUTH]' ng-change='grid.appScope.changeDeviceCertAuth(row.entity, {{row.entity[grid.appScope.deviceConstants.ALLOW_CERTIFICATE_AUTH]}})'/>",canRemove=!1),columnInfo.ColumnName===deviceConstants.ALLOW_KEY_AUTH&&(dataType="bool",canEdit=!1,template="<input type='checkbox' ng-model='row.entity[grid.appScope.deviceConstants.ALLOW_KEY_AUTH]' ng-change='grid.appScope.changeAllowKeyAuth(row.entity, {{row.entity[grid.appScope.deviceConstants.ALLOW_KEY_AUTH]}})'/>",canRemove=!1),columnInfo.ColumnName===deviceConstants.ACTIVE_KEY&&(dataType="string",canEdit=!1,template='<div class="ui-grid-cell-contents" ng-class="col.colIndex()"><a ng-click="grid.appScope.changeActiveKey(row.entity)">Change Active Key</a></div>',canRemove=!1),$scope.deviceColumns.push(new cbColumn(columnInfo.ColumnType).createTemplate({displayName:columnInfo.ColumnName,dataType:dataType,field:columnInfo.ColumnName,removable:canRemove,enableCellEdit:canEdit,enableSorting:!0,cellTemplate:template},$scope.removeColumn)),$timeout(function(){$scope.deviceGridOptions.columnDefs=$scope.deviceColumns}))}),deferred.resolve()},function(err){deferred.reject(),errorDialog.show("Error!","Unable to retrieve columns for devices table.",err)}),deferred.promise},gridCallbacks={get:$scope.getPagedData,put:$scope.endCellEdit},deviceGridOptions={columnDefs:$scope.deviceColumns,data:"devices",totalItems:$scope.totalDeviceItems},deviceGrid=new cbGrid($scope,deviceGridOptions,gridCallbacks);$stateParams.filter&&(deviceGrid.conditions=$stateParams.filter.conditions,deviceGrid.filterInfo=$stateParams.filter.filterInfo),$scope.deviceGridOptions=deviceGrid.val,$scope.filter=function(){var wantedColumns=$scope.deviceColumns.filter(function(col){if(col.field===deviceConstants.TYPE||col.field===deviceConstants.STATE||col.field===deviceConstants.NAME||col.field===deviceConstants.ENABLED)return col});deviceGrid.showFilter(wantedColumns,"Devices")},$scope.showAllColumns=function(){utils.showAllColumns($scope.deviceColumns,$stateParams)},$scope.refreshTable=function(){getColumns().then(function(){$scope.getPagedData()})},$scope.exportDevices=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.deviceList},modalConfig:function(){return{modalTitle:["All"," devices"]}}}})},getColumns().then(function(){})}]),angular.module("adminPortal").controller("edgesCtrl",["$scope","resolvedPortalList","cbColumn","cbGrid","consoleConstants","loadDisplay","errorDialog","currentSystem","$uibModal","platformRequest","$state","edgeConstants","utils","toastr","$stateParams","edgeProxy","cbDataTypes","$q","edges","confirmDialog","$timeout",function($scope,resolvedPortalList,cbColumn,cbGrid,consoleConstants,loadDisplay,errorDialog,currentSystem,$uibModal,platformRequest,$state,edgeConstants,utils,toastr,$stateParams,edgeProxy,cbDataTypes,$q,edges,confirmDialog,$timeout){$scope.edgeData=[],$scope.consoleConstants=consoleConstants,$scope.edgeMonitoringPortals=resolvedPortalList,$scope.getPagedData=function(){$scope.edgeData=[],$stateParams.filter={conditions:edgeGrid.conditions,filterInfo:edgeGrid.filterInfo};var promise=currentSystem.getSystem().getEdges();loadDisplay.addDisplay(promise,"Loading edges...","blockEdgeGrid"),promise.then(function(data){$scope.edgeData=data,$scope.edgeGridOptions.totalItems=$scope.edgeData.length},function(err){errorDialog.show("Error!","Unable to retrieve edges",err)})},$scope.$parent.refresh=function(){$scope.getPagedData(),$scope.edgeMonitoringPortals.fetch()},$scope.goToEdge=function(edge){currentSystem.updateCurSystem(edge);var edgeRecord={name:edge.name,systemKey:currentSystem.getSystemID()};edgeProxy.connect(edgeRecord)};var endCellEdit=function(rowEntity,colDef,newVal,oldVal){var col=new cbColumn(colDef.dataType);if(col.isValid(newVal)){var promise=edges.updateEdgeCell(rowEntity[consoleConstants.external.EDGE.NAME],colDef.field,col.dataType.format(newVal));loadDisplay.addDisplay(promise,"Updating Edge"),promise.then(function(data){},function(error){rowEntity[colDef.field]=oldVal,errorDialog.show("Error!","Unable to update Edge",error)})}else rowEntity[colDef.field]=oldVal,errorDialog.show("Error!",col.validationText)};$scope.showAllColumns=function(){utils.showAllColumns($scope.edgeColumns,$stateParams)};var setupColumns=function(){$scope.edgeColumns=[new cbColumn("string").createTemplate({displayName:"Name",field:consoleConstants.external.SYSTEM_NAME,removable:!1,enableCellEdit:!1,enableSorting:!0,cellTemplate:'<div class="ui-grid-cell-contents" ng-class="col.colIndex()"><a ng-click="grid.appScope.goToEdge(row.entity)">{{row.entity[grid.appScope.consoleConstants.external.SYSTEM_NAME]}}</a></div>'}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.CONNECTED,field:edgeConstants.CONNECTED,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.PUBLIC_ADDRESS,field:edgeConstants.PUBLIC_ADDRESS,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.LOCAL_ADDRESS,field:edgeConstants.LOCAL_ADDRESS,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.PUBLIC_PORT,field:edgeConstants.PUBLIC_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.LOCAL_PORT,field:edgeConstants.LOCAL_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.BROKER_AUTH_PORT,field:edgeConstants.BROKER_AUTH_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.BROKER_PORT,field:edgeConstants.BROKER_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.BROKER_TLS_PORT,field:edgeConstants.BROKER_TLS_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.BROKER_WS_AUTH_PORT,field:edgeConstants.BROKER_WS_AUTH_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.BROKER_WS_PORT,field:edgeConstants.BROKER_WS_PORT,removable:!1,enableCellEdit:!1}),new cbColumn("string").createTemplate({displayName:consoleConstants.internal.EDGE.LABELS.BROKER_WSS_PORT,field:edgeConstants.BROKER_WSS_PORT,removable:!1,enableCellEdit:!1})]},gridCallbacks={get:$scope.getPagedData,put:endCellEdit};setupColumns();var edgeGridOptions={columnDefs:$scope.edgeColumns,data:"edgeData",totalItems:$scope.edgeData.length},edgeGrid=new cbGrid($scope,edgeGridOptions,gridCallbacks);$stateParams.filter&&(edgeGrid.conditions=$stateParams.filter.conditions,edgeGrid.filterInfo=$stateParams.filter.filterInfo),$scope.edgeGridOptions=edgeGrid.val,$scope.addColumn=function(){$uibModal.open({templateUrl:"partials/modals/addUserColumn.html",controller:"addEdgeColumnCtrl",resolve:{columnDataTypeOptions:function(){return cbDataTypes}}}).result.then(function(newColumn){void 0===$scope.edgeColumns&&($scope.edgeColumns=[]),newColumn.removable=!0,newColumn.enableCellEdit=!0;var col=new cbColumn(newColumn.dataType);$scope.edgeColumns.push(col.createTemplate(newColumn,$scope.removeColumn))})},$scope.removeColumn=function(col){confirmDialog.show("Are you sure you want to delete '"+col.field+"'?").result.then(function(){var promise=edges.deleteEdgeColumn(col.field);loadDisplay.addDisplay(promise,"Deleting column..."),promise.then(function(){var index=$scope.edgeColumns.indexOf(col);$scope.edgeColumns.splice(index,1)},function(error){errorDialog.show("Error!","Unable to delete column.",error)})})},function(){setupColumns();var deferred=$q.defer();return edges.getEdgeColumns().then(function(data){data.forEach(function(columnInfo){if(-1===consoleConstants.external.EDGE.DEFAULT_COLUMNS.indexOf(columnInfo.ColumnName)&&-1===consoleConstants.external.EDGE.HIDE_COLUMNS.indexOf(columnInfo.ColumnName)){var columnObj={displayName:columnInfo.ColumnName+" ("+columnInfo.ColumnType+")",field:columnInfo.ColumnName,enableCellEdit:!0,dataType:columnInfo.ColumnType,removable:!0};$scope.edgeColumns.push(new cbColumn(columnObj.dataType).createTemplate(columnObj,$scope.removeColumn)),$timeout(function(){$scope.edgeGridOptions.columnDefs=$scope.edgeColumns})}}),$scope.edgeGridOptions.columnDefs=$scope.edgeColumns,deferred.resolve()},function(error){errorDialog.show("Error!","Unable to retrieve columns for edges table.",error),deferred.reject(error)}),deferred.promise}().then(function(){}),$scope.exportEdges=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return edges},modalConfig:function(){return{modalTitle:["All","edges"]}}}})}}]),app.controller("githubOauthCtrl",["$scope","$location","$log","$rootScope","$state","platformRequest","loadDisplay","errorDialog",function($scope,$location,$log,$rootScope,$state,platformRequest,loadDisplay,errorDialog){console.log("path to location is : ",$location.path());var code=$location.search().code;console.log("code is ",code),$rootScope.githubCode=code,$location.path("/dashboard")}]),app.controller("headerCtrl",["$scope","$localStorage","$uibModal","$log","currentSystem","DevUser","adminCalls","errorDialog","$state","platformRequest","loadDisplay",function($scope,$localStorage,$uibModal,$log,currentSystem,DevUser,adminCalls,errorDialog,$state,platformRequest,loadDisplay){$scope.getSystemName=currentSystem.getNameForHeader,$scope.getIsEdge=currentSystem.getIsEdge,$scope.loggedInUser=DevUser,$scope.$on("DevUser.loaded",function(){setUpDropDownOptions()}),$scope.$on("$stateChangeSuccess",function(){setUpDropDownOptions()});var setUpDropDownOptions=function(){$scope.dropDownOptions=[{name:"Support",func:function(){window.open("https://clearblade.atlassian.net/servicedesk/customer/portal/1")}},{name:"Account Settings",func:function(){$state.go("app.accountSettings.details")}},{name:"Change Password",func:function(){$uibModal.open({templateUrl:"partials/modals/changeDevPassword.html",controller:"changeDevPasswordCtrl"})}},{name:"Log Out",func:function(){currentSystem.clear(),$log.debug("Logged out"),DevUser.logOut().then(function(){location.href="/"},function(err){errorDialog.show("Error!","Unable to logout",err)})}}],DevUser.isAdmin()&&$scope.dropDownOptions.unshift({name:"Admin",func:function(){$state.go("app.admin.manage.developers")}})};$scope.login=function(){$uibModal.open({templateUrl:"partials/login.html",controller:"loginCtrl"}).result.then(function(data){platformRequest.setPlatformDevToken(data),platformRequest.clearExistingGithubCredentials();var promise=DevUser.checkAuth();loadDisplay.addDisplay(promise,"Loading user info..."),promise.then(function(){$state.go("app.dashboard"),store.dispatch({type:"LOGIN_SUCCESS",payload:{devToken:data}})},function(err){errorDialog.show("Error!","Unable to retrieve user info",err)})})},$scope.call=function(el){el.func()}}]),app.controller("loginCtrl",["$log","$scope","DevUser","$uibModalInstance","loadDisplay","$uibModal","adminCalls","$state","platformRequest",function($log,$scope,DevUser,$uibModalInstance,loadDisplay,$uibModal,adminCalls,$state,platformRequest){$scope.loginShow=!0,$scope.isLoginEmailConfirmation=!1,"undefined"!=typeof loginEmail&&($scope.isLoginEmailConfirmation=!0,$scope.user={email:loginEmail});var registrationVisible=!$state.is("app.register");platformRequest.isConnectedToEdge()?($scope.loginTarget="Edge",registrationVisible=!1):$scope.loginTarget="Platform",$scope.login=function(user){data={email:user.email,password:user.password};var promise=DevUser.logIn(data);loadDisplay.addDisplay(promise,"Logging In"),promise.then(function(data){$scope.isLoginEmailConfirmation=!1,loginEmail=null,$uibModalInstance.close(data)},function(err){err&&err.indexOf("unattached edge")>-1?$scope.errorMessage="Edge is not connected":$scope.errorMessage=err})},$scope.showRegistration=function(){return registrationVisible},$scope.close=function(){$uibModalInstance.close("registering")},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}]),app.controller("menuCtrl",["$scope","$log","currentSystem","systemList","$rootScope","$uibModal","$state","platformRequest","githubPageManager",function($scope,$log,currentSystem,systemList,$rootScope,$uibModal,$state,platformRequest,githubPageManager){$scope.currentSystem=currentSystem.getSystem(),$scope.systems=systemList.list,$scope.isEdge=platformRequest.isConnectedToEdge(),$scope.selectSystem=function(system){currentSystem.updateCurSystem(system);var stateToTransferTo=$state.current.name;$state.includes("app.system")||(stateToTransferTo="app.system.data"),$state.go(stateToTransferTo,{systemKey:system.getSystemKey()})},$scope.systemSettings=function(){currentSystem.getSystem().editSettings()},$scope.platformAbout=function(){$uibModal.open({templateUrl:"partials/modals/platformAbout.html",controller:"platformAboutCtrl"})},$scope.requestImport=function(){switch(githubPageManager.getGithubAuthStatus()){case githubPageManager.GITHUB_STATES.CLEAN:githubPageManager.setPromptType(githubPageManager.PROMPT_TYPES.IMPORT),githubPageManager.promptForGithubLogin();break;case githubPageManager.GITHUB_STATES.AUTHED:githubPageManager.promptForGithubInstall();break;case githubPageManager.GITHUB_STATES.ERROR:default:console.log("Unable to determine route for Github")}}}]),app.controller("messageActivityCtrl",["$scope","$http","$q","currentSystem",function($scope,$http,$q,currentSystem){function getAllSubscribers(){var deferred=$q.defer();return deferred.resolve({data:{Total:0}}),deferred.promise}function getTotalPublishes(){var deferred=$q.defer();return deferred.resolve({data:{Total:0}}),deferred.promise}function getRecentPublishes(){var deferred=$q.defer();return deferred.resolve({data:null}),deferred.promise}function getAllTopicStats(){var deferred=$q.defer();return deferred.resolve({data:null}),deferred.promise}function fetchData(){getTotalPublishes().then(function(data){$scope.totalPubs=data.data.Total}),getAllSubscribers().then(function(data){$scope.totalSubs=data.data.Total})}function ascSort(date1,date2){return new Date(date1).getTime()>new Date(date2).getTime()?1:new Date(date1).getTime()<new Date(date2).getTime()?-1:0}function startFeed(){fetchData(),intervalID=window.setInterval(function(){fetchData()},1e4)}function stopFeed(){window.clearInterval(intervalID)}function loadMessageData(){var liveTopics=[];getAllTopicStats().then(function(data){var msgTopicArray=data.data;if(null!==msgTopicArray)for(i=0;i<msgTopicArray.length;i++){var topic=msgTopicArray[i].Topic,pubs=msgTopicArray[i].Publishes,subs=msgTopicArray[i].Subscribers;subs>0&&liveTopics.push({name:topic,subscribers:subs,publishers:pubs})}liveTopics.length<=0&&liveTopics.push({name:"No Active Topics",subscribers:"",publishes:""})}),$scope.liveMessageData=liveTopics,getRecentPublishes().then(function(data){var publishes=data.data,recentMsg=[];if(null!==publishes)for(i=0;i<publishes.length;i++){var timeStamp=new Date(1e3*publishes[i].Time);timeStamp=timeStamp.toUTCString();var index=timeStamp.indexOf(",")+1;timeStamp=timeStamp.substring(index),recentMsg.push({name:publishes[i].Topic,body:publishes[i].Body,time:timeStamp})}$scope.recentTopicData=recentMsg})}$scope.switchStatus={};var intervalID;currentSystem.getSystemID();loadMessageData(),startFeed(),$scope.refreshTable=function(){loadMessageData(),fetchData()},$scope.$on("$routeChangeStart",function(){stopFeed()}),$scope.recentTopicGridOptions={data:"recentTopicData",columnDefs:[{field:"name",displayName:"Name"},{field:"body",displayName:"Body"},{field:"time",displayName:"Time",sortFn:ascSort}],multiSelect:!1,enableColumnResize:!0,selectedItems:[]},$scope.liveMessageGridOptions={data:"liveMessageData",columnDefs:[{field:"name",displayName:"Name"},{field:"subscribers",displayName:"# Subscribers"},{field:"publishers",displayName:"# Publishes"}],multiSelect:!1,enableColumnResize:!0,selectedItems:[]}}]),app.controller("messageSettingsCtrlOld",["$log","$scope","$http","$location","messageSettings",function($log,$scope,$http,$location,messageSettings){$scope.switchStatus={},$scope.settings=messageSettings.getMessageSettings().then(function(results){return $log.debug("messageSettings positive result"),$scope.quality=results.quality,$scope.security=results.security,results},function(reason){$log.debug("messageSettings load failed"),alert("messageSettings load failed")}),$scope.qualityClick=function(event){var value=event.target.value;$log.debug("clicked "+value)},$scope.securityClick=function(event){var value=event.target.value;$log.debug("clicked "+value)},$scope.historyToggle=function(){for(var item in $scope.selectedItems)item.history=!item.history},$scope.topicGridOptions={data:"topicData",columnDefs:[{field:"name",displayName:"Name"},{field:"visibility",displayName:"Visibility"},{field:"history",displayName:"History"}],multiSelect:!1,selectedItems:[]},$scope.topicData=[{name:"<system>/test",visibility:"system",history:!0}]}]),app.controller("messagingCtrl",["$scope","errorDialog",function($scope,errorDialog){$scope.panelOpen=!1,$scope.showMsg=function(prefix){errorDialog.show("Not Available",prefix+" in the ClearBlade sandbox environment.  Contact <a href='mailto:sales@clearblade.com'>sales@clearblade.com</a> to request more information.")}}]),app.controller("mqttMessageCtrl",["$scope","currentSystem","$q","loadDisplay","$uibModal","messaging","errorDialog","cbNg","$timeout","toastr","$uibModalStack",function($scope,currentSystem,$q,loadDisplay,$uibModal,messaging,errorDialog,cbNg,$timeout,toastr,$uibModalStack){var intervalID,topicRefrence=null,refreshInterval=1e4,toastrVisible=!1,isFetchingCurrentTopics=!1,isShowingErrorDialog=!1;$scope.allTopics=[],$scope.cliOn=!0,$scope.notConnected=!0,$scope.notSubscribed=!0,$scope.messagesReceived=[],$scope.messagingInputs={topic:"mytopic",message:"sample message"},$scope.lastSync=null,$scope.settingsModal=function(){$uibModal.open({templateUrl:"partials/modals/messageSettings.html",controller:"messageSettingsCtrl"})};var createTable=function(arr){for(var rtn=[],length=arr.length,i=0;i<length;i++)rtn.push({name:arr[i],subscribers:"-",publishers:"-"});return rtn},topicsHaveChanged=function(compareTo){if(topicRefrence.length!==compareTo.length)return!0;for(var i=0,len=compareTo.length;i<len;i++)if(topicRefrence[i]!==compareTo[i])return!0;return!1},refreshTable=function(){var topics=topicRefrence.slice(0);$scope.allTopics.length=0,$timeout(function(){$scope.lastSync=(new Date).getTime(),$scope.allTopics=createTable(topics)}),toastrVisible=!1},fetchData=function(){if(!isFetchingCurrentTopics){isFetchingCurrentTopics=!0;var fetchPromise=messaging.getCurrentTopics().then(function(topics){$timeout(function(){isShowingErrorDialog&&($uibModalStack.dismissAll(),isShowingErrorDialog=!1),null===topicRefrence?(topicRefrence=topics.slice(0),refreshTable()):topicsHaveChanged(topics)&&(topicRefrence=topics.slice(0),toastrVisible||(toastr.info("click to refresh","Topics Updated",{timeOut:0,onTap:refreshTable}),toastrVisible=!0))})},function(err){isShowingErrorDialog||(errorDialog.show("Error!","Unable to retrieve topics",err),isShowingErrorDialog=!0)}).finally(function(){isFetchingCurrentTopics=!1});loadDisplay.addDisplay(fetchPromise,"Loading Topics...","loadBlocked")}},startFeed=function(){fetchData(),intervalID=window.setInterval(function(){fetchData()},refreshInterval)},stopFeed=function(){window.clearInterval(intervalID)},receiveMessage=function(data){$scope.messagesReceived.push(data),$scope.$apply()};$scope.messagingSubscribe=function(){$scope.messagesReceived.length=0,cbNg.subscribeMessaging($scope.messagingInputs.topic,receiveMessage),$scope.notSubscribed=!1},$scope.messagingPublish=function(){cbNg.publishMessaging($scope.messagingInputs.topic,$scope.messagingInputs.message),$timeout(function(){fetchData()})};var messagingConnect=function(){cbNg.connectMessaging().then(function(data){$scope.notConnected=!1},function(err){errorDialog.show("Error","Unable to connect ",JSON.stringify(err))})};$scope.getMsgHistory=function(topic){$scope.activeTopic=topic;$uibModal.open({templateUrl:"partials/modals/messageHistory.html",controller:"messageHistoryCtrl",windowClass:"custom-modal-message",scope:$scope,resolve:{topic:function(){return topic}}})},$scope.$on("$stateChangeStart",function(){stopFeed(),toastr.clear()}),$scope.recentTopicsOptions={data:"allTopics",columnDefs:[{field:"name",displayName:"Name",cellTemplate:'<div class="ui-grid-cell-contents" ng-init="val=grid.getCellValue(row, col)"><a ng-show="val !== \'No Active Topics\'" ng-click="grid.appScope.getMsgHistory(val)">{{val}}</a><span ng-show="val === \'No Active Topics\'">{{val}}</span></div>'},{field:"subscribers",displayName:"# Subscribers"},{field:"publishers",displayName:"# Publishes"}],multiSelect:!1,enableColumnResize:!0,selectedItems:[]},startFeed(),messagingConnect()}]),app.controller("onPremRegistrationCtrl",["$scope","$q","$http","$state","DevUser","platformRequest","loadDisplay","errorDialog","utils","$uibModal",function($scope,$q,$http,$state,DevUser,platformRequest,loadDisplay,errorDialog,utils,$uibModal){$scope.menu_show=DevUser.loggedIn(),$scope.register=function(){$uibModal.open({templateUrl:"partials/modals/legalView.html",controller:"viewTermsCtrl",resolve:{legalTitle:function(){return"Terms and Conditions"},legalDoc:function(){return"partials/docs/onPremTermsAndConditions.html"},mustAgree:function(){return!0}}}).result.then(function(didAgree){if(!didAgree)return void errorDialog.show("Error!","You must agree to the terms and conditions to register.");var accountInfo={fname:$scope.user.reg.fname,lname:$scope.user.reg.lname,email:$scope.user.reg.email,org:$scope.user.reg.org,password:$scope.user.reg.password,key:$scope.hashKey},deferred=$q.defer();platformRequest.Go("POST",platformRequest.AdminEndpoints.ADMIN_REG,accountInfo,null,null).then(function(data){platformRequest.setPlatformDevToken(data.dev_token),$state.go("app.dashboard"),deferred.resolve()},function(err){errorDialog.show("Error!","Unable to register user:",err),deferred.reject()}),loadDisplay.addDisplay(deferred.promise,"Registering...")})},$scope.clearInfo=function(){for(var key in $scope.user.reg)$scope.user.reg[key]="";$scope.hashKey="",$scope.registrationForm.$setPristine()}}]),app.controller("platformAboutCtrl",["$scope","$uibModalInstance","DevUser","$uibModal","saas",function($scope,$uibModalInstance,DevUser,$uibModal,saas){$scope.patents=["9,038,015 US","9,274,763 US"],$scope.mustAgree=!1,DevUser.getPlatformInfo().then(function(data){$scope.data=data,"undefined"!=typeof semver&&($scope.semver=semver),"undefined"!=typeof buildId&&($scope.buildId=buildId)}),$scope.dismiss=function(){$uibModalInstance.close()},$scope.openLegal=function(){saas.getStatus().then(function(isSaas){$uibModal.open({templateUrl:"partials/modals/legalView.html",controller:"viewTermsCtrl",resolve:{legalTitle:function(){return"Terms and Conditions"},legalDoc:function(){return isSaas?"partials/docs/saasTermsAndConditions.html":"partials/docs/onPremTermsAndConditions.html"},mustAgree:function(){return!1}}})})}}]),app.controller("pushMessageCtrl",["$scope","$uibModal","push","errorDialog","loadDisplay","cbGrid","confirmDialog","cbColumn",function($scope,$uibModal,push,errorDialog,loadDisplay,cbGrid,confirmDialog,cbColumn){$scope.message={text:""},$scope.selectedApp={appid:""},$scope.gridData={},$scope.systemAccounts=[];var isDatabaseError=function(errString){return errString.indexOf("pq: relation")>-1},getPushHistory=function(pageSize,page,pageSort){push.getPushHistory(pageSize,page,pageSort).then(function(data){$scope.gridData.pushHistory=data;for(var i=0;i<$scope.gridData.pushHistory.length;i++)$scope.gridData.pushHistory[i].push_time=new Date(1e3*$scope.gridData.pushHistory[i].push_time).toLocaleDateString()+" "+new Date(1e3*$scope.gridData.pushHistory[i].push_time).toLocaleTimeString()},function(err){isDatabaseError(err)||errorDialog.show("Error!","Unable to retrieve push history",err)})},getRegisteredUsers=function(pageSize,page,pageSort){push.getRegisteredUsers(pageSize,page,pageSort).then(function(data){$scope.gridData.recipients=data,console.log("recipients"),console.log($scope.gridData.recipients)},function(err){isDatabaseError(err)||errorDialog.show("Error!","Unable to retrieve registered users",err)})};$scope.recipientsPagingOptions={pageSizes:[25,50,100],pageSize:25,currentPage:1},$scope.pushHistoryPagingOptions={pageSizes:[25,50,100],pageSize:25,currentPage:1},$scope.recipientsSortInfo,$scope.pushHistorySortInfo,$scope.columnDefs={recipients:[new cbColumn("string").createTemplate({field:"userid",displayName:"User ID",removable:!1}),new cbColumn("string").createTemplate({field:"devicetoken",displayName:"Device ID",removable:!1}),new cbColumn("string").createTemplate({field:"type",displayName:"Device Type",removable:!1})],pushHistory:[new cbColumn("string").createTemplate({field:"push_time",displayName:"Received Date",removable:!1}),new cbColumn("string").createTemplate({field:"payload",displayName:"Message",removable:!1}),new cbColumn("string").createTemplate({field:"recipients",displayName:"Recipients",removable:!1}),new cbColumn("string").createTemplate({field:"pushed",displayName:"Received",removable:!1}),new cbColumn("string").createTemplate({field:"type",displayName:"Device Type",removable:!1})]};var recipientsOptions={data:"gridData.recipients",columnDefs:"columnDefs.recipients",showFooter:!0,enablePaging:!0,pagingOptions:$scope.recipientsPagingOptions,totalServerItems:"totalItems.recipients",selectWithCheckboxOnly:!0,selectedItems:[],showSelectionCheckbox:!0,enableCellSelection:!0,enableColumnReordering:!0,enableColumnResize:!0,enablePaging:!0},recipientsGrid=new cbGrid($scope,recipientsOptions,"recipientsPagingOptions","recipientsSortInfo",getRegisteredUsers);$scope.recipientsOptions=recipientsGrid.val;var pushHistoryOptions={data:"gridData.pushHistory",columnDefs:"columnDefs.pushHistory",showFooter:!0,enablePaging:!0,pagingOptions:$scope.pushHistoryPagingOptions,totalServerItems:"totalItems.pushHistory"},pushHistoryGrid=new cbGrid($scope,pushHistoryOptions,"pushHistoryPagingOptions","pushHistorySortInfo",getPushHistory);$scope.pushHistoryOptions=pushHistoryGrid.val,$scope.$on("ngGridEventSorted",function(event,sortInfo){event.targetScope.showSelectionCheckbox?("devicetoken"===sortInfo.fields[0]&&(sortInfo.fields[0]="device-token"),$scope.recipientsSortInfo=sortInfo):$scope.pushHistorySortInfo=sortInfo}),push.getAccounts().then(function(data){$scope.systemAccounts=data},function(err){errorDialog.show("Error","Unable to retrieve Push Accounts. You will not be able to send push messages.",err)}),getRegisteredUsers($scope.recipientsPagingOptions.pageSize,$scope.recipientsPagingOptions.currentPage,recipientsGrid.prepareSort()),getPushHistory($scope.pushHistoryPagingOptions.pageSize,$scope.pushHistoryPagingOptions.currentPage,pushHistoryGrid.prepareSort()),$scope.sendPush=function(){if(console.log($scope.recipientsOptions),console.log($scope.message.text),console.log($scope.selectedApp),$scope.recipientsOptions.selectedItems.length>0&&""!==$scope.selectedApp.appid){for(var recipients=[],i=0;i<$scope.recipientsOptions.selectedItems.length;i++)recipients.push($scope.recipientsOptions.selectedItems[i].userid);var pushPromise=push.sendPush(recipients,$scope.message.text,$scope.selectedApp.appid);loadDisplay.addDisplay(pushPromise,"Sending push..."),pushPromise.then(function(data){console.log(data)},function(err){errorDialog.show("Error!","Unable to send push",err)})}else errorDialog.show("Action needed","Please select an app and at least one user as the recipient")},$scope.showConfig=function(){$uibModal.open({templateUrl:"partials/modals/pushConfig.html",controller:"pushConfigCtrl"}).result.then(function(){})},$scope.addDevice=function(){if(0===$scope.systemAccounts.length)return void errorDialog.show("Action needed","You must configure an app before adding devices");$uibModal.open({templateUrl:"partials/modals/addDevice.html",controller:"pushDeviceCtrl",resolve:{accounts:function(){return $scope.systemAccounts}}}).result.then(function(newDevice){var promise=push.addDevice(newDevice);loadDisplay.addDisplay(promise,"Adding device..."),promise.then(function(data){},function(err){errorDialog.show("Error!","Unable to add new device",err)})})},$scope.removeDevice=function(){return}}]),app.controller("resetPassCtrl",["$scope","$routeParams","$location","DevUser","loadDisplay",function($scope,$routeParams,$location,DevUser,loadDisplay){$scope.errorMessage="",$scope.setNewPassword=function(newPass){var promise=DevUser.resetPassword($routeParams.userToken,newPass);loadDisplay.addDisplay(promise,"Resetting Password"),promise.then(function(){$location.path("/")},function(error){$scope.errorMessage=error})}}]),app.controller("resourceCtrl",["$scope","$uibModal","loadDisplay","errorDialog","$state","resolvedCollectionList","consoleConstants",function($scope,$uibModal,loadDisplay,errorDialog,$state,resolvedCollectionList,consoleConstants){$scope.collectionList=resolvedCollectionList,$scope.panelOpen=!1,$scope.displayOverview=!1,$scope.goToCollection=function(coll){$scope.displayOverview=!1,$state.go("app.system.data.collectionID",{collectionID:coll.collectionID})},$scope.addCollection=function(){$uibModal.open({templateUrl:"partials/modals/newCollection.html",controller:"collectionCtrl",resolve:{currentCollection:function(){return{}},newCollection:function(){return!0}}}).result.then(function(added){$scope.collectionList.fetch().then(function(){added=$scope.collectionList.getCollectionByName(added),$scope.goToCollection(added)})})},$scope.refreshCollections=function(){$scope.collectionList.fetch(!0)};var determineCollectionToView=function(){var collection={};if($state.params.collectionID&&""!==$state.params.collectionID)for(var i=0;i<$scope.collectionList.results.length;i++)if($scope.collectionList.results[i].collectionID===$state.params.collectionID){collection=$scope.collectionList.results[i];break}return collection},navIfPossible=function(){var potentialColl=determineCollectionToView();Object.keys(potentialColl).length&&potentialColl[consoleConstants.external.DATA.COLLECTION_ID]?$scope.goToCollection(potentialColl):$scope.displayOverview=!0};$scope.collectionSettings=function(selectedCollection){$uibModal.open({templateUrl:"partials/modals/collectionProps.html",controller:"collectionPropsCtrl",resolve:{currentCollection:function(){return selectedCollection}}}).result.then(function(collection){collection.deleted&&$scope.collectionList.removeItem(collection)},function(){})},$scope.export=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.collectionList},modalConfig:function(){return{modalTitle:["All","collections"]}}}})},$scope.$on("refresh collections",$scope.refreshCollections),$scope.$on(consoleConstants.internal.COLLECTION_DELETED_EVENT,function(){navIfPossible()}),navIfPossible()}]),angular.module("adminPortal").controller("rolesCtrl",["$scope",function($scope){}]),app.controller("saasRegistrationCtrl",["$scope","saas","errorDialog","adminCalls","loadDisplay","$state","consoleConstants","$uibModal","platformRequest",function($scope,saas,errorDialog,adminCalls,loadDisplay,$state,consoleConstants,$uibModal){$scope.consoleConstants=consoleConstants,$scope.user={reg:{fname:"",lname:"",email:"",org:"",password:""},billing:{plan:saas.plans.FREE.name}},$scope.plans=saas.plans,saas.getPricingInfo().then(function(data){$scope.pricingInfo=data},function(err){errorDialog.show("Error!","Unable to load pricing info",err)}),$scope.getOrderedPricingInfo=function(info,listOrder){for(var rtn=[],i=0,len=listOrder.length;i<len;i++)rtn.push(info[listOrder[i]]);return rtn},$scope.clearInfo=function(){for(var key in $scope.user.reg)$scope.user.reg[key]="";for(var key in $scope.user.billing)$scope.user.billing[key]="";$scope.user.billing.plan=saas.plans.FREE.name,$scope.saasRegistrationCtrl.registrationForm.$setPristine()};var createDevAccount=function(){var registrationInfo={fname:$scope.user.reg.fname,lname:$scope.user.reg.lname,email:$scope.user.reg.email,org:$scope.user.reg.org,password:$scope.user.reg.password},registrationPromise=adminCalls.Register(registrationInfo);loadDisplay.addDisplay(registrationPromise,"Registering..."),registrationPromise.then(function(){var emailPayload={email:registrationInfo.email,fname:registrationInfo.fname,lname:registrationInfo.lname};saas.sendEmail(emailPayload).then(function(result){$state.go("app.dashboard")},function(err){$state.go("app.dashboard")})},function(err){errorDialog.show("Error registering",err)})};$scope.register=function(){$uibModal.open({templateUrl:"partials/modals/legalView.html",controller:"viewTermsCtrl",resolve:{legalTitle:function(){return"Terms and Conditions"},legalDoc:function(){return"partials/docs/saasTermsAndConditions.html"},mustAgree:function(){return!0}}}).result.then(function(didAgree){if(!didAgree)return void errorDialog.show("Error!","You must agree to the terms and conditions to register.");var accountInfo={fname:$scope.user.reg.fname,lname:$scope.user.reg.lname,org:$scope.user.reg.org,email:$scope.user.reg.email,tier:$scope.user.billing.plan};if($scope.user.billing.plan===saas.plans.FREE.name){var savePromise=saas.setPaymentProfile(accountInfo);loadDisplay.addDisplay(savePromise,"Saving..."),savePromise.then(function(){createDevAccount()},function(err){errorDialog.show("Unable to save info",err)})}else{var attachPromise=saas.attachStripeScript();loadDisplay.addDisplay(attachPromise,"Loading dependencies..."),attachPromise.then(function(){var tokenPromise=saas.createCardToken($scope.user.billing.card);loadDisplay.addDisplay(tokenPromise,"Tokenizing..."),tokenPromise.then(function(stripeToken){var savePromise=saas.setPaymentProfile(accountInfo);loadDisplay.addDisplay(savePromise,"Saving..."),savePromise.then(function(){accountInfo.stripeToken=stripeToken;var accountPromise=saas.createStripeAccount(accountInfo);loadDisplay.addDisplay(accountPromise,"Creating account..."),accountPromise.then(function(){createDevAccount()},function(err){errorDialog.show("Unable to create account",err)})},function(err){errorDialog.show("Unable to save info",err)})},function(err){errorDialog.show("Error processing card",err)})})}})}}]),app.controller("systemDashCtrl",["$scope","resolvedDashList","resolvedPluginList","dashboardConstants","pluginConstants","$uibModal","currentSystem","Dashboard","Plugin","clipboard","toastr","dashboardUtils",function($scope,resolvedDashList,resolvedPluginList,dashboardConstants,pluginConstants,$uibModal,currentSystem,Dashboard,Plugin,clipboard,toastr,dashboardUtils){resolvedDashList.sortAlphabetically(),$scope.dashList=resolvedDashList,$scope.pluginList=resolvedPluginList,$scope.dashboardConstants=dashboardConstants,$scope.pluginConstants=pluginConstants,$scope.isOfTypeV2=dashboardUtils.isOfTypeV2,$scope.refreshDash=function(){$scope.dashList.fetch(),$scope.pluginList.fetch()},$scope.newThing=function(){$uibModal.open({templateUrl:"partials/modals/newDashboardOrPlugin.html",controller:"newDashboardOrPluginCtrl",resolve:{dashList:function(){return $scope.dashList},options:function(){return{allowPlugins:!0,newPortalType:dashboardConstants.KNOWN_TYPES.CUSTOM,newPortalVersion:dashboardConstants.KNOWN_VERSIONS.V2}}}}).result.then(function(newThing){newThing instanceof Dashboard?($scope.dashList.addDash(newThing),newThing.getUrl(),$scope.dashList.sortAlphabetically()):newThing instanceof Plugin&&$scope.pluginList.addPlugin(newThing)})},$scope.editDash=function(dash){$uibModal.open({templateUrl:"partials/modals/editDashboard.html",controller:"editDashboardCtrl",resolve:{resolvedDash:function(){return dash}}}).result.then(function(dash){dash.deleted?$scope.dashList.removeDash(dash):$scope.dashList.updateDash(dash)})},$scope.editPlugin=function(plugin){$uibModal.open({templateUrl:"partials/modals/editPlugin.html",controller:"editPluginCtrl",resolve:{resolvedPlugin:function(){return plugin}}}).result.then(function(plug){plug.deleted?$scope.pluginList.removePlugin(plug):$scope.pluginList.updatePlugin(plug)})},$scope.exportPortals=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.dashList},modalConfig:function(){return{modalTitle:["All","portals"]}}}})},$scope.exportPlugins=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.pluginList},modalConfig:function(){return{modalTitle:["All","plugins"]}}}})},$scope.copyUrl=function(portal){clipboard.copyText(portal.url),toastr.success("Portal URL copied to clipboard")}}]),angular.module("adminPortal").controller("timerViewerCtrl",["serviceList","adminCalls","CodeTimer","CodeUtils","consoleConstants","confirmDialog","CollectionList","DeviceList","errorDialog","loadDisplay","$q","resolvedTimer","resolvedSystem","resource","$scope","$state","$stateParams","toastr","$uibModal","utils",function(serviceList,adminCalls,CodeTimer,CodeUtils,consoleConstants,confirmDialog,CollectionList,DeviceList,errorDialog,loadDisplay,$q,resolvedTimer,resolvedSystem,resource,$scope,$state,$stateParams,toastr,$uibModal,utils){if(""!==$state.params.name&&void 0!==$state.params.name){$scope.timer=resolvedTimer,$scope.services=serviceList.list,$scope.frequencyUnits=consoleConstants.internal.UNITS.FREQUENCY;var sysConfig={};sysConfig[consoleConstants.internal.SYSTEM_KEY]=resolvedSystem[consoleConstants.internal.SYSTEM_KEY],sysConfig[consoleConstants.internal.SYSTEM_SECRET]=resolvedSystem[consoleConstants.internal.SYSTEM_SECRET],$scope.saveTimer=function(){var updatePromise=$scope.timer.save();updatePromise.then(function(result){utils.stateReload(),toastr.success($scope.timer.name+" updated","Success")},function(err){toastr.error(err,"Error Saving")}),loadDisplay.addDisplay(updatePromise,"Saving timer")},$scope.revertTimer=function(){utils.stateReload(),toastr.info($scope.timer.name+" has been reset to original configuration.","Timer Reverted")},$scope.$parent.delete=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.timer.name+"?'").result.then(function(){var deletePromise=$scope.timer.delete();deletePromise.then(function(result){toastr.success($scope.timer.name+" deleted","Success"),$state.transitionTo("app.system.code",$stateParams,{reload:!0,inherit:!1,notify:!0})},function(err){toastr.success($scope.timer.name+" was not deleted. Please try again","Error")}),loadDisplay.addDisplay(deletePromise,"Removing timer")})},$scope.$parent.export=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.timer},modalConfig:function(){return{modalTitle:[$scope.timer.name,"timer"]}}}})},$scope.$on("$stateChangeStart",function(event,next,toParams,fromState,fromParams){"/code"===next.url&&($scope.$parent.displayOverview=!0)})}}]),angular.module("adminPortal").controller("triggerViewerCtrl",["adminCalls","CodeTrigger","confirmDialog","errorDialog","loadDisplay","$q","resolvedTrigger","resolvedSystem","resource","$scope","$state","$stateParams","toastr","$uibModal","resolvedPropOptions","utils",function(adminCalls,CodeTrigger,confirmDialog,errorDialog,loadDisplay,$q,resolvedTrigger,resolvedSystem,resource,$scope,$state,$stateParams,toastr,$uibModal,resolvedPropOptions,utils){""!==$state.params.name&&void 0!==$state.params.name&&($scope.trigger=resolvedTrigger,$scope.services=resolvedPropOptions.services,$scope.collections=resolvedPropOptions.collections,$scope.users=resolvedPropOptions.users,$scope.devices=resolvedPropOptions.devices,$scope.triggerDefs=resolvedPropOptions.triggerDefs,$scope.saveTrigger=function(){var updatePromise=$scope.trigger.save();updatePromise.then(function(result){utils.stateReload(),toastr.success($scope.trigger.name+" updated","Success")},function(err){toastr.error(err,"Error Saving")}),loadDisplay.addDisplay(updatePromise,"Saving Trigger")},$scope.revertTrigger=function(){utils.stateReload(),toastr.info($scope.trigger.name+" has been reset to original configuration.","Trigger Reverted")},$scope.$parent.delete=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.trigger.name+"?'").result.then(function(){var deletePromise=$scope.trigger.delete();deletePromise.then(function(result){toastr.success($scope.trigger.name+" deleted","Success"),$state.transitionTo("app.system.code",$stateParams,{reload:!0,inherit:!1,notify:!0})},function(err){toastr.success($scope.trigger.name+" was not deleted. Please try again","Error")}),loadDisplay.addDisplay(deletePromise,"Removing trigger")})},$scope.$parent.export=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.trigger},modalConfig:function(){return{modalTitle:[$scope.trigger.name,"trigger"]}}}})},$scope.$on("$stateChangeStart",function(event,next,toParams,fromState,fromParams){"/code"===next.url&&($scope.$parent.displayOverview=!0)}))}]),angular.module("adminPortal").controller("usersCtrl",["$scope","cbColumn","cbGrid","$q","users","uiGridConstants","$timeout","$log","loadDisplay","errorDialog","$uibModal","cbDataTypes","confirmDialog","utils","toastr","$stateParams",function($scope,cbColumn,cbGrid,$q,users,uiGridConstants,$timeout,$log,loadDisplay,errorDialog,$uibModal,cbDataTypes,confirmDialog,utils,toastr,$stateParams){$scope.userData=[],$scope.getPagedData=function(){$scope.userData.length=0,$log.debug("Getting user data"),$stateParams.filter={conditions:userGrid.conditions,filterInfo:userGrid.filterInfo};var promise=users.getAllUsers(userGrid.val.paginationPageSize,userGrid.val.paginationCurrentPage,userGrid.prepareSort(),userGrid.filterInfo);loadDisplay.addDisplay(promise,"Loading Users...","blockUserGrid"),promise.then(function(data){$scope.userData=data,$timeout(function(){$scope.userGridOptions.data=$scope.userData}),getTotalCount()},function(error){errorDialog.show("Error!","Unable to retrieve data",error)})};var getTotalCount=function(){users.getTotalCount(userGrid.val.paginationPageSize,userGrid.val.paginationCurrentPage,userGrid.prepareSort(),userGrid.filterInfo).then(function(data){$scope.totalServerItems=data,$scope.userGridOptions.totalItems=$scope.totalServerItems},function(err){errorDialog.show("Error","Unable to retrieve total for users",err)})},endCellEdit=function(rowEntity,colDef,newVal,oldVal){var col=new cbColumn(colDef.dataType);if(col.isValid(newVal)){var promise=users.updateUserCell(col.formatUserPayload(rowEntity.user_id,colDef.field,newVal));loadDisplay.addDisplay(promise,"Updating user"),promise.then(function(data){$log.debug("grid data PUT successful")},function(err){rowEntity[colDef.field]=oldVal,errorDialog.show("Error!","Unable to update user",err)})}else rowEntity[colDef.field]=oldVal,errorDialog.show("Error!",col.validationText)},setupColumns=function(){$scope.userColumns=[new cbColumn("uuid").createTemplate({displayName:"Settings",field:"roles",removable:!1,enableCellEdit:!1,enableSorting:!1,cellTemplate:"<popover-ctrl control='control' display-fn='grid.appScope.dispRoles' user-id='{{row.entity.user_id}}' email='{{row.entity.email}}'></popover-ctrl>"}),new cbColumn("uuid").createTemplate({displayName:"Password (uuid)",field:"password",removable:!1,enableCellEdit:!1,enableSorting:!1,cellTemplate:'<div class="ui-grid-cell-contents" ng-class="col.colIndex()"><a ng-click="grid.appScope.changePassword(row.entity)">Change Password</a></div>'}),new cbColumn("uuid").createTemplate({displayName:"user_id (uuid)",field:"user_id",removable:!1,enableCellEdit:!1})]};$scope.totalServerItems=0;var gridCallbacks={get:$scope.getPagedData,put:endCellEdit},userGridOptions={columnDefs:$scope.userColumns,data:"userData",totalItems:$scope.totalServerItems},userGrid=new cbGrid($scope,userGridOptions,gridCallbacks);$stateParams.filter&&(userGrid.conditions=$stateParams.filter.conditions,userGrid.filterInfo=$stateParams.filter.filterInfo),$scope.userGridOptions=userGrid.val,$scope.changePassword=function(user){$uibModal.open({templateUrl:"partials/modals/changeUserPassword.html",controller:"changeUserPassCtrl",resolve:{user:function(){return user}}})},$scope.addUser=function(){$uibModal.open({templateUrl:"partials/modals/addUser.html",controller:"addUserCtrl",resolve:{}}).result.then(function(user){$log.debug("user created"),$scope.userData.push(user)},function(){})},$scope.removeUsers=function(){$uibModal.open({templateUrl:"partials/modals/removeModal.html",controller:"removeModalCtrl",resolve:{selected:function(){return userGrid.val.gridApi.selection.getSelectedRows()},type:function(){return"users"}}}).result.then(function(usersToDelete){var promises=[];for(var i in usersToDelete)promises.push(users.deleteUser(usersToDelete[i].user_id));$q.all(promises).then(function(deletedUsersID){for(var i=0;i<usersToDelete.length;i++)$scope.userGridOptions.data.splice($scope.userGridOptions.data.lastIndexOf(usersToDelete[i]),1);userGrid.val.gridApi.selection.clearSelectedRows()})})},$scope.addColumn=function(){$uibModal.open({templateUrl:"partials/modals/addUserColumn.html",controller:"addUserColumnCtrl",resolve:{columnDataTypeOptions:function(){return cbDataTypes}}}).result.then(function(newColumn){void 0===$scope.userColumns&&($scope.userColumns=[]),newColumn.removable=!0;var col=new cbColumn(newColumn.dataType);$scope.userColumns.push(col.createTemplate(newColumn,$scope.removeColumn))},function(){})},$scope.removeColumn=function(col){confirmDialog.show("Are you sure you want to delete '"+col.field+"?'").result.then(function(){var promise=users.deleteUserColumn(col.field);loadDisplay.addDisplay(promise,"Deleting column..."),promise.then(function(){var index=$scope.userColumns.indexOf(col);$scope.userColumns.splice(index,1)},function(error){errorDialog.show("Error!","Unable to delete column.",error)})},function(){})},$scope.settingsModal=function(){$uibModal.open({templateUrl:"partials/modals/userProps.html",controller:"userPropsCtrl",resolve:{}}).result.then(function(thing){$log.debug("thing:"+thing)},function(){$log.debug("userProps modal dismissed")})},$scope.reloadUsers=function(){$scope.getPagedData()},$scope.exportUsers=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return users},modalConfig:function(){return{modalTitle:["All"," users"]}}}})},$scope.exportUser=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return users},modalConfig:function(){return{modalTitle:["All"," user"]}}}})},$scope.refreshTable=function(){getColumns().then(function(){$scope.getPagedData()})},$scope.$parent.refresh=function(){$scope.refreshTable()};var getColumns=function(){setupColumns();var deferred=$q.defer();return users.getUserColumns().then(function(data){data.forEach(function(columnInfo){var columnObj={displayName:columnInfo.ColumnName+" ("+columnInfo.ColumnType+")",field:columnInfo.ColumnName,enableCellEdit:!0,dataType:columnInfo.ColumnType};"user_id"===columnInfo.ColumnName||"email"===columnInfo.ColumnName||"creation_date"===columnInfo.ColumnName?columnObj.removable=!1:columnObj.removable=!0,"user_id"!==columnInfo.ColumnName&&"creation_date"!==columnInfo.ColumnName||(columnObj.enableCellEdit=!1),"creation_date"===columnInfo.ColumnName&&(columnObj.sort={direction:uiGridConstants.ASC,priority:1}),$scope.userColumns.push(new cbColumn(columnObj.dataType).createTemplate(columnObj,$scope.removeColumn)),$timeout(function(){$scope.userGridOptions.columnDefs=$scope.userColumns})}),deferred.resolve()},function(err){deferred.reject(),errorDialog.show("Error!","Unable to retrieve columns for user table.",err)}),deferred.promise};$scope.dispRoles=function(userId,email){var deferred=$q.defer();return $uibModal.open({templateUrl:"partials/modals/userRolesModal.html",controller:"dispUserRolesCtrl",resolve:{userID:function(){return userId},userName:function(){return email}}}).result.then(function(newRoles){users.updateUserRoles(userId,newRoles.removed,newRoles.added).then(function(){deferred.resolve()},function(){deferred.reject()})},function(){deferred.reject()}),deferred.promise},$scope.showAllColumns=function(){utils.showAllColumns($scope.userColumns,$stateParams)},$scope.filter=function(){var wantedColumns=function(columns){var wanted=[];return columns.forEach(function(column){"password"!==column.field&&"roles"!==column.field&&wanted.push(column)}),wanted};userGrid.showFilter(wantedColumns($scope.userColumns),"Users")},getColumns().then(function(){})}]),app.controller("welcomeCtrl",["$scope","DevUser","$location","adminCalls",function($scope,DevUser,$location,adminCalls){$scope.menu_hide=!0}]),app.controller("aceExampleCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.closeExample=function(){$uibModalInstance.close()},$scope.example="function getFactorial(req, resp){\n  var num = req.params.num;\n  var factorial = 1;\n  for(var i = 1; i <= num; i++) {\n    factorial = factorial * i;\n  }\n  resp.success(factorial);\n}"}]),app.controller("adapterEdgeCtrl",["$scope","$uibModal","$uibModalInstance","currentAdapter","currentEdge","consoleConstants","errorDialog","toastr","adapterUtils","loadDisplay",function($scope,$uibModal,$uibModalInstance,currentAdapter,currentEdge,consoleConstants,errorDialog,toastr,adapterUtils,loadDisplay){$scope.currentAdapter=currentAdapter,$scope.currentEdge=currentEdge,$scope.consoleConstants=consoleConstants,$scope.startAdapter=function(){var thePromise=$scope.currentAdapter.start([$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]);loadDisplay.addDisplay(thePromise,"Starting "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"docBody"),thePromise.then(function(data){var response=adapterUtils.parseEdgeApiErrors(data.result);response.hasErrors&&response.errors.length>0?errorDialog.show("Error!","Error encountered when starting adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],response.errors.join("<br>")):($scope.currentEdge[consoleConstants.external.ADAPTER.EDGE_STATUS]=adapterUtils.translateAdapterStatus("start",data.result[$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]),toastr.success("Adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" started on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"Success"))},function(err){errorDialog.show("Error!","Error encountered when starting adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],err)})},$scope.stopAdapter=function(){var thePromise=$scope.currentAdapter.stop([$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]);loadDisplay.addDisplay(thePromise,"Stopping "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"docBody"),thePromise.then(function(data){var response=adapterUtils.parseEdgeApiErrors(data.result);response.hasErrors&&response.errors.length>0?errorDialog.show("Error!","Error encountered when stopping adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],response.errors.join("<br>")):($scope.currentEdge[consoleConstants.external.ADAPTER.EDGE_STATUS]=adapterUtils.translateAdapterStatus("stop",data.result[$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]),toastr.success("Adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" stopped on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"Success"))},function(err){errorDialog.show("Error!","Error encountered when stopping adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],err)})},$scope.restartAdapter=function(){var thePromise=$scope.currentAdapter.restart([$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]);loadDisplay.addDisplay(thePromise,"Restarting "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"docBody"),thePromise.then(function(data){var response=adapterUtils.parseEdgeApiErrors(data.result);response.hasErrors&&response.errors.length>0?errorDialog.show("Error!","Error encountered when restarting adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],response.errors.join("<br>")):($scope.currentEdge[consoleConstants.external.ADAPTER.EDGE_STATUS]=adapterUtils.translateAdapterStatus("restart",data.result[$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]),toastr.success("Adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" restarted on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"Success"))},function(err){errorDialog.show("Error!","Error encountered when restarting adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],err)})},$scope.refreshLogs=function(){var thePromise=$scope.currentAdapter.getLogs([$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]]);loadDisplay.addDisplay(thePromise,"Retrieving "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" logs from Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],"docBody"),thePromise.then(function(data){var response=adapterUtils.parseEdgeApiErrors(data.result);response.hasErrors&&response.errors.length>0?errorDialog.show("Error!","Error encountered when retrieving logs for adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],response.errors.join("<br>")):$scope.currentEdge.logs=data.result[$scope.currentEdge[consoleConstants.external.ADAPTER.NAME]].output},function(err){errorDialog.show("Error!","Error encountered when retrieving logs for adapter "+$scope.currentAdapter[consoleConstants.external.ADAPTER.NAME]+" on Edge "+$scope.currentEdge[consoleConstants.external.ADAPTER.NAME],err)})},$scope.closeDialog=function(){$uibModalInstance.dismiss("cancel")}}]),app.controller("adapterSettingsCtrl",["$scope","$uibModalInstance","currentAdapter","errorDialog","loadDisplay","roles","$q","$uibModal","confirmDialog","consoleConstants","toastr","$stateParams","$state",function($scope,$uibModalInstance,currentAdapter,errorDialog,loadDisplay,roles,$q,$uibModal,confirmDialog,consoleConstants,toastr,$stateParams,$state){currentAdapter.getFiles().then(function(data){$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES]=angular.copy(currentAdapter[consoleConstants.external.ADAPTER.FILES]),$scope.hasUpdatedFiles=!1,$scope.$watchGroup(["hasUpdatedFiles","selectedAdapter[consoleConstants.external.ADAPTER.DEPLOY_CMD]","selectedAdapter[consoleConstants.external.ADAPTER.START_CMD]","selectedAdapter[consoleConstants.external.ADAPTER.STOP_CMD]","selectedAdapter[consoleConstants.external.ADAPTER.STATUS_CMD]","selectedAdapter[consoleConstants.external.ADAPTER.UNDEPLOY_CMD]","selectedAdapter[consoleConstants.external.ADAPTER.LOGS_CMD]"],function(newFields,oldFields){newFields!==oldFields&&(angular.equals($scope.selectedAdapter,currentAdapter)||($scope.enableSave=!0,$scope.displayDeployDialog=!0))}),$scope.$watchCollection("newFiles",function(newFields,oldFields){newFields!==oldFields&&($scope.enableSave=!0,$scope.displayDeployDialog=!0)})}),$scope.selectedAdapter=angular.copy(currentAdapter),$scope.consoleConstants=consoleConstants,$scope.Architectures=consoleConstants.external.ADAPTER.ARCHITECTURES,$scope.section="properties",$scope.roles=[],$scope.newFiles=[],$scope.enableSave=!1,$scope.displayDeployDialog=!1,$scope.deleteFileDialogDisplayed=!1,$scope.handleUpload=function(fileList){if(fileList.length>0){for(var i=0;i<fileList.length;i++)$scope.newFiles.push(fileList[i]);$scope.enableSave=!0,$scope.$apply()}},$scope.updateNewFile=function(ndx,fileList){fileList.length>0&&$scope.$evalAsync(function(){$scope.newFiles[ndx]=fileList[0]})},$scope.deleteNewFile=function(ndx){$scope.$evalAsync(function(){$scope.newFiles.splice(ndx,1)})},$scope.updateAdapterFile=function(ndx,fileList){fileList[0].name!==$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][ndx].name?errorDialog.show("Error!","When updating an existing adapter file, the filename of the new file must be the same as the filename of the existing adapter file!"):($scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][ndx].updatedFile=fileList[0],$scope.hasUpdatedFiles=!0,$scope.$apply())},$scope.deleteAdapterFile=function(fileNdx){$scope.selectedAdapter.deleteFile($scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][fileNdx]).then(function(data){var handleFileDeleted=function(){toastr.success("File "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][fileNdx].name+" deleted","Success"),$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES].splice(fileNdx,1),currentAdapter[consoleConstants.external.ADAPTER.FILES].splice(fileNdx,1)};if($scope.deleteFileDialogDisplayed)handleFileDeleted();else{confirmDialog.show("The "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.NAME]+" adapter will need to be redeployed to all Edges it is currently deployed to in order for any changes made to take effect.",!0).result.then(function(){$scope.deleteFileDialogDisplayed=!0,handleFileDeleted()})}},function(err){toastr.error("Error deleting file "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][fileNdx].name,"Error")})},$scope.changeSection=function(newSection){$scope.section=newSection},$scope.applyChanges=function(){var promises=[];if(!angular.equals($scope.selectedAdapter,currentAdapter)){var updateServiceDef=$q.defer();$scope.selectedAdapter.update().then(function(data){updateServiceDef.resolve(data)},function(err){errorDialog.show("Error!","Error when updating adapter",err),updateServiceDef.reject(err)}),promises.push(updateServiceDef.promise)}if($scope.hasUpdatedFiles)for(var j=0;j<$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES].length;j++)if($scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][j].updatedFile){var thePromise=$scope.selectedAdapter.updateFile($scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][j].updatedFile).then(function(data){},function(err){errorDialog.show("Error!","Error updating adapter file",err)});loadDisplay.addDisplay(thePromise,"Uploading "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES][j].name,"docBody"),promises.push(thePromise)}$scope.newFiles.length>0&&(angular.forEach($scope.newFiles,function(newFile){var newfilePromise=$scope.selectedAdapter.addFile(newFile).then(function(file){$scope.selectedAdapter[consoleConstants.external.ADAPTER.FILES].push(file)},function(err){errorDialog.show("Error!","Error adding file to adapter",err)});loadDisplay.addDisplay(newfilePromise,"Uploading "+newFile.name,"docBody"),promises.push(newfilePromise)}),$scope.newFiles=[]),$q.all(promises).then(function(values){if($uibModalInstance.close($scope.selectedAdapter),$scope.displayDeployDialog){confirmDialog.show("The "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.NAME]+" adapter will need to be redeployed to all Edges it is currently deployed to in order for any changes made to take effect.",!0).result.then(function(){})}})},$scope.deleteAdapter=function(){var modalInstance=confirmDialog.show("Are you sure you want to delete adapter "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.NAME]+"?");$scope.selectedAdapter.getStatus().then(function(data){}),modalInstance.result.then(function(){var promise=$scope.selectedAdapter.delete();promise.then(function(result){toastr.success("Adapter "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.NAME]+" deleted","Success"),$state.transitionTo("app.system.adapters",$stateParams,{reload:!0,inherit:!1,notify:!0}),$uibModalInstance.dismiss()},function(err){toastr.error("Adapter "+$scope.selectedAdapter[consoleConstants.external.ADAPTER.NAME]+" was not deleted. Please try again!","Error")}),loadDisplay.addDisplay(promise,"Deleting adapter'"+$scope.selectedAdapter[consoleConstants.external.ADAPTER.NAME]+"'...","docBody")})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("addCodeCtrl",["$scope","$uibModalInstance","CodeService","CodeLibrary","loadDisplay","errorDialog",function($scope,$uibModalInstance,CodeService,CodeLibrary,loadDisplay,errorDialog){$scope.func={name:"",parameters:[]},$scope.runUser="<caller>",$scope.codeType={value:"service"},$scope.lengthErr=!1,$scope.uniqueErr=!1,$scope.createFunction=function(func){if("service"===$scope.codeType.value){var code=new CodeService(func),promise=code.create();loadDisplay.addDisplay(promise,"Creating "+$scope.func.name+"...","blockNewFunc"),promise.then(function(nameRet){$uibModalInstance.close({name:nameRet,type:$scope.codeType.value})},function(error){errorDialog.show("Error!","Unable to create service",error)})}else{var code=new CodeLibrary(func),promise=code.create();loadDisplay.addDisplay(promise,"Creating "+$scope.func.name+"...","blockNewFunc"),promise.then(function(nameRet){$uibModalInstance.close({name:$scope.func.name,type:$scope.codeType.value})},function(error){errorDialog.show("Error!","Unable to create library",error)})}},$scope.setOwner=function(item){$scope.func.owner=item.user_id},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("addColumnCtrl",["$scope","$uibModalInstance","currentCollection","columnDataTypeOptions","loadDisplay","toastr","consoleConstants","errorDialog","$timeout",function($scope,$uibModalInstance,currentCollection,columnDataTypeOptions,loadDisplay,toastr,consoleConstants,errorDialog,$timeout){$scope.columnDataTypeOptions=columnDataTypeOptions,$scope.uniqueName=!1,$scope.doesColumnExist=function(colName){currentCollection.doesColumnExist(colName)&&($timeout(function(){$scope.uniqueName=!1}),toastr.error("Column names must be unique")),$scope.uniqueName=!0},$scope.saveNewColumn=function(){var addColumn={};addColumn[consoleConstants.external.DATA.COLUMN.TYPE]=$scope.column.columnDataType,addColumn[consoleConstants.external.DATA.COLUMN.FIELD]=$scope.column.addColumnName.toLowerCase();var promise=currentCollection.createColumn(addColumn);loadDisplay.addDisplay(promise,"Adding column '"+addColumn.name+"'"),promise.then(function(){$uibModalInstance.close(addColumn),$scope.$destroy()},function(reason){errorDialog.show("Error!","Unable to save column",reason)})},$scope.cancel=function(){$uibModalInstance.dismiss(),$scope.$destroy()}}]),app.controller("addDeviceColumnCtrl",["$scope","cbColumn","$uibModalInstance","columnDataTypeOptions","Device","loadDisplay","errorDialog",function($scope,cbColumn,$uibModalInstance,columnDataTypeOptions,device,loadDisplay,errorDialog){$scope.columnDataTypeOptions=columnDataTypeOptions,$scope.column={},$scope.saveColumn=function(){var formatted_payload={displayName:$scope.column.addColumnName.toLowerCase(),field:$scope.column.addColumnName.toLowerCase(),dataType:$scope.column.columnDataType,resizable:!0,enableCellEdit:!0};$uibModalInstance.close(formatted_payload)},$scope.cancel=function(e){e.preventDefault(),$uibModalInstance.dismiss("cancel")}}]),app.controller("addEdgeColumnCtrl",["$scope","$uibModalInstance","columnDataTypeOptions","edges","loadDisplay","errorDialog",function($scope,$uibModalInstance,columnDataTypeOptions,edges,loadDisplay,errorDialog){$scope.columnDataTypeOptions=columnDataTypeOptions,$scope.column={},$scope.saveColumn=function(){var promise=edges.createEdgeColumn($scope.column.addColumnName,$scope.column.columnDataType);loadDisplay.addDisplay(promise,"Adding Column..."),promise.then(function(newColumn){var formatted_payload={displayName:$scope.column.addColumnName.toLowerCase(),field:$scope.column.addColumnName.toLowerCase(),dataType:$scope.column.columnDataType,resizable:!0,enableCellEdit:!0};$uibModalInstance.close(formatted_payload)},function(error){errorDialog.show("Error!","Unable to add column. Please be mindful SQL Reserved Keywords are not allowed.",error)})},$scope.cancel=function(e){e.preventDefault(),$uibModalInstance.dismiss("cancel")}}]),app.controller("addRoleCtrl",["$scope","$uibModalInstance","roles","adminCalls","adminPortalUtils","CollectionList","codes","consoleConstants","currentSystem",function($scope,$uibModalInstance,roles,adminCalls,adminPortalUtils,CollectionList,codes,consoleConstants,currentSystem){$scope.newRole={name:void 0,collections:[],topics:[],services:[],users:{}};var collectionConfig={};collectionConfig[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),collectionConfig[consoleConstants.internal.SYSTEM_SECRET]=currentSystem.getSystemSecret();var collList=new CollectionList(collectionConfig);$scope.collectionsCall=collList.fetch.bind(collList),$scope.servicesCall=codes.getServices,$scope.isNotValid=function(){return void 0===$scope.newRole.name},$scope.roleSubmitted=function(){adminPortalUtils.wipeEmptyCollections($scope.newRole.collections),adminPortalUtils.wipeEmptyCollections($scope.newRole.topics),roles.addRoleGeneral($scope.newRole).then(function(){$uibModalInstance.close()},function(error){$uibModalInstance.dismiss()})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("addUserColumnCtrl",["$scope","$uibModalInstance","columnDataTypeOptions","users","loadDisplay","errorDialog",function($scope,$uibModalInstance,columnDataTypeOptions,users,loadDisplay,errorDialog){$scope.columnDataTypeOptions=columnDataTypeOptions,$scope.column={},$scope.saveColumn=function(){var promise=users.createUserColumn($scope.column.addColumnName,$scope.column.columnDataType);loadDisplay.addDisplay(promise,"Adding column..."),promise.then(function(newColumn){formatted_payload={displayName:$scope.column.addColumnName.toLowerCase(),field:$scope.column.addColumnName.toLowerCase(),dataType:$scope.column.columnDataType,resizable:!0,enableCellEdit:!0},$uibModalInstance.close(formatted_payload)},function(error){errorDialog.show("Error!","Unable to add column. Please be mindful SQL Reserved Keywords are not allowed.",error)})},$scope.cancel=function(e){e.preventDefault(),$uibModalInstance.dismiss("cancel")}}]),app.controller("addUserCtrl",["$scope","$uibModalInstance","users","loadDisplay","errorDialog",function($scope,$uibModalInstance,users,loadDisplay,errorDialog){$scope.register=function(user){if(user.password===user.confirmPassword){var newUser={email:user.email,password:user.password},promise=users.addUser(newUser);loadDisplay.addDisplay(promise,"Registering user..."),promise.then(function(addedUser){$uibModalInstance.close(addedUser)},function(error){errorDialog.show("Error!",error)})}else $scope.error=!0,$scope.errorMessage="Passwords do not match"},$scope.cancel=function(e){e.preventDefault(),$uibModalInstance.dismiss("cancel")}}]),app.controller("changeActiveKeyCtrl",["$scope","$uibModalInstance","device","Device","loadDisplay","consoleConstants","currentSystem",function($scope,$uibModalInstance,device,Device,loadDisplay,consoleConstants,currentSystem){$scope.deviceName=device.name,$scope.changeActiveKey=function(newActiveKey){var obj={name:device.name,active_key:newActiveKey},newDevice=new Device(obj);newDevice[consoleConstants.external.DEVICE.SYSTEM_KEY]=currentSystem.getSystemID();var promise=newDevice.update();loadDisplay.addDisplay(promise,"Changing Active Key"),promise.then(function(response){$uibModalInstance.close()},function(error){$scope.errorMsg=error})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("changeDevPasswordCtrl",["$scope","$uibModalInstance","DevUser","loadDisplay","errorDialog","platformRequest",function($scope,$uibModalInstance,DevUser,loadDisplay,errorDialog,platformRequest){$scope.email=DevUser.getLoggedUser(),$scope.oldPassword="",$scope.newPassword="",$scope.errorMsg="",$scope.resetSubmitted=function(oldPassword,newPassword){var promise=DevUser.changeLoggedInPassword(oldPassword,newPassword);loadDisplay.addDisplay(promise,"Changing Password"),promise.then(function(response){var loginData={email:DevUser.getLoggedUser(),password:newPassword},promise=DevUser.logIn(loginData);loadDisplay.addDisplay(promise,"Logging in..."),promise.then(function(data){platformRequest.setPlatformDevToken(data),$uibModalInstance.close()},function(err){errorDialog.show("Error!","Unable to log in after changing password. Please refresh your browser and log in.",err)})},function(error){$scope.errorMsg=error})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("changeUserPassCtrl",["$scope","$uibModalInstance","user","users","loadDisplay",function($scope,$uibModalInstance,user,users,loadDisplay){$scope.userName=user.email,$scope.newPassword="",$scope.errorMsg="",$scope.changePassword=function(newPassword){var promise=users.changeUserPassword(user.user_id,newPassword);loadDisplay.addDisplay(promise,"Changing User Password"),promise.then(function(response){$uibModalInstance.close()},function(error){$scope.errorMsg=error})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("codeHistoryCtrl",["$q","$scope","$uibModalInstance","$uibModal","currentCode","errorDialog","utils","loadDisplay","toastr","confirmDialog",function($q,$scope,$uibModalInstance,$uibModal,currentCode,errorDialog,utils,loadDisplay,toastr,confirmDialog){$scope.selectedLog={logLines:[]},$scope.failedRuns=[],$scope.section="logs";var fetchLogs=function(){var fetchPromise=currentCode.getLogs();fetchPromise.then(function(data){$scope.logs=data},function(err){errorDialog.show("Error!","Unable to retrieve logs",err)}),loadDisplay.addDisplay(fetchPromise,"Retrieving logs...")};$scope.displayLog=function(log){$scope.selectedLog=log;var rawLogLines=log.log.split("\n");rawLogLines.splice(rawLogLines.length-1,1),$scope.selectedLog.logLines=rawLogLines.map(utils.parseJSONForDisplay)};var fetchFailures=function(){var deffered=$q.defer(),fetchPromise=currentCode.getFailures();return fetchPromise.then(function(data){$scope.failedRuns=data,deffered.resolve()},function(err){errorDialog.show("Error!","Unable to retrieve failures",err),deffered.reject()}),loadDisplay.addDisplay(fetchPromise,"Retrieving failures..."),deffered.promise};$scope.retryFailure=function(failureId){var retryPromise=currentCode.retryFailure(failureId).then(function(){var currentFailCount=$scope.failedRuns.length;fetchFailures().then(function(){$scope.failedRuns.length>=currentFailCount?toastr.warning("Failed, error log has been updated","Service Retry"):toastr.success("Success, service ran with no errors","Service Retry")})},function(err){errorDialog.show("Error!","Unable to retry failure",err)});loadDisplay.addDisplay(retryPromise,"Attempting failed request...")},$scope.retryAllFailures=function(){for(var deffered=$q.defer(),retryPromises=[],currentFailCount=$scope.failedRuns.length,i=0;i<currentFailCount;i++)retryPromises.push(currentCode.retryFailure($scope.failedRuns[i].Id));$q.all(retryPromises).then(function(){deffered.resolve(),fetchFailures().then(function(){toastr.info(currentFailCount-$scope.failedRuns.length+" / "+currentFailCount+" runs succeeded. Code history has been updated.","Retry Results",{timeout:15e3})})},function(err){deffered.reject(),errorDialog.show("Error!","Unable to retry failures",err)}),loadDisplay.addDisplay(deffered.promise,"Attempting failed requests...")},$scope.discardFailure=function(failureId){var discardPromise=currentCode.discardFailure(failureId);discardPromise.then(function(){fetchFailures().then(function(){toastr.success("Failure record has been discarded","Success")})},function(err){errorDialog.show("Error!","Unable to discard failure",err)}),loadDisplay.addDisplay(discardPromise,"Discarding failure record...")},$scope.discardAllFailures=function(){confirmDialog.show("Are you sure you want to delete all failure logs?").result.then(function(){for(var deffered=$q.defer(),discardPromises=[],i=0,len=$scope.failedRuns.length;i<len;i++)discardPromises.push(currentCode.discardFailure($scope.failedRuns[i].Id));$q.all(discardPromises).then(function(){deffered.resolve(),fetchFailures().then(function(){toastr.success("Failure records have been discarded","Success")})},function(err){deffered.reject(),errorDialog.show("Error!","Unable to delete failures",err)}),loadDisplay.addDisplay(deffered.promise,"Discarding failure records...")})},$scope.changeSection=function(event,newSection){switch(event.preventDefault(),newSection){case"logs":fetchLogs();break;case"failures":fetchFailures()}$scope.section=newSection},$scope.closeModal=function(){$uibModalInstance.dismiss()},$scope.failureDetail=function(failure){$uibModal.open({templateUrl:"partials/modals/failureDetail.html",controller:"failureDetailCtrl",resolve:{failure:function(){return failure}}}).result.then(function(result){result.retry&&$scope.retryFailure(failure.Id),result.discard&&$scope.discardFailure(failure.Id)})},fetchLogs()}]),app.controller("codeParamsCtrl",["$scope","curCode","$uibModalInstance",function($scope,curCode,$uibModalInstance){$scope.code=curCode,$scope.updated=!1,$scope.applyChanges=function(updated){$uibModalInstance.close(updated)},$scope.paramChange=function(){$scope.updated=!0}}]),app.controller("codePropsCtrl",["$scope","$uibModalInstance","currentCode","currentSystem","specifiedProp","errorDialog","loadDisplay","roles","$q","$uibModal","adminCalls","confirmDialog","libraries","CodeTrigger","CodeTimer","CodeUtils","users","consoleConstants","codes","$state","resolvedPropOptions","toastr",function($scope,$uibModalInstance,currentCode,currentSystem,specifiedProp,errorDialog,loadDisplay,roles,$q,$uibModal,adminCalls,confirmDialog,libraries,CodeTrigger,CodeTimer,CodeUtils,users,consoleConstants,codes,$state,resolvedPropOptions,toastr){function checkLoggingEnabled(name){var deferred=$q.defer(),options={name:name};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID();var promise=adminCalls.CheckLoggingEnabled(options);return loadDisplay.addDisplay(promise,"Checking if logging is enabled."),promise.then(function(data){$scope.code.logging.enabled=data.logging_enabled.toString(),deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise}$scope.code=angular.copy(currentCode);var currentSourceCode=$scope.code.code;$scope.code.fetch().then(function(){setTimeout(function(){$scope.code.code=currentSourceCode,$scope.$apply()})},function(err){errorDialog.show("Error!","Unable to load "+$scope.curCode.name,err)}),$scope.codeType="library",$scope.code.isService&&($scope.codeType="service",$scope.code.getTriggers(),$scope.code.getTimers(),$scope.code.logging={},checkLoggingEnabled($scope.code.name),$scope.collections=resolvedPropOptions.collections,$scope.devices=resolvedPropOptions.devices,$scope.users=resolvedPropOptions.users),$scope.triggerDefs=resolvedPropOptions.triggerDefs,$scope.triggersArray=[],$scope.timersArray=[],$scope.frequencyUnits=consoleConstants.internal.UNITS.FREQUENCY,$scope.newDependency={name:""},$scope.section=specifiedProp||"props",$scope.roles=[],$scope.newRoles=[];$scope.onSecurity=!1,$scope.changeSection=function(newSection){$scope.section=newSection,$scope.onSecurity="security"===newSection};var formatLibraries=function(obj){for(var rtn=[],length=libraries.length,i=0;i<length;i++)($scope.code.isService||libraries[i].name!==$scope.code.name)&&rtn.push(libraries[i]);return rtn},formattedLibraries=formatLibraries(libraries);$scope.discardChanges=function(){$uibModalInstance.dismiss()},$scope.applyChanges=function(){var promises=[];toastr.clear(),$scope.roles.forEach(function(role){promises.push(roles.updateRoleServices(role.id,angular.copy(role.services)))});var promisesWatch=$q.all(promises);if(loadDisplay.addDisplay(promisesWatch,"Updating existing roles...","blockModal"),promisesWatch.then(function(){},function(err){errorDialog.show("Error!","Unable to update existing roles",err)}),$scope.newRoles.length>0){var newPromises=[];$scope.newRoles.forEach(function(newRole){newPromises.push(roles.addRoleForService(newRole,$scope.code))});var newPromisesWatch=$q.all(newPromises);loadDisplay.addDisplay(newPromisesWatch,"Saving new roles...","blockModal"),newPromisesWatch.then(function(){$scope.newRoles=[]},function(err){errorDialog.show("Error!","Unable to save new roles",err)})}""==$scope.code.ownerEmail&&($scope.code.owner="");var promise=$scope.code.save();loadDisplay.addDisplay(promise,"Saving "+$scope.code.name+"..."),promise.then(function(){var noChanges=!0;if($scope.code.triggersArray&&$scope.code.triggersArray.length>0){noChanges=!1;var triggerPromises=[];$scope.code.triggersArray.forEach(function(trigger){if(trigger instanceof CodeTrigger)trigger.shouldUpdate&&triggerPromises.push(trigger.save());else{trigger.service_name=$scope.code.name;var theTrigger=new CodeTrigger(trigger);triggerPromises.push(theTrigger.create(trigger))}});var triggerPromiseWatch=$q.all(triggerPromises);loadDisplay.addDisplay(triggerPromiseWatch,"Saving triggers...","blockModal"),triggerPromiseWatch.then(function(){try{CodeUtils.getTriggerHandlers(),$uibModalInstance.close($scope.code)}catch(err){}},function(err){errorDialog.show("Error","Unable to save triggers",err)})}var timersError=!1;if($scope.code.timersArray&&$scope.code.timersArray.length>0){noChanges=!1;var timerError=!1,missingAttributes="",timerPromises=[];$scope.code.timersArray.forEach(function(timer){if(timerError=!1,missingAttributes="",void 0===timer.name&&(missingAttributes+=" name,",timerError=!0,timersError=!0),void 0===timer.description&&(missingAttributes+=" description,",timerError=!0,timersError=!0),void 0===timer.repeats&&(missingAttributes+=" repetitions,",timerError=!0,timersError=!0),void 0===timer.n&&(missingAttributes+=" frequency,",timerError=!0,timersError=!0),void 0===timer.seconds&&(missingAttributes+=" frequency unit,",timerError=!0,timersError=!0),void 0===timer.start_day&&(missingAttributes+=" start date,",timerError=!0,timersError=!0),void 0===timer.start_time&&(missingAttributes+=" start time,",timerError=!0,timersError=!0),timerError)missingAttributes=missingAttributes.substr(0,missingAttributes.length-1),toastr.error("Missing: "+missingAttributes,timer.name,{timeOut:0,closeButton:!0});else if(timer instanceof CodeTimer)timer.shouldUpdate&&timerPromises.push(timer.save());else{timer.service_name=$scope.code.name;var theTimer=new CodeTimer(timer);timerPromises.push(theTimer.create(timer))}});var timerPromiseWatch=$q.all(timerPromises);loadDisplay.addDisplay(timerPromiseWatch,"Saving timers...","blockModal"),timerPromiseWatch.then(function(){try{CodeUtils.getTimerHandlers(),timersError?toastr.error("Timers could not be saved","Error",{timeOut:0,closeButton:!0}):(toastr.clear(),$uibModalInstance.close($scope.code))}catch(err){}},function(err){errorDialog.show("Error","Unable to save timers",err)})}noChanges&&$uibModalInstance.close($scope.code)},function(err){errorDialog.show("Error!","Unable to save "+$scope.code.name,err)})},$scope.deleteCode=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.code.name+"?'").result.then(function(){var promise=$scope.code.delete();promise.then(function(){$scope.code.deleted=!0,$uibModalInstance.close($scope.code)},function(err){errorDialog.show("Error!","Unable to delete "+$scope.code.name,err)}),loadDisplay.addDisplay(promise,"Deleting '"+$scope.code.name+"'...")})},$scope.getRunUser=function(){if($scope.code.isService&&""!==$scope.code.owner){var cb=new ClearBlade,query=cb.Query();query.equalTo("user_id",$scope.code.owner);var params={pageSize:0,pageNum:0,pageFilter:query.query.FILTERS};users.getAllUsers(params.pageSize,params.pageNum,params.pageSort,params.pageFilter).then(function(data){$scope.code.ownerEmail=data[0]},function(err){errorDialog.show("Error!","Unable to retrieve run user",err)})}},$scope.getRunUser(),$scope.setOwner=function(item){$scope.code.owner=item.user_id},$scope.isTrigger=function(data){return data instanceof CodeTrigger},$scope.getOtherDependencies=function(){if(0===$scope.code.dependenciesArray.length)return formattedLibraries;for(var rtn=[],length=formattedLibraries.length,i=0;i<length;i++)-1===$scope.code.dependenciesArray.indexOf(formattedLibraries[i].name)&&rtn.push(formattedLibraries[i]);return rtn},$scope.getTriggerTypes=function(triggerModule){for(var rtn=[],length=$scope.triggerDefs.length,i=0;i<length;i++)triggerModule===$scope.triggerDefs[i].def_module&&rtn.push($scope.triggerDefs[i]);return rtn},$scope.triggerUpdate=function(idx,shouldClear){$scope.code.triggersArray[idx]instanceof CodeTrigger?$scope.code.triggersArray[idx].shouldUpdate=!0:shouldClear&&($scope.code.triggersArray[idx].id=void 0,$scope.code.triggersArray[idx].itemId=void 0,$scope.code.triggersArray[idx].event_definition.def_name=void 0)},$scope.timerUpdate=function(idx){$scope.code.timersArray[idx]instanceof CodeTimer&&($scope.code.timersArray[idx].shouldUpdate=!0)},$scope.addTrigger=function(){$scope.code.triggersArray.push({})},$scope.removeTrigger=function(idx){if($scope.code.triggersArray[idx]instanceof CodeTrigger){confirmDialog.show("Are you sure you want to delete "+$scope.code.triggersArray[idx].name+"?").result.then(function(){$scope.code.triggersArray[idx].delete().then(function(){CodeUtils.getTriggerHandlers(),$scope.code.triggersArray.splice(idx,1)},function(err){errorDialog.show("Error","Unable to delete trigger",err)})})}else $scope.code.triggersArray.splice(idx,1)},$scope.isTimer=function(data){return data instanceof CodeTimer},$scope.timerUpdate=function(idx){$scope.code.timersArray[idx]instanceof CodeTimer&&($scope.code.timersArray[idx].shouldUpdate=!0)},$scope.addTimer=function(){$scope.code.timersArray.push({})},$scope.removeTimer=function(idx){if($scope.code.timersArray[idx]instanceof CodeTimer){confirmDialog.show("Are you sure you want to delete "+$scope.code.timersArray[idx].name+"?").result.then(function(){$scope.code.timersArray[idx].delete().then(function(){CodeUtils.getTimerHandlers(),$scope.code.timersArray.splice(idx,1)},function(err){errorDialog.show("Error","Unable to delete timer",err)})})}else $scope.code.timersArray.splice(idx,1)},$scope.addDependency=function(item){$scope.code.dependenciesArray.push(item.name),$scope.newDependency.name=""},$scope.removeDependency=function(idx){$scope.code.dependenciesArray.splice(idx,1)},$scope.reorderDependency=function(fromIdx,toIdx){if($scope.code.dependenciesArray[toIdx]){var toElem=$scope.code.dependenciesArray[toIdx];$scope.code.dependenciesArray[toIdx]=$scope.code.dependenciesArray[fromIdx],$scope.code.dependenciesArray[fromIdx]=toElem}},$scope.showApi=function(dependency){var url;url=dependency.isGlobal?codes.globalLibs.hasOwnProperty(dependency[consoleConstants.external.CODE.LIBRARY.KEY])?codes.globalLibs[dependency[consoleConstants.external.CODE.LIBRARY.KEY]]:"https://docs.clearblade.com":$state.href("app.system.code.libraries",{systemKey:$state.params.systemKey,name:dependency.name}),window.open(url)},$scope.cancel=function(){toastr.clear(),$uibModalInstance.dismiss()};var securityWatch=$scope.$watch("section",function(newVal,oldVal){"security"===newVal&&(getRoles(),securityWatch())},!0),getRoles=function(){var allPromise=roles.getAllRoles();loadDisplay.addDisplay(allPromise,"Retrieving all roles...","blockModal"),allPromise.then(function(roles){$scope.roles=roles},function(err){errorDialog.show("Error!","Unable to retrieve all roles",err)})};$scope.filterRoles=function(){return $scope.roles.forEach(function(role){if(void 0!==role.services&&role.services.length>0)for(var i=0;i<role.services.length;i++){if(!role.services[i].read){role.collIdx=-1;break}if(role.services[i].itemInfo.name===$scope.code.name){role.collIdx=i;break}role.collIdx=-1}else role.collIdx=-1}),$scope.roles},$scope.exportCode=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.code},modalConfig:function(){return{modalTitle:[$scope.code.name,$scope.codeType]}}}})},getRoles()}]),app.controller("codeResponseDialogCtrl",["$scope","$uibModalInstance","resolvedTitle","resolvedBody","utils",function($scope,$uibModalInstance,resolvedTitle,resolvedBody,utils){$scope.title=resolvedTitle,$scope.body=utils.parseJSONForDisplay(resolvedBody),$scope.close=function(){$uibModalInstance.close()}}]),app.controller("collectionCtrl",["$log","$timeout","$localStorage","$scope","$http","$uibModal","$uibModalInstance","currentSystem","currentCollection","roles","newCollection","loadDisplay","Collection","consoleConstants","collectionConstants","platformRequest","DevUser",function($log,$timeout,$localStorage,$scope,$http,$uibModal,$uibModalInstance,currentSystem,currentCollection,roles,newCollection,loadDisplay,Collection,consoleConstants,collectionConstants,platformRequest,DevUser){$scope.collection=currentCollection,$scope.submitDisabled=!1,$scope.locationLabel="IP Address",$scope.newCollection={},$scope.newCollection.type="cloud",$scope.newCollection.state="new",$scope.encryptionSupported=!1,$scope.appID=currentSystem.getSystemID(),$scope.file="",$scope.fileType="",$scope.fileName="",$scope.selected=!1,$scope.validFile=!1,$scope.complete=!1,$scope.error=!1,$scope.status="",$scope.DBTypes=collectionConstants.DBTypes,newCollection||roles.getCollectionRoles($scope.collection.collectionID).then(function(colRoles){$scope.relevantRoles=colRoles}),$scope.permToDisplay=function(role){return permDisplay="",role.create&&(permDisplay+="Create, "),role.read&&(permDisplay+="Read, "),role.update&&(permDisplay+="Update, "),role.delete&&(permDisplay+="Delete, "),permDisplay.substr(0,permDisplay.length-2)},$scope.saveNewCollection=function(collection){$scope.submitDisabled=!0;var payload={};payload[collectionConstants.NAME]=collection.collectionName,payload[collectionConstants.APP_ID]=currentSystem.getSystemID(),"cloud"==collection.type?(payload[consoleConstants.internal.SYSTEM_SECRET]=currentSystem.getSystemSecret(),payload[collectionConstants.IS_CONNECTION]=!1):(payload[collectionConstants.APP_ID]=currentSystem.getSystemID(),payload[collectionConstants.NAME]=collection.collectionName,payload[collectionConstants.DB_TYPE]=$scope.DBTypes[collection.dbType].dbValue,payload[collectionConstants.DB_NAME]=collection.dbName,payload[collectionConstants.ADDRESS]=collection.ipAddress,payload[collectionConstants.PORT]=collection.port,payload[collectionConstants.USER]=collection.user.username,payload[collectionConstants.PASSWORD]=collection.user.password,payload[collectionConstants.TABLE_NAME]=collection.tableName,payload[collectionConstants.IS_CONNECTION]=!0,payload[collectionConstants.IS_ENCRYPTED]=void 0!==collection.encryption?collection.encryption+"":"false","DB2 System i"===collection.dbType&&(payload[collectionConstants.SCHEMA]=collection.schema,payload[collectionConstants.LIBRARY]=collection.library,payload[collectionConstants.CATALOG]=collection.catalog));var coll=new Collection(payload),promise=coll.create();loadDisplay.addDisplay(promise,"Creating "+collection.type+" collection..."),promise.then(function(){$uibModalInstance.close(collection.collectionName)},function(data){$scope.submitDisabled=!1,$log.debug("/collectionmanagement failed with: "+data),$scope.errorMessage="Failed to create connection: "+data})},$scope.updateConnection=function(){$uibModalInstance.close($scope.collection)};var setDefaults=function(dbName){$scope.newCollection.port=$scope.DBTypes[dbName].defaultPort,$scope.locationLabel=$scope.DBTypes[dbName].locationLabel,$scope.encryptionSupported=$scope.DBTypes[dbName].encryption};$scope.isValidUpload=function(){$timeout(function(){"text/csv"===$scope.fileType||"application/json"==$scope.fileType?$scope.validFile=!0:$scope.validFile=!1})},$scope.importCollection=function(collection){$scope.complete=!1,$scope.error=!1,$scope.importing=!0;var email=DevUser.getLoggedUser(),formData=new FormData,endpoint="/batch/import?collectionName="+collection.collectionName+"&url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret();formData.append("theFile",$scope.file),$http.post("/console-api"+endpoint,formData,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(data){$scope.importing=!1,$scope.complete=!0,$uibModalInstance.close(collection.collectionName)}).error(function(err){$scope.status=err,$scope.importing=!1,$scope.error=!0})},$scope.changeState=function(state){$scope.newCollection.state=state},$scope.dbChange=function(dbType){$scope.DBTypes[dbType].supported?($scope.dbError=null,this.newCollectionForm.dbTypes.$setValidity("valid db",!0)):($scope.dbError=dbType+" is currently only supported in on premise installations.",this.newCollectionForm.dbTypes.$setValidity("valid db",!1)),setDefaults(dbType)},$scope.close=function(){$uibModalInstance.dismiss("cancel")},$scope.isConnection=function(){return""!=$scope.collection.dbType}}]),app.controller("collectionPropsCtrl",["$scope","$uibModalInstance","currentCollection","errorDialog","loadDisplay","roles","$q","$uibModal","adminCalls","confirmDialog","consoleConstants","collectionConstants",function($scope,$uibModalInstance,currentCollection,errorDialog,loadDisplay,roles,$q,$uibModal,adminCalls,confirmDialog,consoleConstants,collectionConstants){$scope.collection=angular.copy(currentCollection),$scope.section="props",$scope.roles=[],$scope.newRoles=[];$scope.emptyName=!1,$scope.matchingPassword=!0,$scope.collectionConstants=collectionConstants,$scope.newPassword={password:""},$scope.checkPassword=function(){$scope.matchingPassword=$scope.collection.password===$scope.collection.passwordCheck},$scope.checkLength=function(collectionName){$scope.emptyName=void 0===collectionName||0===collectionName.length},$scope.changeSection=function(newSection){$scope.section=newSection};var getTotal=function(){var promise=$scope.collection.getTotalForQuery(0,0,null,null);loadDisplay.addDisplay(promise,"Loading Total...","blockModal"),promise.then(function(data){$scope.totalItems=data||0},function(err){errorDialog.show("Error!","Unable to retrieve total items for "+$scope.collection.name,err)})};$scope.applyChanges=function(){if(""!==$scope.newPassword.password){$scope.collection.password=$scope.newPassword.password;return void $scope.collection.update().then(function(data){$uibModalInstance.dismiss()},function(err){errorDialog.show("Error!","Unable to update collection with new password",err)})}var promises=[];$scope.roles.forEach(function(role){promises.push(roles.updateRoleCollections(role.id,angular.copy(role.collections)))});var promisesWatch=$q.all(promises);if(loadDisplay.addDisplay(promisesWatch,"Updating existing roles...","blockModal"),promisesWatch.then(function(){},function(err){errorDialog.show("Error!","Unable to update existing roles",err)}),$scope.newRoles.length>0){var newPromises=[];$scope.newRoles.forEach(function(newRole){newPromises.push(roles.addRoleForCollection(newRole,$scope.collection))});var newPromisesWatch=$q.all(newPromises);loadDisplay.addDisplay(newPromisesWatch,"Saving new roles...","blockModal"),newPromisesWatch.then(function(){$uibModalInstance.dismiss()},function(err){errorDialog.show("Error!","Unable to save new roles",err)})}else $uibModalInstance.dismiss()},$scope.deleteCollection=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.collection.name+"?'").result.then(function(){var promise=$scope.collection.delete();promise.then(function(){$scope.collection.deleted=!0,$uibModalInstance.close($scope.collection)}),loadDisplay.addDisplay(promise,"Deleting '"+$scope.collection.name+"'...")})},$scope.cancel=function(){$uibModalInstance.dismiss()};var getRoles=function(){var allPromise=roles.getAllRoles();loadDisplay.addDisplay(allPromise,"Retrieving all roles...","blockModal"),allPromise.then(function(roles){$scope.roles=roles},function(err){errorDialog.show("Error!","Unable to retrieve all roles",err)})},securityWatch=$scope.$watch("section",function(newVal,oldVal){"security"===newVal&&(getRoles(),securityWatch())},!0);$scope.filterRoles=function(){return $scope.roles.forEach(function(role){if(role.collections.length>0)for(var i=0;i<role.collections.length;i++){if(role.collections[i].itemInfo.id===$scope.collection.collectionID){role.collIdx=i;break}role.collIdx=-1}else role.collIdx=-1}),$scope.roles},getTotal()}]),angular.module("adminPortal").controller("confirmDialogCtrl",["$uibModalInstance","$scope","message","hideCancel",function($uibModalInstance,$scope,message,hideCancel){$scope.message=message,$scope.hideCancel=hideCancel,$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.confirm=function(){$uibModalInstance.close()}}]),app.controller("devicePropsCtrl",["$scope","$q","$uibModalInstance","loadDisplay","errorDialog","roles","toastr",function($scope,$q,$uibModalInstance,loadDisplay,errorDialog,roles,toastr){$scope.roles=[],$scope.newRoles=[];var getRoles=function(){var rolePromise=roles.getAllRoles();loadDisplay.addDisplay(rolePromise,"Retrieving roles..","blockModal"),rolePromise.then(function(roles){$scope.roles=roles},function(err){errorDialog.show("Error!","Unable to retrieve all roles",err)})};$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.applyChanges=function(){var promises=[];$scope.roles.forEach(function(role){promises.push(roles.updateRoleDevices(role.id,angular.copy(role.devices)))});var promisesWatch=$q.all(promises);if(loadDisplay.addDisplay(promisesWatch,"Updating existing roles...","blockModal"),promisesWatch.then(function(){toastr.success("Roles updated","Success")},function(err){errorDialog.show("Error!","Unable to update existing roles",err)}),$scope.newRoles.length>0){var newPromises=[];$scope.newRoles.forEach(function(newRole){newPromises.push(roles.addRoleForDevice(newRole))}),newPromisesWatch=$q.all(newPromises),loadDisplay.addDisplay(newPromisesWatch,"Saving new roles...","blockModal"),newPromisesWatch.then(function(){toastr.success("New role saved","Success")},function(err){errorDialog.show("Error!","Unable to save new roles",err)})}else $uibModalInstance.dismiss()},$scope.filterRoles=function(){return $scope.roles.forEach(function(role,index){role.devices?role.collIdx=index:role.collIdx=-1}),$scope.roles},getRoles()}]),app.controller("disabledModalCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.close=function(){$uibModalInstance.close()}}]),app.controller("dispDeviceRolesCtrl",["$scope","$uibModalInstance","roles","device","toastr","loadDisplay","errorDialog","confirmDialog",function($scope,$uibModalInstance,roles,device,toastr,loadDisplay,errorDialog,confirmDialog){var originalRoles=[];$scope.deviceName=device.name,$scope.deviceRoles=[],$scope.allRoles=[],$scope.section="security";var allRolesPromise=roles.getAllRoles();allRolesPromise.then(function(allRoles){for(var i=0,len=allRoles.length;i<len;i++)$scope.allRoles.push(allRoles[i])}),loadDisplay.addDisplay(allRolesPromise,"Gathering roles...");var deviceRolesPromise=roles.getDeviceRoles(device.name);deviceRolesPromise.then(function(deviceRoles){for(var i=0,len=deviceRoles.length;i<len;i++)$scope.deviceRoles.push(deviceRoles[i]);originalRoles=angular.copy($scope.deviceRoles)}),loadDisplay.addDisplay(deviceRolesPromise,"Gathering device roles..."),$scope.close=function(){for(var changes={add:[],delete:[]},i=0,len=$scope.deviceRoles.length;i<len;i++)inOrig($scope.deviceRoles[i].ID)||changes.add.push($scope.deviceRoles[i].ID);for(var i=0,len=originalRoles.length;i<len;i++)containsRole("deviceRoles",originalRoles[i].ID)||changes.delete.push(originalRoles[i].ID);$uibModalInstance.close(changes)};var inOrig=function(roleId){for(var i=0,len=originalRoles.length;i<len;i++)if(originalRoles[i].ID===roleId)return!0;return!1},containsRole=function(collection,roleId){var key=collection,id="ID";"all"===collection&&(key="allRoles",id="id");for(var i=0,len=$scope[key].length;i<len;i++)if($scope[key][i][id]===roleId)return!0;return!1};$scope.changeSection=function(newSection){$scope.section=newSection},$scope.removeRole=function(role){$scope.deviceRoles.splice($scope.deviceRoles.indexOf(role),1)},$scope.addRole=function(role){void 0===role?toastr.warning("Please select a valid role"):containsRole("deviceRoles",role.id)?toastr.error(device.name+" already has the "+role.name+" role","Error"):(role.ID=role.id,role.Name=role.name,$scope.deviceRoles.push(role))},$scope.generateKeys=function(count){device.generateKeys(count).then(function(data){confirmDialog.show(data,!0)},function(err){errorDialog.show("Error!","Unable to generate new keys for device",err)})},$scope.rotateKeys=function(){device.rotateKeys().then(function(data){confirmDialog.show(data.response,!0)},function(err){errorDialog.show("Error!","Unable to rotate keys for device",err)})},$scope.deleteKeys=function(){device.deleteKeys().then(function(data){confirmDialog.show("Successfully deleted all keys",!0)},function(err){errorDialog.show("Error!","Unable to delete keys for device",err)})}}]),app.controller("dispPermListsCtrl",["$scope","$uibModalInstance","role","list","title","permission","resource","roleName","adminPortalUtils","adminCalls","codes","currentSystem","CollectionList","consoleConstants","DashboardList","DeviceList",function($scope,$uibModalInstance,role,list,title,permission,resource,roleName,adminPortalUtils,adminCalls,codes,currentSystem,CollectionList,consoleConstants,DashboardList,DeviceList){var PERMISSION_IDENTIFIERS=consoleConstants.internal.PERMISSION_IDENTIFIERS;$scope.role=angular.copy(role),$scope.list=angular.copy(list),$scope.title=angular.copy(title),$scope.roleName=angular.copy(roleName);var list,config={};switch(permission){case PERMISSION_IDENTIFIERS.SERVICES:$scope.optionsCall=codes.getServices;break;case PERMISSION_IDENTIFIERS.COLLECTIONS:config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),config[consoleConstants.internal.SYSTEM_SECRET]=currentSystem.getSystemSecret(),list=new CollectionList(config),$scope.optionsCall=list.fetch.bind(list);break;case PERMISSION_IDENTIFIERS.PORTALS:config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),list=new DashboardList(config),$scope.optionsCall=list.fetch.bind(list);break;case PERMISSION_IDENTIFIERS.DEVICES:config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),list=new DeviceList(config),$scope.optionsCall=list.fetch.bind(list);break;case PERMISSION_IDENTIFIERS.SYSTEM_LEVEL:config[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID();break;default:$scope.optionsCall=null}$scope.editable=!1,$scope.role.users||($scope.role.users={}),$scope.save=function(){$scope.list&&adminPortalUtils.wipeEmptyCollections($scope.list),$uibModalInstance.close({list:$scope.list,type:$scope.title,role:$scope.role})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("dispUserRolesCtrl",["$scope","$uibModalInstance","userID","roles","userName","users","toastr","$uibModal",function($scope,$uibModalInstance,userID,roles,userName,users,toastr,$uibModal){roles.getAllRoles().then(function(allRoles){$scope.allRoles=allRoles}),users.getUserRoles(userID).then(function(userRoles){var userRolesArray=[];for(var i in userRoles)userRolesArray.push(userRoles[i].ID);$scope.userRoles=userRolesArray}),$scope.userName=userName,$scope.userHasRole=!1,$scope.section="security",$scope.errorMessage="";var _NewRoles=[],_RemovedRoles=[];$scope.close=function(){$uibModalInstance.close({added:_NewRoles,removed:_RemovedRoles})},$scope.addRole=function(newRoleId){-1==$scope.userRoles.indexOf(newRoleId)?($scope.errorMessage="",_NewRoles.push(newRoleId),$scope.userRoles.push(newRoleId)):$scope.errorMessage="That role has already been added"},$scope.removeRole=function(removedRoleId){var newIndex=_NewRoles.indexOf(removedRoleId);-1!=newIndex?_NewRoles.splice(newIndex,1):_RemovedRoles.push(removedRoleId);var index=$scope.userRoles.indexOf(removedRoleId);$scope.userRoles.splice(index,1),$scope.errorMessage=""},$scope.validateRole=function(roleName){for(var match=!1,i=0;i<$scope.userRoles.length;i++){if($scope.userRoles[i]===roleName.name){toastr.error($scope.userName+" already has the "+roleName.name+" role","Error!"),$scope.userHasRole=!0,match=!0;break}match=!1}if(!match)return toastr.clear(),$scope.userHasRole=!1},$scope.getRoleName=function(roleId){var role=roles.getRole(roleId);if(role)return role.name},$scope.changeSection=function(newSection){$scope.section=newSection},$scope.isRoleEmpty=function(newRole){var isEmpty=!0;for(var key in newRole)isEmpty=!1;return void 0==newRole||null==newRole||isEmpty},$scope.exportUser=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return users},modalConfig:function(){return{modalTitle:[$scope.userName,"user"],singleItemExportID:$scope.userName}}}})}}]),app.controller("downloadFileCtrl",["$scope","$uibModalInstance","fileUrl","name",function($scope,$uibModalInstance,fileUrl,name){$scope.fileUrl=fileUrl,$scope.name=name,$scope.closeModal=function(){$uibModalInstance.close()}}]),app.controller("editDashboardCtrl",["$scope","$q","$uibModalInstance","resolvedDash","confirmDialog","dashboardConstants","roles","loadDisplay","errorDialog","toastr","$uibModal",function($scope,$q,$uibModalInstance,resolvedDash,confirmDialog,dashboardConstants,roles,loadDisplay,errorDialog,toastr,$uibModal){$scope.section="props",$scope.dashboardConstants=dashboardConstants,$scope.dash=angular.copy(resolvedDash),$scope.roles=[],$scope.newRoles=[],$scope.changeSection=function(sec){$scope.section=sec},$scope.delete=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.dash[dashboardConstants.NAME]+"'?").result.then(function(){var promise=$scope.dash.delete();loadDisplay.addDisplay(promise,"Deleting '"+$scope.dash[dashboardConstants.NAME]+"'..."),promise.then(function(){$scope.dash.deleted=!0,$uibModalInstance.close($scope.dash)},function(err){errorDialog.show("Error!","Unable to delete portal",err)})})};var saveDash=function(dash){var promise=dash.update();loadDisplay.addDisplay(promise,"Saving '"+dash[dashboardConstants.NAME]+"'..."),promise.then(function(){$uibModalInstance.close(dash)},function(err){errorDialog.show("Error!","Unable to save portal",err)})},dashChanged=function(dash){return dash[dashboardConstants.DESCRIPTION]!==resolvedDash[dashboardConstants.DESCRIPTION]};$scope.applyChanges=function(){var promises=[];if($scope.roles.forEach(function(role){promises.push(roles.updateRoleDashboards(role.id,angular.copy(role.portals)))}),promises.length>0){var promisesWatch=$q.all(promises);loadDisplay.addDisplay(promisesWatch,"Updating existing roles...","blockModal"),promisesWatch.then(function(){dashChanged($scope.dash)?saveDash($scope.dash):(toastr.success("Portal roles saved","Success"),roles.getAllRoles(),$uibModalInstance.dismiss())},function(err){errorDialog.show("Error!","Unable to update existing roles",err),$uibModalInstance.dismiss()})}else dashChanged($scope.dash)?saveDash($scope.dash):$uibModalInstance.dismiss()},$scope.cancel=function(){$uibModalInstance.dismiss()};var securityWatch=$scope.$watch("section",function(newVal,oldVal){"security"===newVal&&(getRoles(),securityWatch())},!0),getRoles=function(){var allPromise=roles.getAllRoles();loadDisplay.addDisplay(allPromise,"Retrieving all roles...","blockModal"),allPromise.then(function(roles){$scope.roles=roles},function(err){errorDialog.show("Error!","Unable to retrieve all roles",err)})},dashNameKey=dashboardConstants.NAME;$scope.filterRoles=function(){return $scope.roles.forEach(function(role){if(role.portals.length>0)for(var i=0;i<role.portals.length;i++){if(role.portals[i].itemInfo.name===$scope.dash[dashNameKey]){role.collIdx=i;break}role.collIdx=-1}else role.collIdx=-1}),$scope.roles},$scope.exportDashboard=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.dash},modalConfig:function(){return{modalTitle:[$scope.dash.name,"portal"]}}}})}}]),app.controller("editDeveloperCtrl",["$scope","devToEdit","consoleConstants","confirmDialog","developers","$uibModalInstance","errorDialog","loadDisplay","$q","System","toastr",function($scope,devToEdit,consoleConstants,confirmDialog,developers,$uibModalInstance,errorDialog,loadDisplay,$q,System,toastr){$scope.developer=angular.copy(devToEdit),$scope.devSystems=[],$scope.consoleConstants=consoleConstants,function(){toastr.options={timeOut:0,extendedTimeOut:0,positionClass:"toast-bottom-right"};for(var promises=[],systemConfig={},i=0,len=$scope.developer.systems.length;i<len;i++)systemConfig[consoleConstants.internal.SYSTEM_KEY]=$scope.developer.systems[i],promises.push(new System(systemConfig).getStatus().then(function(data){return data}));var toastInstace;promises.length>0&&(toastInstace=toastr.info("Loading systems...")),$q.all(promises).then(function(data){$scope.devSystems=data,toastr.clear(toastInstace)})}(),$scope.toggleDevStatus=function(){var toggleVerb;toggleVerb=$scope.developer[consoleConstants.internal.ENABLED]?"disable":"enable",confirmDialog.show("Are you sure you want to "+toggleVerb+" this user?").result.then(function(){var updatedDeveloper=angular.copy($scope.developer);updatedDeveloper[consoleConstants.internal.ENABLED]=!updatedDeveloper[consoleConstants.internal.ENABLED],updatedDeveloper[consoleConstants.external.DISABLED]=!updatedDeveloper[consoleConstants.internal.ENABLED],$scope.updateDeveloper(updatedDeveloper)})},$scope.updateDeveloper=function(dev){var promise=developers.updateDeveloper(dev);loadDisplay.addDisplay(promise,"Updating developer..."),promise.then(function(){$uibModalInstance.close(dev)},function(err){errorDialog.show("Unable to toggle developer status",err)})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("editPluginCtrl",["$scope","$q","$uibModalInstance","resolvedPlugin","confirmDialog","pluginConstants","loadDisplay","errorDialog","$uibModal",function($scope,$q,$uibModalInstance,resolvedPlugin,confirmDialog,pluginConstants,loadDisplay,errorDialog,$uibModal){$scope.pluginConstants=pluginConstants,$scope.plugin=angular.copy(resolvedPlugin),$scope.delete=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.plugin[pluginConstants.NAME]+"'?").result.then(function(){var promise=$scope.plugin.delete();loadDisplay.addDisplay(promise,"Deleting '"+$scope.plugin[pluginConstants.NAME]+"'..."),promise.then(function(){$scope.plugin.deleted=!0,$uibModalInstance.close($scope.plugin)},function(err){errorDialog.show("Error!","Unable to delete plugin",err)})})},$scope.applyChanges=function(){var promise=$scope.plugin.update();loadDisplay.addDisplay(promise,"Updating '"+$scope.plugin[pluginConstants.NAME]+"'..."),promise.then(function(){$uibModalInstance.close($scope.plugin)},function(err){errorDialog.show("Error!","Unable to update plugin",err)})},$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.exportPlugin=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.plugin},modalConfig:function(){return{modalTitle:[$scope.plugin.name,"plugin"]}}}})}}]),app.controller("errorDialogCtrl",["$scope","$uibModalInstance","title","message","err","$sce",function($scope,$uibModalInstance,title,message,err,$sce){if($scope.title=title,$scope.messageIsJson=!1,$scope.errorIsJson=!1,angular.isDefined(message)&&null!==message)try{$scope.jsonMessage=JSON.parse(message),$scope.messageIsJson=!0}catch(e){"string"!=typeof message&&(message=JSON.stringify(message)),$scope.htmlMessage=$sce.trustAsHtml(message)}if(angular.isDefined(err)&&null!==err)try{$scope.jsonError=JSON.parse(err),$scope.errorIsJson=!0}catch(e){$scope.htmlErr=$sce.trustAsHtml(JSON.stringify(err))}$scope.closeModal=function(){$uibModalInstance.close()}}]),app.controller("ExportCtrl",["$scope","githubPageManager","githubService","loadDisplay","$localStorage","$uibModal","platformRequest","$http","DevUser","$state","$uibModalInstance","resolvedAssetModalInfo","resolvedHeader",function($scope,githubPageManager,githubService,loadDisplay,$localStorage,$uibModal,platformRequest,$http,DevUser,$state,$uibModalInstance,resolvedAssetModalInfo,resolvedHeader){$scope.header=resolvedHeader,githubPageManager.isGithubTokenInStorage()||githubPageManager.setPromptType(githubPageManager.PROMPT_TYPES.EXPORT),$scope.exportToGithub=function(){var gs=new githubService,token=$localStorage.github_access_token;if(token){var promise=gs.verifyToken(token);loadDisplay.addDisplay(promise,"Verifying user token..."),promise.then(function(data){200==data.status?openExportModal(!0):openAuthenticateGithubModal()},function(error){console.log(error),openAuthenticateGithubModal()})}else openAuthenticateGithubModal()},$scope.exportLocally=function(){openExportModal(!1)};var openExportModal=function(isGitHub){$uibModalInstance.dismiss(),resolvedAssetModalInfo.resolve.isGitHubExport=function(){return!!isGitHub},$uibModal.open(resolvedAssetModalInfo)},openAuthenticateGithubModal=function(){$uibModal.open({templateUrl:"partials/modals/routeToGithub.html",controller:"routeToGithubCtrl"})};$scope.cancel=$uibModalInstance.dismiss}]),app.controller("exportResourceCtrl",["$scope","$uibModalInstance","resourceToExport","modalConfig","loadDisplay","adminCalls","currentSystem","consoleConstants","errorDialog",function($scope,$uibModalInstance,resourceToExport,modalConfig,loadDisplay,adminCalls,currentSystem,consoleConstants,errorDialog){$scope.resourceToExport=resourceToExport,$scope.modalConfig=modalConfig,$scope.fileType="",$scope.complete=!1,$scope.fileAddress="",$scope.control={shouldExportItemId:!1,shouldDownloadFilteredSet:!1},$scope.fileOptions=["JSON"],$scope.exportResource=function(fileType,shouldExportItemId,shouldDownloadFilteredSet){$scope.complete=!1;var options={fileType:fileType,shouldExportItemId:shouldExportItemId,shouldDownloadFilteredSet:shouldDownloadFilteredSet};$scope.modalConfig.singleItemExportID&&(options.singleItemExportID=$scope.modalConfig.singleItemExportID);var promise=$scope.resourceToExport.export(options);promise.then(function(data){$scope.complete=!0,$scope.fileAddress=data.status},function(err){errorDialog.show("Error!","Unable to export "+$scope.modalConfig.modalTitle[1]||"",err)}),loadDisplay.addDisplay(promise,"Exporting '"+$scope.modalConfig.modalTitle[0]+" "+modalConfig.modalTitle[1]||"'...")},$scope.closeModal=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}]),app.controller("exportSystemCtrl",["DirecTree","toastr","loadDisplay","$window","DevUser","$localStorage","$http","$scope","$uibModalInstance","errorDialog","$log","resolvedSystem","githubService","$state","$uibModal","platformRequest","isGitHubExport","consoleConstants","$q",function(DirecTree,toastr,loadDisplay,$window,DevUser,$localStorage,$http,$scope,$uibModalInstance,errorDialog,$log,resolvedSystem,githubService,$state,$uibModal,platformRequest,isGitHubExport,consoleConstants,$q){function makeRepoNameSafe(name){return name.toLowerCase().replace(/[\s_]+/g,"-").replace(/[^a-zA-Z0-9-]+/g,"")}function buildDirectoryStructure(){$scope.directory=new DirecTree,$scope.directory.buildDirecTreeUsingFilePathArray(systemData.listOfFiles)}function getChildrenOfDirectory(path){return $scope.directory.getChildrenFromPath(path)}function getContentsOfSelectedSystem(){var root=getRootFrom(systemData.listOfFiles);$scope.subdirectories=getChildrenOfDirectory(root),$scope.root=$scope.directory.GetRoot(),$scope.SystemName=root}function getRootFrom(listOfFiles){if(0===listOfFiles.length)return console.log("Failed to find root: "+JSON.stringify(listOfFiles)),"";var firstFile=listOfFiles[0],splitByFolder=firstFile.split("/");return 0===splitByFolder.length&&console.log("Fewer levels found in first path: "+firstFile),splitByFolder[0]}function getListOfCheckedFiles(systemName){return $scope.directory.getSelectedValuesRec(systemName,new Array)}function showFormTab(){$scope.displayContent=""}function showSystemStructureTab(){buildDirectoryStructure(),getContentsOfSelectedSystem(),$scope.displayContent="Assets"}function createTagsList(){return $scope.repo.Tags.slice().concat($scope.repo.protocols,$scope.repo.things,$scope.repo.domains,$scope.repo.gateways,$scope.repo.prog_lang,$scope.repo.clouds)}function exportToGithub(){var deferred=$q.defer(),promise=$http({url:"/console-api/batch/export/github",method:"POST",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform(),githubOauthAccessToken:$localStorage.github_access_token},data:{developerEmail:DevUser.getLoggedUser(),listOfAssets:getListOfCheckedFiles($scope.SystemName),refSystemName:$scope.SystemName,repoName:$scope.repo.Name,systemDescription:$scope.repo.Description,refDirName:systemData.dirName,tags:createTagsList(),metadata:{name:$scope.repo.Name,version:$scope.repo.version,description:$scope.repo.Description,keywords:$scope.repo.Tags,prog_lang:$scope.repo.prog_lang,clouds:$scope.repo.clouds,things:$scope.repo.things,domains:$scope.repo.domains,protocols:$scope.repo.protocols,gateways:$scope.repo.gateways,author:{email:DevUser.getLoggedUser()},license:$scope.repo.license,image_url:$scope.repo.image_url,private:!1}}});return loadDisplay.addDisplay(promise,"Exporting System to github..."),promise.then(function(data){$scope.gitHubRepoLink=data.data.repoURL,platformRequest.deleteZipFromGoPlatform(systemData.dirName),deferred.resolve()},function(error){errorDialog.show("Error!",error.data.error),deferred.reject(error)}),deferred.promise}function exportLocally(){var deferred=$q.defer(),promise=$http({url:"/console-api/batch/export/filesystem",method:"POST",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform()},data:{developerEmail:DevUser.getLoggedUser(),listOfAssets:getListOfCheckedFiles($scope.SystemName),refSystemName:$scope.SystemName,repoName:"local",systemDescription:$scope.repo.Description,refDirName:systemData.dirName,tags:createTagsList(),metadata:{name:$scope.SystemName,version:$scope.repo.version,description:$scope.repo.Description,keywords:$scope.repo.Tags,prog_lang:$scope.repo.prog_lang,clouds:$scope.repo.clouds,things:$scope.repo.things,domains:$scope.repo.domains,protocols:$scope.repo.protocols,gateways:$scope.repo.gateways,author:{email:DevUser.getLoggedUser()},license:$scope.repo.license,image_url:$scope.repo.image_url,private:!1}}});return loadDisplay.addDisplay(promise,"Exporting System to File System..."),promise.then(function(data){$scope.fileAddress=data.data.zipAddress,platformRequest.deleteZipFromGoPlatform(systemData.dirName),deferred.resolve()},function(error){console.log(error),errorDialog.show("Error!","Unable to export system to File System"),deferred.reject(error)}),deferred.promise}var DEFAULT_TAGS=["clearblade","iot","platform"],DEFAULT_IMAGE_URL="https://docs.clearblade.com/v/3/static/img/default_package.png",DEFAULT_LICENSE="MIT";$scope.SHOW_FORM="showForm",$scope.SHOW_SYSTEM_STRUCTURE="showSystemStructure",$scope.SHOW_EXPORT_SUCCESS="showExportSuccess",$scope.pages=[{name:$scope.SHOW_SYSTEM_STRUCTURE,show:showSystemStructureTab},{name:$scope.SHOW_FORM,show:showFormTab},{name:$scope.SHOW_EXPORT_SUCCESS,show:function(){}}],$scope.isAdvancedTagsSectionCollapsed=!0,$scope.isGitHubExport=isGitHubExport,$scope.subdirectories=null,$scope.directory=new DirecTree;var systemName=resolvedSystem[consoleConstants.external.SYSTEM_NAME];$scope.repo={Name:makeRepoNameSafe(systemName),Description:resolvedSystem[consoleConstants.external.SYSTEM_DESCRIPTION],Tags:DEFAULT_TAGS,image_url:DEFAULT_IMAGE_URL,version:"",license:DEFAULT_LICENSE,protocols:[],things:[],domains:[],gateways:[],prog_lang:[],clouds:[]},$scope.displayContent="",$scope.setForm=function(form){$scope.myForm=form};var systemData;$scope.pageIndex=0;var promise=resolvedSystem.initializeExport();loadDisplay.addDisplay(promise,"Loading '"+systemName+"'..."),promise.then(function(data){systemData=data,$scope.pages[$scope.pageIndex].show()},function(err){errorDialog.show("Error!","Unable to export system",err)}),$scope.Next=function(){$scope.pages[$scope.pageIndex].name===$scope.SHOW_FORM&&$scope.myForm.$invalid||($scope.pageIndex++,$scope.pages[$scope.pageIndex].show())},$scope.Previous=function(){$scope.pageIndex--},$scope.export=function(){var promise;promise=$scope.isGitHubExport?exportToGithub():exportLocally(),promise.then($scope.Next)},$scope.cancel=function(){platformRequest.deleteZipFromGoPlatform(systemData.dirName),$uibModalInstance.dismiss()}}]),app.controller("failureDetailCtrl",["$scope","$uibModalInstance","failure",function($scope,$uibModalInstance,failure){$scope.failure=failure,$scope.retryFailure=function(){$uibModalInstance.close({retry:!0})},$scope.discardFailure=function(){$uibModalInstance.close({discard:!0})},$scope.closeModal=function(){$uibModalInstance.dismiss()}}]),app.controller("forgetPasswordCtrl",["$scope","$uibModalInstance","$http","loadDisplay","DevUser",function($scope,$uibModalInstance,$http,loadDisplay,DevUser){$scope.emailSubmitted=!1,$scope.errorMsg="",$scope.emailNewPassword=function(email){var promise=DevUser.forgotPassword(email);loadDisplay.addDisplay(promise,"Reseting Password"),promise.then(function(response){$scope.emailSubmitted=!0},function(errorMsg){$scope.errorMsg=errorMsg})},$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.close=function(){$uibModalInstance.close()}}]),app.controller("importFileCtrl",["$scope","$http","$uibModalInstance","currentSystem","$timeout","dataType","$localStorage","platformRequest","$rootScope",function($scope,$http,$uibModalInstance,currentSystem,$timeout,dataType,$localStorage,platformRequest,$rootScope){$scope.dataType=dataType,$scope.complete=!1,$scope.error=!1,$scope.status="",$scope.importing=!1,$scope.appID=currentSystem.getSystemID(),$scope.fileName="",$scope.collectionName="",$scope.selected=!1;var supportedTypes=["application/x-rar-compressed","application/x-7z-compressed","application/x-dar","application/x-gtar","application/zip","application/x-tar"];$scope.isSupported=function(type){return supportedTypes.indexOf(type)>-1},$scope.importFile=function(file,collName){$scope.complete=!1,$scope.error=!1,$scope.importing=!0;var formData=new FormData;if(formData.append("theFile",file),"collection"!==$scope.dataType)return $scope.status="Only collection import currently supported",$scope.importing=!1,void($scope.error=!0);var endpoint="/batch/import?collectionName="+collName+"&appID="+$scope.appID+"&url="+platformRequest.GetUrl()+"&devToken="+$localStorage.cb_platform_dev_token;$http.post("/console-api"+endpoint,formData,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(data){$rootScope.$emit("refresh collections"),$scope.importing=!1,$scope.complete=!0,$timeout(function(){$uibModalInstance.close()},1e3)}).error(function(err){$scope.status=err,$scope.importing=!1,$scope.error=!0})},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}]),app.controller("importSystemCtrl",["CbHeader","githubService","DirecTree","currentSystem","toastr","loadDisplay","$window","DevUser","$localStorage","$http","$scope","$uibModalInstance","errorDialog","$log","consoleConstants","systemList","platformRequest",function(CbHeader,githubService,DirecTree,currentSystem,toastr,loadDisplay,$window,DevUser,$localStorage,$http,$scope,$uibModalInstance,errorDialog,$log,consoleConstants,systemList,platformRequest){$scope.newSystem={},$scope.consoleConstants=consoleConstants,$scope.showNewSystem=!0,$scope.isopen=!1,$scope.subdirectories=null,$scope.status={isFirstOpen:!0,isFirstDisabled:!1},$scope.accordionArray=[],$scope.directory=new DirecTree,$scope.urlFormat="https://github.com/username/repository-name",$scope.fetchedSystem={isSystemFetched:!1,branchName:"master",structure:{}};var gs=new githubService,cs=currentSystem.getSystem();0===Object.keys(cs).length&&cs.constructor===Object||null==cs.name?$scope.displayContent="New system":$scope.displayContent=currentSystem.getName();var constructSystemDownloadUrl=function(systemUrl){return(systemUrl=gs.trimBranchFromUrl(systemUrl))+"/archive/"+$scope.fetchedSystem.branchName+".zip"},constructSystemNameForDirecTreeNode=function(systemName){return systemName+"-"+$scope.fetchedSystem.branchName},getChildrenOfDirectory=function(path){return $scope.directory.getChildrenFromPath(path)},buildDirectoryStructure=function(systemStructure,systemName){var trees=systemStructure.tree;systemName=constructSystemNameForDirecTreeNode(systemName);for(var i=0;i<trees.length;i++)trees[i].path=systemName+"/"+trees[i].path;return $scope.directory.insertNode(systemName,"tree"),$scope.directory.buildDirecTree(trees),systemName},importIntoNewSystem=function(systemUrl,orgSystemName){systemUrl=constructSystemDownloadUrl(systemUrl);var importin=new Array;systemname=constructSystemNameForDirecTreeNode(orgSystemName);var listOfFilesToImport=$scope.directory.getSelectedValuesRec(systemname,importin),promise=$http({url:"/console-api/importAssetsIntoNewSystem",method:"POST",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform()},data:{repoURL:systemUrl,developerEmail:DevUser.getLoggedUser(),importFullSystem:!1,importIntoExistingSystem:!1,listOfFilesToImport:listOfFilesToImport,systemName:orgSystemName}});loadDisplay.addDisplay(promise,"Importing System..."),promise.then(function(data){$uibModalInstance.close(),toastr.success("System Successfully imported","Success")},function(error){var errorstring=error.status+": "+error.statusText;errorDialog.show("Error!","Unable to import Clearblade System ",errorstring)})},importIntoExistingSystem=function(systemUrl,systemName){systemUrl=constructSystemDownloadUrl(systemUrl),systemname=constructSystemNameForDirecTreeNode(systemName);var importin=new Array,listOfFilesToImport=$scope.directory.getSelectedValuesRec(systemname,importin),promise=$http({url:"/console-api/importAssetsIntoExistingSystem",method:"POST",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform()},data:{repoURL:systemUrl,developerEmail:DevUser.getLoggedUser(),importFullSystem:!1,importIntoExistingSystem:!0,listOfFilesToImport:listOfFilesToImport,system_key:currentSystem.getSystemID(),system_secret:currentSystem.getSystemSecret()}}),currSysName=currentSystem.getName();loadDisplay.addDisplay(promise,"Importing Assets into "+currSysName),promise.then(function(data){$uibModalInstance.close(),toastr.success("Assets Successfully imported into "+currSysName,"Success")},function(error){var errorstring=error.status+": "+error.statusText;errorDialog.show("Error!","Unable to Import, not a valid Clearblade System ",errorstring)})};$scope.importSystem=function(systemUrl,systemName){""==cs.getSystemKey()?importIntoNewSystem(systemUrl,systemName):importIntoExistingSystem(systemUrl,systemName)},$scope.fetchSystem=function(url){var matchTrailingSlashes=/(\/)*$/;url=url.replace(matchTrailingSlashes,"");var systemName=gs.getRepoName(url);$scope.fetchedSystem.githubRepoUserName=gs.getUserName(url),$scope.fetchedSystem.branchName=gs.getBranchName(url),$scope.fetchedSystem.url=url,$scope.fetchedSystem.name=systemName;var promise=gs.getSystemStructure(url);loadDisplay.addDisplay(promise,"Getting System from github..."),promise.then(function(data){var systemStructure=data.data,systemDirName=buildDirectoryStructure(systemStructure,systemName);$scope.fetchedSystem.structure=getChildrenOfDirectory(systemDirName),$scope.fetchedSystem.isSystemFetched=!0},function(error){errorDialog.show("Error!","Unable to get system structure ")})},$scope.newSystem.generateDeviceToken=function(event){event.preventDefault(),$scope.newSystem[consoleConstants.external.EDGE.TOKEN]=systemList.generateUniqueToken()},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),angular.module("adminPortal").controller("messageHistoryCtrl",["$uibModalInstance","$scope","topic","errorDialog","loadDisplay","messaging","confirmDialog",function($uibModalInstance,$scope,topic,errorDialog,loadDisplay,messaging,confirmDialog){function isInt(num){return num%1==0}$scope.title=topic;var defaultStartDate=new Date;defaultStartDate.setDate(defaultStartDate.getDate()-1),$scope.params={since:{day:new Date,time:new Date},start:{day:defaultStartDate,time:defaultStartDate},stop:{day:new Date,time:new Date},count:25},$scope.isOpen={since:!1,start:!1,stop:!1},$scope.filterTypes={TIMESTAMP:"TIMESTAMP",TIMEFRAME:"TIMEFRAME"},$scope.filterType=$scope.filterTypes.TIMESTAMP,$scope.messageHistoryOptions={data:"messageHistoryData",columnDefs:[{field:"userId",displayName:"user_id"},{field:"sendDate",displayName:"time"},{field:"message",displayName:"message",cellTemplate:'<div class="ui-grid-cell-contents" ng-class="col.colIndex()"><a ng-click="grid.appScope.viewFullMessage(row.entity)">{{row.entity.message}}</a></div>'}],enableColumnResize:!0},$scope.viewFullMessage=function(row){errorDialog.show(row.sendDate,row.message,null,{windowClass:"custom-modal-message"})};var validateCount=function(){if(isInt(parseInt($scope.params.count)))return parseInt($scope.params.count);throw errorDialog.show("Error!","Invalid count; count = "+parseInt($scope.params.count)),"Invalid count"},calcTimestamp=function(dateObj){var newTimestamp=new Date(dateObj.day);return newTimestamp.setHours(dateObj.time.getHours()),newTimestamp.setMinutes(dateObj.time.getMinutes()),newTimestamp.setSeconds(dateObj.time.getSeconds()),newTimestamp.setMilliseconds(dateObj.time.getMilliseconds()),Math.floor(newTimestamp.getTime()/1e3)},getMessageHistory=function(){var promise;if($scope.filterType===$scope.filterTypes.TIMESTAMP)promise=messaging.getMessageHistoryByTimestamp(topic,calcTimestamp($scope.params.since),validateCount());else{if($scope.filterType!==$scope.filterTypes.TIMEFRAME)return void console.error("message history filter type not supported");promise=messaging.getMessageHistoryByTimeframe(topic,calcTimestamp($scope.params.start),calcTimestamp($scope.params.stop),validateCount())}promise.then(function(data){$scope.messageHistoryData=data},function(err){errorDialog.show("Error!",err)}),loadDisplay.addDisplay(promise,"Loading history for "+topic+"...")},deleteMessageHistory=function(){var promise;if($scope.filterType===$scope.filterTypes.TIMESTAMP)promise=messaging.deleteMessageHistoryByTimestamp(topic,calcTimestamp($scope.params.since),validateCount());else{if($scope.filterType!==$scope.filterTypes.TIMEFRAME)return void console.error("message history filter type not supported");promise=messaging.deleteMessageHistoryByTimeframe(topic,calcTimestamp($scope.params.start),calcTimestamp($scope.params.stop),validateCount())}promise.then(function(){getMessageHistory()},function(err){errorDialog.show("Error!",err)}),loadDisplay.addDisplay(promise,"Deleting history for "+topic+"...")};getMessageHistory(),$scope.$watch("lastSync",getMessageHistory),$scope.open=function($event,control){$event.preventDefault(),$event.stopPropagation(),$scope.isOpen[control]=!0},$scope.changeFilterType=function(type){$scope.filterType=type,getMessageHistory()},$scope.close=function(){$uibModalInstance.close()},$scope.getMessageHistory=function(){getMessageHistory()},$scope.deleteMessageHistory=function(){var count="0"===$scope.params.count?"all":$scope.params.count;confirmDialog.show("Are you sure you want to delete "+count+" message(s)?").result.then(function(){deleteMessageHistory()})}}]),angular.module("adminPortal").controller("messageSettingsCtrl",["$uibModalInstance","$scope","errorDialog","loadDisplay","roles","$q",function($uibModalInstance,$scope,errorDialog,loadDisplay,roles,$q){function getRoles(){var allPromise=roles.getAllRoles();loadDisplay.addDisplay(allPromise,"Retrieving all roles...","blockModal"),allPromise.then(function(roles){$scope.roles=roles},function(err){errorDialog.show("Error!","Unable to retrieve all roles",err)})}$scope.roles=[],$scope.newRoles=[],$scope.section="security",getRoles(),$scope.applyChanges=function(){var promises=[];$scope.roles.forEach(function(role){promises.push(roles.updateRoleMsgHistory(role.id,angular.copy(role.msgHistory)))});var promisesWatch=$q.all(promises);if(loadDisplay.addDisplay(promisesWatch,"Updating existing roles...","blockModal"),promisesWatch.then(function(){},function(err){errorDialog.show("Error!","Unable to update existing roles",err)}),$scope.newRoles.length>0){var newPromises=[];$scope.newRoles.forEach(function(newRole){newPromises.push(roles.addRoleForMsgHistory(newRole))});var newPromisesWatch=$q.all(newPromises);loadDisplay.addDisplay(newPromisesWatch,"Saving new roles...","blockModal"),newPromisesWatch.then(function(){$uibModalInstance.dismiss()},function(err){errorDialog.show("Error!","Unable to save new roles",err)})}else $uibModalInstance.dismiss()},$scope.filterRoles=function(){return $scope.roles.forEach(function(role,index){role.msgHistory?role.collIdx=index:role.collIdx=-1}),$scope.roles},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("newAdapterCtrl",["$log","$scope","$uibModal","$uibModalInstance","currentSystem","newAdapter","loadDisplay","Adapter","consoleConstants",function($log,$scope,$uibModal,$uibModalInstance,currentSystem,newAdapter,loadDisplay,Adapter,consoleConstants){$scope.consoleConstants=consoleConstants,$scope.submitDisabled=!1,$scope.newAdapter={},$scope.appID=currentSystem.getSystemID(),$scope.selected=!1,$scope.complete=!1,$scope.error=!1,$scope.status="",$scope.Architectures=consoleConstants.external.ADAPTER.ARCHITECTURES,$scope.saveNewAdapter=function(adapter){$scope.submitDisabled=!0;var payload={};payload[consoleConstants.external.ADAPTER.NAME]=adapter[consoleConstants.external.ADAPTER.NAME],payload[consoleConstants.external.SYSTEM_KEY]=currentSystem.getSystemID(),payload[consoleConstants.external.ADAPTER.ARCH]=adapter[consoleConstants.external.ADAPTER.ARCH],payload[consoleConstants.external.ADAPTER.DESCRIPTION]=adapter[consoleConstants.external.ADAPTER.DESCRIPTION];var adapt=new Adapter(payload),promise=adapt.create();loadDisplay.addDisplay(promise,"Creating "+adapter.type+" adapter...","blockModal"),promise.then(function(){$uibModalInstance.close(adapter[consoleConstants.external.ADAPTER.NAME])},function(data){$scope.submitDisabled=!1,$log.debug("/adaptors failed with: "+data),$scope.errorMessage="Failed to create adapter: "+data})},$scope.close=function(){$uibModalInstance.dismiss("cancel")}}]),app.controller("newDashboardOrPluginCtrl",["dashList","options","$scope","Dashboard","Plugin","dashboardConstants","pluginConstants","currentSystem","$uibModalInstance","loadDisplay","errorDialog","dashboardUtils",function(dashList,options,$scope,Dashboard,Plugin,dashboardConstants,pluginConstants,currentSystem,$uibModalInstance,loadDisplay,errorDialog,dashboardUtils){var currentSystemID=currentSystem.getSystemID(),config={};config[dashboardConstants.SYSTEM_KEY]=currentSystemID,config[dashboardConstants.TYPE]=options.newPortalType,config[dashboardConstants.VERSION]=options.newPortalVersion,$scope.dashboardConstants=dashboardConstants,$scope.pluginConstants=pluginConstants,$scope.options=options,$scope.dashList=dashList.results.filter(function(dash){return dash.version===options.newPortalVersion}),$scope.thing=new Dashboard(config),$scope.things={Portal:Dashboard,Plugin:Plugin},$scope.thingLabel="Portal";var value="";$scope.dashList.length&&(value=$scope.dashList[0].name),$scope.selectedClone={value:value},$scope.cloneList={};var populateClones=function(){$scope.cloneList["Clone an existant portal"]="disabled";for(var i=0,len=$scope.dashList.length;i<len;i++)$scope.cloneList[$scope.dashList[i].name]=null};populateClones(),$scope.onVersionChange=function(){$scope.cloneList={},$scope.dashList=dashList.results.filter(function(dash){return dash.version===$scope.thing[dashboardConstants.VERSION]});var value="";$scope.dashList.length&&(value=$scope.dashList[0].name),$scope.selectedClone={value:value},populateClones()},$scope.switchThingType=function(thingType){var config={};"Portal"===thingType?config[dashboardConstants.SYSTEM_KEY]=currentSystemID:"Plugin"===thingType&&(config[pluginConstants.SYSTEM_KEY]=currentSystemID),$scope.thing=new $scope.things[thingType](config)},$scope.createThing=function(){if($scope.thing[dashboardConstants.TYPE])if("clone"===$scope.thing[dashboardConstants.TYPE]){var prom=$scope.thing.get($scope.selectedClone.value);prom.then(function(data){var clonedType=data.type;$scope.thing[dashboardConstants.TYPE]=clonedType===dashboardConstants.KNOWN_VERSIONS.V2?dashboardConstants.KNOWN_TYPES.CUSTOM:clonedType;var config=JSON.parse(data.config);$scope.createPortal(config)})}else{var promise=dashboardUtils.fetchDefaults($scope.thing[dashboardConstants.TYPE]);promise.then(function(data){var config=data[$scope.thing[dashboardConstants.VERSION]];$scope.createPortal(config)})}else $scope.createPortal($scope.thing)},$scope.createPortal=function(config){var select=config;delete select.$$hashKey;var msgLabel,promise=$scope.thing.create(select);$scope.thing instanceof Dashboard?msgLabel="portal":$scope.thing instanceof Plugin&&(msgLabel="plugin"),loadDisplay.addDisplay(promise,"Creating "+msgLabel+"..."),promise.then(function(){$uibModalInstance.close($scope.thing)},function(err){errorDialog.show("Error!","Unable to create "+msgLabel,err)})},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("newDeviceCtrl",["$scope","$uibModalInstance","consoleConstants","Device","resolvedSystemKey",function($scope,$uibModalInstance,consoleConstants,Device,resolvedSystemKey){var deviceConfig={};deviceConfig[consoleConstants.external.DEVICE.SYSTEM_KEY]=resolvedSystemKey,$scope.newDevice=new Device(deviceConfig),$scope.consoleConstants=consoleConstants,$scope.createDevice=function(){$uibModalInstance.close($scope.newDevice)},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("newSystemCtrl",["$scope","$uibModalInstance","$log","resolvedTitle","resolvedSystems","consoleConstants","isEdge","systemList",function($scope,$uibModalInstance,$log,resolvedTitle,resolvedSystems,consoleConstants,isEdge,systemList){$scope.newSystem={},$scope.consoleConstants=consoleConstants,$scope.isEdge=isEdge,$scope.title=resolvedTitle,$scope.createSystem=function(){$uibModalInstance.close($scope.newSystem)},$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.newSystem.generateDeviceToken=function(event){event.preventDefault(),$scope.newSystem[consoleConstants.external.EDGE.TOKEN]=systemList.generateUniqueToken()}}]),app.controller("PaymentInfoCtrl",["$scope","$uibModalInstance","confirmationButtonText","saas",function($scope,$uibModalInstance,confirmationButtonText,saas){$scope.confirmationButtonText=confirmationButtonText;var allPlans=angular.copy(saas.plans);delete allPlans.FREE,$scope.saasPlans=allPlans,$scope.billingObj={plan:$scope.saasPlans.FLEX.name},$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.confirm=function(){$uibModalInstance.close($scope.billingObj)}}]),app.controller("planUpdaterCtrl",["$scope","$q","$log","$uibModalInstance","loadDisplay","errorDialog",function($scope,$q,$log,$uibModalInstance,loadDisplay,errorDialog){$scope.tier="Flex",$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.applyChanges=function(){$uibModalInstance.dismiss()}}]),app.controller("pushConfigCtrl",["$scope","$uibModalInstance","push","$q","errorDialog","confirmDialog","loadDisplay",function($scope,$uibModalInstance,push,$q,errorDialog,confirmDialog,loadDisplay){$scope.activePlatform="ios",$scope.systemAccounts=[],push.getAccounts().then(function(data){$scope.systemAccounts=data},function(err){errorDialog.show("Error!","Could not get Push Accounts",err)}),$scope.availablePlatforms=[{name:"ios",dispName:"iOS"},{name:"android",dispName:"Android"}],$scope.close=function(){$uibModalInstance.dismiss()},$scope.changePlatform=function(platform){$scope.activePlatform=platform},$scope.saveChanges=function(){for(var promises=[],x=0;x<$scope.systemAccounts.length;x++)$scope.systemAccounts[x].accountNumber?promises.push(push.updateAccount($scope.systemAccounts[x])):promises.push(push.addAccount($scope.systemAccounts[x]));$q.all(promises).then(function(results){$uibModalInstance.dismiss()},function(err){errorDialog.show("Error!","Error saving your changes",err)})},$scope.addAccount=function(){$scope.systemAccounts.push({fileValid:!1,platform:"apple"})},$scope.deleteAccount=function(acct,idx){confirmDialog.show("Are you sure you want to delete this account?").then(function(){var promise=push.deleteAccount(acct.accountNumber);loadDisplay.addDisplay(promise,"Deleting account..."),promise.then(function(){$scope.systemAccounts.splice(idx,1)},function(err){errorDialog.show("Error!","Unable to delete account",err)})})},$scope.certAddedToForm=function(file,params){function certHandler(e2){$scope.systemAccounts[params.accountIndex].encodedCert=e2.target.result.toString()}params=JSON.parse(params);var fr=new FileReader;fr.onload=certHandler,fr.readAsDataURL(file)}}]),angular.module("adminPortal").controller("pushDeviceCtrl",["$scope","$uibModalInstance","accounts",function($scope,$uibModalInstance,accounts){$scope.newDevice={type:"apple"},$scope.systemAccounts=accounts,$scope.deviceTypes=[{value:"apple"}],$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.addDevice=function(){$uibModalInstance.close($scope.newDevice)}}]),angular.module("adminPortal").controller("queryBuilderCtrl",["$scope","$uibModalInstance","columns","title","currentGrid","cbDataTypes","errorDialog","$timeout","utils","cbColumn",function($scope,$uibModalInstance,columns,title,currentGrid,cbDataTypes,errorDialog,$timeout,utils,cbColumn){$scope.title=title,$scope.columns=columns,$scope.dataTypes=cbDataTypes,$scope.possibleConditions={equals:{method:"equalTo",display:"=="},"does not equal":{method:"notEqualTo",display:"!="},"greater than":{method:"greaterThan",display:">"},"less than":{method:"lessThan",display:"<"},"greater than or equal to":{method:"greaterThanEqualTo",display:">="},"less than or equal to":{method:"lessThanEqualTo",display:"<="},matches:{method:"matches",display:"matches"}},$scope.conditions=currentGrid.conditions;var resetNewCondition=function(){$scope.newCondition={column:"",operator:"",value:""}};0===$scope.conditions.length?resetNewCondition():$scope.newCondition=$scope.conditions[0][$scope.conditions[0].length-1],$scope.isDisabled=function(){if(0===$scope.conditions.length)return!0;var lastClause=$scope.conditions[$scope.conditions.length-1][$scope.conditions[$scope.conditions.length-1].length-1];return!lastClause.hasOwnProperty("column")||""===lastClause.column||!lastClause.hasOwnProperty("operator")||""===lastClause.operator};(new Date).getTime();$scope.updateCondition=function(key){0===$scope.conditions.length&&$scope.conditions.push([{}]),$scope.conditions[$scope.conditions.length-1][$scope.conditions[$scope.conditions.length-1].length-1][key]=$scope.newCondition[key]},$scope.updateValue=function(){var col=new cbColumn($scope.conditions[$scope.conditions.length-1][$scope.conditions[$scope.conditions.length-1].length-1].column.dataType);col.isValid($scope.newCondition.value)?$scope.conditions[$scope.conditions.length-1][$scope.conditions[$scope.conditions.length-1].length-1].value=col.dataType.format($scope.newCondition.value):errorDialog.show("Invalid type",col.validationText)},$scope.addOR=function(){resetNewCondition(),$scope.conditions.push([{}])},$scope.addAND=function(){resetNewCondition(),$scope.conditions[$scope.conditions.length-1].push({})},$scope.removeCondition=function(idx){resetNewCondition(),$scope.conditions.splice(idx,1)},$scope.clearConditions=function(){currentGrid.clearConditions(),$scope.conditions=[],resetNewCondition()},$scope.close=function(){$uibModalInstance.dismiss("closed query")},$scope.applyFilter=function(){for(var cb=new ClearBlade,query=cb.Query(),addToQuery=function(queryObj,condIdx){for(var j=0;j<$scope.conditions[condIdx].length;j++){var val=void 0===$scope.conditions[condIdx][j].value?null:utils.validateJSON($scope.conditions[condIdx][j].column.field,$scope.conditions[condIdx][j].value);queryObj[$scope.possibleConditions[$scope.conditions[condIdx][j].operator].method]($scope.conditions[condIdx][j].column.field,val)}},i=0;i<$scope.conditions.length;i++)if(i>0){var orQuery=cb.Query();addToQuery(orQuery,i),query.or(orQuery)}else addToQuery(query,i);currentGrid.filterInfo=query.query.FILTERS,$uibModalInstance.close()}}]),app.controller("removeModalCtrl",["$scope","$uibModalInstance","selected","type",function($scope,$uibModalInstance,selected,type){$scope.type=type,$scope.deleteUsersConfirm=function(){$uibModalInstance.close(selected)},$scope.cancel=function(){$uibModalInstance.dismiss(selected)}}]),app.controller("routeToGithubCtrl",["$scope","$uibModalInstance","$state","$stateParams","$localStorage","githubService","platformRequest","$location",function($scope,$uibModalInstance,$state,$stateParams,$localStorage,githubService,platformRequest,$location){function assembleRedirectURL(currentURL){var ssl,platform_name,port_override;return-1!=currentURL.search(/https/)?(ssl=!0,platform_name=getSubdomain(currentURL,ssl),port_override=80):-1!=currentURL.search(/http:\/\/(.*?).clearblade.com/)?(ssl=!1,platform_name=getSubdomain(currentURL,ssl),port_override=80):-1!=currentURL.search(/localhost/)&&(ssl=!1,platform_name="localhost",port_override=getPort(currentURL)),redirectURL=REDIRECT_URL_ROOT,redirectURL+="?redirectParams="+platform_name+","+ssl+","+port_override}function getSubdomain(currentURL,ssl){if(ssl)var extractPlatformRegex=/https:\/\/(.*?).clearblade.com/;else var extractPlatformRegex=/http:\/\/(.*?).clearblade.com/;var output=currentURL.match(extractPlatformRegex);return 2!=output.length?(console.log("Unable to determine appropriate subdomain *.clearblade.com. Default to platform"),DEFAULT_PLATFORM):output[1]}function getPort(currentURL){var getPortRegex=/.*?localhost\:(\d{0,4})/,output=currentURL.match(getPortRegex);return output.length>=2?output[1]:DEFAULT_OVERRIDE_PORT}var client_id,REDIRECT_URL_ROOT="https://docs.clearblade.com/redirect/",DEFAULT_PLATFORM="platform",DEFAULT_OVERRIDE_PORT=3e3,currentURL=$location.absUrl(),redirectURL=assembleRedirectURL(currentURL),gs=new githubService,gitCodeRequestUrl="http://github.com/login/oauth/authorize",scope="public_repo";$scope.githubUrl=null,gs.getClientID().then(function(data){client_id=data.data.client_id,$scope.githubUrl=gitCodeRequestUrl+"?client_id="+client_id+"&scope="+scope+"&redirect_uri="+redirectURL},function(error){console.log("Unable to get git Client ID")}),$scope.cancel=function(){$uibModalInstance.dismiss()}}]),app.controller("saveCodeCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.save=function(){$uibModalInstance.close(!0)},$scope.navigate=function(){$uibModalInstance.close(!1)},$scope.stayOnPage=function(){$uibModalInstance.dismiss()}}]),app.controller("systemSettingsCtrl",["$http","$log","$scope","$uibModal","$uibModalInstance","resolvedSystem","loadDisplay","errorDialog","confirmDialog","currentSystem","adminCalls","$state","System","consoleConstants","systemList","platformRequest","$timeout","$localStorage",function($http,$log,$scope,$uibModal,$uibModalInstance,resolvedSystem,loadDisplay,errorDialog,confirmDialog,currentSystem,adminCalls,$state,System,consoleConstants,systemList,platformRequest,$timeout,$localStorage){$scope.consoleConstants=consoleConstants,$scope.showDownload=!1,$scope.system=resolvedSystem,$scope.section="properties",$scope.syncSettings={add:[],remove:[]},$scope.accessSettings={add:[],remove:[],owner:null},$scope.edgeDisabledVersions={},$scope.system.getDisabledEdgeVersions().then(function(result){$scope.edgeDisabledVersions=result}),$scope.isConnectedToEdge=platformRequest.isConnectedToEdge(),$scope.saveSystem=function(){if($scope.syncSettings.add.length||$scope.syncSettings.remove.length){var syncPromise=$scope.system.updateSyncInfo($scope.syncSettings);loadDisplay.addDisplay(syncPromise,"Syncing system..."),syncPromise.then(function(data){},function(err){errorDialog.show("Error!","Unable to sync system settings",err)})}if($scope.accessSettings.add.length||$scope.accessSettings.remove.length||null!==$scope.accessSettings.owner){var syncAccess=$scope.system.updateAccessInfo($scope.accessSettings);loadDisplay.addDisplay(syncAccess,"Syncing system..."),syncAccess.then(function(data){},function(err){errorDialog.show("Error!","Unable to sync system settings",err)})}if($scope.system[consoleConstants.external.SYSTEM_NAME]!==$scope.system.cachedState[consoleConstants.external.SYSTEM_NAME]||$scope.system[consoleConstants.external.SYSTEM_DESCRIPTION]!==$scope.system.cachedState[consoleConstants.external.SYSTEM_DESCRIPTION]||$scope.system[consoleConstants.external.TOKEN_TTL]!==$scope.system.cachedState[consoleConstants.external.TOKEN_TTL]||$scope.system[consoleConstants.external.AUTH_SERVICE]!==$scope.system.cachedState[consoleConstants.external.AUTH_SERVICE]||$scope.system[consoleConstants.external.REG_SERVICE]!==$scope.system.cachedState[consoleConstants.external.REG_SERVICE]){var promise=$scope.system.update();loadDisplay.addDisplay(promise,"Updating system..."),promise.then(function(data){currentSystem.updateCurSystem(data),$uibModalInstance.close(data),store.dispatch({type:"UPDATE_SYSTEM_SUCCESS",payload:{system:{Dev:data.Dev,appID:data.systemKey,appSecret:data.systemSecret,auth_service:data.auth_service,description:data.description,name:data.name,reg_service:data.reg_service,registration:"",token_ttl:data.token_ttl}}})},function(err){errorDialog.show("Error!","Unable to update system settings",err)})}else $uibModalInstance.close()},$scope.close=function(){$uibModalInstance.dismiss()},$scope.deleteSystem=function(){confirmDialog.show("Are you sure you want to delete '"+$scope.system[consoleConstants.external.SYSTEM_NAME]+"?'").result.then(function(){var promise=$scope.system.delete();loadDisplay.addDisplay(promise,"Deleting System..."),promise.then(function(){systemList.removeItem($scope.system),currentSystem.clear(),$state.go("app.dashboard"),$scope.$broadcast("systemChange"),$uibModalInstance.close()},function(err){errorDialog.show("Error!","Unable to delete system",err)})})},$scope.generateSecret=function(e){e.stopImmediatePropagation(),confirmDialog.show("Are you sure you want to generate a new secret for "+$scope.system[consoleConstants.external.SYSTEM_NAME]+"?").result.then(function(secret){var promise=$scope.system.regenSystemSecret();promise.then(function(secret){$scope.system.secret=secret},function(err){errorDialog.show("Error!","Unable to generate new secret",err)}),loadDisplay.addDisplay(promise,"Generating new secret for '"+$scope.system[consoleConstants.external.SYSTEM_NAME]+"'...")})},$scope.generateDeviceToken=function(event){event.preventDefault(),$scope.system[consoleConstants.external.EDGE.TOKEN]=$scope.system.cachedState[consoleConstants.external.EDGE.TOKEN]=systemList.generateUniqueToken()},$scope.isPreferedVersion=function(){return $scope.system[consoleConstants.external.EDGE.VERSION]===$scope.edgeDisabledVersions.preferedEdgeVersion},$scope.copySystem=function(){confirmDialog.show("Are you sure you want to copy '"+$scope.system.name+"?'").result.then(function(){var promise=systemsFactory.copySystem($scope.system.appID,$scope.system.name).then(function(){$scope.$broadcast("systemChange"),$uibModalInstance.close()},function(err){errorDialog.show("Error!","Unable to copy system",err)});loadDisplay.addDisplay(promise,"Copying '"+$scope.system.name+"'...")})},$scope.changeSection=function(event,newSection){event.preventDefault(),$scope.section=newSection}}]),app.controller("timerPropsCtrl",["$scope","$uibModalInstance","timer","$uibModal","loadDisplay",function($scope,$uibModalInstance,timer,$uibModal,loadDisplay){$scope.timer=timer,$scope.control={deployOnPlatform:!0};var promise=$scope.timer.fetchDeployOnPlatform();loadDisplay.addDisplay(promise,"Loading..."),promise.then(function(){$scope.control.deployOnPlatform=$scope.timer.deployOnPlatform}),$scope.changeSection=function(newSection){$scope.section=newSection},$scope.close=function(){$uibModalInstance.dismiss()},$scope.update=function(){if($scope.control.deployOnPlatform!==$scope.timer.deployOnPlatform){var prom=$scope.timer.updateDeployOnPlatform($scope.control.deployOnPlatform);loadDisplay.addDisplay(prom,"Updating..."),prom.then(function(){$uibModalInstance.close()})}else $scope.close()},$scope.exportTimer=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.timer},modalConfig:function(){return{modalTitle:[$scope.timer.name,"timer"]}}}})}}]),app.controller("triggerPropsCtrl",["$scope","$uibModalInstance","trigger","$uibModal","loadDisplay",function($scope,$uibModalInstance,trigger,$uibModal,loadDisplay){$scope.trigger=trigger,$scope.control={deployOnPlatform:!0};var promise=$scope.trigger.fetchDeployOnPlatform();loadDisplay.addDisplay(promise,"Loading..."),promise.then(function(){console.log("wut"),$scope.control.deployOnPlatform=$scope.trigger.deployOnPlatform}),$scope.changeSection=function(newSection){$scope.section=newSection},$scope.close=function(){$uibModalInstance.dismiss()},$scope.update=function(){if($scope.control.deployOnPlatform!==$scope.trigger.deployOnPlatform){var prom=$scope.trigger.updateDeployOnPlatform($scope.control.deployOnPlatform);loadDisplay.addDisplay(prom,"Updating..."),prom.then(function(){$uibModalInstance.close()})}else $scope.close()},$scope.exportTrigger=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return $scope.trigger},modalConfig:function(){return{modalTitle:[$scope.trigger.name,"trigger"]}}}})}}]),app.controller("userPropsCtrl",["$scope","$q","$log","$uibModalInstance","loadDisplay","errorDialog","roles",function($scope,$q,$log,$uibModalInstance,loadDisplay,errorDialog,roles){$scope.roles=[],$scope.newRoles=[];var getRoles=function(){var rolePromise=roles.getAllRoles();loadDisplay.addDisplay(rolePromise,"Retrieving roles..","blockModal"),rolePromise.then(function(roles){$scope.roles=roles},function(err){errorDialog.show("Error!","Unable to retrieve all roles",err)})};$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.applyChanges=function(){var promises=[];$scope.roles.forEach(function(role){promises.push(roles.updateRoleUsers(role.id,angular.copy(role.users)))});var promisesWatch=$q.all(promises);if(loadDisplay.addDisplay(promisesWatch,"Updating existing roles...","blockModal"),promisesWatch.then(function(){},function(err){errorDialog.show("Error!","Unable to update existing roles",err)}),$scope.newRoles.length>0){var newPromises=[];$scope.newRoles.forEach(function(newRole){newPromises.push(roles.addRoleForUser(newRole))}),newPromisesWatch=$q.all(newPromises),loadDisplay.addDisplay(newPromisesWatch,"Saving new roles...","blockModal"),newPromisesWatch.then(function(){},function(err){errorDialog.show("Error!","Unable to save new roles",err)})}else $uibModalInstance.dismiss()},$scope.filterRoles=function(){return $scope.roles.forEach(function(role,index){role.users?role.collIdx=index:role.collIdx=-1}),$scope.roles},getRoles()}]),app.controller("viewTermsCtrl",["$scope","$uibModalInstance","legalTitle","legalDoc","mustAgree",function($scope,$uibModalInstance,legalTitle,legalDoc,mustAgree){$scope.legalTitle=legalTitle,$scope.legalDoc=legalDoc,$scope.mustAgree=mustAgree,$scope.agree=function(){$uibModalInstance.close(!0)},$scope.reject=function(){$uibModalInstance.close(!1)},$scope.dismiss=function(){$uibModalInstance.close()}}]),app.controller("roleGridCtrl",["$scope","$uibModal","$log","roles","loadDisplay","errorDialog","cbGrid","$sce","toastr","$state","$stateParams","consoleConstants",function($scope,$uibModal,$log,roles,loadDisplay,errorDialog,cbGrid,$sce,toastr,$state,$stateParams,consoleConstants){function stateReload(){$state.transitionTo($state.current,$stateParams,{reload:!0,inherit:!1,notify:!0})}function generateTemplate(type){return'<div class="ui-grid-cell-contents" ng-class="col.colIndex()"><a uib-popover-html="{{grid.appScope.createTemplate(row.entity, \''+type+"')}}\" popover-title=\"{{grid.appScope.permissions['"+type+'\'].createHeader(row.entity.name)}}"popover-append-to-body="true" popover-placement="{{grid.appScope.permissions[\''+type+'\'].placement()}}"popover-trigger="mouseenter" ng-click="grid.appScope.dispList(row.entity, \''+type+"')\">Edit</a></div>"}var PERMISSION_IDENTIFIERS=consoleConstants.internal.PERMISSION_IDENTIFIERS;$scope.collections=PERMISSION_IDENTIFIERS.COLLECTIONS,$scope.services=PERMISSION_IDENTIFIERS.SERVICES,$scope.users=PERMISSION_IDENTIFIERS.USERS,$scope.devices=PERMISSION_IDENTIFIERS.DEVICES,$scope.msgHistory=PERMISSION_IDENTIFIERS.MESSAGE_HISTORY,$scope.push=PERMISSION_IDENTIFIERS.PUSH,$scope.systemLevel=PERMISSION_IDENTIFIERS.SYSTEM_LEVEL,$scope.portals=PERMISSION_IDENTIFIERS.PORTALS;var createHeader=function(title){var headerString="";headerString+='<div style="margin-top:5px">';var colSize=void 0!==title?"2":"3";return title&&(headerString+='<div class="col-sm-4">'+title+"</div>"),headerString+='<div class="text-center col-sm-'+colSize+'">Create</div><div class="text-center col-sm-'+colSize+'">Read</div><div class="text-center col-sm-'+colSize+'">Update</div><div class="text-center col-sm-'+colSize+'">Delete</div>',headerString+="</div>"},createSinglePermHeader=function(action,title){var headerString="";headerString+='<div style="margin-top:5px">';var colSize=void 0!==title?"6":"12";return title&&(headerString+='<div class="col-sm-6">'+title+"</div>"),headerString+='<div class="text-center col-sm-'+colSize+'">'+action+"</div>",headerString+="</div>"},addPermImage=function(perm){return!0===perm?'<i class="glyphicon glyphicon-ok cb-icon-green"></i>':'<i class="glyphicon glyphicon-remove cb-icon-red"></i>'},addSinglePermRow=function(permissions,key){var rowString="";rowString+="<div>";var colSize=permissions.hasOwnProperty("itemInfo")?"6":"12";return permissions.hasOwnProperty("itemInfo")&&(rowString+='<div class="ellipsis col-sm-6">'+permissions.itemInfo.name+"</div>"),rowString+='<div class="text-center col-sm-'+colSize+'">'+addPermImage(permissions[key])+"</div>"},addRow=function(permissions){var rowString="";rowString+="<div>";var colSize=permissions.hasOwnProperty("itemInfo")?"2":"3";return permissions.hasOwnProperty("itemInfo")&&(rowString+='<div class="ellipsis col-sm-4">'+permissions.itemInfo.name+"</div>"),rowString+='<div class="text-center col-sm-'+colSize+'">'+addPermImage(permissions.create)+'</div><div class="text-center col-sm-'+colSize+'">'+addPermImage(permissions.read)+'</div><div class="text-center col-sm-'+colSize+'">'+addPermImage(permissions.update)+'</div><div class="text-center col-sm-'+colSize+'">'+addPermImage(permissions.delete)+"</div>"},genereateArrayTemplate=function(array,title,action){var htmlString="";htmlString+=action?createSinglePermHeader(action,title):createHeader(title);for(var i=0;i<array.length;i++)htmlString+=action?addSinglePermRow(array[i],"read"):addRow(array[i]);return htmlString},generateObjectTemplate=function(obj,action){var htmlString="";return action?(htmlString+=createSinglePermHeader(action),htmlString+=addSinglePermRow(obj,"create")):(htmlString+=createHeader(),htmlString+=addRow(obj)),htmlString};$scope.permissions={collections:{update:function(id,results){return roles.updateRoleCollections(id,results.list)},modalInfo:{templateUrl:"partials/modals/dispPermLists.html",controller:"dispPermListsCtrl"},popoverFn:function(array){return genereateArrayTemplate(array,"Name")},hasPermissions:function(entity){return entity.length>0},noPermissionsMsg:function(permission){return"No collections for the "+permission+" role"},createHeader:function(permission){return permission+"'s collections"},placement:function(){return"right"}},services:{update:function(id,results){return roles.updateRoleServices(id,results.list)},modalInfo:{templateUrl:"partials/modals/dispPermListsServices.html",controller:"dispPermListsCtrl"},popoverFn:function(array){return genereateArrayTemplate(array,"Name","Executable")},hasPermissions:function(entity){return entity.length>0},noPermissionsMsg:function(permission){return"No services for the "+permission+" role"},createHeader:function(permission){return permission+"'s services"},placement:function(){return"right"}},portals:{update:function(id,results){return roles.updateRoleDashboards(id,results.list)},modalInfo:{templateUrl:"partials/modals/dispPermLists.html",controller:"dispPermListsCtrl"},popoverFn:function(array){return genereateArrayTemplate(array,"Name")},hasPermissions:function(entity){return entity.length>0},noPermissionsMsg:function(permission){return"No portals for the "+permission+" role"},createHeader:function(permission){return permission+"'s portals"},placement:function(){return"right"}},users:{update:function(id,results){return roles.updateRoleUsers(id,results.role.users)},modalInfo:{templateUrl:"partials/modals/dispPermListsUsers.html",controller:"dispPermListsCtrl"},popoverFn:function(obj){return generateObjectTemplate(obj)},hasPermissions:function(entity){return null!==entity},noPermissionsMsg:function(){return"No permissions set"},createHeader:function(permission){return permission+"'s user permissions"},placement:function(){return"top"}},devices:{update:function(id,results){return roles.updateRoleDevices(id,results.role.devices)},modalInfo:{templateUrl:"partials/modals/dispPermListsDevices.html",controller:"dispPermListsCtrl"},popoverFn:function(obj){return generateObjectTemplate(obj)},hasPermissions:function(entity){return null!==entity},noPermissionsMsg:function(){return"No permissions set"},createHeader:function(permission){return permission+"'s device permissions"},placement:function(){return"top"}},msgHistory:{update:function(id,results){return roles.updateRoleMsgHistory(id,results.role.msgHistory)},modalInfo:{templateUrl:"partials/modals/dispPermListsMsgHistory.html",controller:"dispPermListsCtrl"},popoverFn:function(obj){return generateObjectTemplate(obj)},hasPermissions:function(entity){return null!==entity},noPermissionsMsg:function(){return"No permissions set"},createHeader:function(permission){return permission+"'s message history permissions"},placement:function(){return"top"}},systemLevel:{update:function(id,results){return roles.updateRoleSystemLevel(id,results.role.systemLevel)},modalInfo:{templateUrl:"partials/modals/dispPermListsSystemLevel.html",controller:"dispPermListsCtrl"},popoverFn:function(array){var fmtArray=[];for(level in array)array[level].itemInfo={name:level},fmtArray.push(array[level]);return genereateArrayTemplate(fmtArray,"Level")},hasPermissions:function(entity){return null!==entity},noPermissionsMsg:function(){return"No permissions set"},createHeader:function(permission){return permission+"'s system level permissions"},placement:function(){return"top"}}},$scope.createTemplate=function(entity,type){var content="";return $scope.permissions[type].hasPermissions(entity[type])?content+=$scope.permissions[type].popoverFn(entity[type]):content+='<div style="margin-top:5px" class="text-center">'+$scope.permissions[type].noPermissionsMsg(entity.name)+"</div>",$sce.trustAsHtml("'"+content+"'")},$scope.roleColumns=[{displayName:"Name",field:"name"},{displayName:"Collections",field:"read",enableSorting:!1,cellTemplate:generateTemplate("collections")},{displayName:"Services",field:"service",enableSorting:!1,cellTemplate:generateTemplate(PERMISSION_IDENTIFIERS.SERVICES)},{displayName:"Portals",field:"portals",enableSorting:!1,cellTemplate:generateTemplate("portals")},{displayName:"Users",field:"user",enableSorting:!1,cellTemplate:generateTemplate(PERMISSION_IDENTIFIERS.USERS)},{displayName:"Devices",field:"device",enableSorting:!1,cellTemplate:generateTemplate(PERMISSION_IDENTIFIERS.DEVICES)},{displayName:"Message History",field:"msgHistory",enableSorting:!1,cellTemplate:generateTemplate(PERMISSION_IDENTIFIERS.MESSAGE_HISTORY)},{displayName:"System Level",field:"systemLevel",enableSorting:!1,cellTemplate:generateTemplate(PERMISSION_IDENTIFIERS.SYSTEM_LEVEL)}],$scope.dispList=function(role,title){var modalInstance,resolutions={list:function(){return role[title]},title:function(){return title},roleName:function(){return role.name},role:function(){return role},permission:function(){return title}};$scope.permissions[title].modalInfo.resolve=resolutions,modalInstance=$uibModal.open($scope.permissions[title].modalInfo),modalInstance.result.then(function(results){$scope.permissions[title].update(role.id,angular.copy(results)).then(function(resp){stateReload(),toastr.success(null,"Update Success")},function(err){errorDialog.show("Error!","Unable to update role",err)})})};var promise=roles.getAllRoles();loadDisplay.addDisplay(promise,"Loading Roles","waitForRoles"),promise.then(function(data){$scope.roleData=data});var roleGridOptions={columnDefs:$scope.roleColumns,data:"roleData",enableCellSelection:!0,enableColumnReordering:!0,enableColumnResize:!0,enablePaging:!0,selectWithCheckboxOnly:!0,plugins:[],selectedItems:[],showFooter:!0,showSelectionCheckbox:!0,totalServerItems:1},rolesGrid=new cbGrid($scope,roleGridOptions,{});$scope.roleGridOptions=rolesGrid.val,$scope.$parent.$parent.refresh=function(){roles.getAllRoles().then(function(data){$scope.roleData=data})},$scope.addRole=function(){$uibModal.open({templateUrl:"partials/modals/addRole.html",controller:"addRoleCtrl"}).result.then(function(){roles.getAllRoles().then(function(data){$scope.roleData=data})})},$scope.removeRole=function(){var selectedRows=rolesGrid.val.gridApi.selection.getSelectedRows();if(0===selectedRows.length)return void errorDialog.show("Action needed","Please select a role to remove");$uibModal.open({templateUrl:"partials/modals/removeModal.html",controller:"removeModalCtrl",resolve:{selected:function(){return selectedRows},type:function(){return"roles"}}}).result.then(function(deleted){$log.debug("Deleting roles");for(var i=0;i<deleted.length;i++){var index=$scope.roleData.indexOf(deleted[i]);$scope.roleData.splice(index,1),roles.removeRole(deleted[i].id).then(function(data){$log.debug("removed role successfully: "+data)},function(err){errorDialog.show("Error!","Could not delete role",JSON.stringify(err))})}rolesGrid.val.gridApi.selection.clearSelectedRows()})},$scope.exportRoles=function(){$uibModal.open({templateUrl:"partials/modals/exportResource.html",controller:"exportResourceCtrl",resolve:{resourceToExport:function(){return roles},modalConfig:function(){return{modalTitle:["All","roles"]}}}})}}]),app.directive("accessSelector",["systemOptions","DevUser","consoleConstants",function(systemOptions,DevUser,consoleConstants){return{restrict:"E",scope:{system:"=",accessSettings:"=",edgeBlacklist:"="},templateUrl:"partials/directives/accessSelector.html",link:function(scope){scope.newDev={},scope.owner="",scope.currentSettings={},scope.viewType="basic",scope.system.getAccessInfo().then(function(result){result.owner===DevUser.email&&(scope.viewType="owner",scope.owner=result.owner),scope.currentSettings=result}),scope.addNewDev=function(newDev){if(""!==newDev){var removeIndex=scope.accessSettings.remove.indexOf(newDev);-1!==removeIndex&&scope.accessSettings.add.splice(removeIndex,1);-1===scope.accessSettings.add.indexOf(newDev)&&(scope.currentSettings.developers.push({email:newDev}),scope.accessSettings.add.push(newDev)),scope.newDev.val=""}},scope.removeDev=function(devEmail){var settingsIndex=inSettings(scope.currentSettings.developers,devEmail),addIndex=scope.accessSettings.add.indexOf(devEmail);addIndex>-1?scope.accessSettings.add.splice(addIndex,1):scope.accessSettings.remove.push(devEmail),scope.currentSettings.developers.splice(settingsIndex,1)},scope.setOwner=function(newOwner){scope.accessSettings.owner=newOwner};var inSettings=function(settings,email){for(var i=0,len=settings.length;i<len;i++)if(settings[i].email===email)return i;return-1}}}}]),app.directive("billingInfo",[function(){return{restrict:"E",require:"^form",replace:!0,scope:{plans:"=saasPlans",billingObj:"=",freePlan:"=",defaultPlan:"="},templateUrl:"partials/directives/billingInfo.html",link:function(scope,elem,attrs,ctrl){scope.form=ctrl,scope.billingObj.plan=scope.billingObj.plan||scope.defaultPlan}}}]),angular.module("adminPortal").directive("cbCopy",["toastr","errorDialog","clipboard","$timeout",function(toastr,errorDialog,clipboard,$timeout){return{restrict:"E",templateUrl:"partials/directives/cbCopy.html",scope:{target:"@",prefix:"@"},transclude:!0,link:function(scope,_,_,_,transcludeFn){if(!angular.isDefined(scope.target))throw"Must supply a target!";scope.supported=clipboard.supported,transcludeFn(function(clone){$timeout(function(){var fakeTranscludeElem=angular.element(document.getElementById(scope.target));clone.length?(fakeTranscludeElem.replaceWith(clone),scope.hasTranscludedContent=!0):fakeTranscludeElem.remove()})}),scope.success=function(){toastr.success("Copied to clipboard")},scope.fail=function(err){clipboard.supported||(err="Looks like your browser does not support this functionality."),errorDialog.show("Error!","Unable to copy to clipboard",err)}}}}]),app.directive("cbModalHeader",[function(){return{restrict:"E",transclude:!0,templateUrl:"partials/directives/cbModalHeader.html",scope:{closeFn:"&"},link:function(scope,elem,attrs){}}}]),angular.module("adminPortal").directive("cbMouseOut",[function(){return{restrict:"A",link:function(scope,elem,attrs){elem.bind("mouseout",function(evt){evt.clientX>300&&scope.$apply(attrs.cbMouseOut)})}}}]),app.directive("cbReorder",[function(){return{restrict:"E",templateUrl:"partials/directives/cbReorder.html",scope:{moveUp:"&",moveDown:"&"},link:function(scope,elem,attrs){}}}]),angular.module("adminPortal").directive("cbUserSearch",["users",function(users){return{restrict:"E",scope:{callbackFn:"=",currentUser:"="},templateUrl:"partials/directives/cbUserSearch.html",link:function(scope,elem,attrs){scope.isSearching=!1,scope.getUsers=function(searchQuery){if(searchQuery&&""!==searchQuery){scope.isSearching=!0;var cb=new ClearBlade,query=cb.Query();query.matches("email",searchQuery);var params={pageSize:0,pageNum:0,pageFilter:query.query.FILTERS};return users.getAllUsers(params.pageSize,params.pageNum,params.pageSort,params.pageFilter).then(function(data){return data},function(err){return errorDialog.show("Error!","Unable to retrieve users",err),[]}).finally(function(){scope.isSearching=!1})}return[]}}}}]),angular.module("adminPortal").directive("cbValidate",["$parse",function($parse){return{restrict:"A",require:"ngModel",scope:{model:"=ngModel",method:"=cbValidate"},link:function(scope,elem,attrs){scope.$watch("model",function(newVal,oldVal){newVal!==oldVal&&angular.isDefined(attrs.cbValidate)&&scope.method()})}}}]),angular.module("adminPortal").directive("changeActiveKey",[function(){return{restrict:"E",templateUrl:"partials/directives/changeActiveKey.html",scope:{newActiveKey:"="},link:function(scope){scope.conActiveKey=""}}}]),angular.module("adminPortal").directive("changePassword",[function(){return{restrict:"E",templateUrl:"partials/directives/changePassword.html",scope:{newPassword:"="},link:function(scope){scope.conPassword=""}}}]),angular.module("adminPortal").directive("codeRoleList",["loadDisplay","errorDialog",function(loadDisplay,errorDialog){return{restrict:"E",templateUrl:"partials/directives/codeRoleList.html",scope:{roles:"=",newRoles:"=",service:"=",serviceFilter:"="},link:function(scope){scope.removeRole=function(role,collIdx){role.services.splice(collIdx,1),scope.serviceFilter()},scope.removeNewRole=function(newRole){var newIndex=scope.newRoles.indexOf(newRole);-1!=newIndex&&scope.newRoles.splice(newIndex,1)},scope.getOtherRoles=function(){var formattedList=[];return scope.roles.forEach(function(role){for(var match=!1,i=0;i<role.services.length;i++)if(role.services[i].itemInfo.name===scope.service.name&&role.services[i].read){match=!0;break}match||formattedList.push(role)}),formattedList},scope.addServiceToRole=function(item,index){scope.newRoles.splice(index,1);var serviceObj={create:!1,delete:!1,update:!1,read:!0,itemInfo:{name:scope.service.name}};scope.roles[scope.roles.indexOf(item)].services.push(serviceObj),scope.serviceFilter()},scope.createNewRole=function(){newItem={name:"",create:!1,read:!0,update:!1,delete:!1},scope.newRoles.push(newItem)}}}}]),app.directive("deployList",["$q","currentSystem","loadDisplay","confirmDialog","toastr","Resources","errorDialog",function($q,currentSystem,loadDisplay,confirmDialog,toastr,Resources,errorDialog){return{restrict:"E",scope:{resourceType:"=",resourceId:"="},templateUrl:"partials/directives/deployList.html",link:function(scope){scope.system=currentSystem.getSystem(),scope.edges={},scope.resource={},scope.deploymentSettings={},scope.filterString="";var loadSettings=function(){Resources.getResource(scope.resourceType,scope.resourceId).then(function(resource){scope.resource=angular.copy(resource),scope.deploymentSettings=angular.copy(resource.deploymentSettings),scope.edges={};for(var i in scope.system.edges)scope.edges[scope.system.edges[i].name]=!1;if(!scope.deploymentSettings.allEdges)for(var i in scope.deploymentSettings.edges)scope.edges[scope.deploymentSettings.edges[i]]=!0},function(err){errorDialog.show("Error!","Unable to load deployment settings",err)})};scope.updateSettings=function(){var deployTo=[];for(var edgeName in scope.edges)scope.edges[edgeName]&&deployTo.push(edgeName);scope.deploymentSettings.edges=deployTo;var updatePromise=Resources.deploy(scope.resource,scope.deploymentSettings);loadDisplay.addDisplay(updatePromise,"Updating deploy settings...")},loadSettings()}}}]),angular.module("adminPortal").directive("deviceRoleList",["loadDisplay","errorDialog",function(loadDisplay,errorDialog){return{restrict:"E",templateUrl:"partials/directives/deviceRoleList.html",scope:{roles:"=",newRoles:"=",roleFilter:"="},link:function(scope){scope.removeRole=function(role){delete role.deviceList,scope.roleFilter()},scope.removeNewRole=function(newRole){var newIndex=scope.newRoles.indexOf(newRole);-1!=newIndex&&scope.newRoles.splice(newIndex,1)},scope.getOtherRoles=function(){var formattedList=[];return scope.roles.forEach(function(role){role.devices||formattedList.push(role)}),formattedList},scope.addUserPermsToRole=function(item,index){scope.newRoles.splice(index,1);var devicePerms={create:!1,delete:!1,update:!1,read:!1};scope.roles[scope.roles.indexOf(item)].devices=devicePerms,scope.roleFilter()},scope.createNewRole=function(){var newItem={name:"",create:!1,read:!1,update:!1,delete:!1};scope.newRoles.push(newItem)}}}}]),angular.module("adminPortal").directive("dispSinglePerm",[function(){return{restrict:"E",templateUrl:"partials/directives/dispSinglePerm.html",scope:{name:"@",permissions:"=",type:"@"}}}]),app.directive("edgeConfig",["edgeConstants","consoleConstants","platformRequest",function(edgeConstants,consoleConstants,platformRequest){return{restrict:"E",scope:{system:"=",versions:"=",isNew:"@"},templateUrl:"partials/directives/edgeConfig.html",link:function(scope){scope.section="setup",scope.selectedTarget="",scope.isConnectedToEdge=platformRequest.isConnectedToEdge(),scope.updateScript="",scope.consoleConstants=consoleConstants,scope.targets={linux386:{name:"Linux 32bit - i386",link:"https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-386.tar.gz",install:{Download:"curl -sSL -O -L https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-386.tar.gz",Unzip:"tar xzvf edge-linux-386.tar.gz",Install:"sudo ln -f edge-"+scope.versions.preferedEdgeVersion+" /usr/local/bin/edge",Permission:"sudo chmod +x /usr/local/bin/edge"},flags:""},linux32arm:{name:"Linux 32bit - ARM",link:"https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-arm.tar.gz",install:{Download:"curl -sSL -O -L https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-arm.tar.gz",Unzip:"tar xzvf edge-linux-arm.tar.gz",Install:"sudo ln -f edge-"+scope.versions.preferedEdgeVersion+" /usr/local/bin/edge",Permission:"sudo chmod +x /usr/local/bin/edge"},flags:"-disable-pprof"},linux64amd:{name:"Linux 64bit - AMD",link:"https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-amd64.tar.gz",install:{Download:"curl -sSL -O -L https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-amd64.tar.gz",Unzip:"tar xzvf edge-linux-amd64.tar.gz",Install:"sudo ln -f edge-"+scope.versions.preferedEdgeVersion+" /usr/local/bin/edge",Permission:"sudo chmod +x /usr/local/bin/edge"},flags:""},linux64arm:{name:"Linux 64bit - ARM",link:"https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-arm64.tar.gz",install:{Download:"curl -sSL -O -L https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-linux-arm64.tar.gz",Unzip:"tar xzvf edge-linux-arm64.tar.gz",Install:"sudo ln -f edge-"+scope.versions.preferedEdgeVersion+" /usr/local/bin/edge",Permission:"sudo chmod +x /usr/local/bin/edge"},flags:"-disable-pprof"},MacOS64:{name:"MacOS 64bit",link:"https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-darwin-amd64.tar.gz",install:{Download:"curl -sSL -O -L https://github.com/ClearBlade/Edge/releases/download/"+scope.versions.preferedEdgeVersion+"/edge-darwin-amd64.tar.gz",Unzip:"tar xzvf edge-darwin-amd64.tar.gz",Install:"sudo mkdir /usr/local/bin 2>/dev/null || sudo ln -f edge-"+scope.versions.preferedEdgeVersion+" /usr/local/bin/edge",Permission:"sudo chmod +x /usr/local/bin/edge"},flags:""}};var platformURLComponents=platformRequest.GetUrl().split("://");scope.startup={platformIp:platformURLComponents[1],parentSystem:scope.system.getSystemKey(),edgeIp:consoleConstants.internal.LOCALHOST,edgeId:scope.system.getName(),edgeToken:scope.system[edgeConstants.TOKEN]},scope.isConnectedToEdge&&scope.system.upgradeEdge().then(function(data){var parsed=JSON.parse(data);scope.updateScript=parsed.substr(9,parsed.length-11)}),scope.getStartupCommand=function(){var additionalFlags="";if(this.selectedTarget){additionalFlags=scope.targets[this.selectedTarget].flags+" "}return"edge -novi-ip="+scope.startup.platformIp+" -parent-system="+scope.startup.parentSystem+" -edge-ip="+scope.startup.edgeIp+" -edge-id="+scope.startup.edgeId+" -edge-cookie="+scope.startup.edgeToken+" "+additionalFlags+"-db=sqlite -sqlite-path=./edge.db -sqlite-path-users=./edgeusers.db"},scope.changeSelector=function(event,newSection){event.preventDefault(),scope.section=newSection},scope.downloadSetup=function(){if(""!=this.selectedTarget){var installScript="";installScript+=scope.targets[this.selectedTarget].install.Download+"\n",installScript+=scope.targets[this.selectedTarget].install.Unzip+"\n",installScript+=scope.targets[this.selectedTarget].install.Install+"\n",installScript+=scope.targets[this.selectedTarget].install.Permission;var element=document.createElement("a");element.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(installScript)),element.setAttribute("download","install.sh"),element.style.display="none",document.body.appendChild(element),element.click(),document.body.removeChild(element)}}}}}]),app.directive("edgeForm",["consoleConstants",function(consoleConstants){return{restrict:"E",scope:{system:"=",validator:"=",isNew:"@"},templateUrl:"partials/directives/edgeForm.html",link:function(scope){scope.consoleConstants=consoleConstants}}}]),angular.module("adminPortal").directive("fileImport",[function(){return{restrict:"E",template:"<input id='file' type='file' name='theFile'>",scope:{file:"=",fileName:"=",fileType:"=",selected:"=",callback:"=",params:"@"},link:function(scope,elem,attrs){function fileSelected(e){var files=e.target.files;scope.file=files[0],angular.isDefined(attrs.fileName)&&scope.$apply(function(){scope.fileName=files[0].name}),angular.isDefined(attrs.fileType)&&scope.$apply(function(){scope.fileType=files[0].type}),angular.isDefined(attrs.selected)&&scope.$apply(function(){scope.selected=!0}),angular.isDefined(attrs.callback)&&!angular.isDefined(attrs.params)&&scope.callback(scope.file),angular.isDefined(attrs.callback)&&angular.isDefined(attrs.params)&&scope.callback(scope.file,scope.params)}elem.bind("change",fileSelected)}}}]),app.directive("node",function($compile){return{restrict:"E",templateUrl:"partials/directives/leafNode.html",link:function(scope,elm,attrs){scope.isNodeValid=function(currnode){return"system.json"!=currnode.name&&".cbmeta"!=currnode.name},scope.isDisable=function(currnode){if(currnode.children.length<1)return!0;if(2==currnode.children.length){var jsFile=currnode.name+".js",jsonFile=currnode.name+".json",case1=currnode.children[0].name==jsFile&&currnode.children[1].name==jsonFile,case2=currnode.children[1].name==jsFile&&currnode.children[0].name==jsonFile;return!(!case1&&!case2)}return!1},scope.toggleAccordionNode=function(currnode){currnode.children.length>0&&(scope.childnode=currnode)},scope.checkParent=function(currnode){if(currnode.prefix.includes("/")){var parentPrefix="check"+currnode.prefix.substr(0,currnode.prefix.lastIndexOf("/"));scope.$emit(parentPrefix,parentPrefix)}},scope.unCheckParent=function(currnode){if(currnode.prefix.includes("/")){var parentPrefix="unCheck"+currnode.prefix.substr(0,currnode.prefix.lastIndexOf("/"));scope.$emit(parentPrefix,parentPrefix)}},scope.checkChildren=function(currnode){angular.forEach(currnode.children,function(c){c.checked=currnode.checked,scope.checkChildren(c)})},scope.nodeClicked=function(currnode){currnode.checked=!currnode.checked,currnode.checked?(scope.checkChildren(currnode),scope.checkParent(currnode)):(scope.checkChildren(currnode),scope.unCheckParent(currnode))};var unCheckParentEvent="unCheck"+scope.node.prefix,checkParentEvent="check"+scope.node.prefix;scope.$on(unCheckParentEvent,function(event){scope.node.checked&&(scope.node.checked=!scope.node.checked,scope.unCheckParent(scope.node))}),scope.$on(checkParentEvent,function(event){if(!scope.node.checked)if(null!=scope.node.children){for(var i=0;i<scope.node.children.length;i++)if(!scope.node.children[i].checked)return;scope.node.checked=!scope.node.checked,scope.checkParent(scope.node)}else scope.node.checked=!scope.node.checked,scope.checkParent(scope.node)}),scope.switcher=function(booleanExpr,trueValue,falseValue){return booleanExpr?trueValue:falseValue},scope.isLeaf=function(_data){return 0==_data.children.length}}}}),angular.module("adminPortal").directive("boxTopButtons",[function(){return{restrict:"E",templateUrl:"partials/directives/leftBoxTopButtons.html",scope:{title:"@",addItem:"=",removeItem:"=",list:"="}}}]),angular.module("adminPortal").directive("msgRoleList",[function(){return{restrict:"E",templateUrl:"partials/directives/msgRoleList.html",scope:{roles:"=",newRoles:"=",roleFilter:"="},link:function(scope){scope.removeRole=function(role){delete role.msgHistory,scope.roleFilter()},scope.removeNewRole=function(newRole){var newIndex=scope.newRoles.indexOf(newRole);-1!=newIndex&&scope.newRoles.splice(newIndex,1)},scope.getOtherRoles=function(){var formattedList=[];return scope.roles.forEach(function(role){role.msgHistory||formattedList.push(role)}),formattedList},scope.addUserPermsToRole=function(item,index){scope.newRoles.splice(index,1);var msgHistoryPerms={create:!1,delete:!1,update:!1,read:!1};scope.roles[scope.roles.indexOf(item)].msgHistory=msgHistoryPerms,scope.roleFilter()},scope.createNewRole=function(){var newItem={name:"",create:!1,read:!1,update:!1,delete:!1};scope.newRoles.push(newItem)}}}}]),angular.module("adminPortal").directive("ngBlur",["$parse",function($parse){return{link:function(scope,element,attr){var fn=$parse(attr.ngBlur);element.bind("blur",function(event){scope.$apply(function(){fn(scope,{$event:event})})})}}}]),angular.module("adminPortal").directive("ngMenu",["currentSystem","$rootScope",function(currentSystem,$rootScope){return{templateUrl:"partials/directives/menu.html",controller:"menuCtrl",scope:{icon:"@",textIcon:"@",page:"@",addFn:"=",systemRefresh:"="},transclude:!1,replace:!0,link:function(scope){scope.onPage=function(checkPage){return checkPage===scope.page};var hashes={data:"overview/console/data/summary/summary/?pos=collapseOneA&pos2=collapseOne&pos3=collapseOneB",messages:"overview/console/messaging/?pos=collapseOneA&pos2=collapseOne",users:"overview/console/usersAndRoles/?pos=collapseOneA&pos2=collapseOne",code:"",adapters:"overview/console/adapters"};scope.hash=hashes[scope.page]}}}]),app.directive("nodeTree",function(){return{templateUrl:"partials/directives/nodeTree.html",restrict:"E",scope:{tree:"=ngModel"},link:function(scope,elm,attrs){scope.oneAtATime=!0,scope.status={isOpen:!0},scope.toggleOpen=function(){scope.status.isOpen=!scope.status.isOpen},scope.status={isFirstOpen:!0,isFirstDisabled:!1},scope.accordionArray=[],scope.toggleSystemAccordion=function(node,index){scope.accordionArray[index]||(scope.status.isOpen=!scope.status.isOpen)}}}}),app.directive("overrideServiceSelector",[function(){return{restrict:"E",scope:{docsUrl:"@",label:"@",value:"=ngModel",codeServices:"="},templateUrl:"partials/directives/overrideServiceSelector.html",link:function(scope){scope.inputId="CLEARBLADE_OVERRIDE_ID_"+Math.random(),scope.updateValue=function(newVal){scope.value=newVal},scope.isValueEmpty=function(){return""===scope.value||" "===scope.value},scope.focusInput=function(){document.getElementById(scope.inputId).focus()}}}}]),app.directive("overrideServiceSelectorForm",["consoleConstants",function(consoleConstants){return{restrict:"E",scope:{system:"="},templateUrl:"partials/directives/overrideServiceSelectorForm.html",link:function(scope){scope.authServiceInputId="CLEARBLADE_AUTH_SERVICE_OVERRIDE_ID",scope.regServiceInputId="CLEARBLADE_REG_SERVICE_OVERRIDE_ID",scope.codeServices=[],scope.consoleConstants=consoleConstants,scope.system.getCodeServices().then(function(data){scope.codeServices=data.code}),scope.system.getInfo().then(function(data){})}}}]),angular.module("adminPortal").directive("pageSlideClose",[function(){return{restrict:"E",templateUrl:"partials/directives/pageSlideClose.html",replace:!0}}]),app.directive("pageslide",["$document","$timeout",function($document,$timeout){return{restrict:"EAC",transclude:!1,scope:{psOpen:"=?",psAutoClose:"=?",psSide:"@",psSpeed:"@",psClass:"@",psSize:"@",psZindex:"@",psSqueeze:"@",psCloak:"@",psPush:"@",psContainer:"@",psKeyListener:"@",psBodyClass:"@"},link:function($scope,el,attrs){function setBodyClass(value){if(param.bodyClass){var bodyClass=param.className+"-body",bodyClassRe=new RegExp(" "+bodyClass+"-closed| "+bodyClass+"-open");body.className=body.className.replace(bodyClassRe,""),body.className+=" "+bodyClass+"-"+value}}function psClose(slider,param){if(slider&&0!==slider.style.width)switch(content.css("display","none"),param.side){case"right":slider.style.width="0px",param.squeeze&&(body.style.right="0px"),param.push&&(body.style.right="0px",body.style.left="0px");break;case"left":slider.style.width="0px",param.squeeze&&(body.style.left="0px"),param.push&&(body.style.left="0px",body.style.right="0px");break;case"top":slider.style.height="0px",param.squeeze&&(body.style.top="0px"),param.push&&(body.style.top="0px",body.style.bottom="0px");break;case"bottom":slider.style.height="0px",param.squeeze&&(body.style.bottom="0px"),param.push&&(body.style.bottom="0px",body.style.top="0px")}$scope.psOpen=!1,param.keyListener&&$document.off("keydown",keyListener),setBodyClass("closed")}function psOpen(slider,param){if(slider.style.position="fixed",slider.style.overflow="auto",0!==slider.style.width){switch(param.side){case"right":slider.style.width=param.size,param.squeeze&&(body.style.right=param.size),param.push&&(body.style.right=param.size,body.style.left="-"+param.size);break;case"left":slider.style.width=param.size,param.squeeze&&(body.style.left=param.size),param.push&&(body.style.left=param.size,body.style.right="-"+param.size);break;case"top":slider.style.height=param.size,param.squeeze&&(body.style.top=param.size),param.push&&(body.style.top=param.size,body.style.bottom="-"+param.size);break;case"bottom":slider.style.height=param.size,param.squeeze&&(body.style.bottom=param.size),param.push&&(body.style.bottom=param.size,body.style.top="-"+param.size)}$timeout(function(){content.css("display","block")},1e3*param.speed),$scope.psOpen=!0,param.keyListener&&$document.on("keydown",keyListener),setBodyClass("open")}}function keyListener(e){27===(e.keyCode||e.which)&&psClose(slider,param)}var param={};param.side=$scope.psSide||"right",param.speed=$scope.psSpeed||"0.5",param.size=$scope.psSize||"300px",param.zindex=$scope.psZindex||1e3,param.className=$scope.psClass||"ng-pageslide",param.squeeze=Boolean($scope.psSqueeze)||!1,param.push=Boolean($scope.psPush)||!1,param.container=$scope.psContainer||!1,param.keyListener=Boolean($scope.psKeyListener)||!1,param.bodyClass=$scope.psBodyClass||!1,el.addClass(param.className);var content=null,slider=null,body=param.container?document.getElementById(param.container):document.body;if(setBodyClass("closed"),slider=el[0],"div"!==slider.tagName.toLowerCase()&&"pageslide"!==slider.tagName.toLowerCase())throw new Error("Pageslide can only be applied to <div> or <pageslide> elements");if(0===slider.children.length)throw new Error("You have to content inside the <pageslide>");switch(content=angular.element(slider.children),body.appendChild(slider),slider.style.zIndex=param.zindex,slider.style.position=!1!==param.container?"absolute":"fixed",slider.style.width=0,slider.style.height=0,slider.style.transitionDuration=param.speed+"s",slider.style.webkitTransitionDuration=param.speed+"s",slider.style.transitionProperty="width, height",param.squeeze&&(body.style.position="absolute",body.style.transitionDuration=param.speed+"s",body.style.webkitTransitionDuration=param.speed+"s",body.style.transitionProperty="top, bottom, left, right"),param.side){case"right":slider.style.height=attrs.psCustomHeight||"100%",slider.style.top=attrs.psCustomTop||"0px",slider.style.bottom=attrs.psCustomBottom||"0px",slider.style.right=attrs.psCustomRight||"0px";break;case"left":slider.style.height=attrs.psCustomHeight||"100%",slider.style.top=attrs.psCustomTop||"0px",slider.style.bottom=attrs.psCustomBottom||"0px",slider.style.left=attrs.psCustomLeft||"0px";break;case"top":slider.style.width=attrs.psCustomWidth||"100%",slider.style.left=attrs.psCustomLeft||"0px",slider.style.top=attrs.psCustomTop||"0px",slider.style.right=attrs.psCustomRight||"0px";break;case"bottom":slider.style.width=attrs.psCustomWidth||"100%",slider.style.bottom=attrs.psCustomBottom||"0px",slider.style.left=attrs.psCustomLeft||"0px",slider.style.right=attrs.psCustomRight||"0px"}$scope.$watch("psOpen",function(value){value?psOpen(slider,param):psClose(slider,param)}),$scope.$watch("psSize",function(newValue,oldValue){oldValue!==newValue&&(param.size=newValue,psOpen(slider,param))}),$scope.$on("$destroy",function(){slider.parentNode===body&&body.removeChild(slider)}),$scope.psAutoClose&&($scope.$on("$locationChangeStart",function(){psClose(slider,param)}),$scope.$on("$stateChangeStart",function(){psClose(slider,param)}))}}}]),angular.module("adminPortal").directive("paramList",[function(){return{restrict:"E",templateUrl:"partials/directives/paramList.html",scope:{list:"=",lengthErr:"=",uniqueErr:"=",valLengthErr:"=",create:"@",callback:"=",titleClass:"@"},link:function(scope,elem,attrs){scope.addParam=function(){var newParam={name:"",value:""};scope.list.push(newParam),scope.validate()},scope.removeParam=function(param){var index=scope.list.indexOf(param);scope.list.splice(index,1),scope.validate()},scope.validate=function(){validateLength(),validateUnique(),scope.callback&&scope.callback()};var validateLength=function(){if(!(scope.list.length>0))return scope.lengthErr=!1;scope.list.forEach(function(param,idx){if(""==param.name||void 0==param.name)return scope.lengthErr=!0,scope.list[idx].error="Parameter must have a name";scope.lengthErr=!1,scope.list[idx].error=""})},validateUnique=function(){scope.uniqueErr=!1;var paramNames=[];scope.list.forEach(function(param,idx){paramNames.push(param.name),paramNames.forEach(function(storedName,storedIdx){if(idx!==storedIdx&&param.name===storedName)return scope.uniqueErr=!0,scope.list[idx].error="Parameter names must be unique"})})}}}}]),angular.module("adminPortal").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ctrl){scope.$watch(function(){var combined;return(scope.passwordVerify||ctrl.$viewValue)&&(combined=scope.passwordVerify+"_"+ctrl.$viewValue),combined},function(value){value&&ctrl.$parsers.unshift(function(viewValue){return scope.passwordVerify!==viewValue?void ctrl.$setValidity("passwordVerify",!1):(ctrl.$setValidity("passwordVerify",!0),viewValue)})})}}}]),angular.module("adminPortal").directive("permCreator",["loadDisplay",function(loadDisplay){return{restrict:"E",templateUrl:"partials/directives/permCreator.html",scope:{permList:"=",optionCaller:"=",title:"@"},link:function(scope){if(scope.optionList=[],null!=scope.optionCaller){var promise=scope.optionCaller();"services"===scope.title?(promise.then(function(listOptions){for(var i in listOptions){var newOption={name:listOptions[i].name};scope.optionList.push(newOption)}}),loadDisplay.addDisplay(promise,"Getting Services","collectionBlock")):(promise.then(function(listOptions){for(var i in listOptions){var newOption={name:listOptions[i].name,id:listOptions[i].collectionID};scope.optionList.push(newOption)}}),loadDisplay.addDisplay(promise,"Getting Collections","collectionBlock"))}else scope.optionList=[];scope.removeItem=function(item){var index=scope.permList.indexOf(item);-1!=index&&scope.permList.splice(index,1)},scope.addItem=function(){var newItem={itemInfo:{},create:!1,read:!1,update:!1,delete:!1};scope.permList.push(newItem)}}}}]),angular.module("adminPortal").directive("popoverCtrl",["users","errorDialog","$parse",function(users,errorDialog,$parse){return{restrict:"E",replace:!0,scope:{control:"=",userId:"@",email:"@",displayFn:"="},templateUrl:"partials/directives/popoverCtrl.html",link:function(scope,elem,attrs){var defaultMsg="<div><b>Loading...</b></div>";scope.userRoles=defaultMsg,scope.display=function(){scope.displayFn(scope.userId,scope.email).then(function(){getRoles()})};var createRoleList=function(array){var listElem="";if(array.length>0)for(var i=0;i<array.length;i++)listElem+="<div>"+array[i].Name+"</div>";else listElem="No roles for user";return listElem},getRoles=function(){users.getUserRoles(scope.userId).then(function(data){scope.userRoles=createRoleList(data)},function(err){errorDialog.show("Error!","Unable to fetch roles for user",err)})};elem.bind("mouseover",function(e){scope.userRoles===defaultMsg&&getRoles()})}}}]),angular.module("ui.bootstrap.popover").directive("popoverHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("popoverHtmlUnsafe",["$tooltip",function($tooltip){return $tooltip("popoverHtmlUnsafe","popover","click")}]),app.directive("resourceSelector",["systemOptions","edgeConstants",function(systemOptions,edgeConstants){return{restrict:"E",scope:{system:"=",syncSettings:"=",defaultResource:"@"},templateUrl:"partials/directives/resourceSelector.html",link:function(scope){var currentSettings=[],sync_edge_tables=scope.system[edgeConstants.RESOLUTION.SYNC_EDGE_TABLES]?scope.system[edgeConstants.RESOLUTION.SYNC_EDGE_TABLES].split(","):[];scope.currentPolicy={value:scope.system[edgeConstants.RESOLUTION.POLICY_NAME]},scope.conflictPolicies=edgeConstants.CONFLICT_POLICIES,scope.customResolution={value:scope.system[edgeConstants.RESOLUTION.RESOLVER_FUNC]},scope.system.getSyncInfo().then(function(result){if(void 0!==result[scope.system.getName()])for(var i=0,data=Object.keys(result[scope.system.getName()]),len=data.length;i<len;i++){var setting=data[i].split("::");2==setting.length&&currentSettings.push({def_module:setting[0],def_name:setting[1]})}}),systemOptions.fetch(scope.system).then(function(data){scope.options=data,scope.section=void 0!==scope.defaultResource?scope.defaultResource:"service",scope.noItemsInSection=!(scope.options[scope.section].length>0),scope.customResolution.value=matchingService(scope.customResolution.value)});var inSettings=function(settings,module,name){for(var i=0,len=settings.length;i<len;i++)if(settings[i].def_module===module&&settings[i].def_name===name)return i;return-1},updateSettings=function(method,index,setting){"add"===method&&(-1===index?scope.syncSettings.add.push(setting):scope.syncSettings.add.splice(setting)),"remove"===method&&(-1===index?scope.syncSettings.remove.push(setting):scope.syncSettings.remove.splice(index,1))},matchingService=function(serviceName){for(var i=0,len=scope.options.service.length;i<len;i++)if(serviceName===scope.options.service[i].name)return scope.options.service[i];return""},arrayToList=function(array){for(var str="",i=0,len=array.length;i<len;i++)""!==array[i]&&(str+=array[i]+",");return str.substring(0,str.length-1)},syncConflictConfig=function(){var policy=scope.currentPolicy.value;scope.system[edgeConstants.RESOLUTION.POLICY_NAME]=policy,policy!=edgeConstants.CONFLICT_POLICIES.PLATFORM_WINS&&policy!=edgeConstants.CONFLICT_POLICIES.EDGE_WINS||(scope.system[edgeConstants.RESOLUTION.SYNC_EDGE_TABLES]="",scope.system[edgeConstants.RESOLUTION.RESOLVER_FUNC]=""),policy==edgeConstants.CONFLICT_POLICIES.PER_TABLE&&(scope.system[edgeConstants.RESOLUTION.SYNC_EDGE_TABLES]=arrayToList(sync_edge_tables),scope.system[edgeConstants.RESOLUTION.RESOLVER_FUNC]=""),policy==edgeConstants.CONFLICT_POLICIES.USER_DEFINED&&(scope.system[edgeConstants.RESOLUTION.SYNC_EDGE_TABLES]="",scope.system[edgeConstants.RESOLUTION.RESOLVER_FUNC]=scope.customResolution.value.name)};scope.isSynced=function(module,name){return inSettings(currentSettings,module,name)>-1},scope.getCollectionResolutionPolicy=function(collection){return sync_edge_tables.indexOf(collection)>-1?edgeConstants.CONFLICT_POLICIES.EDGE_WINS:edgeConstants.CONFLICT_POLICIES.PLATFORM_WINS},scope.setCollectionResolutionPolicy=function(collection,policy){var idx=sync_edge_tables.indexOf(collection);-1===idx&&policy==edgeConstants.CONFLICT_POLICIES.EDGE_WINS?sync_edge_tables.push(collection):sync_edge_tables.splice(idx,1),syncConflictConfig()},scope.policyChange=function(){syncConflictConfig()},scope.toggleSync=function(module,name){var setting={def_module:module,def_name:name};scope.isSynced(module,name)?updateSettings("remove",inSettings(scope.syncSettings.remove,module,name),setting):updateSettings("add",inSettings(scope.syncSettings.add,module,name),setting)},scope.changeSelector=function(event,newSection){event.preventDefault(),scope.section=newSection,scope.noItemsInSection=!(scope.options[scope.section].length>0)}}}}]),angular.module("adminPortal").directive("roleGrid",[function(){return{restrict:"E",templateUrl:"partials/directives/role-grid.html",scope:{reorderPlugin:"=",pagingOptions:"=",userReloader:"="},controller:"roleGridCtrl",link:function(scope,elem){scope.roleGridOptions.pagingOptions=scope.pagingOptions,scope.roleGridOptions.plugins.push(scope.reorderPlugin)}}}]),angular.module("adminPortal").directive("roleList",["loadDisplay","errorDialog",function(loadDisplay,errorDialog){return{restrict:"E",templateUrl:"partials/directives/roleList.html",scope:{roles:"=",allRoles:"=",newRoles:"=",resource:"=",resourceFilter:"=",resourceKey:"@"},link:function(scope){scope.removeRole=function(role,collIdx){role[scope.resourceKey].splice(collIdx,1),scope.resourceFilter()},scope.removeNewRole=function(newRole){var newIndex=scope.newRoles.indexOf(newRole);-1!=newIndex&&scope.newRoles.splice(newIndex,1)},scope.getOtherRoles=function(){var formattedList=[];return scope.roles.forEach(function(role){for(var match=!1,i=0;i<role[scope.resourceKey].length;i++)if(void 0!==role[scope.resourceKey][i].itemInfo.id&&role[scope.resourceKey][i].itemInfo.id===scope.resource.collectionID||role[scope.resourceKey][i].itemInfo.name===scope.resource.name){match=!0;break}match||formattedList.push(role)}),formattedList},scope.addCollectionToRole=function(item,idx){scope.newRoles.splice(idx,1);var collectionObj={create:!1,delete:!1,update:!1,read:!1,itemInfo:{name:scope.resource.name,id:scope.resource.collectionID}};scope.roles[scope.roles.indexOf(item)][scope.resourceKey].push(collectionObj),scope.resourceFilter(scope.roles[scope.roles.indexOf(item)])},scope.createNewRole=function(){newItem={name:"",create:!1,read:!1,update:!1,delete:!1},scope.newRoles.push(newItem)}}}}]),angular.module("adminPortal").directive("splashBox",[function(){return{restrict:"E",scope:{name:"@",textIcon:"@",icon:"@",showHint:"@"},templateUrl:"partials/directives/splash-box.html",transclude:!0,replace:!1}}]),app.directive("syncList",["$q","currentSystem","loadDisplay","confirmDialog","toastr","Resources","errorDialog",function($q,currentSystem,loadDisplay,confirmDialog,toastr,Resources,errorDialog){return{restrict:"E",scope:{resourceType:"=",resourceId:"="},templateUrl:"partials/directives/syncList.html",link:function(scope){scope.system=currentSystem.getSystem(),scope.edges={},scope.resource={},scope.syncSettings={},scope.filterString="";var loadSettings=function(){Resources.getResource(scope.resourceType,scope.resourceId).then(function(resource){if(scope.resource=angular.copy(resource),scope.syncSettings=angular.copy(resource.syncSettings),scope.edges={},!scope.resource.syncLocked){for(var i in scope.system.edges)scope.edges[scope.system.edges[i].name]=!1;for(var i in scope.syncSettings)scope.edges[scope.syncSettings[i]]=!0}},function(err){errorDialog.show("Error!","Unable to load sync settings",err)})};scope.updateSettings=function(){var syncWith=[];for(var edgeName in scope.edges)scope.edges[edgeName]&&syncWith.push(edgeName);scope.syncSettings=syncWith;var updatePromise=Resources.saveSync(scope.resource,scope.syncSettings);loadDisplay.addDisplay(updatePromise,"Updating sync settings...")},loadSettings()}}}]),angular.module("adminPortal").directive("system",[function(){return{restrict:"E",templateUrl:"partials/directives/system.html",scope:{system:"=",selectSystem:"=",selectEdge:"=",refresh:"=",newEdgeCallback:"=",consoleConstants:"=",exportSystem:"="},link:function(scope,elem,attrs){scope.locations=[{name:"Messages",path:"messages",isNew:!0},{name:"Data",path:"collections",isNew:!0},{name:"Code",path:"code"},{name:"Auth",path:"auth.users",subpaths:[{name:"Users",path:"users",isNew:!0},{name:"Devices",path:"devices",isNew:!0},{name:"Edges",path:"edges",isNew:!0},{name:"Roles",path:"roles",isNew:!0}]},{name:"Adapters",path:"adapters",isNew:!0},{name:"Portal",path:"portal"},{name:"Deploy",path:"deploy",isNew:!0}],scope.system.lastUpdated={},scope.selectLocation=function(system,loc){loc.isNew?window.location="/console/system/"+system.systemKey+"/"+loc.path:scope.selectSystem(system,loc.path)},scope.systemSettings=function(sys){sys.editSettings()},scope.newEdge=function(){scope.newEdgeCallback(scope.system)}}}}]),angular.module("adminPortal").directive("tagManager",["Code","CodeUtils","currentSystem","adminCalls","platformRequest","$q","CbHeader","consoleConstants","utils","DevUser","$http","$localStorage",function(Code,CodeUtils,currentSystem,adminCalls,platformRequest,$q,CbHeader,consoleConstants,utils,DevUser,$http,$localStorage){return{restrict:"E",scope:{tags:"=",autocomplete:"=autocomplete",showSuggestions:"="},template:'<div class="tags"><div ng-repeat="(idx, tag) in tags" class="tag label label-success">{{tag}} <a class="close" href ng-click="remove(idx)">×</a></div></div><div class="input-group"><input type="text" class="form-control" placeholder="add a tag...press enter to add" ng-model="newValue" uib-typeahead="tag for tag in gettags($viewValue) | filter: $viewValue" typeahead-on-select="onSelect($item, $model,$label)"/> <span class="input-group-btn"><a class="btn btn-default" ng-click="add()">Add</a></span></div>',link:function(scope,$element){var input=angular.element($element).find("input");scope.showSuggestions&&(scope.autocompleteFocus=function(event,ui){return input.val(ui.item.value),!1},scope.autocompleteSelect=function(event,ui){return scope.newValue=ui.item.value,scope.$apply(scope.add),!1},scope.onSelect=function($item,$model,$label){scope.$item=$item,scope.$model=$model,scope.$label=$label,scope.add()},scope.gettags=function(query){return $http({url:"/console-api/getTags",method:"GET",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform()},params:{developerEmail:DevUser.getLoggedUser(),queryTag:query}}).then(function(data){scope.list_of_tags=data.data.results,console.log(scope.list_of_tags)},function(error){console.log(error)}),scope.list_of_tags}),scope.add=function(){-1==scope.tags.indexOf(scope.newValue)&&scope.tags.push(scope.newValue),scope.newValue=""},scope.remove=function(idx){scope.tags.splice(idx,1)},input.bind("keypress",function(event){13==event.keyCode&&scope.$apply(scope.add)})}}}]),angular.module("adminPortal").directive("typeaheadFocus",function(){return{require:"ngModel",link:function(scope,element,attr,ngModel){element.bind("click",function(){var viewValue=ngModel.$viewValue;" "==ngModel.$viewValue&&ngModel.$setViewValue(null),ngModel.$setViewValue(" "),ngModel.$setViewValue(viewValue||" ")}),scope.emptyOrMatch=function(actual,expected){return" "==expected||actual.indexOf(expected)>-1}}}}),angular.module("adminPortal").directive("userRoleList",["loadDisplay","errorDialog",function(loadDisplay,errorDialog){return{restrict:"E",templateUrl:"partials/directives/userRoleList.html",scope:{roles:"=",newRoles:"=",roleFilter:"="},link:function(scope){scope.removeRole=function(role){delete role.users,scope.roleFilter()},scope.removeNewRole=function(newRole){var newIndex=scope.newRoles.indexOf(newRole);-1!=newIndex&&scope.newRoles.splice(newIndex,1)},scope.getOtherRoles=function(){var formattedList=[];return scope.roles.forEach(function(role){role.users||formattedList.push(role)}),formattedList},scope.addUserPermsToRole=function(item,index){scope.newRoles.splice(index,1);var userPerms={create:!1,delete:!1,update:!1,read:!1};scope.roles[scope.roles.indexOf(item)].users=userPerms,scope.roleFilter()},scope.createNewRole=function(){var newItem={name:"",create:!1,read:!1,update:!1,delete:!1};scope.newRoles.push(newItem)}}}}]),app.factory("DirecTree",function(){function DirecTree(){this.root=new Node("")}var Node=function(data){this.name=data,this.children=[],this.isLeaf=!0,this.isPathToFile=!1,this.pathToFile=null,this.prefix=null,this.checked=!0};DirecTree.prototype.GetRoot=function(){return this.root},DirecTree.prototype.add=function(path,typeofPath){if(!this.root)return null;_addNode(this.root,path,typeofPath)};var _addNode=function(node,pathstr,type){if(!node||!pathstr)return null;for(var path=pathstr.split("/"),i=0;i<path.length;i++){for(var currWord=path[i],child=null,indexstore=null,j=0;j<node.children.length;j++)node.children[j].name==currWord&&(child=node.children[j],indexstore=j);if(null==child){child=new Node(currWord),node.children[node.children.length]=child;var prefixappend;null!=node.prefix?(prefixappend=node.prefix+"/",child.prefix=prefixappend+child.name):child.prefix=child.name,node.isLeaf=!1,node=node.children[node.children.length-1]}null!=indexstore&&(node=node.children[indexstore]),i==path.length-1&&(child.isLeaf=!0,"tree"!=type&&(child.isPathToFile=!0,child.pathToFile=pathstr))}};DirecTree.prototype.insertNode=function(path,type){this.add(path,type)},DirecTree.prototype.buildDirecTree=function(pathList){for(var i=0;i<pathList.length;i++)this.insertNode(pathList[i].path,pathList[i].type)},DirecTree.prototype.buildDirecTreeUsingFilePathArray=function(filePathArray){for(var i=0;i<filePathArray.length;i++)this.insertNode(filePathArray[i],"file")},DirecTree.prototype.getNodeFromPath=function(pathstr){if(node=this.root,!node||!pathstr)return null;for(var path=pathstr.split("/"),i=0;i<path.length;i++){for(var currWord=path[i],child=null,j=0;j<node.children.length;j++)node.children[j].name==currWord&&(child=node.children[j]);if(!child)return null;if(child.isPathToFile)return child;node=child}return node},DirecTree.prototype.getChildrenFromPath=function(pathstr){return node=this.getNodeFromPath(pathstr),null!=node?node.children:null},DirecTree.prototype.getCheckedChildrenFromPath=function(pathstr){var node=this.getNodeFromPath(pathstr),checkedChildrenArray=[];if(null==node||null==node.children)return null;var children=node.children;if(null!=children)for(var i=0;i<children.length;i++)children[i].checked&&checkedChildrenArray.push(children[i]);return checkedChildrenArray};var _getAllChildrenFilesDFS=function(node,ans){if(node&&(!node.isLeaf||node.isPathToFile)){if(node.isPathToFile)return void ans.push(node.pathToFile);for(var i=0;i<node.children.length;i++)_getAllChildrenFilesDFS(node.children[i],ans)}};DirecTree.prototype.getAllChildrenFiles=function(node){var ans=new Array;return _getAllChildrenFilesDFS(node,ans),ans},DirecTree.prototype.getSelectedValuesRec=function(systemName,ans){var node=this.getNodeFromPath(systemName);if(null==node||null==node.children)return null;tempans=new Array;for(var i=0;i<node.children.length;i++)node.children[i].checked?(tempans=this.getAllChildrenFiles(node.children[i]),ans=ans.concat(tempans)):ans=ans.concat(this.getSelectedValuesRec(node.children[i].prefix,new Array));return ans};var Assets={data:"data",services:"code/services",libraries:"code/libraries",triggers:"triggers",timers:"timers",users:"users",devices:"devices",edges:"edges",roles:"roles",adapters:"adapters",portals:"portals",plugins:"plugins"};return DirecTree.prototype.getAssetCountMap=function(systemName){var node=this.getNodeFromPath(systemName);if(null==node||null==node.children)return null;var assetCountMap=[];for(var key in Assets)if(Assets.hasOwnProperty(key)){var children=this.getCheckedChildrenFromPath(systemName+"/"+Assets[key]);if(null!=children){var assetCount=[];assetCount.push(key),assetCount.push(children.length),assetCountMap.push(assetCount)}}return assetCountMap},DirecTree}),app.factory("Adapter",["consoleConstants","CbHeader","platformRequest","$q","currentSystem","$http","utils","DevUser",function(consoleConstants,CbHeader,platformRequest,$q,currentSystem,$http,utils,DevUser){function Adapter(config){this[consoleConstants.internal.SYSTEM_KEY]=config[consoleConstants.internal.SYSTEM_KEY],this[consoleConstants.internal.SYSTEM_SECRET]=config[consoleConstants.internal.SYSTEM_SECRET],this[consoleConstants.external.ADAPTER.NAME]=config[consoleConstants.external.ADAPTER.NAME],this[consoleConstants.external.ADAPTER.ARCH]=config[consoleConstants.external.ADAPTER.ARCH],this[consoleConstants.external.ADAPTER.DESCRIPTION]=config[consoleConstants.external.ADAPTER.DESCRIPTION],this[consoleConstants.external.ADAPTER.OS]=config[consoleConstants.external.ADAPTER.OS]||"",this[consoleConstants.external.ADAPTER.DEPLOY_CMD]=config[consoleConstants.external.ADAPTER.DEPLOY_CMD]||"",this[consoleConstants.external.ADAPTER.START_CMD]=config[consoleConstants.external.ADAPTER.START_CMD]||"",this[consoleConstants.external.ADAPTER.STOP_CMD]=config[consoleConstants.external.ADAPTER.STOP_CMD]||"",this[consoleConstants.external.ADAPTER.STATUS_CMD]=config[consoleConstants.external.ADAPTER.STATUS_CMD]||"",this[consoleConstants.external.ADAPTER.UNDEPLOY_CMD]=config[consoleConstants.external.ADAPTER.UNDEPLOY_CMD]||"",this[consoleConstants.external.ADAPTER.LOGS_CMD]=config[consoleConstants.external.ADAPTER.LOGS_CMD]||"",this[consoleConstants.external.ADAPTER.FILES]=[],this.internalName=this[consoleConstants.external.ADAPTER.NAME]}return Adapter.prototype.create=function(){var deferred=$q.defer(),payload={};return payload[consoleConstants.external.ADAPTER.NAME]=this[consoleConstants.external.ADAPTER.NAME],payload[consoleConstants.external.ADAPTER.ARCH]=this[consoleConstants.external.ADAPTER.ARCH],payload[consoleConstants.external.ADAPTER.DESCRIPTION]=this[consoleConstants.external.ADAPTER.DESCRIPTION],payload[consoleConstants.external.ADAPTER.OS]="",payload[consoleConstants.external.ADAPTER.DEPLOY_CMD]="",payload[consoleConstants.external.ADAPTER.START_CMD]="",payload[consoleConstants.external.ADAPTER.STOP_CMD]="",payload[consoleConstants.external.ADAPTER.STATUS_CMD]="",payload[consoleConstants.external.ADAPTER.UNDEPLOY_CMD]="",payload[consoleConstants.external.ADAPTER.LOGS_CMD]="",platformRequest.Go("POST",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY]),payload,new CbHeader).then(function(data){deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.retrieve=function(){var deferred=$q.defer(),payload={};return platformRequest.Go("GET",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME],payload,new CbHeader).then(function(data){this[consoleConstants.external.ADAPTER.NAME]=data[consoleConstants.external.ADAPTER.NAME],deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.update=function(){var deferred=$q.defer(),payload={};return payload[consoleConstants.external.ADAPTER.ARCH]=this[consoleConstants.external.ADAPTER.ARCH],payload[consoleConstants.external.ADAPTER.DESCRIPTION]=this[consoleConstants.external.ADAPTER.DESCRIPTION],payload[consoleConstants.external.ADAPTER.OS]=this[consoleConstants.external.ADAPTER.OS],payload[consoleConstants.external.ADAPTER.DEPLOY_CMD]=this[consoleConstants.external.ADAPTER.DEPLOY_CMD],payload[consoleConstants.external.ADAPTER.START_CMD]=this[consoleConstants.external.ADAPTER.START_CMD],payload[consoleConstants.external.ADAPTER.STOP_CMD]=this[consoleConstants.external.ADAPTER.STOP_CMD],payload[consoleConstants.external.ADAPTER.STATUS_CMD]=this[consoleConstants.external.ADAPTER.STATUS_CMD],payload[consoleConstants.external.ADAPTER.UNDEPLOY_CMD]=this[consoleConstants.external.ADAPTER.UNDEPLOY_CMD],payload[consoleConstants.external.ADAPTER.LOGS_CMD]=this[consoleConstants.external.ADAPTER.LOGS_CMD],platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME],payload,new CbHeader).then(function(data){this[consoleConstants.external.ADAPTER.NAME]=data[consoleConstants.external.ADAPTER.NAME],deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.delete=function(){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME],null,new CbHeader)},Adapter.prototype.stop=function(edges){var deferred=$q.defer(),payload={edges:edges||[],command:"stop"};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/control",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.start=function(edges){var deferred=$q.defer(),payload={edges:edges||[],command:"start"};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/control",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.restart=function(edges){var deferred=$q.defer(),payload={edges:edges||[],command:"restart"};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/control",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.getStatus=function(edges){var deferred=$q.defer(),payload={edges:edges||[],command:"status"};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/control",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.getLogs=function(edges){var deferred=$q.defer(),payload={edges:edges||[],command:"logs"};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/control",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.addEdges=function(edges){var deferred=$q.defer(),payload={edges:edges||[]};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/deploy",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.deleteEdges=function(edges){var deferred=$q.defer(),payload={edges:edges||[],command:"undeploy"};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/control",payload,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.getFiles=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/files",null,new CbHeader).then(function(data){data.length>0?(this[consoleConstants.external.ADAPTER.FILES]=data,deferred.resolve(this.files)):deferred.resolve(this[consoleConstants.external.ADAPTER.FILES])}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.addFile=function(file){var deferred=$q.defer(),reader=new FileReader;return reader.onload=function(event){var theNewFile={};theNewFile[consoleConstants.external.ADAPTER.NAME]=file.name,theNewFile.file=btoa(event.target.result),theNewFile.adaptor_name=this[consoleConstants.external.ADAPTER.NAME],theNewFile.path_name=file.name,platformRequest.Go("POST",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/files",theNewFile,new CbHeader).then(function(file){deferred.resolve(file)}.bind(this),function(err){deferred.reject(err)})}.bind(this),reader.readAsBinaryString(file),deferred.promise},Adapter.prototype.updateFile=function(file){var deferred=$q.defer(),reader=new FileReader;return reader.onload=function(event){var theUpdatedFile={};theUpdatedFile.file=btoa(event.target.result),platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/files/"+file.name,theUpdatedFile,new CbHeader).then(function(data){deferred.resolve()}.bind(this),function(err){deferred.reject(err)})}.bind(this),reader.readAsBinaryString(file),deferred.promise},Adapter.prototype.deleteFile=function(file){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"/"+this[consoleConstants.external.ADAPTER.NAME]+"/files/"+file.name,null,new CbHeader).then(function(data){deferred.resolve()}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Adapter.prototype.export=function(options){},Adapter}]),app.factory("AdapterList",["$q","platformRequest","CbHeader","Adapter","consoleConstants","$rootScope","utils","DevUser","$http","currentSystem",function($q,platformRequest,CbHeader,Adapter,consoleConstants,$rootScope,utils,DevUser,$http,currentSystem){function AdapterList(config){this[consoleConstants.internal.SYSTEM_KEY]=config[consoleConstants.internal.SYSTEM_KEY],this[consoleConstants.internal.SYSTEM_SECRET]=config[consoleConstants.internal.SYSTEM_SECRET],this.results=[],this.currentAdapter=null,this.indexForActiveAdapter=-1}AdapterList.prototype.fetch=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ADAPTERS_ADMIN.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY]),null,new CbHeader).then(function(data){if(this.results=[],data&&"null"!==data)for(var i=0,len=data.length;i<len;i++)data[i][consoleConstants.internal.SYSTEM_KEY]=this[consoleConstants.internal.SYSTEM_KEY],data[i][consoleConstants.internal.SYSTEM_SECRET]=this[consoleConstants.internal.SYSTEM_SECRET],this.addItem(new Adapter(data[i]));this.results.sort(utils.sortAlphabetically.bind("name")),deferred.resolve(this.results)}.bind(this),function(err){deferred.reject(err)}.bind(this)),deferred.promise};var _checkParamType=function(param){if(!(param instanceof Adapter))throw new Error("Must send an adapter as parameter")};return AdapterList.prototype.addItem=function(adapter){_checkParamType(adapter),this.results.push(adapter)},AdapterList.prototype.removeItem=function(adapter){_checkParamType(adapter);for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][consoleConstants.external.ADAPTER.NAME]===adapter[consoleConstants.external.ADAPTER.NAME]){var deleted=this.results.splice(i,1);return deleted}},AdapterList.prototype.setCurrentAdapter=function(adapter){return _checkParamType(adapter),this.currentAdapter=adapter,this.indexForActiveAdapter=this.results.indexOf(this.currentAdapter),adapter},AdapterList.prototype.getAdapterByName=function(adapterName){for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][consoleConstants.external.ADAPTER.NAME]===adapterName)return this.results[i]},AdapterList.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/adapters/?shouldExportItemId="+options.shouldExportItemId+"&url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},AdapterList}]),angular.module("adminPortal").service("adapterUtils",["$state","$stateParams","consoleConstants",function($state,$stateParams,consoleConstants){return{parseEdgeApiErrors:function(apiResponse){for(var parsedResponse={errors:[],hasErrors:!1,hasFileErrors:!1},edgeKeys=Object.keys(apiResponse),i=0;i<edgeKeys.length;i++)if(""!=apiResponse[edgeKeys[i]].error)parsedResponse.errors.push(apiResponse[edgeKeys[i]].error),parsedResponse.hasErrors=!0;else if(apiResponse[edgeKeys[i]].files&&apiResponse[edgeKeys[i]].files.length>0){var fileKeys=Object.keys(apiResponse[edgeKeys[i]].files);if(fileKeys.length>0)for(var j=0;j<fileKeys.length;j++)""!=apiResponse[edgeKeys[i]].files[fileKeys[j]].error&&(parsedResponse.errors.push(apiResponse[edgeKeys[i]].files[fileKeys[j]].error),parsedResponse.hasFileErrors=!0)}return parsedResponse},translateAdapterStatus:function(apiType,edgeStatus){if(""!=edgeStatus.error){if(edgeStatus.error.includes("not connected"))return consoleConstants.external.ADAPTER.STATUS.EDGE_DISCONNECTED;if(edgeStatus.error.includes("not deployed"))return consoleConstants.external.ADAPTER.STATUS.UNDEPLOYED}else switch(apiType){case"status":return""!=edgeStatus.output?edgeStatus.output:consoleConstants.external.ADAPTER.STATUS.INCOMPLETE;case"undeploy":return consoleConstants.external.ADAPTER.STATUS.UNDEPLOYED;case"start":case"restart":return consoleConstants.external.ADAPTER.STATUS.RUNNING;case"stop":case"deploy":return consoleConstants.external.ADAPTER.STATUS.STOPPED}}}}]),angular.module("adminPortal").service("adminCalls",["platformRequest","$q","$localStorage","$http","CbHeader","consoleConstants",function(platformRequest,$q,$localStorage,$http,CbHeader,consoleConstants){var register=function(body){var deferred=$q.defer();return platformRequest.Go("POST",platformRequest.AdminEndpoints.ADMIN_REG,body).then(function(data){platformRequest.setPlatformDevToken(data.dev_token),deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},getUsers=function(systemKey){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_USERS.replace("{systemKey}",systemKey),null,new CbHeader).then(function(data){deferred.resolve(data.Data)},function(err){deferred.reject(err)}),deferred.promise},getServiceNames=function(opts){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.CODE_ADMINv2+"/"+opts[consoleConstants.internal.SYSTEM_KEY],null,new CbHeader).then(function(data){deferred.resolve(data.code)},function(err){deferred.reject(err)}),deferred.promise},getLibraries=function(opts){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.CODE_ADMINv2+"/library/"+opts[consoleConstants.internal.SYSTEM_KEY],null,new CbHeader).then(function(data){data&&data instanceof Array?deferred.resolve(data):deferred.resolve([])},function(err){deferred.reject(err)}),deferred.promise},getLibrary=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.CODE_ADMINv2+"/library/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},getTriggerDefs=function(){return platformRequest.Go("GET",platformRequest.AdminEndpoints.TRIGGER_DEFS,null,new CbHeader)},getTriggerHandlersForSystem=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.TRIGGER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY],null,new CbHeader)},getTrigger=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.TRIGGER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},createTrigger=function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.TRIGGER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,opts.body,new CbHeader)},saveTrigger=function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.TRIGGER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,opts.body,new CbHeader)},deleteTrigger=function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.TRIGGER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},getTimerHandlersForSystem=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.TIMER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY],null,new CbHeader)},getTimer=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.TIMER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},createTimer=function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.TIMER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,opts.body,new CbHeader)},saveTimer=function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.TIMER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,opts.body,new CbHeader)},deleteTimer=function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.TIMER_HANDLERS+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},createService=function(body){return platformRequest.Go("POST",platformRequest.AdminEndpoints.CODE_ADMINv2+"/"+body.systemID+"/"+body.name,body,new CbHeader)},createLibrary=function(opts){var name=opts.body.name;return delete opts.body.name,platformRequest.Go("POST",platformRequest.AdminEndpoints.CODE_ADMINv2+"/library/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+name,opts.body,new CbHeader)},deleteService=function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.CODE_ADMINv2+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},deleteLibrary=function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.CODE_ADMINv2+"/library/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.name,null,new CbHeader)},saveService=function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.CODE_ADMINv2+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+opts.body.name,opts.body,new CbHeader)},saveLib=function(opts){var name=opts.body.name;return delete opts.body.name,platformRequest.Go("PUT",platformRequest.AdminEndpoints.CODE_ADMINv2+"/library/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/"+name,opts.body,new CbHeader)},getCollectionRoles=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/roles?collection="+opts[consoleConstants.external.DATA.COLLECTION_ID],null,new CbHeader)},removeRole=function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/roles?role="+opts.roleID,null,new CbHeader)},updateRole=function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/roles",opts.body,new CbHeader)},addRole=function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/roles",opts.body,new CbHeader)},getDeviceRoles=function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.DEVICE_ROLES.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY]).replace("{name}",opts.name),null,new CbHeader)},updateDeviceRoles=function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.DEVICE_ROLES.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY]).replace("{name}",opts.name),opts.body,new CbHeader)};return{Register:register,GetUsers:getUsers,GetServiceNames:getServiceNames,GetLibraries:getLibraries,GetLibrary:getLibrary,GetTriggerDefs:getTriggerDefs,GetTriggerHandlersForSystem:getTriggerHandlersForSystem,GetTrigger:getTrigger,CreateTrigger:createTrigger,SaveTrigger:saveTrigger,DeleteTrigger:deleteTrigger,GetTimerHandlersForSystem:getTimerHandlersForSystem,GetTimer:getTimer,CreateTimer:createTimer,SaveTimer:saveTimer,DeleteTimer:deleteTimer,CreateService:createService,CreateLibrary:createLibrary,DeleteService:deleteService,DeleteLib:deleteLibrary,SaveService:saveService,SaveLib:saveLib,GetCollectionRoles:getCollectionRoles,GetDeviceRoles:getDeviceRoles,RemoveRole:removeRole,UpdateRole:updateRole,AddRole:addRole,GetAccounts:function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.PUSH_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/account",null,new CbHeader)},AddAccount:function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.PUSH_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/account",opts.body,new CbHeader)},UpdateAccount:function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.PUSH_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/account",opts.body,new CbHeader)},DeleteAccount:function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.PUSH_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/account?id="+opts.acctId,null,new CbHeader)},RemoveDevice:function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.PUSH_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/account?id="+opts.accountID,null,new CbHeader)},GetAllUsers:function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"?query="+JSON.stringify(opts.query),null,new CbHeader)},GetUsersCount:function(opts){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/count?query="+JSON.stringify(opts.query),null,new CbHeader).then(function(data){deferred.resolve(data.count)},function(err){deferred.reject(err)}),deferred.promise},ExportUsers:function(opts){var deferred=$q.defer(),urlPath="/batch/export/users";return opts.singleItemExportID&&(urlPath+="/"+opts.singleItemExportID),$http.get("/console-api"+urlPath+"?systemKey="+opts[consoleConstants.internal.SYSTEM_KEY]+"&fileType="+opts.fileType.toLowerCase()+"&url="+platformRequest.GetUrl()+"&devToken="+platformRequest.getTokenForPlatform()+"&devEmail="+opts.devEmail).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},GetUserColumns:function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/columns",null,new CbHeader)},AddUser:function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY],opts.body,new CbHeader)},DeleteUser:function(opts){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"?user="+opts.userID,null,new CbHeader).then(function(){deferred.resolve(opts.userID)},function(err){deferred.reject(err)}),deferred.promise},CreateUserColumn:function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/columns",opts.body,new CbHeader)},DeleteUserColumn:function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/columns?column="+opts.field,null,new CbHeader)},UpdateUserCell:function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY],opts.body,new CbHeader)},GetUserRoles:function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY]+"/roles?user="+opts.userID,null,new CbHeader)},UpdateUserRoles:function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.USER_ADMIN+"/"+opts[consoleConstants.internal.SYSTEM_KEY],opts.body,new CbHeader)},CheckLoggingEnabled:function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.CHECK_LOGGING_ENABLED.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY]).replace("{name}",opts.name),null,new CbHeader)},GetAllDevelopers:function(query){return platformRequest.Go("GET",platformRequest.AdminEndpoints.ADMIN_PLATFORM+"/developers"+query,null,new CbHeader)},UpdateDeveloper:function(body){return platformRequest.Go("POST",platformRequest.AdminEndpoints.ADMIN_PLATFORM+"/developer",body,new CbHeader)},UpdateDeviceRoles:updateDeviceRoles,UpdateDisableEdgeVersions:function(edgeVersionObject){var deferred=$q.defer();return platformRequest.Go("POST",platformRequest.AdminEndpoints.EDGE_DISABLED,edgeVersionObject,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},GetDisableEdgeVersions:function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.EDGE_DISABLED,null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CreateEdgeColumn:function(opts){return platformRequest.Go("POST",platformRequest.AdminEndpoints.ALL_EDGES.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY])+"/columns",opts.body,new CbHeader)},DeleteEdgeColumn:function(opts){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.ALL_EDGES.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY])+"/columns?column="+opts.column_name,null,new CbHeader)},GetEdgeColumns:function(opts){return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_EDGES.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY])+"/columns",null,new CbHeader)},UpdateEdgeCell:function(opts){return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ALL_EDGES.replace("{systemKey}",opts[consoleConstants.internal.SYSTEM_KEY])+"/"+opts.edgeName,opts.body,new CbHeader)}}}]),angular.module("adminPortal").service("adminPortalUtils",[function(){this.wipeEmptyCollections=function(list){for(var i=0;i<list.length;)list[i].hasOwnProperty("itemInfo")&&void 0==list[i].itemInfo.name?list.splice(i,1):i+=1}}]),angular.module("adminPortal").factory("analytics",["$http","$q","currentSystem","platformRequest","adminCalls","errorDialog","CbHeader","consoleConstants",function($http,$q,currentSystem,platformRequest,adminCalls,errorDialog,CbHeader,consoleConstants){var filterOptions={Counts:{modules:{Services:!0,Collections:!0,Users:!0,Systems:!0,Developers:!0,Organizations:!0}},Users:{User:["All","Specific User Name"],modules:["Collection","Service"],actions:["create","update","read","delete"]},Events:{modules:{Messaging:{actions:[{name:"publish"},{name:"subscribe"}]},Service:{actions:[{name:"execute"}]},Collection:{actions:[{name:"create"},{name:"update"},{name:"read"},{name:"delete"}]},User:{actions:[{name:"create"},{name:"update"},{name:"read"},{name:"delete"}]}}},Storage:{scopes:["Platform","Organization","Developer","System","Collection"]}},getCountsUrl=function(systemKey,modules){return platformRequest.PublicEndpoints.ANALYTICS_PREFIX+'/count?query={"scope":{"system":"'+systemKey+'"},"filter":{"query":['+modules.toString()+"]}}"},getCountsForModules=function(systemKey,modules){return platformRequest.Go("GET",getCountsUrl(systemKey,modules),null,new CbHeader)},getStorageData=function(params){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.ANALYTICS_PREFIX+"/storage?query="+JSON.stringify(params),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},getTotalsForEvents=function(params){return platformRequest.Go("GET",platformRequest.PublicEndpoints.ANALYTICS_PREFIX+"/eventtotals?query="+JSON.stringify(params),null,new CbHeader)},fetchAnalytics=function(systemKey,request,spec){var deferred=$q.defer();return platformRequest.Go("GET",request,null,new CbHeader).then(function(data){data.length?data=data[0]:(data=Object.assign({},consoleConstants.external.USAGE.DEFAULT),data.systemKey=systemKey),void 0!==spec&&(data[spec]=data),deferred.resolve(data)},function(err){deferred.reject()}),deferred.promise},userGetUsageForSystem=function(params){var deferred=$q.defer();void 0===params.systemKey&&(console.error("usage request missing system key"),deferred.reject());var request=null;return void 0!==params.startDate&&void 0!==params.endDate||(request=platformRequest.AnalyticEndpoints.USER.STATUS.replace("{systemKey}",params.systemKey)),void 0===params.startDate&&void 0!==params.endDate||(request=platformRequest.AnalyticEndpoints.USER.FROM_DATE.replace("{systemKey}",params.systemKey).replace("{start}",params.startDate)),void 0===params.startDate&&void 0===params.endDate||(request=platformRequest.AnalyticEndpoints.USER.DATE_RANGE.replace("{systemKey}",params.systemKey).replace("{start}",params.startDate).replace("{end}",params.endDate)),null===request&&(console.error("invalid params"),deferred.reject()),fetchAnalytics(params.systemKey,request).then(function(data){deferred.resolve(data)},function(err){deferred.reject()}),deferred.promise},adminGetUsageForSystem=function(params){var deferred=$q.defer();void 0===params.systemKey&&(console.error("usage request missing system key"),deferred.reject());var request=null;return void 0!==params.startDate&&void 0!==params.endDate||(request=platformRequest.AnalyticEndpoints.ADMIN.STATUS.replace("{systemKey}",params.systemKey)),void 0===params.startDate&&void 0!==params.endDate||(request=platformRequest.AnalyticEndpoints.ADMIN.FROM_DATE.replace("{systemKey}",params.systemKey).replace("{start}",params.startDate)),void 0===params.startDate&&void 0===params.endDate||(request=platformRequest.AnalyticEndpoints.ADMIN.DATE_RANGE.replace("{systemKey}",params.systemKey).replace("{start}",params.startDate).replace("{end}",params.endDate)),null===request&&(console.error("invalid params"),deferred.reject()),fetchAnalytics(params.systemKey,request,params.spec).then(function(data){deferred.resolve(data)},function(err){deferred.reject()}),deferred.promise},getTotalsForMultiEvents=function(eventGroup,dataArray,startDate,endDate,collections,users){var deferred=$q.defer(),eventGroup=eventGroup,startD=startDate/1e3,endD=endDate/1e3,threadCounter=0,processedArray=[];return eventGroup.events.forEach(function(dataset){if(""!=dataset.filter.module){var action="read",mods="",id=($q.defer(),dataset.filter.id);threadCounter++,dataset.filter.action&&(action=dataset.filter.action),"Service"==dataset.filter.module&&(action="execute"),"User"!=dataset.filter.module?mods=dataset.filter.module:id="";var params={scope:{system:eventGroup.systemKey},filter:{module:mods,action:action,id:id,range:{start:startD,end:endD}}};console.log(params),"User"==dataset.filter.module&&(params.filter.users=[dataset.filter.id]);var queryType=getTotalsForEvents;"User"==dataset.filter.module&&(queryType=getUserEvents);queryType(params).then(function(data){if("User"==dataset.filter.module)var dataValues=data;else var dataValues=data.values;processMultiRequestData(dataValues,dataset.filter,processedArray,startDate,endDate,collections,users).forEach(function(column){processedArray.push(column)}),0==--threadCounter&&deferred.resolve(processedArray)},function(err){errorDialog.show("Error!","Unable to retrieve Events data: ",err),0==--threadCounter&&deferred.resolve(processedArray)});params=null}}),deferred.promise},getUserEvents=function(params){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.ANALYTICS_PREFIX+"/userevents?query="+JSON.stringify(params),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},processUserRequestData=function(data,dateRange){var times=["date"],responseTimeBins=[],averageResponseTime=["AverageResponseTime"],dailyRequestCount=["TotalRequests"],todayInEpoch=(new Date).getTime(),divisions=864e5,singleResponse=0,dateDiff=0,dayDiff=0,dateInEpoch=0,rtCount=0,totalResponseTimeAverage=0,totalResponseTime=0,range=30;void 0!==dateRange&&dateRange.endDate&&(endDayInEpoch=dateRange.endDate,range=Math.floor((endDayInEpoch-dateRange.startDate)/divisions));for(var i=0;i<range;i++)times.push(todayInEpoch-divisions*i),averageResponseTime.push(0),responseTimeBins.push([]),dailyRequestCount.push(0);rtCount=data.length,data.forEach(function(col){singleResponse=col.responsetime/1e6,dateInEpoch=1e3*col.timestamp,dateDiff=todayInEpoch-dateInEpoch,dayDiff=Math.ceil(dateDiff/divisions),dayDiff<=range?(responseTimeBins[dayDiff].push(singleResponse),dailyRequestCount[dayDiff+1]++):(responseTimeBins[range-1].push(singleResponse),dailyRequestCount[range]++),totalResponseTime+=singleResponse});for(var totalRTs=0,rtBinSize=0,i=1;i<31;i++)if((rtBinSize=responseTimeBins[i-1].length)>0){totalRTs=0;for(var k=0;k<rtBinSize;k++)totalRTs+=responseTimeBins[i-1][k];averageResponseTime[i]=totalRTs/rtBinSize}return totalResponseTimeAverage=totalResponseTime/rtCount,{overallAverage:totalResponseTimeAverage,times:times,averageResponseTimes:averageResponseTime,counts:dailyRequestCount,total:rtCount}},getStorageText=function(storageValue){var label="B";return storageValue>1e9?(storageValue/=1e9,label="GB"):storageValue>1e6?(storageValue/=1e6,label="MB"):storageValue>1e3&&(storageValue/=1e3,label="KB"),{space:storageValue,label:label}},processStorageRequestData=function(data){var storage=[],storageValue=0;"system"in data&&(storage.push("MemoryTotal"),storageValue=data.system),"collection"in data&&(storage.push("CollectionMemory"),storageValue=data.collection),"developer"in data&&(storage.push("DashboardMemory"),storageValue=data.developer);var storageObj=getStorageText(storageValue);return storage.push(storageObj.space),{storageGraphArray:storage,division:storageObj.label}},processRequestData=function(data,dateRange){var times=["date"],counts=["count"],endDayInEpoch=(new Date).getTime(),dateDiff=0,dayDiff=0,total=0,divisions=864e5,range=30;void 0!==dateRange&&dateRange.endDate&&(endDayInEpoch=dateRange.endDate,range=Math.floor((endDayInEpoch-dateRange.startDate)/divisions));for(var i=0;i<range;i++)times.push(endDayInEpoch-divisions*i),counts.push(0);if(data.forEach(function(col){colDateEpoch=1e3*col.timestamp,dateDiff=endDayInEpoch-colDateEpoch,dayDiff=Math.ceil(dateDiff/divisions),dayDiff<=range?counts[dayDiff]+=col.count:counts[range]+=col.count,total+=col.count}),dateRange)var results={times:times,counts:counts,total:total};else var results={counts:counts};return results},processMultiRequestData=function(data,filter,dataArray,startDate,endDate,collections,users){var daLength=dataArray.length,label="",processedData=[],processFunction=processRequestData,dateRange={startDate:startDate,endDate:endDate};switch(filter.module){case"Service":label=""==filter.id?"All Services":filter.id;break;case"Collection":""==filter.id?label="All Collections: "+filter.action:collections.forEach(function(collection){collection.collectionID==filter.id&&(label=collection.name+": "+filter.action)});break;case"User":processFunction=processUserRequestData,""==filter.id?label="All Users: "+filter.action:users.forEach(function(user){user.user_id==filter.id&&(label=user.email+": "+filter.action)});break;case"Messaging":label="Messaging: "+filter.action;break;default:label="MAGIC label!"}if(0==daLength){var results=processFunction(data,dateRange);results.counts[0]=label,processedData.push(results.times),processedData.push(results.counts)}else{var results=processFunction(data,dateRange);results.counts[0]=label,processedData.push(results.counts)}return processedData};return{filterOptions:filterOptions,getCountsUrl:getCountsUrl,getCountsForModules:getCountsForModules,getStorageData:getStorageData,userGetUsageForSystem:userGetUsageForSystem,adminGetUsageForSystem:adminGetUsageForSystem,processStorageRequestData:processStorageRequestData,getTotalsForEvents:getTotalsForEvents,getUserEvents:getUserEvents,getTotalsForMultiEvents:getTotalsForMultiEvents,processRequestData:processRequestData,processMultiRequestData:processMultiRequestData,processUserRequestData:processUserRequestData,getStorageText:getStorageText}}]),angular.module("adminPortal").factory("cbColumn",["cbDataType",function(cbDataType){return function(dataType){var self=this;self.dataType=new cbDataType(dataType),self.validationText=self.dataType.validationText,self.showError=function(err){return self.dataType.error(err)},self.createTemplate=function(columnObj,deleteCallback){return columnObj.name=angular.copy(columnObj.field)||columnObj.name,columnObj.headerCellTemplate=columnObj.headerCellTemplate||'<div role="columnheader" ng-class="{ \'sortable\': sortable }" ui-grid-one-bind-aria-labelledby-grid="col.uid + \'-header-text \' + col.uid + \'-sortdir-text\'" aria-sort="{{col.sort.direction == asc ? \'ascending\' : ( col.sort.direction == desc ? \'descending\' : (!col.sort.direction ? \'none\' : \'other\'))}}"><div role="button" tabindex="0" class="ui-grid-cell-contents ui-grid-header-cell-primary-focus" style="margin-right: 18px;" col-index="renderIndex" title="TOOLTIP"><span class="ui-grid-header-cell-label" ui-grid-one-bind-id-grid="col.uid + \'-header-text\'">{{ col.displayName CUSTOM_FILTERS }}</span> <span ui-grid-one-bind-id-grid="col.uid + \'-sortdir-text\'" ui-grid-visible="col.sort.direction" aria-label="{{getSortDirectionAriaLabel()}}"><i ng-class="{ \'ui-grid-icon-up-dir\': col.sort.direction == asc, \'ui-grid-icon-down-dir\': col.sort.direction == desc, \'ui-grid-icon-blank\': !col.sort.direction }" title="{{isSortPriorityVisible() ? i18n.headerCell.priority + \' \' + ( col.sort.priority + 1 )  : null}}" aria-hidden="true"></i> <sub ui-grid-visible="isSortPriorityVisible()" class="ui-grid-sort-priority-number">{{col.sort.priority + 1}}</sub></span></div><div role="button" tabindex="0" ui-grid-one-bind-id-grid="col.uid + \'-menu-button\'" class="ui-grid-column-menu-button" style="height:100%" ng-if="grid.options.enableColumnMenus && !col.isRowHeader  && col.colDef.enableColumnMenu !== false" ng-click="toggleMenu($event)" ng-class="{\'ui-grid-column-menu-button-last-col\': isLastCol}" ui-grid-one-bind-aria-label="i18n.headerCell.aria.columnMenuButtonLabel" aria-haspopup="true"><i class="glyphicon glyphicon-cog" aria-hidden="true" style="top:5px;width:15px">&nbsp;</i></div><div ui-grid-filter></div></div>',columnObj.removable&&(columnObj.menuItems=columnObj.menuItems||[{title:"Delete Column",icon:"glyphicon glyphicon-trash",action:function($event){deleteCallback(this.context.col.colDef)}}]),"bool"===columnObj.dataType&&(columnObj.type="string"),"blob"===columnObj.dataType&&(columnObj.cellTemplate='<file-import ng-show="row.getProperty(col.field) === null" callback="uploadFile" params=\'{"itemID":"{{row.entity.item_id}}", "colField":"{{col.field}}"}\'></file-import><span ng-show="row.getProperty(col.field) !== null">{{row.getProperty(col.field)}} </span>'),columnObj.cellEditableCondition=function(){return columnObj.enableCellEdit},columnObj.minWidth=110,columnObj},self.isValid=function(val){return self.dataType.validate(val)},self.formatCollectionPayload=function(PK,itemID,newVal,colField){var cb=new ClearBlade,cbQuery=cb.Query({collection:""});cbQuery.equalTo(PK,itemID);var rtn={query:cbQuery.query,$set:{}};return rtn.$set[colField]=self.dataType.format(newVal),rtn},self.formatUserPayload=function(userID,col,cellEdit){var obj={user:userID,changes:{}};return obj.changes[col]=self.dataType.format(cellEdit),obj},self.formatDevicePayload=function(deviceName,col,cellEdit){var obj={name:deviceName};return obj[col]=self.dataType.format(cellEdit),obj}}}]),angular.module("adminPortal").factory("cbDataType",["cbDataTypes","errorDialog",function(cbDataTypes,errorDialog){var defaultError=function(err){errorDialog.show("Failed to update cell","Error: "+err)},defaultFormat=function(val){return val},defaultValidate=function(val){return!0},DataType=function(type){return constructor(cbDataTypes.hasOwnProperty(type)?cbDataTypes[type]:{value:type,text:type.capitalizeFirstLetter()})},constructor=function(config){var self={};return self.value=config.value,self.text=config.text,self.error=config.error||defaultError,self.format=config.format||defaultFormat,self.validate=config.validate||defaultValidate,self.validationText=config.validationText,self};return String.prototype.capitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)},DataType}]),angular.module("adminPortal").factory("cbDataTypes",["errorDialog",function(errorDialog){function isInt(num){return num%1==0}var castToNumber=function(val){return+val};return{string:{value:"string",text:"String"},int:{value:"int",text:"Int",format:castToNumber,validate:function(val){return isInt(val)},validationText:"The column type is an int, but the value you provided is not."},bigint:{value:"bigint",text:"Bigint",format:castToNumber,validate:function(val){return isInt(val)},validationText:"The column type is bigint (64-bit integer), but the value you provided is not."},float:{value:"float",text:"Float",format:castToNumber,validate:function(val){return!isNaN(val)},validationText:"The column type is float (32-bit floating-point number),  but the value you provided is not."},double:{value:"double",text:"Double",format:castToNumber,validate:function(val){return!isNaN(val)},validationText:"The column type is doubld (64-bit floating-point number), but the value you provided is not."},blob:{value:"blob",text:"Blob"},uuid:{value:"uuid",text:"Uuid",error:function(err){errorDialog.show("Failed to update cell","Error: "+err,"<b>Format should be as follows:</b> <br> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")}},timestamp:{value:"timestamp",text:"Timestamp",error:function(err){errorDialog.show("Failed to update cell","Error: "+err,"<b>Format should be as follows:</b> <br> 1970-01-01T00:00:00Z")}},bool:{value:"bool",text:"Boolean",format:function(val){return"true"==val},validate:function(val){return"true"===val||"false"===val},validationText:"The column type is boolean, but the value you provided is not."}}}]),angular.module("adminPortal").factory("cbGrid",["$uibModal",function($uibModal){return function(scope,options,callbacks){function registerApi(gridApi){self.val.gridApi=gridApi,gridApi.core.on.sortChanged(scope,function(grid,sortColumns){self.paginationOptions.sort=0===sortColumns.length?void 0:sortColumns,callbacks.get()}),gridApi.pagination&&gridApi.pagination.on.paginationChanged(scope,function(newPage,pageSize){self.paginationOptions.curPage=newPage,self.paginationOptions.pageSize=pageSize,callbacks.get()}),gridApi.edit&&gridApi.edit.on.afterCellEdit(scope,function(rowEntity,colDef,newValue,oldValue){callbacks.put(rowEntity,colDef,newValue,oldValue)}),void 0!==options.shouldGetDataUponInstantiation&&!1===options.shouldGetDataUponInstantiation||"function"!=typeof callbacks.get||callbacks.get()}var self=this;self.paginationOptions={pageSize:options.paginationPageSizes&&options.paginationPageSizes[0]?options.paginationPageSizes[0]:25,curPage:1,sort:void 0};var defaultGridOptions={paginationPageSizes:[25,50,100],useExternalPagination:!0,useExternalSorting:!0,onRegisterApi:registerApi};self.val=angular.extend(defaultGridOptions,options),self.conditions=[],self.filterInfo=[];var shouldRefresh=!1;self.prepareSort=function(){if(angular.isDefined(self.paginationOptions.sort)&&self.paginationOptions.sort.length>0){for(var sortArr=[],i=0;i<self.paginationOptions.sort.length;i++){var columnName=self.paginationOptions.sort[i].field,sortObj={};sortObj[self.paginationOptions.sort[i].sort.direction.toUpperCase()]=columnName,sortArr.push(sortObj)}return sortArr}},self.showFilter=function(columns,title){$uibModal.open({templateUrl:"partials/modals/queryBuilder.html",controller:"queryBuilderCtrl",resolve:{columns:function(){return columns},currentGrid:function(){return self},title:function(){return title}}}).result.then(function(){shouldRefresh=!1,callbacks.get()},function(reason){shouldRefresh&&(callbacks.get(),shouldRefresh=!1)})},self.clearConditions=function(){self.conditions=[],self.filterInfo=[],shouldRefresh=!0},self.clearSort=function(){self.paginationOptions.sort=void 0},self.paginate=function(list){if(self.paginationOptions.sort&&self.paginationOptions.sort[0]){var sortMap={asc:[-1,1],desc:[1,-1]},sortField=self.paginationOptions.sort[0].field,sortValues=sortMap[self.paginationOptions.sort[0].sort.direction];list.sort(function(a,b){return a[sortField].toLowerCase()<b[sortField].toLowerCase()?sortValues[0]:a[sortField].toLowerCase()>b[sortField].toLowerCase()?sortValues[1]:0})}return list.slice((self.paginationOptions.curPage-1)*self.paginationOptions.pageSize,self.paginationOptions.curPage*self.paginationOptions.pageSize)}}}]),app.factory("CbHeader",["platformRequest",function(platformRequest){return function(){var headers={},connectedEdge=platformRequest.getConnectedEdge();return platformRequest.isConnectedToEdge()?(headers["ClearBlade-Edge"]=connectedEdge.name,headers["Clearblade-SystemKey"]=connectedEdge.systemKey,void 0!==connectedEdge.devToken&&(headers["ClearBlade-DevToken"]=connectedEdge.devToken)):headers["ClearBlade-DevToken"]=platformRequest.getTokenForPlatform(),headers}}]),angular.module("adminPortal").service("cbNg",["$q","currentSystem","$localStorage","$location","platformRequest",function($q,currentSystem,$localStorage,$location,platformRequest){var cbObj=new ClearBlade,messaging={},subscribeMessaging=function(topic,receiveMessage){var onSuccess=function(data){console.log("messaging subscribe successful")},onFailure=function(err){console.log("messaging subscribe failure")},subscribeOptions={onSuccess:onSuccess,onFailure:onFailure,qos:0};messaging.client.subscribe(topic,subscribeOptions),messaging.client.onMessageArrived=function(message){receiveMessage(message.payloadString)}},publishMessaging=function(topic,message){messaging.client.send(topic,message,0,!1)},msg_conf={},getMsgConf=function(){return msg_conf={},msg_conf.userName=$localStorage.cb_platform_dev_token,msg_conf.password=currentSystem.getSystemID(),msg_conf.cleanSession=!0,msg_conf.hosts=[window.messageURL],msg_conf.ports=[window.messagePort],msg_conf.useSSL=window.messageTLS,msg_conf},connectMessaging=function(){var deferred=$q.defer();messaging={},messaging.user=this.user,messaging.URI=this.URI,messaging.systemKey=currentSystem.getSystemID(),messaging.systemSecret=this.systemSecret,messaging.callTimeout=this._callTimeout,msg_conf=getMsgConf(),messaging._qos=0;var clientID=Math.floor(1e13*Math.random()).toString();messaging.client=new Paho.MQTT.Client(msg_conf.hosts[0],msg_conf.ports[0],clientID);var onSuccess=function(data){deferred.resolve(data)};messaging.client.onConnect=onSuccess;var onFailure=function(err){console.log("ClearBlade Messaging failed to connect"),deferred.reject(err)};return messaging.client.onConnectionLost=function(response){console.log("ClearBlade Messaging connection lost- attempting to reestablish"),msg_conf=getMsgConf(),messaging.client.connect(msg_conf)},msg_conf.onSuccess=onSuccess,msg_conf.onFailure=onFailure,messaging.client.connect(msg_conf),deferred.promise},init=function(email,password){var deferred=$q.defer(),initOptions={systemKey:"KEY",systemSecret:"SECRET",URI:"https://platform.clearblade.com",callback:function(err,body){err?deferred.reject(body):deferred.resolve(body)}};return void 0!=typeof email&&(initOptions.email=email),void 0!=typeof password&&(initOptions.password=password),cbObj.init(initOptions),deferred.promise},runCode=function(funcName,params,retryCounter){function go(){var statusCodes={SUCCESS:"1",FAILURE:"2",LOGOUT:"3",UNAUTHORIZED:"4",ERROR_IN_SERVICE:"5"};cbObj.Code().execute(funcName,params,function(err,body){err?retryCounter<retryMax?(retryCounter++,go()):"Not Authorized"===body.message?(code="code:"+statusCodes.UNAUTHORIZED,resp=body+"\n"+code,deferred.reject(resp)):(code="code:"+statusCodes.LOGOUT,resp=body+"\n"+code,deferred.reject(resp)):body.results.code?retryCounter<retryMax?(retryCounter++,go()):deferred.reject(body.results.message):("not callable"===body.results&&!1===body.success?body.code=statusCodes.FAILURE:body.results.search("SyntaxError")>=0||!1===body.success?body.code=statusCodes.ERROR_IN_SERVICE:!0===body.success&&(body.code=statusCodes.SUCCESS),console.log(body),deferred.resolve(body))})}var deferred=$q.defer();void 0===retryCounter&&(retryCounter=0);var retryMax=4;return cbObj.user?go():init().then(function(){go()},function(err){retryCounter<retryMax?(retryCounter++,runCode(funcName,params,retryCounter)):deferred.reject(err)}),deferred.promise};return{ClearBlade:cbObj,init:init,connectMessaging:connectMessaging,subscribeMessaging:subscribeMessaging,publishMessaging:publishMessaging,runCode:runCode}}]),app.factory("Code",["$q","platformRequest","CbHeader","currentSystem",function($q,platformRequest,CbHeader,currentSystem){function Code(config){this.name=config.name,this.code=config.code,this.dependencies=config.dependencies,this.dependenciesArray=config.dependenciesArray}return Code.prototype={},Code}]).factory("CodeService",["Code","CodeUtils","currentSystem","adminCalls","platformRequest","$q","CbHeader","consoleConstants","utils","DevUser","$http",function(Code,CodeUtils,currentSystem,adminCalls,platformRequest,$q,CbHeader,consoleConstants,utils,DevUser,$http){function CodeService(config){this.isService=!0,this.active=!1,this.params=config.params||config.parameters,this.owner=config.owner||"",Code.call(this,config)}return CodeService.prototype.create=function(){var self=this,deferred=$q.defer(),config={code:"",parameters:CodeUtils.formatParams(self.params,!1),systemID:currentSystem.getSystemID(),name:self.name,run_user:self.owner};return adminCalls.CreateService(config).then(function(data){deferred.resolve(data.name)},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.fetch=function(){var self=this,deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.CODE_PREFIX+"/"+currentSystem.getSystemID()+"/"+self.name,null,new CbHeader).then(function(response){null==response.code||void 0==response.code||""==response.code?self.code="function "+self.name+"(req, resp){\n    \n}":self.code=response.code.replace(/\\n/g,"\n"),angular.isDefined(response.params)&&null!=response.params?(formattedParams=[],response.params.forEach(function(param){var formattedParam={name:param};formattedParams.push(formattedParam)}),self.params=formattedParams):self.params=[],self.dependencies=response.dependencies,self.owner=response.run_user,self.dependencies&&""!==self.dependencies?self.dependenciesArray=response.dependencies.split(","):self.dependenciesArray=[],deferred.resolve(self)},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.save=function(){var data={dependencies:CodeUtils.formatDependencies(this.dependenciesArray),parameters:CodeUtils.formatParams(this.params,!1),systemID:currentSystem.getSystemID(),name:this.name,run_user:this.owner};this.logging&&(data.logging_enabled=this.logging.enabled),void 0!=this.code&&(data.code=this.code);var options={body:data};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.SaveService(options)},CodeService.prototype.run=function(){var self=this,deferred=$q.defer(),cancel=function(reason){deferred.resolve(reason)},runDeferred=$q.defer();return platformRequest.Go("POST",platformRequest.PublicEndpoints.CODE_PREFIX+"/"+currentSystem.getSystemID()+"/"+self.name,CodeUtils.formatRunParams(self.params),new CbHeader,deferred.promise).then(function(response){!1===response.success?runDeferred.reject(response.results):runDeferred.resolve(response.results)},function(err,status){null===err&&void 0===status?runDeferred.resolve("cancelled"):runDeferred.reject(err)}),{promise:runDeferred.promise,cancel:cancel}},CodeService.prototype.delete=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteService(options).then(function(){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.getTriggers=function(){var self=this;self.triggersArray=CodeUtils.getTriggerHandlersForService(self.name)},CodeService.prototype.getTimers=function(){var self=this;self.timersArray=CodeUtils.getTimerHandlersForService(self.name)},CodeService.prototype.getLogs=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_LOGS.replace("{systemKey}",currentSystem.getSystemID()).replace("{name}",this.name),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.getFailures=function(){var deferred=$q.defer(),self=this;return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_FAILURES.replace("{systemKey}",currentSystem.getSystemID()),null,new CbHeader).then(function(data){for(var failures=[],i=0,history=data[currentSystem.getSystemID()],len=history.length;i<len;i++)history[i].Service===self.name&&(history[i].time=new Date(history[i].Datetime).getTime(),failures.push(history[i]));failures.sort(function(a,b){return a.time>b.time?-1:1}),deferred.resolve(failures)},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.discardFailure=function(failureId){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.ALL_FAILURES.replace("{systemKey}",currentSystem.getSystemID()),{id:failureId},new CbHeader).then(function(data){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.retryFailure=function(failureId){var deferred=$q.defer();return platformRequest.Go("POST",platformRequest.AdminEndpoints.ALL_FAILURES.replace("{systemKey}",currentSystem.getSystemID()),{id:failureId},new CbHeader).then(function(data){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeService.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/services/"+this.name+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},CodeService}]).factory("CodeLibrary",["Code","adminCalls","$q","CodeUtils","consoleConstants","currentSystem","utils","DevUser","$http","platformRequest",function(Code,adminCalls,$q,CodeUtils,consoleConstants,currentSystem,utils,DevUser,$http,platformRequest){function CodeLibrary(config){this.isService=!1,this.active=!1,this.description=config.description,this[consoleConstants.external.CODE.LIBRARY.VISIBILITY]=config[consoleConstants.external.CODE.LIBRARY.VISIBILITY],this.isGlobal="global"===this[consoleConstants.external.CODE.LIBRARY.VISIBILITY],this[consoleConstants.external.CODE.LIBRARY.KEY]=config[consoleConstants.external.CODE.LIBRARY.KEY],Code.call(this,config)}return CodeLibrary.prototype.create=function(){var self=this,deferred=$q.defer(),config={code:"",visibility:"system",dependencies:"",description:self.description,name:self.name},options={body:config};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.CreateLibrary(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CodeLibrary.prototype.fetch=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetLibrary(options).then(function(data){var resp=data;self.dependencies=resp.dependencies,self.dependencies&&""!==self.dependencies?self.dependenciesArray=self.dependencies.split(","):self.dependenciesArray=[],self.description=resp.description,self.code=resp.code,deferred.resolve(self)},function(err){deferred.reject(err)}),deferred.promise},CodeLibrary.prototype.save=function(){var self=this,data={name:self.name,description:self.description,dependencies:CodeUtils.formatDependencies(self.dependenciesArray),code:self.code},options={body:data};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.SaveLib(options)},CodeLibrary.prototype.delete=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteLib(options).then(function(){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeLibrary.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/libraries/"+this.name+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},CodeLibrary}]).factory("CodeTrigger",["Code","adminCalls","$q","currentSystem","consoleConstants","utils","DevUser","$http","platformRequest","DeployOnPlatform",function(Code,adminCalls,$q,currentSystem,consoleConstants,utils,DevUser,$http,platformRequest,DeployOnPlatform){function CodeTrigger(config){this.isService=!1,this.service_name=config.service_name,this.event_definition=config.event_definition,this.key_value_pairs=config.key_value_pairs,this.deployOnPlatform=!0,config.key_value_pairs?(this.topic=config.key_value_pairs.topic,this.itemId=config.key_value_pairs.itemId,this.collectionName=config.key_value_pairs.collectionName,this.userId=config.key_value_pairs.userId,this.deviceName=config.key_value_pairs.deviceName,"Device"!==config.event_definition.def_module||this.deviceName||(this.deviceName=""),"Data"!==config.event_definition.def_module||this.collectionName||(this.collectionName="")):(this.topic=config.topic,this.itemId=config.itemId,this.collectionName=config.collectionName,this.userId=config.userId),Code.call(this,config)}var genKeyValuePairs=function(def_module,data){var key_value_pairs={};switch(def_module){case"Messaging":key_value_pairs={topic:data.topic};break;case"User":key_value_pairs={userId:data.userId};break;case"Data":key_value_pairs={},data.collectionName&&(key_value_pairs.collectionName=data.collectionName),data.itemId&&(key_value_pairs.itemId=data.itemId);break;case"Device":key_value_pairs={deviceName:data.deviceName}}return key_value_pairs};return CodeTrigger.prototype.create=function(data){var self=this,deferred=$q.defer(),config={system_key:currentSystem.getSystemID(),name:self.name,def_module:self.event_definition.def_module,def_name:self.event_definition.def_name,service_name:self.service_name};config.key_value_pairs=genKeyValuePairs(self.event_definition.def_module,data);var options={name:self.name,body:config};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.CreateTrigger(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CodeTrigger.prototype.fetch=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetTrigger(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CodeTrigger.prototype.save=function(){var self=this,deferred=$q.defer(),data={system_key:currentSystem.getSystemID(),name:self.name,def_module:self.event_definition.def_module,def_name:self.event_definition.def_name,service_name:self.service_name};data.key_value_pairs=genKeyValuePairs(self.event_definition.def_module,self);var options={name:self.name,body:data};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.SaveTrigger(options).then(function(data){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeTrigger.prototype.delete=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteTrigger(options).then(function(data){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeTrigger.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/triggers/"+this.name+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},CodeTrigger.prototype.fetchDeployOnPlatform=function(){return DeployOnPlatform.createFetchDeployOnPlatform("triggers",this.name).then(function(data){this.deployOnPlatform=data.deploy}.bind(this))},CodeTrigger.prototype.updateDeployOnPlatform=function(bool){return DeployOnPlatform.createUpdateDeployOnPlatform("triggers",this.name)(bool)},CodeTrigger}]).factory("CodeTimer",["Code","adminCalls","$q","currentSystem","consoleConstants","utils","DevUser","$http","platformRequest","DeployOnPlatform",function(Code,adminCalls,$q,currentSystem,consoleConstants,utils,DevUser,$http,platformRequest,DeployOnPlatform){function CodeTimer(config){this.isService=!1,this.service_name=config.service_name,this.description=config.description,this.repeats=config.repeats,this.n=config.frequency,this.seconds=1,this.deployOnPlatform=!0,config.start_time&&(this.start_day=new Date(config.start_time),this.start_time=new Date(config.start_time)),Code.call(this,config)}return CodeTimer.prototype.create=function(data){var self=this,deferred=$q.defer(),start_time=void 0;start_time=data.start_day instanceof Date?data.start_day.toISOString().split("T")[0]+"T":(new Date).toISOString().split("T")[0]+"T",data.start_time instanceof Date?start_time+=data.start_time.toISOString().split("T")[1]:start_time+=(new Date).toISOString().split("T")[1];var config={name:self.name,description:data.description,start_time:start_time,repeats:data.repeats,frequency:+data.n*+data.seconds,service_name:self.service_name,system_key:currentSystem.getSystemID()},options={name:self.name,body:config};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.CreateTimer(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CodeTimer.prototype.fetch=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetTimer(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},CodeTimer.prototype.save=function(){var self=this,deferred=$q.defer(),start_time=void 0;start_time=self.start_day instanceof Date?self.start_day.toISOString().split("T")[0]+"T":(new Date).toISOString().split("T")[0]+"T",self.start_time instanceof Date?start_time+=self.start_time.toISOString().split("T")[1]:start_time+=(new Date).toISOString().split("T")[1];var data={name:self.name,description:self.description,start_time:start_time,repeats:self.repeats,frequency:+self.n*+self.seconds,service_name:self.service_name,system_key:currentSystem.getSystemID()},options={name:self.name,body:data};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.SaveTimer(options).then(function(data){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeTimer.prototype.delete=function(){var self=this,deferred=$q.defer(),options={name:self.name};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteTimer(options).then(function(data){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},CodeTimer.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/timers/"+this.name+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},CodeTimer.prototype.fetchDeployOnPlatform=function(){return DeployOnPlatform.createFetchDeployOnPlatform("timers",this.name).then(function(data){this.deployOnPlatform=data.deploy}.bind(this))},CodeTimer.prototype.updateDeployOnPlatform=function(bool){return DeployOnPlatform.createUpdateDeployOnPlatform("timers",this.name)(bool)},CodeTimer}]).factory("CodeUtils",["$q","currentSystem","errorDialog","adminCalls","platformRequest","utils","CodeTrigger","CodeTimer","consoleConstants",function($q,currentSystem,errorDialog,adminCalls,platformRequest,utils,CodeTrigger,CodeTimer,consoleConstants){var triggerHandlers=[],timerHandlers=[],getTriggerDefs=function(){var deferred=$q.defer();return adminCalls.GetTriggerDefs().then(function(data){var triggerHierarchy={};for(var i in data){var triggerDef=data[i];triggerDef.visibility&&(triggerHierarchy[triggerDef.def_module]||(triggerHierarchy[triggerDef.def_module]={}),triggerHierarchy[triggerDef.def_module][triggerDef.def_name]=triggerDef.def_keys)}deferred.resolve(triggerHierarchy)},function(err){deferred.reject(err)}),deferred.promise},getTriggerHandlers=function(){var deferred=$q.defer(),options={};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetTriggerHandlersForSystem(options).then(function(data){triggerHandlers=data&&"null"!==data?data:[],deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},getTriggerHandlersForService=function(name){for(var rtn=[],length=triggerHandlers.length,i=0;i<length;i++)triggerHandlers[i].service_name===name&&rtn.push(new CodeTrigger(triggerHandlers[i]));return rtn},getTimerHandlers=function(){var deferred=$q.defer(),options={};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetTimerHandlersForSystem(options).then(function(data){timerHandlers=data&&"null"!==data?data:[],deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},getTimerHandlersForService=function(name){for(var rtn=[],length=timerHandlers.length,i=0;i<length;i++)timerHandlers[i].service_name===name&&rtn.push(new CodeTimer(timerHandlers[i]));return rtn},formatParams=function(params,inline){var formattedParams=[];return null!=params&&params.forEach(function(param){formattedParams.push(param.name)}),inline?formattedParams.join():formattedParams};return{getTriggerDefs:getTriggerDefs,getTriggerHandlers:getTriggerHandlers,getTriggerHandlersForService:getTriggerHandlersForService,getTimerHandlers:getTimerHandlers,getTimerHandlersForService:getTimerHandlersForService,formatRunParams:function(params){var paramObj={};return null!=params&&params.forEach(function(param){paramObj[param.name]=angular.isDefined(param.value)?utils.validateJSON(param.name,param.value):""}),paramObj},formatDependencies:function(arr){return arr.join(",")},formatParams:formatParams}}]).service("codes",["CodeService","CodeLibrary","CodeTrigger","CodeTimer","$q","adminCalls","consoleConstants","currentSystem",function(CodeService,CodeLibrary,CodeTrigger,CodeTimer,$q,adminCalls,consoleConstants,currentSystem){return{getServices:function(systemKey){var deferred=$q.defer(),options={};return options[consoleConstants.internal.SYSTEM_KEY]=void 0===systemKey?currentSystem.getSystemID():systemKey,adminCalls.GetServiceNames(options).then(function(data){for(var rtn=[],length=data.length,i=0;i<length;i++)rtn.push(new CodeService({name:data[i]}));deferred.resolve(rtn)},function(err){deferred.reject(err)}),deferred.promise},getLibraries:function(systemKey){var deferred=$q.defer(),options={};return options[consoleConstants.internal.SYSTEM_KEY]=void 0===systemKey?currentSystem.getSystemID():systemKey,adminCalls.GetLibraries(options).then(function(data){for(var rtn=[],length=data.length,i=0;i<length;i++)rtn.push(new CodeLibrary(data[i]));deferred.resolve(rtn)},function(err){deferred.reject(err)}),deferred.promise},getTriggers:function(systemKey){var deferred=$q.defer(),options={};return options[consoleConstants.internal.SYSTEM_KEY]=void 0===systemKey?currentSystem.getSystemID():systemKey,adminCalls.GetTriggerHandlersForSystem(options).then(function(data){for(var rtn=[],length=data.length,i=0;i<length;i++)rtn.push(new CodeTrigger(data[i]));deferred.resolve(rtn)},function(err){deferred.reject(err)}),deferred.promise},getTimers:function(systemKey){var deferred=$q.defer(),options={};return options[consoleConstants.internal.SYSTEM_KEY]=void 0===systemKey?currentSystem.getSystemID():systemKey,adminCalls.GetTimerHandlersForSystem(options).then(function(data){for(var rtn=[],length=data.length,i=0;i<length;i++)rtn.push(new CodeTimer(data[i]));deferred.resolve(rtn)},function(err){deferred.reject(err)}),deferred.promise},globalLibs:{file_writer:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"FileWriter.js/",crypto:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"Crypto.js/",jsutil:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"JSUtil.js/",geo:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"geo.js/",http:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"HTTP.js/",mailer:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"mailer.js/",net_cb:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"Net.js/",log:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"Log.js/",clearblade:consoleConstants.external.CODE.LIBRARY.DOCS_BASE_URL+"ClearBlade.js/"}}}]),app.factory("CodeList",["codes","$q","platformRequest","utils","DevUser","$http","currentSystem",function(codes,$q,platformRequest,utils,DevUser,$http,currentSystem){function CodeList(opts){if(opts.type&&!codeTypeEnum.hasOwnProperty(opts.type))throw console.log("Error! Must supply a supported type"),new Error("Must supply a supported type");this.type=opts.type,this.list=[],this.activeIndex=-1}var codeTypeEnum={service:{fetchFn:codes.getServices},library:{fetchFn:codes.getLibraries},trigger:{fetchFn:codes.getTriggers},timer:{fetchFn:codes.getTimers}};CodeList.prototype.fetch=function(){return codeTypeEnum[this.type].fetchFn().then(function(data){return this.list=data,this.list.sort(_sortByName),this.list}.bind(this),function(err){return err})},CodeList.prototype.addItem=function(item){this.list.push(item),this.list.sort(_sortByName)},CodeList.prototype.removeItem=function(item){for(var i=0,length=this.list.length;i<length;i++)this.list[i].name===item.name&&this.list.splice(i,1)},CodeList.prototype.setActive=function(idx){this.activeIndex=idx},CodeList.prototype.getIndexByName=function(name){for(var i=0,len=this.list.length;i<len;i++)if(this.list[i].name===name)return i;return-1},CodeList.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser(),codeType="";switch(this.type){case"library":codeType="libraries";break;default:codeType=this.type+"s"}return $http.get("/console-api/batch/export/"+codeType+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise};var _sortByName=function(a,b){var textA=a.name.toUpperCase(),textB=b.name.toUpperCase();return textA<textB?-1:textA>textB?1:0};return CodeList}]),app.service("codeResponseDialog",["$uibModal",function($uibModal){this.show=function(title,body){$uibModal.open({templateUrl:"partials/modals/codeResponseDialog.html",controller:"codeResponseDialogCtrl",resolve:{resolvedTitle:function(){return title},resolvedBody:function(){return body}}})}}]),app.factory("Collection",["consoleConstants","CbHeader","platformRequest","$q","resource","cbColumn","currentSystem","$http","collectionConstants","utils","DevUser",function(consoleConstants,CbHeader,platformRequest,$q,resource,cbColumn,currentSystem,$http,collectionConstants,utils,DevUser){function Collection(config){this[collectionConstants.COLLECTION_ID]=config[collectionConstants.COLLECTION_ID],this[consoleConstants.internal.SYSTEM_KEY]=config[collectionConstants.APP_ID],this[consoleConstants.internal.SYSTEM_SECRET]=config[consoleConstants.internal.SYSTEM_SECRET],this[collectionConstants.NAME]=config[collectionConstants.NAME],this[collectionConstants.DB_TYPE]=config[collectionConstants.DB_TYPE],this[collectionConstants.DB_NAME]=config[collectionConstants.DB_NAME],this[collectionConstants.ADDRESS]=config[collectionConstants.ADDRESS],this[collectionConstants.PORT]=config[collectionConstants.PORT],this[collectionConstants.USER]=config[collectionConstants.USER],this[collectionConstants.PASSWORD]=config[collectionConstants.PASSWORD],this[collectionConstants.TABLE_NAME]=config[collectionConstants.TABLE_NAME],this[collectionConstants.IS_CONNECTION]=config[collectionConstants.IS_CONNECTION],this[collectionConstants.IS_ENCRYPTED]=config[collectionConstants.IS_ENCRYPTED],this.columns=[],this.rows=[],this.totalCount=null,this.PK=null,this.isFiltered=!1,this.query=null,this.internalName=this[collectionConstants.NAME]}return Collection.prototype.create=function(){var deferred=$q.defer(),payload={};return payload[collectionConstants.NAME]=this[collectionConstants.NAME],payload[collectionConstants.APP_ID]=currentSystem.getSystemID(),this[collectionConstants.IS_CONNECTION]&&(payload[collectionConstants.DB_TYPE]=this[collectionConstants.DB_TYPE],payload[collectionConstants.DB_NAME]=this[collectionConstants.DB_NAME],payload[collectionConstants.ADDRESS]=this[collectionConstants.ADDRESS],payload[collectionConstants.PORT]=this[collectionConstants.PORT],payload[collectionConstants.USER]=this[collectionConstants.USER],payload[collectionConstants.PASSWORD]=this[collectionConstants.PASSWORD],payload[collectionConstants.TABLE_NAME]=this[collectionConstants.TABLE_NAME],payload[collectionConstants.IS_ENCRYPTED]=this[collectionConstants.IS_ENCRYPTED],"DB2 System i"===this[collectionConstants.DB_TYPE]&&(payload[collectionConstants.SCHEMA]=this[collectionConstants.SCHEMA],payload[collectionConstants.LIBRARY]=this[collectionConstants.LIBRARY],payload[collectionConstants.CATALOG]=this[collectionConstants.CATALOG])),platformRequest.Go("POST",platformRequest.AdminEndpoints.COLLECTION_MANAGEMENT,payload,new CbHeader).then(function(data){this[collectionConstants.COLLECTION_ID]=data[collectionConstants.COLLECTION_ID],deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.update=function(){var deferred=$q.defer(),connectionStringChanges={};connectionStringChanges[collectionConstants.PASSWORD]=this[collectionConstants.PASSWORD],connectionStringChanges[collectionConstants.DB_NAME]=this[collectionConstants.DB_NAME],connectionStringChanges[collectionConstants.TABLE_NAME]=this[collectionConstants.TABLE_NAME];var data={};return data[collectionConstants.DB_TYPE]=this[collectionConstants.DB_TYPE],data.id=this[collectionConstants.COLLECTION_ID],data.connectionStringMap={},data.connectionStringChanges=connectionStringChanges,platformRequest.Go("PUT",platformRequest.AdminEndpoints.COLLECTION_MANAGEMENT,data,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.delete=function(){return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.COLLECTION_MANAGEMENT+"?id="+this[collectionConstants.COLLECTION_ID],null,new CbHeader)},Collection.prototype.getColumns=function(deleteCallback){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID]+"/columns",null,new CbHeader).then(function(columns){this.columns=[];for(var i=0;i<columns.length;i++)this.addColumn(columns[i],deleteCallback);deferred.resolve(this.columns)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.getData=function(pageSize,pageNum,pageSort,pageFilter){var deferred=$q.defer();return pageFilter&&pageFilter.length?this.isFiltered=pageFilter.length>0:this.isFiltered=!1,this.query=resource.createFullQuery(pageSize,pageNum,pageSort,pageFilter),platformRequest.Go("GET",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID]+"?query="+JSON.stringify(this.query),null,new CbHeader).then(function(data){this.rows=data.DATA,deferred.resolve(this.rows)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.getTotalForQuery=function(pageSize,pageNum,pageSort,pageFilter){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID]+"/count?query="+JSON.stringify(resource.createFullQuery(pageSize,pageNum,pageSort,pageFilter)),null,new CbHeader).then(function(data){this.totalCount=data.count,deferred.resolve(this.totalCount)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.editCell=function(payload){return platformRequest.Go("PUT",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID],JSON.stringify(payload),new CbHeader)},Collection.prototype.addRow=function(){return platformRequest.Go("POST",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID],{},new CbHeader)},Collection.prototype.deleteRows=function(rows){var deferred=$q.defer(),query=resource.createQueryForDeletingRows(this[collectionConstants.COLLECTION_ID],rows,this.PK);return platformRequest.Go("DELETE",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID]+"?query="+JSON.stringify(resource.createFullQuery(1,1,null,query.query.FILTERS)),null,new CbHeader).then(function(data){for(var i=0,len=rows.length;i<len;i++)this.rows.splice(this.rows.lastIndexOf(rows[i]),1)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.deleteAllRows=function(){return platformRequest.Go("DELETE",platformRequest.PublicEndpoints.DATA_PREFIX+"/"+this[collectionConstants.COLLECTION_ID]+"?query="+JSON.stringify(resource.createFullQuery(1,1,null,resource.createFilterQuery("notEqualTo","item_id","00000000-0000-0000-0000-000000000000").FILTERS)),null,new CbHeader)},Collection.prototype.deleteColumn=function(colName){var deferred=$q.defer(),body={id:this[collectionConstants.COLLECTION_ID],deleteColumn:colName};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.COLLECTION_MANAGEMENT,body,new CbHeader).then(function(data){for(var i=0,len=this.columns.length;i<len;i++)if(this.columns[i][collectionConstants.COLUMN.FIELD]===colName){this.columns.splice(i,1);break}deferred.resolve()}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.addColumn=function(column,deleteCallback){column.PK?(this.PK=column[collectionConstants.COLUMN.FIELD],column.removable=!1,column.enableCellEdit=!1):this[collectionConstants.IS_CONNECTION]?column.removable=!1:column.removable=!0,column.dataType=column[collectionConstants.COLUMN.TYPE],column.field=column[collectionConstants.COLUMN.FIELD],column.name=column[collectionConstants.COLUMN.FIELD].toLowerCase(),column.displayName=column[collectionConstants.COLUMN.FIELD].toLowerCase()+" ("+column[collectionConstants.COLUMN.TYPE]+")",this.columns.push(new cbColumn(column[collectionConstants.COLUMN.TYPE]).createTemplate(column,deleteCallback))},Collection.prototype.doesColumnExist=function(columnName){if(columnName){columnName=columnName.toLowerCase();for(var i=0,len=this.columns.length;i<len;i++)if(this.columns[i].name===columnName)return!0;return!1}return!1},Collection.prototype.createColumn=function(column){var deferred=$q.defer(),payload={id:this[collectionConstants.COLLECTION_ID],addColumn:{id:this[collectionConstants.COLLECTION_ID],type:column[collectionConstants.COLUMN.TYPE],name:column[collectionConstants.COLUMN.FIELD]}};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.COLLECTION_MANAGEMENT,payload,new CbHeader).then(function(data){deferred.resolve(column)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Collection.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/collections/"+this[collectionConstants.NAME]+"?shouldExportItemId="+options.shouldExportItemId+"&url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},Collection}]),app.factory("CollectionList",["$q","platformRequest","CbHeader","Collection","consoleConstants","$rootScope","utils","DevUser","$http","currentSystem",function($q,platformRequest,CbHeader,Collection,consoleConstants,$rootScope,utils,DevUser,$http,currentSystem){function CollectionList(config){this[consoleConstants.internal.SYSTEM_KEY]=config[consoleConstants.internal.SYSTEM_KEY],this[consoleConstants.internal.SYSTEM_SECRET]=config[consoleConstants.internal.SYSTEM_SECRET],this.results=[],this.currentCollection=null,this.indexForActiveCollection=-1}CollectionList.prototype.fetch=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_COLLECTIONS+"?appid="+this[consoleConstants.internal.SYSTEM_KEY],null,new CbHeader).then(function(data){if(this.results=[],data&&"null"!==data)for(var i=0,len=data.length;i<len;i++)data[i][consoleConstants.internal.SYSTEM_SECRET]=this[consoleConstants.internal.SYSTEM_SECRET],this.addItem(new Collection(data[i]));this.results.sort(utils.sortAlphabetically.bind("name")),deferred.resolve(this.results)}.bind(this),function(err){deferred.reject(err)}),deferred.promise};var _checkParamType=function(param){if(!(param instanceof Collection))throw new Error("Must send a collection as parameter")};return CollectionList.prototype.addItem=function(coll){_checkParamType(coll),this.results.push(coll)},CollectionList.prototype.removeItem=function(coll){_checkParamType(coll);for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][consoleConstants.external.DATA.COLLECTION_ID]===coll[consoleConstants.external.DATA.COLLECTION_ID]){var deleted=this.results.splice(i,1);return $rootScope.$broadcast(consoleConstants.internal.COLLECTION_DELETED_EVENT),deleted}},CollectionList.prototype.setCurrentCollection=function(coll){return _checkParamType(coll),this.currentCollection=coll,this.indexForActiveCollection=this.results.indexOf(this.currentCollection),coll},CollectionList.prototype.getCollectionByID=function(collID){for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][consoleConstants.external.DATA.COLLECTION_ID]===collID)return this.results[i]},CollectionList.prototype.getCollectionByName=function(collName){for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][consoleConstants.external.DATA.NAME]===collName)return this.results[i]},CollectionList.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/collections/?shouldExportItemId="+options.shouldExportItemId+"&url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},CollectionList}]),angular.module("adminPortal").service("confirmDialog",["$uibModal",function($uibModal){return{show:function(message,hideCancel){return $uibModal.open({templateUrl:"partials/modals/confirmDialog.html",controller:"confirmDialogCtrl",resolve:{message:function(){return message},hideCancel:hideCancel||!1}})}}}]),angular.module("adminPortal").factory("currentSystem",["$rootScope","$localStorage","$state","$q","consoleConstants","System","platformRequest",function($rootScope,$localStorage,$state,$q,consoleConstants,System,platformRequest){var system=new System($localStorage.system||{}),updateFromCache=function(systemKeyStateParam){var deferred=$q.defer();if(systemKeyStateParam&&system[consoleConstants.internal.SYSTEM_KEY]!==systemKeyStateParam){var systemObj={};systemObj[consoleConstants.internal.UNKNOWN_TYPE_OF_KEY]=systemKeyStateParam,system.populate(systemObj),system.getInfo().then(function(){updateCurSystem(system),deferred.resolve(system)},function(err){deferred.reject(err)})}else updateCurSystem(system),deferred.resolve(system);return deferred.promise},clear=function(){return system=new System({})},getName=function(){return system.getName()},getNameForHeader=function(){var name=system.getName();return system.isEdge&&(name+=" (EDGE)"),name},getIsEdge=function(){return system.isEdge},getSystemID=function(){return system.getSystemKey()},getSystemSecret=function(){return system.getSystemSecret()},updateCurSystem=function(newCurSystem){system=$localStorage.system=newCurSystem,$rootScope.$emit("systemChange")};return{getSystem:function(){return system},clear:clear,getName:getName,getNameForHeader:getNameForHeader,getIsEdge:getIsEdge,getSystemID:getSystemID,getSystemSecret:getSystemSecret,updateCurSystem:updateCurSystem,updateFromCache:updateFromCache}}]),app.factory("Dashboard",["consoleConstants","dashboardConstants","$q","platformRequest","CbHeader","currentSystem","utils","DevUser","$http","dashboardUtils","roles",function(consoleConstants,dashboardConstants,$q,platformRequest,CbHeader,currentSystem,utils,DevUser,$http,dashboardUtils,roles){function Dashboard(config){this[dashboardConstants.SYSTEM_KEY]=config[dashboardConstants.SYSTEM_KEY],this[dashboardConstants.NAME]=config[dashboardConstants.NAME],this[dashboardConstants.DESCRIPTION]=config[dashboardConstants.DESCRIPTION],this[dashboardConstants.CONFIG]=config[dashboardConstants.CONFIG],this[dashboardConstants.LAST_UPDATED]=config[dashboardConstants.LAST_UPDATED],[dashboardConstants.KNOWN_TYPES.CUSTOM,dashboardConstants.KNOWN_TYPES.CUSTOM_V2,dashboardConstants.KNOWN_VERSIONS.V2].indexOf(config[dashboardConstants.TYPE])>-1?this[dashboardConstants.TYPE]=dashboardConstants.KNOWN_TYPES.CUSTOM:this[dashboardConstants.TYPE]=dashboardConstants.KNOWN_TYPES.EDGE_MONITORING,[dashboardConstants.KNOWN_TYPES.CUSTOM,dashboardConstants.KNOWN_TYPES.EDGE_MONITORING].indexOf(config[dashboardConstants.TYPE])>-1&&config.name?this[dashboardConstants.VERSION]=dashboardConstants.KNOWN_VERSIONS.V1:this[dashboardConstants.VERSION]=dashboardConstants.KNOWN_VERSIONS.V2,this.sysId=this.youWontUnderstandThis(currentSystem.getSystemID()).toString(),this.sysSec=this.youWontUnderstandThis(currentSystem.getSystemSecret()).toString(),this.getUrl()}return Dashboard.prototype.getUrl=function(sysKey,sysSecret,name){if(dashboardUtils.isOfTypeV2(this[dashboardConstants.VERSION])){if(currentSystem.getSystemSecret()){var reqOptions={method:"GET",url:"/console-api/portal/createURL",params:{systemKey:currentSystem.getSystemID(),systemSecret:currentSystem.getSystemSecret(),name:this[dashboardConstants.NAME]}};$http(reqOptions).success(function(data){this.url=data.url}.bind(this),function(err){console.warn("Unable to create URL for portal '"+name+"'",err)})}else window.location.reload()}else this.url="/dashboard/?systemKey="+this.sysId+"&systemSecret="+this.sysSec+"&name="+this[dashboardConstants.NAME]},Dashboard.prototype.createUrl=function(){var theUrl=this.url;return roles.getRole("Anonymous").portals.filter(function(portal){return portal.itemInfo[dashboardConstants.NAME]===this[dashboardConstants.NAME]}.bind(this))[0]&&(theUrl+="&"+dashboardConstants.ALLOW_ANONYMOUS+"=true"),theUrl},Dashboard.prototype.create=function(configObject){var deferred=$q.defer(),data={config:JSON.stringify(configObject)};return data[dashboardConstants.DESCRIPTION]=this[dashboardConstants.DESCRIPTION],this[dashboardConstants.VERSION]===dashboardConstants.KNOWN_VERSIONS.V2?this[dashboardConstants.TYPE]===dashboardConstants.KNOWN_TYPES.CUSTOM?data[dashboardConstants.TYPE]=dashboardConstants.KNOWN_TYPES.CUSTOM_V2:data[dashboardConstants.TYPE]=dashboardConstants.KNOWN_TYPES.EDGE_MONITORING_V2:data[dashboardConstants.TYPE]=this[dashboardConstants.TYPE],platformRequest.Go("POST",platformRequest.PublicEndpoints.DASHBOARD_PREFIX.replace("{systemKey}",this[dashboardConstants.SYSTEM_KEY]).replace("{name}",this[dashboardConstants.NAME]),data,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Dashboard.prototype.youWontUnderstandThis=function(object){return CryptoJS.AES.encrypt(object,"ClearBladeDashboards2016")},Dashboard.prototype.update=function(){var deferred=$q.defer(),data={};return data[dashboardConstants.DESCRIPTION]=this[dashboardConstants.DESCRIPTION],platformRequest.Go("PUT",platformRequest.PublicEndpoints.DASHBOARD_PREFIX.replace("{systemKey}",this[dashboardConstants.SYSTEM_KEY]).replace("{name}",this[dashboardConstants.NAME]),data,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Dashboard.prototype.delete=function(){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.PublicEndpoints.DASHBOARD_PREFIX.replace("{systemKey}",this[dashboardConstants.SYSTEM_KEY]).replace("{name}",this[dashboardConstants.NAME]),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Dashboard.prototype.get=function(name){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.DASHBOARD_PREFIX.replace("{systemKey}",this[dashboardConstants.SYSTEM_KEY]).replace("{name}",name),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Dashboard.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/portals/"+this[dashboardConstants.NAME]+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},Dashboard}]),app.factory("DashboardList",["platformRequest","consoleConstants","$q","CbHeader","Dashboard","dashboardConstants","utils","DevUser","$http","currentSystem","roles",function(platformRequest,consoleConstants,$q,CbHeader,Dashboard,dashboardConstants,utils,DevUser,$http,currentSystem,roles){function DashboardList(config){this[consoleConstants.internal.SYSTEM_KEY]=config[consoleConstants.internal.SYSTEM_KEY],this.type=config.types?config.types:[config.type]||[dashboardConstants.KNOWN_TYPES.CUSTOM],this.results=[]}DashboardList.prototype.fetch=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_DASHBOARDS.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY]),null,new CbHeader).then(function(data){this.results=[];for(var i=0,len=data.length;i<len;i++)this.type.indexOf(data[i].type)>-1&&this.results.push(new Dashboard(data[i]));deferred.resolve(this.results)}.bind(this),function(err){deferred.reject(err)}),deferred.promise};var _checkType=function(dash){if(!(dash instanceof Dashboard))throw new Error("Must supply an instance of dashboard")};return DashboardList.prototype.addDash=function(dash){_checkType(dash),this.results.push(dash)},DashboardList.prototype.removeDash=function(dash){_checkType(dash);for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][dashboardConstants.NAME]===dash[dashboardConstants.NAME]){this.results.splice(i,1);break}},DashboardList.prototype.updateDash=function(dash){_checkType(dash);for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][dashboardConstants.NAME]===dash[dashboardConstants.NAME]){this.results[i]=dash;break}},DashboardList.prototype.sortAlphabetically=function(){this.results.sort(function(a,b){return a.name.localeCompare(b.name)})},DashboardList.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/portals?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},DashboardList}]),angular.module("adminPortal").factory("dashboardUtils",["$http","$q","dashboardConstants",function($http,$q,dashboardConstants){var v2Types=[dashboardConstants.KNOWN_VERSIONS.V2];return this.isOfTypeV2=function(type){return v2Types.indexOf(type)>-1},this.fetchDefaults=function(portalType){var deferred=$q.defer(),fileName=portalType;return portalType===dashboardConstants.KNOWN_TYPES.EDGE_MONITORING&&(fileName="edge_monitoring_versions"),$http.get("https://raw.githubusercontent.com/ClearBlade/Default-Portals/master/"+fileName+".json").then(function(response){response.data?deferred.resolve(response.data):deferred.resolve(response)}.bind(this),function(err){err.data?deferred.reject(err.data):deferred.reject(err)}),deferred.promise},this}]),app.factory("DeployOnPlatform",["platformRequest","CbHeader","currentSystem",function(platformRequest,CbHeader,currentSystem){return{createFetchDeployOnPlatform:function(assetClass,assetId){var cb=new ClearBlade,query=cb.Query();return query.equalTo("asset_class",assetClass),query.equalTo("asset_id",assetId),platformRequest.Go("GET",platformRequest.AdminEndpoints.DEPLOY_ON_PLATFORM.replace("{systemKey}",currentSystem.getSystemID())+"?query="+JSON.stringify(query.query),null,new CbHeader).then(function(data){return data.length>0?{deploy:!1}:{deploy:!0}})},createUpdateDeployOnPlatform:function(assetClass,assetId){return function(bool){var config={deploy:bool};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ASSET_DEPLOY_ON_PLATFORM.replace("{systemKey}",currentSystem.getSystemID()).replace("{assetClass}",assetClass).replace("{assetId}",assetId),config,new CbHeader)}}}}]),angular.module("adminPortal").factory("DevUser",["$rootScope","$q","$http","$timeout","$localStorage","CbHeader","platformRequest",function($rootScope,$q,$http,$timeout,$localStorage,CbHeader,platformRequest){return this.email="",this.logIn=function(authData){var deferred=$q.defer(),header=null;return platformRequest.isConnectedToEdge()&&(header=new CbHeader),platformRequest.Go("POST",platformRequest.AdminEndpoints.ADMIN_AUTH,authData,header).then(function(data){this.email=authData.email,deferred.resolve(data.dev_token)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},this.logOut=function(){var deferred=$q.defer();return platformRequest.disconnectEdge(),platformRequest.Go("POST",platformRequest.AdminEndpoints.ADMIN_LOGOUT,null,new CbHeader).then(function(){delete $localStorage.cb_platform_dev_token,delete $localStorage.cb_edge_dev_token,delete $localStorage.dev_info,platformRequest.clearExistingGithubCredentials(),platformRequest.clearSystem(),store.dispatch({type:"LOGOUT_SUCCESS"}),this.email="",deferred.resolve()}.bind(this),function(err){deferred.reject(err)}),deferred.promise},this.loggedIn=function(){return""!==this.email},this.getLoggedUser=function(){return this.email},this.forgotPassword=function(email){},this.resetPassword=function(userToken,newPassword){var deferred=$q.defer(),resetData={token:userToken,newPass:newPassword};return $http.put("/console-api/resetPassword",resetData).success(function(){deferred.resolve()}).error(function(error){deferred.reject(error.status)}),deferred.promise},this.changeLoggedInPassword=function(oldPassword,newPassword){var deferred=$q.defer(),passwordUpdate={old_password:oldPassword,new_password:newPassword};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.ADMIN_CHANGEPASS,passwordUpdate,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},this.checkAuth=function(){var deferred=$q.defer();return $localStorage.cb_platform_dev_token||$localStorage.cb_edge_dev_token?(platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_INFO,null,new CbHeader).then(function(data){$localStorage.dev_info=data,this.email=data.email,store.dispatch({type:"FETCH_CURRENT_USER_SUCCESS",payload:{currentUser:data}}),$timeout(function(){$rootScope.$broadcast("DevUser.loaded")},1e3),deferred.resolve(this.email)}.bind(this),function(err){deferred.reject(err)}),deferred.promise):(deferred.reject(),deferred.promise)},this.getPlatformInfo=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ABOUT_PLATFORM,null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},this.getInfo=function(){return $localStorage.dev_info||{}},this.isAdmin=function(){return!!this.getInfo().admin},this}]),angular.module("adminPortal").factory("developers",["$q","currentSystem","adminCalls","resource","consoleConstants",function($q,currentSystem,adminCalls,resource,consoleConstants){return{getAllDevelopers:function(pageSize,pageNum,pageSort,pageFilter){var deferred=$q.defer(),query="?pagesize="+pageSize+"&pagenum="+pageNum;return adminCalls.GetAllDevelopers(query).then(function(data){"null"===data?deferred.resolve([]):deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},getTotalCount:function(){var deferred=$q.defer();return adminCalls.GetAllDevelopers("").then(function(data){"null"===data?deferred.resolve([]):deferred.resolve(data.count)},function(err){deferred.reject(err)}),deferred.promise},updateDeveloper:function(dev){var deferred=$q.defer(),body={email:dev[consoleConstants.external.EMAIL],admin:dev[consoleConstants.external.ADMIN],disabled:dev[consoleConstants.external.DISABLED]};return adminCalls.UpdateDeveloper(body).then(function(){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},structureDevelopers:function(developers){var developerData=[],millisecondMultiplier=1e3;for(i in developers){var entry={};entry[consoleConstants.external.EMAIL]=developers[i][consoleConstants.external.EMAIL],entry[consoleConstants.external.SYSTEMS]=developers[i][consoleConstants.external.SYSTEMS],entry[consoleConstants.internal.NUMBER_OF_SYSTEMS]=Object.keys(developers[i][consoleConstants.external.SYSTEMS]).length,entry[consoleConstants.internal.ENABLED]=!developers[i][consoleConstants.external.DISABLED],entry[consoleConstants.external.DISABLED]=developers[i][consoleConstants.external.DISABLED],entry[consoleConstants.internal.FULL_NAME]=developers[i][consoleConstants.external.FIRST_NAME]+" "+developers[i][consoleConstants.external.LAST_NAME],entry[consoleConstants.external.ADMIN]=developers[i][consoleConstants.external.ADMIN],entry[consoleConstants.external.CREATION_DATE]=new Date(developers[i][consoleConstants.external.CREATION_DATE]*millisecondMultiplier).toLocaleDateString(),entry[consoleConstants.external.LAST_LOGIN]=new Date(developers[i][consoleConstants.external.LAST_LOGIN]*millisecondMultiplier).toLocaleDateString(),entry[consoleConstants.external.ORGANIZATION]=developers[i][consoleConstants.external.ORGANIZATION],developerData.push(entry)}return developerData}}}]),app.factory("Device",["$q","deviceConstants","CbHeader","platformRequest",function($q,deviceConstants,CbHeader,platformRequest){function Device(config){this.populate(config)}var IGNORE_FIELDS=[deviceConstants.LAST_ACTIVE_DATE,deviceConstants.CREATED_DATE,deviceConstants.SYSTEM_KEY,deviceConstants.DEVICE_KEY,deviceConstants.NAME,"CUSTOM_FIELDS","internalDeviceName"];return Device.prototype.populate=function(config){void 0===config&&(config={});for(var key in config)this[key]=config[key];this.internalDeviceName=config[deviceConstants.NAME]},Device.prototype.create=function(){var deferred=$q.defer(),data={};data[deviceConstants.NAME]=this[deviceConstants.NAME];for(key in deviceConstants)-1===IGNORE_FIELDS.indexOf(deviceConstants[key])&&(deviceConstants[key]===deviceConstants.ENABLED||deviceConstants[key]===deviceConstants.ALLOW_KEY_AUTH||deviceConstants[key]===deviceConstants.ALLOW_CERTIFICATE_AUTH?data[deviceConstants[key]]=void 0===this[deviceConstants[key]]||this[deviceConstants[key]]:deviceConstants[key]===deviceConstants.SALT||(data[deviceConstants[key]]=this[deviceConstants[key]]||""));return platformRequest.Go("POST",platformRequest.AdminEndpoints.DEVICE.replace("{systemKey}",this[deviceConstants.SYSTEM_KEY]).replace("{name}",data[deviceConstants.NAME]),data,new CbHeader).then(function(data){this.populate(data),deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Device.prototype.update=function(){var deferred=$q.defer(),data={};for(key in this)-1===IGNORE_FIELDS.indexOf(key)&&null!=this[key]&&(data[key]=this[key]);return platformRequest.Go("PUT",platformRequest.AdminEndpoints.DEVICE.replace("{systemKey}",this[deviceConstants.SYSTEM_KEY]).replace("{name}",this[deviceConstants.NAME]),data,new CbHeader).then(function(data){this.populate(data),deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},Device.prototype.delete=function(){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.DEVICE.replace("{systemKey}",this[deviceConstants.SYSTEM_KEY]).replace("{name}",this[deviceConstants.NAME]),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Device.prototype.isCustomField=function(candidate){for(var constant in deviceConstants)if(deviceConstants[constant]===candidate)return!1;return!0},Device.prototype.generateKeys=function(count){var deferred=$q.defer(),data={};return data.count=parseInt(count),platformRequest.Go("POST",platformRequest.AdminEndpoints.DEVICE_KEYS.replace("{systemKey}",this[deviceConstants.SYSTEM_KEY]).replace("{name}",this[deviceConstants.NAME]),data,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Device.prototype.rotateKeys=function(){var deferred=$q.defer(),data={};return data[deviceConstants.ALLOW_KEY_AUTH]=!0,platformRequest.Go("PUT",platformRequest.AdminEndpoints.DEVICE_KEYS.replace("{systemKey}",this[deviceConstants.SYSTEM_KEY]).replace("{name}",this[deviceConstants.NAME]),data,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Device.prototype.deleteKeys=function(){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.DEVICE_KEYS.replace("{systemKey}",this[deviceConstants.SYSTEM_KEY]).replace("{name}",this[deviceConstants.NAME]),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Device}]),app.factory("DeviceList",["$q","consoleConstants","Device","platformRequest","CbHeader","resource","utils","DevUser","$http","currentSystem",function($q,consoleConstants,Device,platformRequest,CbHeader,resource,utils,DevUser,$http,currentSystem){function DeviceList(config){this[consoleConstants.internal.SYSTEM_KEY]=config[consoleConstants.internal.SYSTEM_KEY],this.list=[]}DeviceList.prototype.fetch=function(pageSize,pageNum,pageSort,pageFilter){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_DEVICES.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"?query="+JSON.stringify(resource.createFullQuery(pageSize,pageNum,pageSort,pageFilter)),null,new CbHeader).then(function(data){this.list=[];for(var i=0,len=data.length;i<len;i++)this.list.push(new Device(data[i]));deferred.resolve(this.list)}.bind(this),function(err){deferred.reject(err)}),deferred.promise};var _checkParamType=function(param){if(!(param instanceof Device))throw new Error("Must send a device as parameter")};return DeviceList.prototype.addDevice=function(device){_checkParamType(device);var deferred=$q.defer();return device.create().then(function(){this.list.push(device),deferred.resolve(device)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},DeviceList.prototype.removeDevice=function(device){_checkParamType(device);for(var promise,i=0,len=this.list.length;i<len;i++)if(this.list[i][consoleConstants.external.DEVICE.DEVICE_KEY]===device[consoleConstants.external.DEVICE.DEVICE_KEY]){promise=this.list[i].delete(),this.list.splice(i,1);break}return promise},DeviceList.prototype.createColumn=function(columnName,columnType){var deferred=$q.defer(),data={};return data.column_name=columnName,data.type=columnType,platformRequest.Go("POST",platformRequest.AdminEndpoints.DEVICE_COLUMNS.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY]),data,new CbHeader).then(function(data){deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},DeviceList.prototype.deleteColumn=function(columnName){var deferred=$q.defer(),data="column_name="+columnName;return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.DEVICE_COLUMNS.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY])+"?"+data,null,new CbHeader).then(function(data){deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},DeviceList.prototype.getAllColumns=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.DEVICE_COLUMNS.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY]),null,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},DeviceList.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/devices?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},DeviceList}]),angular.module("adminPortal").factory("edgeProxy",["$state","platformRequest","$uibModal",function($state,platformRequest,$uibModal){return{connect:function(edgeRecord){var availableEdges=platformRequest.getAvailableEdges();if(platformRequest.hasAvailableEdges()&&void 0!==availableEdges[edgeRecord.name])platformRequest.connectEdge(availableEdges[edgeRecord.name]),$state.go("app.system.data",{systemKey:edgeRecord.systemKey+":"+edgeRecord.name}).then(function(){},function(){platformRequest.clearAvailableEdgeByName(edgeRecord.name),platformRequest.disconnectEdge()});else{platformRequest.connectEdge(edgeRecord);$uibModal.open({templateUrl:"partials/login.html",controller:"loginCtrl"}).result.then(function(devToken){platformRequest.setEdgeToken(devToken),$state.go("app.system.data",{systemKey:edgeRecord.systemKey+":"+edgeRecord.name})},function(){platformRequest.disconnectEdge()})}}}}]),angular.module("adminPortal").factory("edges",["consoleConstants","currentSystem","adminCalls","$q","platformRequest","utils","DevUser","$http",function(consoleConstants,currentSystem,adminCalls,$q,platformRequest,utils,DevUser,$http){return{createEdgeColumn:function(colName,colType){var payload={column_name:colName,type:colType},options={body:payload};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.CreateEdgeColumn(options)},deleteEdgeColumn:function(colName){var options={column_name:colName};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteEdgeColumn(options)},getEdgeColumns:function(){var options={};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetEdgeColumns(options)},updateEdgeCell:function(edgeName,colName,newValue){var options={edgeName:edgeName,body:{}};return options.body[colName]=newValue,options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateEdgeCell(options)},export:function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/edges?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise}}}]),angular.module("adminPortal").factory("errorDialog",["$uibModal",function($uibModal){return this.show=function(title,message,err,options){void 0===options&&(options={});$uibModal.open({templateUrl:options.templateUrl||"partials/modals/errorDialog.html",controller:options.controller||"errorDialogCtrl",windowClass:options.windowClass||"",resolve:options.resolve||{title:function(){return title},message:function(){return message},err:function(){try{return err.replace(/[\n\r]/g,"<br>")}catch(e){return err}}}})},this}]),app.factory("githubPageManager",["$http","loadDisplay","errorDialog","$localStorage","githubService","$location","$uibModal","systemList","$q",function($http,loadDisplay,errorDialog,$localStorage,githubService,$location,$uibModal,systemList,$q){function promptForGithubLogin(){$uibModal.open({templateUrl:"partials/modals/routeToGithub.html",controller:"routeToGithubCtrl"})}function promptForGithubInstall(){$uibModal.open({templateUrl:"partials/modals/importSystem.html",controller:"importSystemCtrl"}).result.then(function(){loadDisplay.addDisplay(systemList.get(),"Loading systems...")})}function promptForSystemExport(){var deferred=$q.defer();return systemList.get().then(function(){try{var system=systemList.getSystemByKey(getAssetInfo());deferred.resolve(createModalObjectForSystemExport(system,!0))}catch(e){deferred.reject(e)}}),deferred.promise}function promptForGithubExport(){var promise;switch(getAssetType()){case ASSET_TYPES.SYSTEM:promise=promptForSystemExport();break;default:return void console.warn("no asset type given")}promise.then(function(data){$uibModal.open(data)},function(err){console.error(err)})}function getGithubAuthStatus(){return isGithubTokenInStorage()?GITHUB_STATES.AUTHED:-1!=$location.absUrl().search("code=")?GITHUB_STATES.ERROR:GITHUB_STATES.CLEAN}function isGithubTokenInStorage(){return!!$localStorage.github_access_token}function showPromptIfNeeded(){if(getPromptRequired()){switch(getPromptType()){case PROMPT_TYPES.IMPORT:promptForGithubInstall();break;case PROMPT_TYPES.EXPORT:default:promptForGithubExport()}setShouldShowGithubPrompt(!1)}}function getGithubAuthTokenIfNeeded(){var rawUrl=$location.absUrl();if(-1!=rawUrl.indexOf("code")){var verificationCode=getKeyValuesForQueryParams(rawUrl).code;(new githubService).getAccessTokenFromCode(verificationCode).then(function(data){processTokenResponse(data),setShouldShowGithubPrompt(!0)})}}function processTokenResponse(response){if(response&&response.data&&response.data.access_token){console.log("GHI: Code converted to token successfully");setTokenInLocalStorage(response.data.access_token)}else console.log("GHI: Invalid verification code: "+JSON.stringify(response.data));window.location.href="/"}function setTokenInLocalStorage(token){$localStorage.github_access_token=token}function getPromptRequired(){return!!$localStorage.should_show_github_prompt}function setShouldShowGithubPrompt(bool){$localStorage.should_show_github_prompt=bool||!1}function getKeyValuesForQueryParams(){var query=location.search.substr(1),result={};return query.split("&").forEach(function(part){var item=part.split("=");result[item[0]]=decodeURIComponent(item[1])}),result}function getPromptType(){return $localStorage.github_prompt_type}function setPromptType(type){$localStorage.github_prompt_type=type}function getAssetType(){return $localStorage.github_asset_type}function setAssetType(val){$localStorage.github_asset_type=val}function getAssetInfo(){return $localStorage.github_asset_info}function setAssetInfo(val){$localStorage.github_asset_info=val}function createModalObjectForSystemExport(sys,isGitHubExport){return{templateUrl:"partials/modals/exportSystem.html",controller:"exportSystemCtrl",resolve:{resolvedSystem:function(){return sys},isGitHubExport:function(){return!!isGitHubExport}}}}var GITHUB_STATES={CLEAN:"No credentials found.",AUTHED:"We've previous successfully authed to Github",ERROR:"Unexpected error state, logging enabled"},PROMPT_TYPES={IMPORT:0,EXPORT:1},ASSET_TYPES={SYSTEM:0};return{manage:function(){getGithubAuthTokenIfNeeded(),showPromptIfNeeded()},GITHUB_STATES:GITHUB_STATES,getGithubAuthStatus:getGithubAuthStatus,promptForGithubLogin:promptForGithubLogin,promptForGithubInstall:promptForGithubInstall,isGithubTokenInStorage:isGithubTokenInStorage,setPromptType:setPromptType,PROMPT_TYPES:PROMPT_TYPES,createModalObjectForSystemExport:createModalObjectForSystemExport,setAssetType:setAssetType,ASSET_TYPES:ASSET_TYPES,setAssetInfo:setAssetInfo}}]),app.factory("githubService",["$q","$http","loadDisplay","errorDialog","$uibModal","$localStorage","platformRequest",function($q,$http,loadDisplay,errorDialog,$uibModal,$localStorage,platformRequest){function githubService(){}githubService.prototype.verifyToken=function(githubOauthToken){var deferred=$q.defer();return $http({url:"/console-api/verifyGithubUserToken",method:"GET",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform(),githubOauthAccessToken:githubOauthToken}}).then(function(data){data.status,deferred.resolve(data)},function(error){console.log(error),deferred.reject(error)}),deferred.promise},githubService.prototype.getUrlContent=function(url){return url.split("https://github.com/")[1]},githubService.prototype.getUserName=function(url){return urlContent=this.getUrlContent(url),urlContents=urlContent.split("/"),urlContents[0]},githubService.prototype.getRepoName=function(url){return urlContent=this.getUrlContent(url),urlContents=urlContent.split("/"),urlContents[1]},githubService.prototype.getBranchName=function(url){return urlContent=this.getUrlContent(url),urlContents=urlContent.split("/"),urlContents.length>3&&"tree"==urlContents[2]?urlContents[3]:"master"},githubService.prototype.trimBranchFromUrl=function(url){return url.includes("/tree/")?url.split("/tree/")[0]:url},githubService.prototype.revokeUserToken=function(githubOauthToken){var deferred=$q.defer(),promise=$http({url:"/console-api/revokeGithubUserToken",method:"GET",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform(),githubOauthAccessToken:githubOauthToken}});return loadDisplay.addDisplay(promise,"Revoking ClearBlade's Authorization to github..."),promise.then(function(data){data.status,deferred.resolve(data)},function(error){console.log(error),errorDialog.show("Error!","Unable to revoke authorization to github",error.statusText),deferred.reject(error)}),deferred.promise},githubService.prototype.getGithubCodeFromUrl=function(url){return url.split("?")[1].split("=")[1].split("#")[0]},githubService.prototype.getClientID=function(){var deferred=$q.defer();return $http({url:"/console-api/getGithubClientID",method:"GET",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform()}}).then(function(data){deferred.resolve(data)},function(error){deferred.reject(error)}),deferred.promise};var getAccessToken=function(client_id,verificationCode){var deferred=$q.defer();return $http({url:"/console-api/getTokenUsingAuthCode",method:"POST",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform()},data:{client_id:client_id,code:verificationCode,scope:"public_repo"}}).then(function(data){deferred.resolve(data)},function(error){console.log(error),deferred.reject(error)}),deferred.promise};return githubService.prototype.getAccessTokenFromCode=function(verificationCode){var client_id,deferred=$q.defer();return $q.when(this.getClientID(),function(data){client_id=data.data.client_id,deferred.resolve(getAccessToken(client_id,verificationCode))},function(error){deferred.reject(error)}),deferred.promise},githubService.prototype.getSystemStructure=function(url){return $http({url:"/console-api/systemStructureFromGithub",method:"GET",headers:{"ClearBlade-DevToken":platformRequest.getTokenForPlatform(),githubOauthAccessToken:$localStorage.github_access_token},params:{systemRepoName:this.getRepoName(url),username:this.getUserName(url),branch:this.getBranchName(url)}})},githubService}]),angular.module("adminPortal").factory("messageSettings",["$http","$q",function($http,$q){return{getMessageSettings:function(){var deferred=$q.defer();return deferred.resolve({quality:"once"}),deferred.promise}}}]),angular.module("adminPortal").service("messaging",["$q","currentSystem","platformRequest","adminCalls","CbHeader","consoleConstants",function($q,currentSystem,platformRequest,adminCalls,CbHeader,consoleConstants){var _mapMsgHistoryData=function(data,topic){if(data&&data.length){var time;return data.map(function(el){return el.topic=topic,el.userId=el["user-id"],time=new Date(1e3*el["send-date"]),el.sendDate=time.toLocaleDateString()+" "+time.toLocaleTimeString(),el})}return[]},getMessageHistoryByTimestamp=function(topic,timestamp,count){return messageHistoryByTimestamp(consoleConstants.internal.REST_METHODS.GET,topic,timestamp,count)},deleteMessageHistoryByTimestamp=function(topic,timestamp,count){return messageHistoryByTimestamp(consoleConstants.internal.REST_METHODS.DELETE,topic,timestamp,count)},getMessageHistoryByTimeframe=function(topic,start,stop,count){return messageHistoryByTimeframe(consoleConstants.internal.REST_METHODS.GET,topic,start,stop,count)},deleteMessageHistoryByTimeframe=function(topic,start,stop,count){return messageHistoryByTimeframe(consoleConstants.internal.REST_METHODS.DELETE,topic,start,stop,count)},messageHistoryByTimestamp=function(method,topic,timestamp,count){return platformRequest.Go(method,platformRequest.PublicEndpoints.MESSAGE_PREFIX+"/"+currentSystem.getSystemID()+"?topic="+topic+"&last="+timestamp+"&count="+count,null,new CbHeader).then(function(data){return _mapMsgHistoryData(data,topic)})},messageHistoryByTimeframe=function(method,topic,start,stop,count){return platformRequest.Go(method,platformRequest.PublicEndpoints.MESSAGE_PREFIX+"/"+currentSystem.getSystemID()+"?topic="+topic+"&start="+start+"&stop="+stop+"&count="+count,null,new CbHeader).then(function(data){return _mapMsgHistoryData(data,topic)})},getCurrentTopics=function(){return platformRequest.Go("GET",platformRequest.PublicEndpoints.MESSAGE_PREFIX+"/"+currentSystem.getSystemID()+"/currentTopics",null,new CbHeader)};return{getMessageHistoryByTimeframe:getMessageHistoryByTimeframe,deleteMessageHistoryByTimeframe:deleteMessageHistoryByTimeframe,getMessageHistoryByTimestamp:getMessageHistoryByTimestamp,deleteMessageHistoryByTimestamp:deleteMessageHistoryByTimestamp,getCurrentTopics:getCurrentTopics}}]),app.factory("cb",["$q",function($q){function cb(){this.ClearBlade=new ClearBlade}return cb.prototype={init:function(config){var deferred=$q.defer();if(this.ClearBlade.user)return deferred.resolve(this.ClearBlade.user),deferred.promise;var initOptions={systemKey:config.systemKey,systemSecret:config.systemSecret,URI:config.URI,callback:function(err,body){err?deferred.reject(body):deferred.resolve(body)}};return this.ClearBlade.init(initOptions),deferred.promise},runCode:function(funcName,params){var deferred=$q.defer();return this.ClearBlade.Code().execute(funcName,params,function(err,body){err||!1===body.success?deferred.reject(body):deferred.resolve(body)}),deferred.promise}},cb}]),angular.module("adminPortal").service("platformRequest",["$q","$http","$location","$localStorage","consoleConstants",function($q,$http,$location,$localStorage,consoleConstants){var messageTLS=!1,adminEndpoints={USER_INFO:"/admin/userinfo",ADMIN_REG:"/admin/reg",ADMIN_AUTH:"/admin/auth",ADMIN_LOGOUT:"/admin/logout",ADMIN_CHANGEPASS:"/admin/putpass",ADMIN_FORGOTPASS:"/admin/forgotpass",ALL_SYSTEMS:"/admin/allapps",SYSTEM_MANAGEMENT:"/admin/systemmanagement",SYSTEM_DEPLOY:"/admin/edges/resources/{systemKey}/deploy",SYSTEM_SYNC_FETCH:"/admin/edges/template/{systemKey}",SYSTEM_SYNC_UPDATE:"/admin/edges/template/{systemKey}/{name}",SYSTEM_ACCESS_FETCH:"/admin/developers/{systemKey}",SYSTEM_ACCESS_UPDATE:"/admin/developers/{systemKey}",ALL_COLLECTIONS:"/admin/allcollections",ALL_USERS:"/admin/user/{systemKey}",ALL_TOPICS:"/api/v/1/message/{systemKey}/currentTopics",ALL_LOGS:"/codeadmin/v/2/logs/{systemKey}/{name}",ALL_FAILURES:"/codeadmin/failed/{systemKey}",COLLECTION_MANAGEMENT:"/admin/collectionmanagement",CODE_ADMINv2:"/codeadmin/v/2",USER_ADMIN:"/admin/user",ADAPTERS_ADMIN:"/admin/{systemKey}/adaptors",PUSH_ADMIN:"/admin/push",BIO_NOTES:"/admin/biologynotes",TRIGGER_DEFS:"/admin/triggers/definitions",TRIGGER_HANDLERS:"/admin/triggers/handlers",TIMER_HANDLERS:"/admin/triggers/timers",CHECK_LOGGING_ENABLED:"/codeadmin/v/2/logs/{systemKey}/{name}/active",ABOUT_PLATFORM:"/api/about",ADMIN_PLATFORM:"/admin/platform",ALL_EDGES:"/admin/edges/{systemKey}",EDGE:"/admin/edges/{systemKey}/{name}",EDGE_DISABLED:"/admin/platform/disableEdgeVersions",EDGE_UPGRADE:"/admin/upgradeEdge",ALL_DEVICES:"/admin/devices/{systemKey}",DEVICE:"/admin/devices/{systemKey}/{name}",DEVICE_COLUMNS:"/admin/devices/{systemKey}/columns",DEVICE_ROLES:"/admin/devices/roles/{systemKey}/{name}",DEVICE_KEYS:"/admin/devices/keys/{systemKey}/{name}",ALL_DASHBOARDS:"/admin/portals/{systemKey}",RESOURCE_TIMER:"/admin/triggers/timers/{systemKey}/{name}",RESOURCE_COLLECTION:"/api/v/1/collection/{systemKey}/{name}",RESOURCE_TRIGGER:"/admin/triggers/handlers/{systemKey}/{name}",RESOURCE_SERVICE:"/api/v/1/code/{systemKey}/{name}",RESOURCE_LIBRARY:"/codeadmin/v/2/library/{systemKey}/{name}",DEPLOY_ON_PLATFORM:"/admin/{systemKey}/deploy_on_platform",ASSET_DEPLOY_ON_PLATFORM:"/admin/{systemKey}/deploy_on_platform/{assetClass}/{assetId}"},analyticEndpoints={USER:{STATUS:"/admin/usage/{systemKey}",FROM_DATE:"/admin/usage/{systemKey}/{start}/",DATE_RANGE:"/admin/usage/{systemKey}/{start}/{end}"},ADMIN:{STATUS:"/admin/platform/{systemKey}",FROM_DATE:"/admin/platform/{systemKey}/{start}/",DATE_RANGE:"/admin/platform/{systemKey}/{start}/{end}"}},API_VERSION=1,publicEndpoints={DATA_PREFIX:"/api/v/"+API_VERSION+"/data",CODE_PREFIX:"/api/v/"+API_VERSION+"/code",PUSH_PREFIX:"/api/v/"+API_VERSION+"/push",MESSAGE_PREFIX:"/api/v/"+API_VERSION+"/message",USER_PREFIX:"/api/v/"+API_VERSION+"/user",ANALYTICS_PREFIX:"/api/v/2/analytics",DASHBOARD_PREFIX:"/api/v/2/portals/{systemKey}/{name}",ALL_PLUGINS:"/api/v/2/plugins/{systemKey}",ONE_PLUGIN:"/api/v/2/plugins/{systemKey}/{name}"},go=function(method,endpoint,data,headers,timeout){var deferred=$q.defer(),doIt=function(){var httpConfig={};httpConfig.url=platformURL+endpoint,httpConfig.method=method,data&&(httpConfig.data=data),headers&&(httpConfig.headers=headers),timeout&&(httpConfig.timeout=timeout),$http(httpConfig).success(function(resp){deferred.resolve(resp)}).error(function(data,status,headers,config){data&&data.error&&data.error.detail?deferred.reject(data.error.detail,status,headers,config):data&&data.error&&data.error.message?deferred.reject(data.error.message,status,headers,config):deferred.reject(data,status,headers,config)})};return isUrlSet()?doIt():init().then(function(){doIt()},function(err){deferred.reject(err)}),deferred.promise},init=function(){var deferred=$q.defer();return $http.get("/platformURL").success(function(data){platformURL=$localStorage.cb_platformURL=data.url,messageURL=$localStorage.cb_messageUrl=data.messageUrl,messagePort=$localStorage.cb_messagePort=data.messagePort,messageTLS=data.messageTls,deferred.resolve(platformURL)}).error(function(err){console.log(err),deferred.reject(err)}),deferred.promise},isUrlSet=function(){return""!==platformURL},getPlatformUrl=function(){return platformURL||$location.protocol()+"://"+$location.host()},getMessageUrl=function(){return messageURL},getMessagePort=function(){return parseInt(messagePort)},getMessageTLS=function(){return messageTLS},setPlatformDevToken=function(tok){$localStorage.cb_platform_dev_token=tok},connectEdge=function(edgeRecord){$localStorage.cb_edge=edgeRecord},setEdgeToken=function(devToken){$localStorage.cb_edge.devToken=devToken,void 0===$localStorage.cb_available_edges&&($localStorage.cb_available_edges={}),$localStorage.cb_available_edges[$localStorage.cb_edge.name]=$localStorage.cb_edge},getAvailableEdges=function(){return $localStorage.cb_available_edges},hasAvailableEdges=function(){return void 0!==$localStorage.cb_available_edges},clearAvailableEdgeByName=function(name){delete $localStorage.cb_available_edges[name]},clearAvailableEdges=function(){$localStorage.cb_available_edges={}},isConnectedToEdge=function(){return void 0!==$localStorage.cb_edge},getConnectedEdge=function(){return $localStorage.cb_edge},disconnectEdge=function(){delete $localStorage.cb_edge},getTokenForPlatform=function(){return $localStorage.cb_platform_dev_token};return{AdminEndpoints:adminEndpoints,PublicEndpoints:publicEndpoints,AnalyticEndpoints:analyticEndpoints,Go:go,Init:init,IsUrlSet:isUrlSet,GetUrl:getPlatformUrl,GetMessageUrl:getMessageUrl,GetMessagePort:getMessagePort,GetMessageTLS:getMessageTLS,setPlatformDevToken:setPlatformDevToken,getTokenForPlatform:getTokenForPlatform,connectEdge:connectEdge,isConnectedToEdge:isConnectedToEdge,getConnectedEdge:getConnectedEdge,setEdgeToken:setEdgeToken,disconnectEdge:disconnectEdge,getAvailableEdges:getAvailableEdges,hasAvailableEdges:hasAvailableEdges,clearAvailableEdges:clearAvailableEdges,clearAvailableEdgeByName:clearAvailableEdgeByName,clearExistingGithubCredentials:function(){delete $localStorage.github_access_token,delete $localStorage.code},clearSystem:function(){delete $localStorage.system},deleteZipFromGoPlatform:function(dirName){$http({url:"/console-api/batch/export/cleanUp",method:"POST",headers:{"ClearBlade-DevToken":getTokenForPlatform()},data:{refDirName:dirName}}).then(function(data){console.log(data)},function(error){console.log(error)})}}}]),app.factory("Plugin",["pluginConstants","$q","platformRequest","CbHeader","currentSystem","utils","DevUser","$http",function(pluginConstants,$q,platformRequest,CbHeader,currentSystem,utils,DevUser,$http){function Plugin(config){this[pluginConstants.SYSTEM_KEY]=config[pluginConstants.SYSTEM_KEY],this[pluginConstants.NAME]=config[pluginConstants.NAME],this[pluginConstants.URL]=config[pluginConstants.URL]}return Plugin.prototype.create=function(){var deferred=$q.defer(),data={};return data[pluginConstants.NAME]=this[pluginConstants.NAME],data[pluginConstants.URL]=this[pluginConstants.URL],platformRequest.Go("POST",platformRequest.PublicEndpoints.ALL_PLUGINS.replace("{systemKey}",this[pluginConstants.SYSTEM_KEY]),data,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Plugin.prototype.update=function(){var deferred=$q.defer(),data={};return data[pluginConstants.NAME]=this[pluginConstants.NAME],data[pluginConstants.URL]=this[pluginConstants.URL],platformRequest.Go("PUT",platformRequest.PublicEndpoints.ONE_PLUGIN.replace("{systemKey}",this[pluginConstants.SYSTEM_KEY]).replace("{name}",this[pluginConstants.NAME]),data,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Plugin.prototype.delete=function(){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.PublicEndpoints.ONE_PLUGIN.replace("{systemKey}",this[pluginConstants.SYSTEM_KEY]).replace("{name}",this[pluginConstants.NAME]),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},Plugin.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/plugins/"+this[pluginConstants.NAME]+"?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},Plugin}]),app.factory("PluginList",["platformRequest","consoleConstants","$q","CbHeader","Plugin","pluginConstants","utils","DevUser","$http","currentSystem",function(platformRequest,consoleConstants,$q,CbHeader,Plugin,pluginConstants,utils,DevUser,$http,currentSystem){function PluginList(config){this[consoleConstants.internal.SYSTEM_KEY]=config[consoleConstants.internal.SYSTEM_KEY],this.results=[]}PluginList.prototype.fetch=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.PublicEndpoints.ALL_PLUGINS.replace("{systemKey}",this[consoleConstants.internal.SYSTEM_KEY]),null,new CbHeader).then(function(data){this.results=[];for(var i=0,len=data.length;i<len;i++)this.results.push(new Plugin(data[i]));deferred.resolve(this.results)}.bind(this),function(err){deferred.reject(err)}),deferred.promise};var _checkType=function(plugin){if(!(plugin instanceof Plugin))throw new Error("Must supply an instance of plugin")};return PluginList.prototype.addPlugin=function(plugin){_checkType(plugin),this.results.push(plugin)},PluginList.prototype.removePlugin=function(plugin){_checkType(plugin);for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][pluginConstants.NAME]===plugin[pluginConstants.NAME]){this.results.splice(i,1);break}},PluginList.prototype.updatePlugin=function(plugin){_checkType(plugin);for(var i=0,len=this.results.length;i<len;i++)if(this.results[i][pluginConstants.NAME]===plugin[pluginConstants.NAME]){this.results[i]=plugin;break}},PluginList.prototype.export=function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/plugins?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},PluginList}]),angular.module("adminPortal").factory("push",["$q","currentSystem","platformRequest","resource","adminCalls","CbHeader","consoleConstants",function($q,currentSystem,platformRequest,resource,adminCalls,CbHeader,consoleConstants){var addAccount=function(newAccountInfo){var data={systemID:currentSystem.getSystemID(),file:newAccountInfo.encodedCert,type:newAccountInfo.platform,appid:newAccountInfo.appid,"connection-class":newAccountInfo.connectionId},options={body:data};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.AddAccount(options)},getAccounts=function(){var options={};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetAccounts(options)},updateAccount=function(updatedAccountInfo){var data={systemID:currentSystem.getSystemID(),"account-id":updatedAccountInfo.accountNumber,"connection-class":updatedAccountInfo.connectionId,appid:updatedAccountInfo.appid};updatedAccountInfo.encodedCert&&(data.file=updatedAccountInfo.encodedCert);var options={body:data};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateAccount(options)};return{addAccount:addAccount,getAccounts:getAccounts,updateAccount:updateAccount,getPushHistory:function(pageSize,pageNum,pageSort){return platformRequest.Go("GET",platformRequest.PublicEndpoints.PUSH_PREFIX+"/"+currentSystem.getSystemID()+"/history?query="+JSON.stringify(resource.createFullQuery(pageSize,pageNum,pageSort)),null,new CbHeader)},getRegisteredUsers:function(pageSize,pageNum,pageSort){return platformRequest.Go("GET",platformRequest.PublicEndpoints.PUSH_PREFIX+"/"+currentSystem.getSystemID()+"/ids?query="+JSON.stringify(resource.createFullQuery(pageSize,pageNum,pageSort)),null,new CbHeader)},sendPush:function(recipients,message,appid){var data={systemID:currentSystem.getSystemID(),cbids:recipients,"apple-message":JSON.stringify({aps:{alert:message,"content-available":1}}),appid:appid};return platformRequest.Go("POST",platformRequest.PublicEndpoints.PUSH_PREFIX+"/"+currentSystem.getSystemID(),data,new CbHeader)},addDevice:function(newDevice){var data={systemID:currentSystem.getSystemID(),"device-token":newDevice.deviceToken,type:newDevice.type,appid:newDevice.appid};return platformRequest.Go("POST",platformRequest.PublicEndpoints.PUSH_PREFIX+"/"+currentSystem.getSystemID()+"/ids",data,new CbHeader)}}}]),angular.module("adminPortal").factory("resource",["$q","currentSystem","adminCalls","platformRequest","CbHeader",function($q,currentSystem,adminCalls,platformRequest,CbHeader){var sortMap={ASC:"ascending",DESC:"descending"},createFilterQuery=function(method,columnName,value){var cb=new ClearBlade,cbQuery=cb.Query({collecion:""});return cbQuery[method](columnName,value),cbQuery.query},createFullQuery=function(pageSize,pageNum,pageSort,pageFilter){var cb=new ClearBlade,cbQuery=cb.Query({collection:""});if(pageSize=pageSize||0,pageNum=pageNum||0,cbQuery.setPage(parseInt(pageSize),parseInt(pageNum)),pageSort){var direction="ASC";for(var key in pageSort[0])direction=key;cbQuery[sortMap[direction]](pageSort[0][direction])}return pageFilter&&(cbQuery.query.FILTERS=pageFilter),cbQuery.query},createQueryForDeletingRows=function(collID,rowArray,PK){var cb=new ClearBlade,query=cb.Query({collection:collID});query.equalTo(PK,rowArray[0][PK]);for(var i=1;i<rowArray.length;i++){var orQuery=cb.Query({collection:collID});orQuery.equalTo(PK,rowArray[i][PK]),query.or(orQuery)}return query};return{getUsers:function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_USERS.replace("{systemKey}",currentSystem.getSystemID()),null,new CbHeader).then(function(data){deferred.resolve(data.Data)},function(err){deferred.reject(err)}),deferred.promise},getTopics:function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_TOPICS.replace("{systemKey}",currentSystem.getSystemID()),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},createQueryForDeletingRows:createQueryForDeletingRows,createFullQuery:createFullQuery,createFilterQuery:createFilterQuery}}]),app.factory("Resources",["$q","currentSystem","CollectionList","platformRequest","CbHeader","consoleConstants",function($q,currentSystem,CollectionList,platformRequest,CbHeader,consoleConstants){var activeSystem={},deployments={collection:{},service:{},library:{},timer:{},trigger:{},user:{},device:{}},sync={collection:{},service:{},library:{},timer:{},trigger:{},user:{},device:{}},collectionMap={},updateCollectionMap=function(){var deffered=$q.defer();return new CollectionList({systemKey:activeSystem.getSystemKey(),systemSecret:activeSystem.getSystemSecret()}).fetch().then(function(data){for(i in data)collectionMap[data[i].name]=data[i].collectionID,sync.collection[data[i].collectionID]=[];deffered.resolve()},function(err){deffered.reject(err)}),deffered.promise},getResource=function(resourceType,resourceIdentifier){var deffered=$q.defer();if(resourceType===consoleConstants.internal.RESOURCE_TYPE.USER||resourceType===consoleConstants.internal.RESOURCE_TYPE.DEVICE)return deffered.resolve({type:resourceType,r_id:resourceIdentifier,deploymentSettings:DeploySettings({resource_type:resourceType,resource_identifier:resourceIdentifier,isNew:!0}),syncLocked:!0}),deffered.promise;activeSystem=currentSystem.getSystem();var prepPromises=[];return 0===Object.keys(collectionMap).length&&prepPromises.push(updateCollectionMap()),$q.all(prepPromises).then(function(){platformRequest.Go("GET",getEndpointForType(resourceType).replace("{systemKey}",currentSystem.getSystemID()).replace("{name}",resourceIdentifier),null,new CbHeader).then(function(resource){resource.type=resourceType,resource.r_id=resourceIdentifier;var settingFetchPromises=[];settingFetchPromises.push(activeSystem.getDeploySettings().then(function(data){for(i in data){var deployment=DeploySettings(data[i]);if(deployment.resource_type===consoleConstants.internal.RESOURCE_TYPE.COLLECTION){var collName="";for(name in collectionMap)if(collectionMap[name]===deployment.resource_identifier){collName=name;break}deployments[deployment.resource_type][collName]=deployment}else deployments[deployment.resource_type][deployment.resource_identifier]=deployment}void 0===deployments[resourceType][resourceIdentifier]&&(deployments[resourceType][resourceIdentifier]=DeploySettings({resource_type:resourceType,resource_identifier:resourceIdentifier,isNew:!0})),resource.deploymentSettings=deployments[resourceType][resourceIdentifier]})),resource.syncLocked=resource.type!==consoleConstants.internal.RESOURCE_TYPE.COLLECTION;for(ref in sync[resource.type])sync[resource.type][ref].length=0;resource.syncLocked||settingFetchPromises.push(activeSystem.getSyncInfo().then(function(data){var def="";for(edge in data)for(resrc in data[edge])def=resrc.split("::"),2==def.length?(void 0===sync[def[0]][def[1]]&&(sync[def[0]][def[1]]=[]),sync[def[0]][def[1]].push(edge)):console.error("invalid sync def");resource.syncSettings=sync[resource.type][getActualResourceIdForResourceType(resource.r_id,resource.type)]})),$q.all(settingFetchPromises).then(function(){deffered.resolve(resource)},function(err){deffered.reject(err)})},function(err){deffered.reject(err)})},function(err){deffered.reject(err)}),deffered.promise},getEndpointForType=function(resourceType){switch(resourceType){case consoleConstants.internal.RESOURCE_TYPE.COLLECTION:return platformRequest.AdminEndpoints.RESOURCE_COLLECTION;case consoleConstants.internal.RESOURCE_TYPE.SERVICE:return platformRequest.AdminEndpoints.RESOURCE_SERVICE;case consoleConstants.internal.RESOURCE_TYPE.LIBRARY:return platformRequest.AdminEndpoints.RESOURCE_LIBRARY;case consoleConstants.internal.RESOURCE_TYPE.TIMER:return platformRequest.AdminEndpoints.RESOURCE_TIMER;case consoleConstants.internal.RESOURCE_TYPE.TRIGGER:return platformRequest.AdminEndpoints.RESOURCE_TRIGGER;case consoleConstants.internal.RESOURCE_TYPE.DEVICE:return platformRequest.AdminEndpoints.RESOURCE_DEVICE;case consoleConstants.internal.RESOURCE_TYPE.USER:return platformRequest.AdminEndpoints.RESOURCE_USER;default:return""}},getDependencies=function(resource){var deffered=$q.defer(),dependencyRef={};switch(resource.type){case consoleConstants.internal.RESOURCE_TYPE.COLLECTION:deffered.resolve(dependencyRef);break;case consoleConstants.internal.RESOURCE_TYPE.SERVICE:case consoleConstants.internal.RESOURCE_TYPE.LIBRARY:dependencyRef.library=resource.dependencies.split(","),deffered.resolve(dependencyRef);break;case consoleConstants.internal.RESOURCE_TYPE.TIMER:dependencyRef.service=[resource.service_name],deffered.resolve(dependencyRef);break;case consoleConstants.internal.RESOURCE_TYPE.TRIGGER:if(dependencyRef.service=[resource.service_name],"Data"==resource.event_definition.def_module){if(0===Object.keys(resource.key_value_pairs).length)dependencyRef.collection=Object.keys(collectionMap),deffered.resolve(dependencyRef);else for(key in resource.key_value_pairs)if("collectionName"===key){var coll=resource.key_value_pairs[key];dependencyRef.collection=[coll],deffered.resolve(dependencyRef)}}else deffered.resolve(dependencyRef);break;case consoleConstants.internal.RESOURCE_TYPE.DEVICE:case consoleConstants.internal.RESOURCE_TYPE.USER:deffered.resolve(dependencyRef)}return deffered.promise},mergeSettings=function(existingSettings,newSettings,overwrite){if(overwrite)return newSettings;if(newSettings.platform&&(existingSettings.platform=!0),newSettings.allEdges)existingSettings.allEdges=!0;else{for(var i in newSettings.edges)-1==existingSettings.edges.indexOf(newSettings.edges[i])&&existingSettings.edges.push(newSettings.edges[i])}return existingSettings},deploy=function(resource,settings,ignore){var deffered=$q.defer();if(resource.type===consoleConstants.internal.RESOURCE_TYPE.USER||resource.type===consoleConstants.internal.RESOURCE_TYPE.DEVICE)return deffered.resolve(),deffered.promise;var needsDeploy=!1;if(deployments[resource.type][resource.r_id].platform!==settings.platform&&(needsDeploy=!0),deployments[resource.type][resource.r_id].allEdges!==settings.allEdges)needsDeploy=!0;else{settings.edges.length!==deployments[resource.type][resource.r_id].edges.length&&(needsDeploy=!0);for(var i in settings.edges)if(!deployments[resource.type][resource.r_id].edges.includes(settings.edges[i])){needsDeploy=!0;break}}if(!needsDeploy)return deffered.resolve(),deffered.promise;var overwrite=!1;void 0===ignore&&(ignore={},overwrite=!0),settings=mergeSettings(deployments[resource.type][resource.r_id],settings,overwrite);var dependencyPromises=[];dependencyPromises.push(getDependencies(resource).then(function(resourceDependencies){for(type in resourceDependencies)for(var d in resourceDependencies[type])if(needsDeploy=!1,void 0===ignore.type&&(ignore[type]=[]),!ignore[type].includes(resourceDependencies[type][d])){ignore[type].push(resourceDependencies[type][d]);var dependencyDeploy=$q.defer();""===resourceDependencies[type][d]?dependencyDeploy.resolve():getResource(type,resourceDependencies[type][d]).then(function(dependencyResource){dependencyResource.type===consoleConstants.internal.RESOURCE_TYPE.LIBRARY&&"global"===dependencyResource.visibility?dependencyDeploy.resolve():deploy(dependencyResource,settings,ignore).then(function(){dependencyDeploy.resolve()},function(err){dependencyDeploy.reject(err)})},function(err){dependencyDeploy.reject(err)}),dependencyPromises.push(dependencyDeploy.promise)}},function(err){}));$q.all(dependencyPromises).then(function(){saveDeployment(resource,settings).then(function(){deffered.resolve()},function(err){deffered.reject(err)})},function(err){deffered.reject(err)});return deffered.promise},saveDeployment=function(resource,settings){var deffered=$q.defer(),config=resource.deploymentSettings.getRequestObject(resource,settings);if(resource.deploymentSettings.isNew)activeSystem.createDeploySettings(config).then(function(){deffered.resolve()},function(err){deffered.reject(err)});else{if(""!==config.edge)return activeSystem.updateDeploySettings(config).then(function(){deffered.resolve()},function(err){deffered.reject(err)});activeSystem.deleteDeploySettings(config).then(function(){deffered.resolve()},function(err){deffered.reject(err)})}return deffered.promise},saveSync=function(resource,settings){var deffered=$q.defer(),updateEdge=function(edge,options){var deff=$q.defer();return platformRequest.Go("PUT",platformRequest.AdminEndpoints.SYSTEM_SYNC_UPDATE.replace("{systemKey}",currentSystem.getSystemID()).replace("{name}",edge),options,new CbHeader).then(function(){deff.resolve()},function(err){deff.reject(err)}),deff.promise},savePromises=[],syncRef=sync[resource.type][getActualResourceIdForResourceType(resource.r_id,resource.type)],def={def_module:resource.type,def_name:getActualResourceIdForResourceType(resource.r_id,resource.type)};for(e in settings)syncRef.includes(settings[e])||savePromises.push(updateEdge(settings[e],{add:[def]}));for(e in syncRef)settings.includes(syncRef[e])||savePromises.push(updateEdge(syncRef[e],{remove:[def]}));return $q.all(savePromises).then(function(){getResource(resource.type,resource.r_id),deffered.resolve()},function(err){deffered.reject(err)}),deffered.promise},DeploySettings=function(config){var deploySettings={};deploySettings.getRequestObject=function(resource,settings){return{resource_type:resource.type,resource_identifier:resource.type!==consoleConstants.internal.RESOURCE_TYPE.COLLECTION?resource.r_id:collectionMap[resource.r_id],platform:settings.platform,edge:settings.allEdges?"*":formatEdges(settings.edges)}};var parseEdges=function(edgeQuery){if(""===edgeQuery||"*"===edgeQuery)return[];var edges=[],deployedEdges=JSON.parse(edgeQuery).FILTERS[0][0].EQ;for(var edge in deployedEdges)edges.push(deployedEdges[edge].name);return edges},formatEdges=function(edgeArray){var edgeFmt="";if(0===edgeArray.length)return edgeFmt;for(var edge in edgeArray)edgeFmt+='{"name":"'+edgeArray[edge]+'"},';return'{"FILTERS":[[{"EQ":['+edgeFmt.substring(0,edgeFmt.length-1)+"]}]]}"};switch(deploySettings.isNew=config.isNew||!1,deploySettings.resource_type=config.resource_type,deploySettings.resource_identifier=config.resource_identifier,deploySettings.platform=config.platform||!1,deploySettings.edges=config.edge?parseEdges(config.edge):[],deploySettings.dependencies=config.dependencies||[],deploySettings.canDeployToPlatform=!1,deploySettings.locked=!1,deploySettings.allEdges="*"===config.edge,deploySettings.resource_type){case consoleConstants.internal.RESOURCE_TYPE.COLLECTION:case consoleConstants.internal.RESOURCE_TYPE.SERVICE:case consoleConstants.internal.RESOURCE_TYPE.LIBRARY:deploySettings.canDeployToPlatform=!1;break;case consoleConstants.internal.RESOURCE_TYPE.TIMER:case consoleConstants.internal.RESOURCE_TYPE.TRIGGER:deploySettings.canDeployToPlatform=!0;break;case consoleConstants.internal.RESOURCE_TYPE.DEVICE:case consoleConstants.internal.RESOURCE_TYPE.USER:deploySettings.platform=!0,deploySettings.allEdges=!0,deploySettings.locked=!0;break;default:console.error("resource type not recognized")}return deploySettings},getActualResourceIdForResourceType=function(resourceId,resourceType){return resourceType===consoleConstants.internal.RESOURCE_TYPE.COLLECTION?collectionMap[resourceId]:resourceId};return{getResource:getResource,deploy:deploy,saveSync:saveSync}}]),angular.module("adminPortal").factory("roles",["$q","$http","$log","users","currentSystem","adminCalls","consoleConstants","platformRequest","CbHeader","DevUser","currentSystem","utils",function($q,$http,$log,users,currentSystem,adminCalls,consoleConstants,platformRequest,CbHeader,DevUser,currentSystem,utils){function addRole(newRole){var deferred=$q.defer(),options={body:newRole};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.AddRole(options).then(function(data){deferred.resolve(data.role_id)},function(err){deferred.reject(err)}),deferred.promise}function formatCollectionRole(newRole,collection){return{name:newRole.name,collections:[{itemInfo:{name:collection.name,id:collection.collectionID},permissions:parsePermissions(newRole)}],topics:[],services:[]}}function formatServiceRole(newRole,service){return{name:newRole.name,collections:[],topics:[],services:[{itemInfo:{name:service.name},permissions:parsePermissions(newRole)}]}}function formatUserRole(newRole){return{name:newRole.name,collections:[],topics:[],services:[],users:{permissions:parsePermissions(newRole)}}}function formatDeviceRole(newRole){return{name:newRole.name,collections:[],topics:[],services:[],devices:{permissions:parsePermissions(newRole)}}}function formatMsgHistoryRole(newRole){return{name:newRole.name,collections:[],topics:[],services:[],msgHistory:{permissions:parsePermissions(newRole)}}}function formatPushRole(newRole){return{name:newRole.name,collections:[],topics:[],services:[],push:{permissions:parsePermissions(newRole)}}}function formatRoles(serverRoles){var myRoles=[];for(var i in serverRoles){var newRole={id:serverRoles[i].ID,name:serverRoles[i].Name,collections:formatCollectionList(serverRoles[i].Permissions.Collections),portals:formatCollectionList(serverRoles[i].Permissions.Portals),topics:formatList(serverRoles[i].Permissions.Topics),services:formatList(serverRoles[i].Permissions.CodeServices),users:addGenericPermissions(serverRoles[i].Permissions.UsersList.Level),devices:addGenericPermissions(serverRoles[i].Permissions.DevicesList.Level),msgHistory:addGenericPermissions(serverRoles[i].Permissions.MsgHistory.Level),push:addGenericPermissions(serverRoles[i].Permissions.Push.Level),systemLevel:{services:addGenericPermissions(void 0!==serverRoles[i].Permissions.SystemServices&&null!==serverRoles[i].Permissions.SystemServices?serverRoles[i].Permissions.SystemServices.Level:0)}};myRoles.push(newRole),_Roles[newRole.id]=newRole}return myRoles}function addGenericPermissions(permCode){var userPerms={};return addPermissions(userPerms,permCode),userPerms.read||userPerms.create||userPerms.update||userPerms.delete?userPerms:{}}function formatCollectionList(permList){var myPermList=[];for(var i in permList)if(0!==permList[i].Level&&""!==permList[i].Name){var newPerm={itemInfo:{name:permList[i].Name}};permList[i].hasOwnProperty("ID")&&(newPerm.itemInfo.id=permList[i].ID);var permCode=permList[i].Level;addPermissions(newPerm,permCode),myPermList.push(newPerm)}return myPermList}function formatList(permList){var myPermList=[];for(var i in permList){var newPerm={itemInfo:{name:permList[i].Name}};permList[i].hasOwnProperty("ID")&&(newPerm.itemInfo.id=permList[i].ID);addPermissions(newPerm,permList[i].Level),myPermList.push(newPerm)}return myPermList}function formatColRole(roles){var myRoles=[];for(var i in roles)newRole={name:roles[i].Name},addPermissions(newRole,roles[i].Level),myRoles.push(newRole);return myRoles}function getDeviceRoles(deviceName){var deferred=$q.defer(),options={};return options.name=deviceName,options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetDeviceRoles(options).then(function(response){deferred.resolve(response.roles)},function(err){deferred.reject(err)}),deferred.promise}function updateDeviceRoles(deviceName,changes){var deferred=$q.defer(),options={};return options.name=deviceName,options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),options.body=changes,adminCalls.UpdateDeviceRoles(options).then(function(response){deferred.resolve(response.roles)},function(err){deferred.reject(err)}),deferred.promise}function addPermissions(obj,permCode){obj.delete=8==(8&permCode),obj.update=4==(4&permCode),obj.create=2==(2&permCode),obj.read=1==(1&permCode)}function addRemovedServices(cur,orig){for(var i in orig){var curOrig=orig[i],found=!1;for(var j in cur)if(cur[j].itemInfo.name===curOrig.itemInfo.name){found=!0;break}if(!found){var removed={itemInfo:curOrig.itemInfo,create:!1,read:!1,update:!1,delete:!1};cur.push(removed)}}return cur}function addRemoved(cur,orig){for(var i in orig){var curOrig=orig[i],found=!1;for(var j in cur)if(cur[j].itemInfo.id===curOrig.itemInfo.id){found=!0;break}if(!found){var removed={itemInfo:curOrig.itemInfo,create:!1,read:!1,update:!1,delete:!1};cur.push(removed)}}return cur}function formCollUpdate(collList){formedList=[];for(var i in collList)formColl={itemInfo:{name:collList[i].itemInfo.name,id:collList[i].itemInfo.id}},formColl.permissions=parsePermissions(collList[i]),formedList.push(formColl);return formedList}function parsePermissions(colPerms){var permissions=0;return colPerms.read&&(permissions+=1),colPerms.create&&(permissions+=2),colPerms.update&&(permissions+=4),colPerms.delete&&(permissions+=8),permissions}var _Roles={},addRoleGeneral=function(newRole){return addRole(formatAddingRole(newRole))},addRoleForCollection=function(newRole,collection){return addRole(formatCollectionRole(newRole,collection))},addRoleForService=function(newRole,service){return addRole(formatServiceRole(newRole,service))},addRoleForUser=function(newRole){return addRole(formatUserRole(newRole))},addRoleForDevice=function(newRole){return addRole(formatDeviceRole(newRole))},addRoleForMsgHistory=function(newRole){return addRole(formatMsgHistoryRole(newRole))},addRoleForPush=function(newRole){return addRole(formatPushRole(newRole))},formatAddingRole=function(newRole){var goodRole={name:newRole.name,collections:[],topics:[],services:[],system_services:{}};for(var i in newRole.collections){var curCol=newRole.collections[i],fColl={itemInfo:{name:curCol.itemInfo.name,id:curCol.itemInfo.id}};fColl.permissions=parsePermissions(curCol),goodRole.collections.push(fColl)}for(var j in newRole.services){var newService={itemInfo:{name:newRole.services[j].itemInfo.name},permissions:parsePermissions(newRole.services[j])};goodRole.services.push(newService)}return newRole.users&&(goodRole.users={permissions:parsePermissions(newRole.users)}),newRole.msgHistory&&(goodRole.msgHistory={permissions:parsePermissions(newRole.msgHistory)}),newRole.push&&(goodRole.push={permissions:parsePermissions(newRole.push)}),goodRole},getAllRoles=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.USER_ADMIN+"/"+currentSystem.getSystemID()+"/roles",null,new CbHeader).then(function(data){var formatted=formatRoles(data);for(var i in formatted)_Roles[formatted[i].id]=angular.copy(formatted[i]);deferred.resolve(formatted)},function(err){deferred.reject(err)}),deferred.promise},getCollectionRoles=function(collectionId){var deferred=$q.defer(),options={};return options[consoleConstants.external.DATA.COLLECTION_ID]=collectionId,options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetCollectionRoles(options).then(function(response){deferred.resolve(formatColRole(response))},function(err){deferred.reject(err)}),deferred.promise},removeRole=function(roleId){var options={roleID:roleId};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.RemoveRole(options)},updateRoleCollections=function(roleId,collList){var deferred=$q.defer(),rolesUpdate=addRemoved(collList,_Roles[roleId].collections);if(rolesUpdate.length>0){var update={id:roleId,changes:{collections:formCollUpdate(rolesUpdate),topics:[],services:[]}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateRoleSystemLevel=function(roleId,changes){var deferred=$q.defer();if(changes){var update={id:roleId,changes:{system_services:{permissions:parsePermissions(changes.services)}}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise};return{addRoleGeneral:addRoleGeneral,addRoleForCollection:addRoleForCollection,addRoleForService:addRoleForService,addRoleForUser:addRoleForUser,addRoleForDevice:addRoleForDevice,addRoleForMsgHistory:addRoleForMsgHistory,addRoleForPush:addRoleForPush,getAllRoles:getAllRoles,getCollectionRoles:getCollectionRoles,getDeviceRoles:getDeviceRoles,removeRole:removeRole,updateRoleCollections:updateRoleCollections,updateRoleDashboards:function(roleId,dashList){var deferred=$q.defer(),rolesUpdate=addRemovedServices(dashList,_Roles[roleId].portals);if(rolesUpdate.length>0){var update={id:roleId,changes:{collections:[],topics:[],services:[],portals:formCollUpdate(rolesUpdate)}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateRoleServices:function(roleId,serviceList){var deferred=$q.defer(),rolesUpdate=addRemovedServices(serviceList,_Roles[roleId].services);if(rolesUpdate.length>0){var update={id:roleId,changes:{collections:[],topics:[],services:formCollUpdate(rolesUpdate)}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateRoleUsers:function(roleId,newPermissions){var deferred=$q.defer();if(newPermissions){var update={id:roleId,changes:{users:{permissions:parsePermissions(newPermissions)},services:[],topics:[],collections:[]}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateRoleDevices:function(roleId,newPermissions){var deferred=$q.defer();if(newPermissions){var update={id:roleId,changes:{devices:{permissions:parsePermissions(newPermissions)},services:[],topics:[],collections:[]}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateRoleMsgHistory:function(roleId,newPermissions){var deferred=$q.defer();if(newPermissions){var update={id:roleId,changes:{msgHistory:{permissions:parsePermissions(newPermissions)},services:[],topics:[],collections:[]}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateRoleSystemLevel:updateRoleSystemLevel,updateRolePush:function(roleId,newPermissions){var deferred=$q.defer();if(newPermissions){var update={id:roleId,changes:{push:{permissions:parsePermissions(newPermissions)},services:[],topics:[],collections:[]}},options={body:update};options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateRole(options).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)})}else deferred.resolve();return deferred.promise},updateDeviceRoles:updateDeviceRoles,getRole:function(roleId){return angular.copy(_Roles[roleId])},export:function(options){var deferred=$q.defer(),email=DevUser.getLoggedUser();return $http.get("/console-api/batch/export/roles?url="+platformRequest.GetUrl()+"&devEmail="+email+"&devToken="+platformRequest.getTokenForPlatform()+"&systemKey="+currentSystem.getSystemID()+"&systemSecret="+currentSystem.getSystemSecret(),{transformResponse:function(data){return utils.parseJSONForDisplay(data)}}).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise}}}]),app.service("saas",["$q","consoleConstants","$http","$localStorage",function($q,consoleConstants,$http,$localStorage){var saasPlans={FLEX:{name:"Flex"},FREE:{name:"Free"}},stripeInfo={API_KEY:"pk_test_HFAopQjakFYHXqEksYZOmDOh"},attachStripeScript=function(){var deferred=$q.defer(),scriptObj=document.createElement("script");return scriptObj.onload=function(){deferred.resolve()},scriptObj.setAttribute("src","https://js.stripe.com/v2/"),document.head.appendChild(scriptObj),deferred.promise},createCardToken=function(cardInfo){var deferred=$q.defer();return Stripe.setPublishableKey(stripeInfo.API_KEY),Stripe.card.createToken(cardInfo,function(statusCode,response){if(response.error){var message;message=response.error.message?response.error.message:"An unkown error occurred. Please try again",deferred.reject(message)}else response.id?deferred.resolve(response.id):deferred.reject("An unkown error occurred. Please contact us at support@clearblade.com for help")}),deferred.promise},createStripeAccount=function(accountInfo){var deferred=$q.defer();return $http.post("/console-api/saas/paymentProfile",accountInfo).success(function(data){!1===data.success?deferred.reject(data.results):data.results.error?deferred.reject(data.results.response):deferred.resolve(data.results)}).error(function(err){deferred.reject(err)}),deferred.promise},updateStripeAccount=function(email,changes){var deferred=$q.defer(),accountInfo={email:email,changes:changes};return $http.post("/console-api/saas/updatePaymentProfile",accountInfo).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},getPaymentProfile=function(email){var deferred=$q.defer();return $http.get("/console-api/saas/paymentProfile?email="+email+"&devToken="+$localStorage.cb_platform_dev_token).then(function(data){!1===data.data.success?deferred.reject(data.data.results):data.data.results.error?deferred.reject(data.data.results.response):(data.data.results[consoleConstants.internal.IS_SAAS]=data.data.results.tier===saasPlans.FLEX.name,deferred.resolve(data.data.results))},function(err){if(401===err.status){var fakeProfileObject={};fakeProfileObject[consoleConstants.internal.IS_SAAS]=!1,deferred.resolve(fakeProfileObject)}else deferred.reject(err)}),deferred.promise},setPaymentProfile=function(userInfo){var deferred=$q.defer();return userInfo.devToken=$localStorage.cb_platform_dev_token,$http.put("/console-api/saas/paymentProfile",userInfo).success(function(data){!1===data.success?deferred.reject(data.results):data.results.error?deferred.reject(data.results.response):deferred.resolve(data.results.response[0])}).error(function(err){deferred.reject(err)}),deferred.promise},getStatus=function(){var deferred=$q.defer();return $http.get("/console-api/saas/status").success(function(data){deferred.resolve(data.response)}).error(function(err){deferred.reject(err)}),deferred.promise},getPricingInfo=function(){var deferred=$q.defer();return $http.get("/console-api/saas/pricingInfo").success(function(data){!1===data.success?deferred.reject(data.results):data.results.error?deferred.reject(data.results.response):deferred.resolve(data.results)}).error(function(err){deferred.reject(err)}),deferred.promise},getBillingForPeriod=function(email,date){var deferred=$q.defer();return $http.get("/console-api"+"/saas/billingInfo?email={email}&date={date}".replace("{email}",email).replace("{date}",date)).success(function(data){!1===data.success?deferred.reject(data.results):data.results.error?deferred.reject(data.results.response):deferred.resolve(data.results)}).error(function(err){deferred.reject(err)}),deferred.promise},updateBillingAccount=function(email,changes){var deferred=$q.defer(),accountInfo={email:email,changes:changes};return $http.post("/console-api/saas/updateAccount",accountInfo).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise};return{attachStripeScript:attachStripeScript,deleteUser:function(email){var deferred=$q.defer(),accountInfo={email:email};return $http.post("/console-api/saas/deactivateUser",accountInfo).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},createCardToken:createCardToken,createStripeAccount:createStripeAccount,getPaymentProfile:getPaymentProfile,getStatus:getStatus,getPricingInfo:getPricingInfo,getBillingForPeriod:getBillingForPeriod,plans:saasPlans,sendEmail:function(emailInfo){var deferred=$q.defer();return $http.post("/console-api/saas/email",emailInfo).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},setPaymentProfile:setPaymentProfile,stripeInfo:stripeInfo,updateBillingAccount:updateBillingAccount,updateStripeAccount:updateStripeAccount}}]),app.factory("System",["$q","consoleConstants","$uibModal","platformRequest","CbHeader","edgeConstants","$http","DevUser","$localStorage",function($q,consoleConstants,$uibModal,platformRequest,CbHeader,edgeConstants,$http,DevUser,$localStorage){function System(config){this.populate(config)}var determineValueForKey=function(config,possibleValues){for(var i=0,len=possibleValues.length;i<len;i++)if(config[possibleValues[i]])return config[possibleValues[i]]};return System.prototype.populate=function(config){this[consoleConstants.internal.SYSTEM_KEY]=determineValueForKey(config,[consoleConstants.internal.UNKNOWN_TYPE_OF_KEY,consoleConstants.external.APP_ID,edgeConstants.EDGE_KEY,consoleConstants.internal.SYSTEM_KEY]),this[consoleConstants.internal.SYSTEM_SECRET]=determineValueForKey(config,[consoleConstants.external.APP_SECRET,edgeConstants.SYSTEM_SECRET,consoleConstants.internal.SYSTEM_SECRET]),this[consoleConstants.external.SYSTEM_NAME]=config[consoleConstants.external.SYSTEM_NAME],this[consoleConstants.external.SYSTEM_DESCRIPTION]=config[consoleConstants.external.SYSTEM_DESCRIPTION],this[consoleConstants.external.AUTH_SERVICE]=config[consoleConstants.external.AUTH_SERVICE],this[consoleConstants.external.REG_SERVICE]=config[consoleConstants.external.REG_SERVICE],this[consoleConstants.internal.SYSTEM_KEY]?this.isEdge=this[consoleConstants.internal.SYSTEM_KEY].indexOf(":")>-1:config.isEdge&&(this.isEdge=config.isEdge),config[consoleConstants.external.EMAIL]&&(this[consoleConstants.external.EMAIL]=config[consoleConstants.external.EMAIL]),this.isEdge?angular.forEach(config,function(value,key){this[key]=value}.bind(this)):(this[consoleConstants.external.TOKEN_TTL]=config[consoleConstants.external.TOKEN_TTL],this[consoleConstants.external.SYSTEM_DEV]=config[consoleConstants.external.SYSTEM_DEV],this.monthUsage=Object.assign({},consoleConstants.external.USAGE.DEFAULT),this.monthUsage[consoleConstants.external.USAGE.SYSTEM_KEY]=this[consoleConstants.internal.SYSTEM_KEY],this.yearUsage=Object.assign({},consoleConstants.external.USAGE.DEFAULT),this.yearUsage[consoleConstants.external.USAGE.SYSTEM_KEY]=this[consoleConstants.internal.SYSTEM_KEY],this.isLoadingEdges=!1,this.edges=config.edges||[]),this.cachedState={}},System.prototype.create=function(){var deferred=$q.defer(),data={name:this[consoleConstants.external.SYSTEM_NAME],description:this[consoleConstants.external.SYSTEM_DESCRIPTION]};return platformRequest.Go("POST",platformRequest.AdminEndpoints.SYSTEM_MANAGEMENT,data,new CbHeader).then(function(data){this.populate(data),deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.getInfo=function(){var promise,deferred=$q.defer();return promise=this.isEdge?platformRequest.Go("GET",platformRequest.AdminEndpoints.EDGE.replace("{systemKey}",this.getSystemKey()).replace("{name}",this.getName()),null,new CbHeader):platformRequest.Go("GET",platformRequest.AdminEndpoints.SYSTEM_MANAGEMENT+"?id="+this.getSystemKey(),null,new CbHeader),promise.then(function(data){this.populate(data),deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.getDeploySettings=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.SYSTEM_DEPLOY.replace("{systemKey}",this.getSystemKey()),null,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.createDeploySettings=function(config){var deferred=$q.defer();return platformRequest.Go("POST",platformRequest.AdminEndpoints.SYSTEM_DEPLOY.replace("{systemKey}",this.getSystemKey()),config,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.updateDeploySettings=function(config){var deferred=$q.defer();return platformRequest.Go("PUT",platformRequest.AdminEndpoints.SYSTEM_DEPLOY.replace("{systemKey}",this.getSystemKey()),config,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.deleteDeploySettings=function(config){var deferred=$q.defer();return platformRequest.Go("DELETE",platformRequest.AdminEndpoints.SYSTEM_DEPLOY.replace("{systemKey}",this.getSystemKey())+"?resource_type="+config.resource_type+"&resource_identifier="+config.resource_identifier,null,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.getSyncInfo=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.SYSTEM_SYNC_FETCH.replace("{systemKey}",this.getSystemKey()),null,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.updateSyncInfo=function(syncSettings){var deferred=$q.defer();return platformRequest.Go("PUT",platformRequest.AdminEndpoints.SYSTEM_SYNC_UPDATE.replace("{systemKey}",this.getSystemKey()).replace("{name}",this.getName()),syncSettings,new CbHeader).then(function(){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},System.prototype.getAccessInfo=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.SYSTEM_ACCESS_FETCH.replace("{systemKey}",this.getSystemKey()),null,new CbHeader).then(function(data){deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.updateAccessInfo=function(syncSettings){var deferred=$q.defer(),accessSyncData={};return syncSettings.add.length&&(accessSyncData.add=syncSettings.add),syncSettings.remove.length&&(accessSyncData.remove=syncSettings.remove),null!==syncSettings.owner&&(accessSyncData.owner=syncSettings.owner),platformRequest.Go("PUT",platformRequest.AdminEndpoints.SYSTEM_ACCESS_UPDATE.replace("{systemKey}",this.getSystemKey()),accessSyncData,new CbHeader).then(function(){deferred.resolve()},function(err){deferred.reject(err)}),deferred.promise},System.prototype.getEdges=function(){var deferred=$q.defer();return this.isLoadingEdges=!0,platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_EDGES.replace("{systemKey}",this.getSystemKey()),null,new CbHeader).then(function(data){this.edges.length=0;for(var i=0,len=data.length;i<len;i++)this.edges.push(new System(data[i]));deferred.resolve(this.edges)}.bind(this),function(err){deferred.reject(err)}).finally(function(){this.isLoadingEdges=!1}.bind(this)),deferred.promise},System.prototype.createEdge=function(edgeSystem){var deferred=$q.defer(),data={};return data[edgeConstants.SYSTEM_KEY]=this.getSystemKey(),data[edgeConstants.SYSTEM_SECRET]=this.getSystemSecret(),data[edgeConstants.TOKEN]=edgeSystem[edgeConstants.TOKEN],void 0!=edgeSystem[edgeConstants.DESCRIPTION]&&(data[edgeConstants.DESCRIPTION]=edgeSystem[edgeConstants.DESCRIPTION]),platformRequest.Go("POST",platformRequest.AdminEndpoints.EDGE.replace("{systemKey}",this.getSystemKey()).replace("{name}",edgeSystem.getName()),data,new CbHeader).then(function(data){edgeSystem.populate(data),this.edges.push(edgeSystem),deferred.resolve(edgeSystem)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.getDisabledEdgeVersions=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.EDGE_DISABLED,null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},System.prototype.upgradeEdge=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.EDGE_UPGRADE,null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},System.prototype.regenSystemSecret=function(){var deferred=$q.defer(),body={id:this.getSystemKey()};return platformRequest.Go("PUT",platformRequest.AdminEndpoints.BIO_NOTES,body,new CbHeader).then(function(data){this.setSystemSecret(data.appsecret),deferred.resolve(data)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.update=function(){var promise,data,deferred=$q.defer(),system=this.cachedState;return this.isEdge?(data={system_key:system[edgeConstants.LOCATION],system_secret:system[edgeConstants.SYSTEM_SECRET],token:system[edgeConstants.TOKEN],description:system[edgeConstants.DESCRIPTION]||"",location:system[edgeConstants.LOCATION],policy_name:system[edgeConstants.RESOLUTION.POLICY_NAME],resolver_func:system[edgeConstants.RESOLUTION.RESOLVER_FUNC],sync_edge_tables:system[edgeConstants.RESOLUTION.SYNC_EDGE_TABLES]||""},promise=platformRequest.Go("PUT",platformRequest.AdminEndpoints.EDGE.replace("{systemKey}",system.getSystemKey()).replace("{name}",system.getName()),data,new CbHeader)):(data={id:this.getSystemKey(),name:system[consoleConstants.external.SYSTEM_NAME],description:system[consoleConstants.external.SYSTEM_DESCRIPTION],token_ttl:system[consoleConstants.external.TOKEN_TTL]||3600,auth_service:system[consoleConstants.external.AUTH_SERVICE],reg_service:system[consoleConstants.external.REG_SERVICE]},promise=platformRequest.Go("PUT",platformRequest.AdminEndpoints.SYSTEM_MANAGEMENT,data,new CbHeader)),promise.then(function(data){this.updateInfoFromCache(),deferred.resolve(this)}.bind(this),function(err){this.createCache(),deferred.reject(err)}.bind(this)),deferred.promise},System.prototype.getCodeServices=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.CODE_ADMINv2+"/"+this.getSystemKey(),null,new CbHeader).then(function(data){deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},System.prototype.editSettings=function(){var deferred=$q.defer();return this.createCache(),$uibModal.open({templateUrl:"partials/modals/systemSettings.html",controller:"systemSettingsCtrl",resolve:{resolvedSystem:function(){return this}.bind(this)}}).result.then(function(){deferred.resolve()},function(){deferred.reject()}),deferred.promise},System.prototype.delete=function(){var promise,deferred=$q.defer();return promise=this.isEdge?platformRequest.Go("DELETE",platformRequest.AdminEndpoints.EDGE.replace("{systemKey}",this.getSystemKey()).replace("{name}",this.getName()),null,new CbHeader):platformRequest.Go("DELETE",platformRequest.AdminEndpoints.SYSTEM_MANAGEMENT+"?id="+this.getSystemKey(),null,new CbHeader),promise.then(function(data){deferred.resolve(this)},function(err){deferred.reject(err)}),deferred.promise},System.prototype.getStatus=function(){var deferred=$q.defer();return platformRequest.Go("GET",platformRequest.AdminEndpoints.ADMIN_PLATFORM+"/"+this.getSystemKey(),null,new CbHeader).then(function(data){this.populate(data),deferred.resolve(this)}.bind(this),function(err){deferred.reject(err)}),deferred.promise},System.prototype.export=function(){var deferred=$q.defer();return $http.get("/console-api/batch/export/systems/"+this.getSystemKey()+"?devToken="+$localStorage.cb_platform_dev_token+"&devEmail="+DevUser.getLoggedUser()+"&systemName="+this.getName()+"&url="+platformRequest.GetUrl()).success(function(data){deferred.resolve(data.status)}).error(function(err){deferred.reject(err)}),deferred.promise},System.prototype.initializeExport=function(){var deferred=$q.defer();return $http.get("/console-api/batch/export/initializeExport/systems/"+this.getSystemKey()+"?devToken="+$localStorage.cb_platform_dev_token+"&devEmail="+DevUser.getLoggedUser()+"&systemName="+this.getName()+"&url="+platformRequest.GetUrl()).success(function(data){deferred.resolve(data)}).error(function(err){deferred.reject(err)}),deferred.promise},System.prototype.createCache=function(){this.cachedState={},this.cachedState=angular.copy(this)},System.prototype.updateInfoFromCache=function(){for(var cachedKey in this.cachedState)for(var staleKey in this)cachedKey===staleKey&&"object"!=typeof this[staleKey]&&this[staleKey]!==this.cachedState[cachedKey]&&(this[staleKey]=this.cachedState[cachedKey])},System.prototype.getSystemKey=function(){return this[consoleConstants.internal.SYSTEM_KEY]?this[consoleConstants.internal.SYSTEM_KEY].split(":")[0]:""},System.prototype.getUniqueSystemKey=function(){return this[consoleConstants.internal.SYSTEM_KEY]},System.prototype.getEdgeKey=function(){return this[consoleConstants.internal.SYSTEM_KEY]},System.prototype.getSystemSecret=function(){return this[consoleConstants.internal.SYSTEM_SECRET]},System.prototype.getName=function(){return this[consoleConstants.external.SYSTEM_NAME]},System.prototype.setSystemSecret=function(sec){this[consoleConstants.internal.SYSTEM_SECRET]=sec},System.prototype.isTokenInSystem=function(token){for(var i=0,edgeCount=this.edges.length;i<edgeCount;i++)if(this.edges[i].token==token)return!0;return!1},System}]),angular.module("adminPortal").factory("systemList",["$q","consoleConstants","System","platformRequest","CbHeader","utils",function($q,consoleConstants,System,platformRequest,CbHeader,utils){this.list=[],this.isLoading=!1,this.isFinishedFetching=!1;var systemName=consoleConstants.external.SYSTEM_NAME;this.sortSystemsAlpha=function(a,b){return a[systemName].toLowerCase()<b[systemName].toLowerCase()?-1:a[systemName].toLowerCase()>b[systemName].toLowerCase()?1:0},this.get=function(shouldRefresh){return!this.isLoading||shouldRefresh&&!this.isLoading?(this.getDeferred=$q.defer(),this.isLoading=!0,platformRequest.Go("GET",platformRequest.AdminEndpoints.ALL_SYSTEMS,null,new CbHeader).then(function(data){this.list.length=0;for(var i=0,len=data.length;i<len;i++)this.list.push(new System(data[i]));this.list.sort(this.sortSystemsAlpha),this.isFinishedFetching=!0,this.getDeferred.resolve(this.list)}.bind(this),function(err){this.getDeferred.reject(err)}.bind(this)).finally(function(){this.isLoading=!1}.bind(this))):this.isFinishedFetching&&(this.getDeferred=$q.defer(),this.getDeferred.resolve(this.list)),this.getDeferred.promise},this.addItem=function(system){this.list.push(system)};var _removeEdge=function(list,systemToRemove){for(var i=0,len=list.length;i<len;i++)for(var j=0,edgesLen=list[i].edges.length;j<edgesLen;j++)if(systemToRemove.getEdgeKey()===list[i].edges[j].getEdgeKey()){list[i].edges.splice(j,1);break}},_removeSystem=function(list,systemToRemove){for(var i=0,len=list.length;i<len;i++)if(systemToRemove.getSystemKey()===list[i].getSystemKey()){list.splice(i,1),store.dispatch({type:"DELETE_SYSTEMS_SUCCESS",payload:systemToRemove.getSystemKey()});break}};return this.removeItem=function(system){system.isEdge?_removeEdge(this.list,system):_removeSystem(this.list,system)},this.getEdges=function(){for(var i=0,len=this.list.length;i<len;i++)this.list[i].getEdges()},this.generateUniqueToken=function(){for(var uniqueToken=utils.generateRandomToken();this.isTokenUsed(uniqueToken);)uniqueToken=utils.generateRandomToken();return uniqueToken},this.isTokenUsed=function(token){for(var i=0,systemCount=this.list.length;i<systemCount;i++)if(this.list[i].isTokenInSystem(token))return!0;return!1},this.getSystemByKey=function(key){for(var i=0,len=this.list.length;i<len;i++)if(key===this.list[i][consoleConstants.internal.SYSTEM_KEY])return this.list[i];throw new Error('No system with key "'+key+'"')},this.get(),this}]),angular.module("adminPortal").factory("systemOptions",["$q","loadDisplay","CollectionList","DeviceList","platformRequest","codes","consoleConstants","CbHeader",function($q,loadDisplay,CollectionList,DeviceList,platformRequest,codes,consoleConstants,CbHeader){var sysConfig={},options={},includeAll=!1,setSystem=function(system){sysConfig[consoleConstants.internal.SYSTEM_KEY]=system.getSystemKey(),sysConfig[consoleConstants.internal.SYSTEM_SECRET]=system.getSystemSecret()},fetchServices=function(){var deferred=$q.defer();return codes.getServices(sysConfig[consoleConstants.internal.SYSTEM_KEY]).then(function(data){options.service=data,deferred.resolve(options.service)}),deferred.promise},fetchLibraries=function(){var deferred=$q.defer();return codes.getLibraries(sysConfig[consoleConstants.internal.SYSTEM_KEY]).then(function(data){options.library=data,deferred.resolve(options.library)}),deferred.promise},fetchTriggers=function(){var deferred=$q.defer();return codes.getTriggers(sysConfig[consoleConstants.internal.SYSTEM_KEY]).then(function(data){options.trigger=data,deferred.resolve(data)}),deferred.promise},fetchCollections=function(){var deferred=$q.defer();return new CollectionList(sysConfig).fetch().then(function(data){options.collection=data,includeAll&&options.collections.unshift({appID:sysConfig[consoleConstants.internal.SYSTEM_KEY],name:"All",internalName:""}),deferred.resolve(options.collections)},function(err){deferred.reject(err)}),deferred.promise};return{setSystem:setSystem,fetch:function(system,includeAllOption){var deferred=$q.defer();setSystem(system),includeAll=void 0!==includeAllOption&&includeAllOption;var fetchPromises=[fetchServices(),fetchLibraries(),fetchTriggers(),fetchCollections()];return $q.all(fetchPromises).then(function(){deferred.resolve(options)}),loadDisplay.addDisplay(deferred.promise,"Loading Options... "),deferred.promise},fetchLibraries:fetchLibraries,fetchServices:fetchServices,fetchCollections:fetchCollections,fetchTriggers:fetchTriggers,fetchLibraries:fetchLibraries}}]),angular.module("adminPortal").factory("users",["$q","currentSystem","adminCalls","resource","consoleConstants","DevUser","$http",function($q,currentSystem,adminCalls,resource,consoleConstants,DevUser,$http){function getTotalCount(pageSize,page,pageSort,pageFilter){var options={query:resource.createFullQuery(pageSize,page,pageSort,pageFilter)};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetUsersCount(options)}function formatUserRoles(userId,oldRoles,newRoles){var wantedUpdate={user:userId,changes:{roles:{}}};return oldRoles.length>0&&(wantedUpdate.changes.roles.delete=angular.copy(oldRoles)),newRoles.length>0&&(wantedUpdate.changes.roles.add=angular.copy(newRoles)),wantedUpdate}function changeUserPassword(userId,newPassword){var userUpdate={user:userId,changes:{password:newPassword}},options={body:userUpdate};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateUserCell(options)}return{getAllUsers:function(pageSize,pageNum,pageSort,pageFilter){var deferred=$q.defer(),options={query:resource.createFullQuery(pageSize,pageNum,pageSort,pageFilter)};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetAllUsers(options).then(function(data){"null"===data?deferred.resolve([]):deferred.resolve(data)},function(err){deferred.reject(err)}),deferred.promise},getTotalCount:getTotalCount,addUser:function(newUser){var options={body:newUser};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.AddUser(options)},deleteUser:function(userID){var options={userID:userID};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteUser(options)},createUserColumn:function(columnName,dataType){var payload={column_name:columnName,type:dataType},options={body:payload};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.CreateUserColumn(options)},deleteUserColumn:function(columnField){var options={field:columnField};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.DeleteUserColumn(options)},updateUserRoles:function(userId,oldRoles,newRoles){var formattedUpdate=formatUserRoles(userId,oldRoles,newRoles),options={body:formattedUpdate};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateUserRoles(options)},changeUserPassword:changeUserPassword,getUserColumns:function(){var options={};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetUserColumns(options)},getUserRoles:function(userId){var options={userID:userId};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.GetUserRoles(options)},updateUserCell:function(payload){var options={body:payload};return options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),adminCalls.UpdateUserCell(options)},export:function(options){return $q.defer(),options[consoleConstants.internal.SYSTEM_KEY]=currentSystem.getSystemID(),options.devEmail=DevUser.getLoggedUser(),adminCalls.ExportUsers(options)}}}]),angular.module("adminPortal").service("utils",["$state","$stateParams","errorDialog","$q","analytics","consoleConstants","toastr",function($state,$stateParams,errorDialog,$q,analytics,consoleConstants,toastr){function isValidJSON(str){try{JSON.parse(str)}catch(e){return!1}return!0}function stateReload(customParams){customParams=customParams||$stateParams,$state.transitionTo($state.current,customParams,{reload:!0,inherit:!1,notify:!0})}function showAllColumns(columns,filterState){for(var allVisible=!0,i=0,len=columns.length;allVisible&&i<len;i++)!1===columns[i].visible&&(allVisible=!1);allVisible?toastr.info("All columns are currently visible"):stateReload(filterState)}var validateJSON=function(key,val){return!isNaN(parseFloat(val))&&isFinite(val)?Number(val):isValidJSON(val)?JSON.parse(val):val},toTitleCase=function(string){var smallWords=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;return string.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,function(match,index,title){return index>0&&index+match.length!==title.length&&match.search(smallWords)>-1&&":"!==title.charAt(index-2)&&("-"!==title.charAt(index+match.length)||"-"===title.charAt(index-1))&&title.charAt(index-1).search(/[^\s-]/)<0?match.toLowerCase():match.substr(1).search(/[A-Z]|\../)>-1?match:match.charAt(0).toUpperCase()+match.substr(1)})},getDataForSystems=function(systems,callback,loadingText){var promises=[];toastr.options={timeOut:0,extendedTimeOut:0,positionClass:"toast-bottom-right"};var totalToast=toastr.info(loadingText);systems.forEach(function(sys){promises.push(callback(sys))}),$q.all(promises).finally(function(){toastr.clear(totalToast)})},getTotalEventsForSystems=function(systems,filterParams,periodKey,loadingText){getDataForSystems(systems,function(sys){if(void 0===sys[periodKey]||sys.isDataStale)return sys[consoleConstants.external.SYSTEM_KEY]?filterParams.scope.system=sys[consoleConstants.external.SYSTEM_KEY]:sys[consoleConstants.external.APP_ID]?filterParams.scope.system=sys[consoleConstants.external.APP_ID]:$q.resolve(),analytics.getTotalsForEvents(filterParams).then(function(data){data.values&&data.values[0]&&data.values[0].count?sys[periodKey]=data.values[0].count:sys[periodKey]=0},function(){sys[periodKey]=0}).finally(function(){sys.isDataStale=!1});$q.resolve()},loadingText)},parseJSONForDisplay=function(val){if(void 0!==val)try{return JSON.parse(val)}catch(e){return val}},generateRandomToken=function(){for(var token="",i=0,varLenth=Math.floor(10*Math.random())+22;i<varLenth;i++){var val="";Math.floor(10*Math.random())%2?val=Math.floor(10*Math.random()):(val=String.fromCharCode(25*Math.random()+65),Math.floor(10*Math.random())%2&&(val=val.toLowerCase())),token+=val}return token},sortAlphabetically=function(a,b){var nameA=a[this].toLowerCase(),nameB=b[this].toLowerCase();return nameA<nameB?-1:nameA>nameB?1:0};return{validateJSON:validateJSON,validateTrigger:function(trigger,codePropOptions){for(var response={error:!1,message:trigger.name+" contains error/s: "},errFlag=!0,i=0,len=codePropOptions.services.length;i<len;i++)trigger.service_name===codePropOptions.services[i].name&&(errFlag=!1);if(errFlag&&(response.error=!0,response.message+="The linked service no longer exists."),errFlag=!0,"Data"===trigger.event_definition.def_module){if("CollectionCreated"!==trigger.event_definition.def_name)for(var i=0,len=codePropOptions.collections.length;i<len;i++)trigger.collectionName===codePropOptions.collections[i].internalName&&(errFlag=!1);else errFlag=!1;errFlag&&(response.error=!0,response.message+="The linked collection no longer exists. ")}if("Device"===trigger.event_definition.def_module){if("DeviceCreated"!==trigger.event_definition.def_name)for(var i=0,len=codePropOptions.devices.length;i<len;i++)trigger.deviceName===codePropOptions.devices[i].internalDeviceName&&(errFlag=!1);else errFlag=!1;errFlag&&(response.error=!0,response.message+="The linked device no longer exists. ")}if("User"===trigger.event_definition.def_module){if("UserCreated"!==trigger.event_definition.def_name)for(var i=0,len=codePropOptions.users.length;i<len;i++)trigger.userId===codePropOptions.users[i].user_id&&(errFlag=!1);else errFlag=!1;errFlag&&(response.error=!0,response.message+="The linked user no longer exists. ")}return response.error&&(response.message+="Click to fix now.",response.link=function(){$state.go("app.system.code.trigger",{name:trigger.name})}),response},toTitleCase:toTitleCase,getTotalEventsForSystems:getTotalEventsForSystems,getDataForSystems:getDataForSystems,parseJSONForDisplay:parseJSONForDisplay,generateRandomToken:generateRandomToken,sortAlphabetically:sortAlphabetically,showAllColumns:showAllColumns,stateReload:stateReload}}]),app.service("collectionConstants",["consoleConstants",function(consoleConstants){var data=consoleConstants.external.DATA;return data.DBTypes={MySQL:{defaultPort:"3306",dbValue:"MySQL",locationLabel:"Server Address",supported:!0,encryption:!1},PostgreSQL:{defaultPort:"",dbValue:"Postgres",locationLabel:"IP Address",supported:!0,encryption:!1},MongoDB:{defaultPort:"",dbValue:"MongoDB",locationLabel:"IP Address",supported:!0,encryption:!1},Oracle:{defaultPort:"",dbValue:"Oracle",locationLabel:"IP Address",supported:!1,encryption:!1},"DB2 Linux":{defaultPort:"",dbValue:"DB2 Linux",locationLabel:"IP Address",supported:!1,encryption:!1},"DB2 zOS":{defaultPort:"",dbValue:"DB2 zOS",locationLabel:"IP Address",supported:!1,encryption:!1},"DB2 System i":{defaultPort:"",dbValue:"DB2 System i",locationLabel:"IP Address",supported:!0,encryption:!1},"Microsoft SQL Server":{defaultPort:"1433",dbValue:"mssql",locationLabel:"IP Address",supported:!0,encryption:!0},Cassandra:{defaultPort:"",dbValue:"Cassandra",locationLabel:"IP Address",supported:!1,encryption:!1},CouchDB:{defaultPort:"",dbValue:"CouchDB",locationLabel:"IP Address",supported:!1,encryption:!1}},data}]),angular.module("adminPortal").constant("consoleConstants",{internal:{CB_EVENTS:{CODE_CHANGE:"CODE_CHANGE"},REST_METHODS:{GET:"GET",POST:"POST",PUT:"PUT",DELETE:"DELETE"},NUMBER_OF_SYSTEMS:"numberOfSystems",FULL_NAME:"full_name",API_CALLS_PER_MONTH:"apiCallsPerMonth",API_CALLS_PER_YEAR:"apiCallsPerYear",MESSAGES_PER_MONTH:"messagesPerMonth",MESSAGES_PER_YEAR:"messagesPerYear",ENABLED:"enabled",STORAGE_PER_MONTH:"storagePerMonth",NOT_AVAILABLE:"Not available",IS_SAAS:"isSaas",UNKNOWN_TYPE_OF_KEY:"unknownTypeOfKey",SYSTEM_KEY:"systemKey",SYSTEM_SECRET:"systemSecret",SYSTEM_NAME:"name",COLLECTION_DELETED_EVENT:"collectionDeleted",LOCALHOST:"localhost",EDGE:{LABELS:{CONNECTED:"Connected",PUBLIC_ADDRESS:"Public IP",LOCAL_ADDRESS:"Local IP",PUBLIC_PORT:"REST Port Public",LOCAL_PORT:"REST Port Internal",BROKER_AUTH_PORT:"Broker auth port",BROKER_PORT:"Broker port",BROKER_TLS_PORT:"Broker TLS port",BROKER_WS_AUTH_PORT:"Broker WS auth port",BROKER_WS_PORT:"Broker WS port",BROKER_WSS_PORT:"Broker WSS port",NAME:"Name"}},ADAPTERS:{LABELS:{FILE_NAME:"Name",FILE_VERSION:"Version",EDGE_NAME:"Edge Name",EDGE_STATUS:"Status"}},UNITS:{FREQUENCY:{Seconds:1,Minutes:60,Hours:3600,Days:86400,Weeks:604800}},PERMISSION_IDENTIFIERS:{COLLECTIONS:"collections",SERVICES:"services",USERS:"users",DEVICES:"devices",MESSAGE_HISTORY:"msgHistory",SYSTEM_LEVEL:"systemLevel",PUSH:"push",PORTALS:"portals"},RESOURCE_TYPE:{COLLECTION:"collection",DEVICE:"device",LIBRARY:"library",SERVICE:"service",TIMER:"timer",TRIGGER:"trigger",USER:"user"}},external:{EMAIL:"email",FIRST_NAME:"fname",LAST_NAME:"lname",SYSTEMS:"systems",ADMIN:"admin",DISABLED:"disabled",CREATION_DATE:"creation_date",LAST_LOGIN:"last_login",ORGANIZATION:"org",SYSTEM_NAME:"name",COLLECTIONS:"Collections",USERS:"Users",SYSTEM_KEY:"systemKey",APP_ID:"appID",APP_SECRET:"appSecret",SYSTEM_DESCRIPTION:"description",TOKEN_TTL:"token_ttl",SYSTEM_DEV:"Dev",AUTH_SERVICE:"auth_service",REG_SERVICE:"reg_service",EDGE:{SYSTEM_KEY:"system_key",SYSTEM_SECRET:"system_secret",TOKEN:"token",NAME:"name",PUBLIC_ADDRESS:"public_addr",PUBLIC_PORT:"public_port",LOCAL_ADDRESS:"local_addr",LOCAL_PORT:"local_port",DESCRIPTION:"description",LOCATION:"location",MAC_ADDRESS:"mac_address",EDGE_KEY:"edge_key",CONNECTED:"isConnected",BROKER_AUTH_PORT:"broker_auth_port",BROKER_PORT:"broker_port",BROKER_TLS_PORT:"broker_tls_port",BROKER_WS_AUTH_PORT:"broker_ws_auth_port",BROKER_WS_PORT:"broker_ws_port",BROKER_WSS_PORT:"broker_wss_port",VERSION:"last_seen_version",RESOLUTION:{POLICY_NAME:"policy_name",RESOLVER_FUNC:"resolver_func",SYNC_EDGE_TABLES:"sync_edge_tables"},CONFLICT_POLICIES:{PLATFORM_WINS:"Platform Wins",EDGE_WINS:"Edge Wins",PER_TABLE:"Per Table",USER_DEFINED:"User Defined"},DEFAULT_COLUMNS:["name","isConnected","public_addr","local_addr","public_port","local_port","broker_auth_port","broker_port","broker_tls_port","broker_ws_auth_port","broker_ws_port","broker_wss_port"],HIDE_COLUMNS:["edge_key","novi_system_key","system_key","system_secret","token","description","location","mac_address","first_talked","last_talked","communication_style","last_seen_version","policy_name","resolver_func","sync_edge_tables"]},DEVICE:{DEVICE_KEY:"device_key",NAME:"name",ENABLED:"enabled",TYPE:"type",STATE:"state",ACTIVE_KEY:"active_key",ALLOW_CERTIFICATE_AUTH:"allow_certificate_auth",ALLOW_KEY_AUTH:"allow_key_auth",CERTIFICATE:"certificate",CREATED_DATE:"created_date",DESCRIPTION:"description",LAST_ACTIVE_DATE:"last_active_date",NAME:"name",KEYS:"keys",STATE:"state",SYSTEM_KEY:"system_key",SALT:"salt"},CODE:{LIBRARY:{KEY:"library_key",DOCS_BASE_URL:"https://docs.clearblade.com/v/3/4-developer_reference/platformsdk/",VISIBILITY:"visibility"}},DATA:{COLLECTION_ID:"collectionID",APP_ID:"appID",NAME:"name",DB_TYPE:"dbtype",IS_CONNECTION:"isConnect",IS_ENCRYPTED:"encryption",DB_NAME:"dbname",ADDRESS:"address",PORT:"port",USER:"user",PASSWORD:"password",TABLE_NAME:"tablename",SCHEMA:"schema",LIBRARY:"library",CATALOG:"catalog",COLUMN:{TYPE:"ColumnType",FIELD:"ColumnName",PK:"PK"}},ADAPTER:{NAME:"name",DESCRIPTION:"description",EDGE_STATUS:"status",FILES:"files",ARCH:"architecture",OS:"os",PATH:"path_name",DEPLOY_CMD:"deploy_command",START_CMD:"start_command",STOP_CMD:"stop_command",STATUS_CMD:"status_command",UNDEPLOY_CMD:"undeploy_command",LOGS_CMD:"logs_command",ARCHITECTURES:{linux386:"Linux 32bit - i386",linux32arm:"Linux 32bit - ARM",linux64amd:"Linux 64bit - AMD",linux64arm:"Linux 64bit - ARM",MacOS64:"MacOS 64bit"},STATUS:{EDGE_DISCONNECTED:"Unknown - Edge not connected",UNDEPLOYED:"Undeployed",STOPPED:"Stopped",RUNNING:"Running",INCOMPLETE:"No Status Available"}},ADAPTER_FILES:{NAME:"name",VERSION:"version"},DASHBOARD:{NAME:"name",DESCRIPTION:"description",VERSION:"version",CONFIG:"config",SYSTEM_KEY:"system_key",LAST_UPDATED:"last_updated",ALLOW_ANONYMOUS:"allowAnon",TYPE:"type",KNOWN_TYPES:{CUSTOM:"custom",CUSTOM_V2:"custom_v2",EDGE_MONITORING:"edge_monitoring",EDGE_MONITORING_V2:"edge_monitoring_v2",CLONE:"clone"},KNOWN_VERSIONS:{V1:"v1",V2:"v2"}},PLUGIN:{NAME:"name",URL:"url",SYSTEM_KEY:"system_key"},USAGE:{SYSTEM_KEY:"system_key",API_CALLS:"api",STORAGE_USE:"disk",MESSAGES_PUBLISHED:"message_publish",MESSAGES_RECEIVED:"message_receive",DEFAULT:{api:null,date:null,disk:null,message_publish:null,message_receive:null,system_key:""}}}}),app.service("dashboardConstants",["consoleConstants",function(consoleConstants){return consoleConstants.external.DASHBOARD}]),app.service("deviceConstants",["consoleConstants",function(consoleConstants){return consoleConstants.external.DEVICE}]),app.service("edgeConstants",["consoleConstants",function(consoleConstants){return consoleConstants.external.EDGE}]),app.service("pluginConstants",["consoleConstants",function(consoleConstants){return consoleConstants.external.PLUGIN}]),angular.module("adminPortal").filter("capitalize",function(){return function(input,scope){return null!=input&&(input=input.toLowerCase()),input.substring(0,1).toUpperCase()+input.substring(1)}}),angular.module("adminPortal").filter("codeFilter",[function(){return function(obj,text){var rtn=angular.copy(obj);if(text&&""!==text)for(var key in rtn)rtn.hasOwnProperty(key)&&-1===key.toLowerCase().indexOf(text.toLowerCase())&&delete rtn[key];return rtn}}]),angular.module("adminPortal").filter("invalidColumns",[function(){return function(columns){for(var validColumns=columns.slice(0),i=validColumns.length-1;i>=0;i--)"item_id"===validColumns[i].field&&validColumns.splice(i,1);return validColumns}}]),angular.module("adminPortal").filter("invalidUserColumns",[function(){return function(columns){for(var validColumns=columns.slice(0),i=validColumns.length-1;i>=0;i--)"user_id"!==validColumns[i].field&&"email"!==validColumns[i].field&&"creation_date"!==validColumns[i].field&&"roles"!=validColumns[i].field&&"password"!==validColumns[i].field||validColumns.splice(i,1);return 0===validColumns.length&&validColumns.push({field:"No valid columns to delete"}),validColumns}}]),angular.module("adminPortal").filter("secondsToHumanReadable",[function(){return function(frequency,scale){var secondsIn={year:31536e3,week:604800,day:86400,hour:3600,minute:60},seconds=+frequency*+scale,years=Math.floor(seconds/secondsIn.year),weeks=Math.floor(seconds%secondsIn.year/secondsIn.week),days=Math.floor(seconds%secondsIn.year%secondsIn.week/secondsIn.day),hours=Math.floor(seconds%secondsIn.year%secondsIn.week%secondsIn.day/secondsIn.hour),minutes=Math.floor(seconds%secondsIn.year%secondsIn.week%secondsIn.day%secondsIn.hour/secondsIn.minute),secs=seconds%secondsIn.year%secondsIn.week%secondsIn.day%secondsIn.hour%secondsIn.minute,output="";return years>0&&(output+=years>1?years+" years ":years+" year "),weeks>0&&(output+=weeks>1?weeks+" weeks ":weeks+" week "),days>0&&(output+=weeks>1?days+" days ":days+" day "),hours>0&&(output+=hours>1?hours+" hours ":hours+" hour "),minutes>0&&(output+=minutes>1?minutes+" minutes ":minutes+" minute "),secs>0&&(output+=secs>1?secs+" seconds ":secs+" second "),output}}]),angular.module("adminPortal").filter("timerNextExecution",[function(){return function(frequency,scale,startDay,startTime,repeatitions){if(void 0!=frequency&&void 0!=scale&&void 0!=startDay){var timestamp,secondConversion=1e3,now=Date.now()/secondConversion,interval=+frequency*+scale;timestamp=startTime instanceof Date?new Date(startDay.getFullYear(),startDay.getMonth(),startDay.getDate(),startTime.getHours(),startTime.getMinutes(),startTime.getSeconds()).getTime()/secondConversion:startDay.getTime()/secondConversion;for(var i=0;timestamp<now&&(i<repeatitions||-1===repeatitions);i++)timestamp+=interval;return timestamp*secondConversion}}}]);
{"version":3,"sources":["webpack:///36.1137f43ad4908373e1c8.chunk.js","webpack:///./app/cb-utils/services/docsIndex.json"],"names":["webpackJsonp","./app/cb-utils/services/docsIndex.json","module","exports","title","href","content"],"mappings":"AAAAA,cAAc,KAERC,yCACA,SAAUC,EAAQC,GCHxBD,EAAAC,UAAmBC,MAAA,WAAAC,KAAA,gCAAAC,QAAA,uuCAA2yCF,MAAA,eAAAC,KAAA,mDAAAC,QAAA,oxGAA+2GF,MAAA,eAAAC,KAAA,mDAAAC,QAAA,s6BAAigCF,MAAA,MAAAC,KAAA,0CAAAC,QAAA,sr1BAA+v1BF,MAAA,WAAAC,KAAA,+CAAAC,QAAA,0rKAA6wKF,MAAA,WAAAC,KAAA,+CAAAC,QAAA,moKAAstKF,MAAA,cAAAC,KAAA,iDAAAC,QAAA,skBAA8pBF,MAAA,QAAAC,KAAA,4CAAAC,QAAA,88KAA2hLF,MAAA,SAAAC,KAAA,6CAAAC,QAAA,ooCAAmtCF,MAAA,iBAAAC,KAAA,+CAAAC,QAAA,KAA8FF,MAAA,YAAAC,KAAA,iCAAAC,QAAA,ohFAA0lFF,MAAA,WAAAC,KAAA,2BAAAC,QAAA,uhBAAslBF,MAAA,OAAAC,KAAA,4BAAAC,QAAA,00EAAs4EF,MAAA,OAAAC,KAAA,qCAAAC,QAAA,KAA0EF,MAAA,cAAAC,KAAA,uCAAAC,QAAA,+yBAA63BF,MAAA,cAAAC,KAAA,uCAAAC,QAAA,gyBAA82BF,MAAA,QAAAC,KAAA,kCAAAC,QAAA,6jHAAgoHF,MAAA,QAAAC,KAAA,kCAAAC,QAAA,+uBAAkzBF,MAAA,UAAAC,KAAA,wCAAAC,QAAA,KAAgFF,MAAA,WAAAC,KAAA,wCAAAC,QAAA,6qFAAyvFF,MAAA,QAAAC,KAAA,yCAAAC,QAAA,KAA+EF,MAAA,eAAAC,KAAA,iDAAAC,QAAA,u7BAAghCF,MAAA,uBAAAC,KAAA,yDAAAC,QAAA,wkBAAirBF,MAAA,QAAAC,KAAA,mDAAAC,QAAA,KAAyFF,MAAA,QAAAC,KAAA,mDAAAC,QAAA,KAAyFF,MAAA,aAAAC,KAAA,sDAAAC,QAAA,20CAAu6CF,MAAA,YAAAC,KAAA,sDAAAC,QAAA,KAAgGF,MAAA,OAAAC,KAAA,wCAAAC,QAAA,KAA6EF,MAAA,SAAAC,KAAA,0CAAAC,QAAA,KAAiFF,MAAA,YAAAC,KAAA,6CAAAC,QAAA,KAAuFF,MAAA,OAAAC,KAAA,wCAAAC,QAAA,KAA6EF,MAAA,OAAAC,KAAA,wCAAAC,QAAA,KAA6EF,MAAA,cAAAC,KAAA,4CAAAC,QAAA,KAAwFF,MAAA,uBAAAC,KAAA,4CAAAC,QAAA,klEAA8qEF,MAAA,YAAAC,KAAA,0CAAAC,QAAA,KAAoFF,MAAA,cAAAC,KAAA,6CAAAC,QAAA,wkCAA4pCF,MAAA,gBAAAC,KAAA,+CAAAC,QAAA,o5DAA4+DF,MAAA,WAAAC,KAAA,0CAAAC,QAAA,+1DAA66DF,MAAA,MAAAC,KAAA,qCAAAC,QAAA,q6DAAy+DF,MAAA,SAAAC,KAAA,wCAAAC,QAAA,6oHAAutHF,MAAA,UAAAC,KAAA,8BAAAC,QAAA,+eAAgjBF,MAAA,SAAAC,KAAA,8BAAAC,QAAA,+jDAA+nDF,MAAA,WAAAC,KAAA,yCAAAC,QAAA,KAAkFF,MAAA,cAAAC,KAAA,uCAAAC,QAAA,+4GAA69GF,MAAA,YAAAC,KAAA,0CAAAC,QAAA,wiBAAunBF,MAAA,WAAAC,KAAA,yCAAAC,QAAA,+sCAA4xCF,MAAA,QAAAC,KAAA,6BAAAC,QAAA,u6JAAq+JF,MAAA,WAAAC,KAAA,gCAAAC,QAAA,KAAyEF,MAAA,yBAAAC,KAAA,2DAAAC,QAAA,koFAA+uFF,MAAA,uBAAAC,KAAA,0DAAAC,QAAA,2lTAAqsTF,MAAA,oBAAAC,KAAA,uDAAAC,QAAA,+yHAAm5HF,MAAA,0BAAAC,KAAA,oDAAAC,QAAA,6tCAAo0CF,MAAA,WAAAC,KAAA,8CAAAC,QAAA,KAAuFF,MAAA,YAAAC,KAAA,sCAAAC,QAAA,41FAAu6FF,MAAA,+BAAAC,KAAA,yCAAAC,QAAA,utDAAwzDF,MAAA,gBAAAC,KAAA,0CAAAC,QAAA,2zBAA84BF,MAAA,YAAAC,KAAA,2CAAAC,QAAA,krCAAkwCF,MAAA,YAAAC,KAAA,qDAAAC,QAAA,KAA+FF,MAAA,2BAAAC,KAAA,oDAAAC,QAAA,4VAAocF,MAAA,WAAAC,KAAA,oDAAAC,QAAA,KAA6FF,MAAA,YAAAC,KAAA,oDAAAC,QAAA,KAA8FF,MAAA,WAAAC,KAAA,oDAAAC,QAAA,0eAAkkBF,MAAA,WAAAC,KAAA,0CAAAC,QAAA,KAAmFF,MAAA,cAAAC,KAAA,6CAAAC,QAAA,6hCAAinCF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,KAAiFF,MAAA,OAAAC,KAAA,0CAAAC,QAAA,KAA+EF,MAAA,cAAAC,KAAA,6CAAAC,QAAA,8xDAAk3DF,MAAA,YAAAC,KAAA,2CAAAC,QAAA,KAAqFF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,s+CAAkjDF,MAAA,eAAAC,KAAA,8CAAAC,QAAA,KAA2FF,MAAA,cAAAC,KAAA,6CAAAC,QAAA,g/BAAokCF,MAAA,OAAAC,KAAA,0CAAAC,QAAA,KAA+EF,MAAA,YAAAC,KAAA,sCAAAC,QAAA,qYAAgdF,MAAA,mBAAAC,KAAA,qCAAAC,QAAA,2YAA4dF,MAAA,6BAAAC,KAAA,wCAAAC,QAAA,wkDAAsqDF,MAAA,eAAAC,KAAA,mCAAAC,QAAA,mjFAA8nFF,MAAA,iBAAAC,KAAA,qCAAAC,QAAA,u7EAAsgFF,MAAA,wBAAAC,KAAA,kCAAAC,QAAA,05GAA6+GF,MAAA,UAAAC,KAAA,qCAAAC,QAAA,KAA6EF,MAAA,WAAAC,KAAA,4BAAAC,QAAA,KAAqEF,MAAA,eAAAC,KAAA,gCAAAC,QAAA,orDAA4vDF,MAAA,eAAAC,KAAA,oCAAAC,QAAA,g2CAA46CF,MAAA,YAAAC,KAAA,6BAAAC,QAAA,giFAAkmFF,MAAA,YAAAC,KAAA,6BAAAC,QAAA,KAAuEF,MAAA,aAAAC,KAAA,0BAAAC,QAAA,wwGAAw0GF,MAAA,4BAAAC,KAAA,iCAAAC,QAAA,ytDAA+yDF,MAAA,YAAAC,KAAA,yBAAAC,QAAA,0jBAAwnBF,MAAA,qBAAAC,KAAA,0BAAAC,QAAA,2oBAAmtBF,MAAA,gBAAAC,KAAA,8BAAAC,QAAA,qqUAA4uUF,MAAA,QAAAC,KAAA,yBAAAC,QAAA,KAA+DF,MAAA,cAAAC,KAAA,0BAAAC,QAAA,kfAAmjBF,MAAA,4BAAAC,KAAA,wBAAAC,QAAA,o4BAAi9BF,MAAA,kBAAAC,KAAA,4BAAAC,QAAA,6gBAAolBF,MAAA,iBAAAC,KAAA,2BAAAC,QAAA,0iBAA+mBF,MAAA,oBAAAC,KAAA,wBAAAC,QAAA,s2FAA26FF,MAAA,OAAAC,KAAA,mBAAAC,QAAA,KAAwDF,MAAA,gBAAAC,KAAA,+CAAAC,QAAA,8jXAAspXF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,yFAAqKF,MAAA,aAAAC,KAAA,4CAAAC,QAAA,kbAAogBF,MAAA,WAAAC,KAAA,0CAAAC,QAAA,qktBAAmptBF,MAAA,eAAAC,KAAA,6CAAAC,QAAA,gusBAAqzsBF,MAAA,UAAAC,KAAA,0CAAAC,QAAA,KAAkFF,MAAA,gBAAAC,KAAA,yCAAAC,QAAA,63MAA+8MF,MAAA,aAAAC,KAAA,sCAAAC,QAAA,utCAAmyCF,MAAA,IAAAC,KAAA,oCAAAC,QAAA,KAAsEF,MAAA,SAAAC,KAAA,uCAAAC,QAAA,8cAAuhBF,MAAA,UAAAC,KAAA,wCAAAC,QAAA,k7EAA6/EF,MAAA,SAAAC,KAAA,2CAAAC,QAAA,koDAA+sDF,MAAA,iBAAAC,KAAA,8CAAAC,QAAA,gHAAwMF,MAAA,WAAAC,KAAA,8CAAAC,QAAA,o4BAAs9BF,MAAA,eAAAC,KAAA,4CAAAC,QAAA,4nBAAgtBF,MAAA,OAAAC,KAAA,oCAAAC,QAAA,q7EAAy/EF,MAAA,SAAAC,KAAA,sCAAAC,QAAA,2zEAAm4EF,MAAA,SAAAC,KAAA,sCAAAC,QAAA,iuDAAyyDF,MAAA,OAAAC,KAAA,oCAAAC,QAAA,4lFAAgqFF,MAAA,OAAAC,KAAA,oCAAAC,QAAA,61EAAi6EF,MAAA,OAAAC,KAAA,oCAAAC,QAAA,w/BAA4jCF,MAAA,OAAAC,KAAA,oCAAAC,QAAA,o6CAAw+CF,MAAA,MAAAC,KAAA,sCAAAC,QAAA,KAA0EF,MAAA,iBAAAC,KAAA,6DAAAC,QAAA,yhEAAgoEF,MAAA,OAAAC,KAAA,mDAAAC,QAAA,+6BAAkgCF,MAAA,YAAAC,KAAA,wDAAAC,QAAA,stEAAmzEF,MAAA,gBAAAC,KAAA,uDAAAC,QAAA,KAAqGF,MAAA,SAAAC,KAAA,yCAAAC,QAAA,KAAgFF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,2rDAAuwDF,MAAA,SAAAC,KAAA,gCAAAC,QAAA,i1KAAm5KF,MAAA,gBAAAC,KAAA,0CAAAC,QAAA,uiLAA0nLF,MAAA,QAAAC,KAAA,kCAAAC,QAAA,mGAAsKF,MAAA,aAAAC,KAAA,uCAAAC,QAAA,maAAgfF,MAAA,KAAAC,KAAA,qCAAAC,QAAA,KAAwEF,MAAA,6BAAAC,KAAA,oEAAAC,QAAA,s8BAAgkCF,MAAA,eAAAC,KAAA,2CAAAC,QAAA,orSAAuwSF,MAAA,cAAAC,KAAA,+CAAAC,QAAA,KAA2FF,MAAA,iBAAAC,KAAA,2DAAAC,QAAA,inEAAstEF,MAAA,OAAAC,KAAA,iDAAAC,QAAA,q/CAAskDF,MAAA,OAAAC,KAAA,iDAAAC,QAAA,klKAAmqKF,MAAA,YAAAC,KAAA,sDAAAC,QAAA,ihEAA4mEF,MAAA,QAAAC,KAAA,kDAAAC,QAAA,sLAAyQF,MAAA,gBAAAC,KAAA,qDAAAC,QAAA,KAAmGF,MAAA,UAAAC,KAAA,sCAAAC,QAAA,qyEAA82EF,MAAA,UAAAC,KAAA,sCAAAC,QAAA,gFAAyJF,MAAA,aAAAC,KAAA,yCAAAC,QAAA,kbAAigBF,MAAA,OAAAC,KAAA,uCAAAC,QAAA,KAA4EF,MAAA,gBAAAC,KAAA,kDAAAC,QAAA,6+WAAwkXF,MAAA,QAAAC,KAAA,0CAAAC,QAAA,kFAA6JF,MAAA,aAAAC,KAAA,+CAAAC,QAAA,+jCAAopCF,MAAA,WAAAC,KAAA,6CAAAC,QAAA,8jrBAA+orBF,MAAA,aAAAC,KAAA,6CAAAC,QAAA,KAAwFF,MAAA,OAAAC,KAAA,8BAAAC,QAAA,u1DAAq5DF,MAAA,MAAAC,KAAA,8CAAAC,QAAA,wHAAqMF,MAAA,aAAAC,KAAA,2CAAAC,QAAA,oUAAqZF,MAAA,SAAAC,KAAA,yCAAAC,QAAA,KAAgFF,MAAA,MAAAC,KAAA,oCAAAC,QAAA,4IAA+MF,MAAA,gBAAAC,KAAA,mDAAAC,QAAA,gonCAA4tnCF,MAAA,YAAAC,KAAA,+CAAAC,QAAA,qqBAAyvBF,MAAA,gBAAAC,KAAA,mDAAAC,QAAA,k/BAA8kCF,MAAA,UAAAC,KAAA,6CAAAC,QAAA,m8EAAmhFF,MAAA,gCAAAC,KAAA,kDAAAC,QAAA,yoEAAovEF,MAAA,YAAAC,KAAA,+CAAAC,QAAA,ieAAqjBF,MAAA,SAAAC,KAAA,4CAAAC,QAAA,oUAAkZF,MAAA,SAAAC,KAAA,4CAAAC,QAAA,m0EAAi5EF,MAAA,YAAAC,KAAA,+CAAAC,QAAA,8zBAAk5BF,MAAA,eAAAC,KAAA,8CAAAC,QAAA,KAA2FF,MAAA,SAAAC,KAAA,4CAAAC,QAAA,+4JAA69JF,MAAA,YAAAC,KAAA,+CAAAC,QAAA,8oDAAkuDF,MAAA,SAAAC,KAAA,yCAAAC,QAAA,KAAgFF,MAAA,gBAAAC,KAAA,iDAAAC,QAAA,2vFAAq1FF,MAAA,aAAAC,KAAA,8CAAAC,QAAA,gVAAoaF,MAAA,KAAAC,KAAA,4CAAAC,QAAA,KAA+EF,MAAA,aAAAC,KAAA,8CAAAC,QAAA,iHAAqMF,MAAA,KAAAC,KAAA,4CAAAC,QAAA,KAA+EF,MAAA,OAAAC,KAAA,8BAAAC,QAAA,+GAA6KF,MAAA,cAAAC,KAAA,uDAAAC,QAAA,4EAA0KF,MAAA,WAAAC,KAAA,wDAAAC,QAAA,yhBAAqnBF,MAAA,SAAAC,KAAA,sDAAAC,QAAA,wYAAgeF,MAAA,gBAAAC,KAAA,+CAAAC,QAAA,KAA6FF,MAAA,YAAAC,KAAA,kCAAAC,QAAA,KAA4EF,MAAA,YAAAC,KAAA,4CAAAC,QAAA,KAAsFF,MAAA,gBAAAC,KAAA,gDAAAC,QAAA,8HAAuNF,MAAA,gBAAAC,KAAA,2CAAAC,QAAA,4jNAAgpNF,MAAA,aAAAC,KAAA,wCAAAC,QAAA,01CAAw6CF,MAAA,WAAAC,KAAA,sCAAAC,QAAA,4ssBAAsxsBF,MAAA,MAAAC,KAAA,sCAAAC,QAAA,KAA0EF,MAAA,SAAAC,KAAA,qBAAAC,QAAA,KAA4DF,MAAA,UAAAC,KAAA,gCAAAC,QAAA,KAAwEF,MAAA,sBAAAC,KAAA,yCAAAC,QAAA,qUAA6ZF,MAAA,mBAAAC,KAAA,8CAAAC,QAAA,2OAAqUF,MAAA,wBAAAC,KAAA,kDAAAC,QAAA,iyBAAo4BF,MAAA,0BAAAC,KAAA,oDAAAC,QAAA,6xBAAo4BF,MAAA,qBAAAC,KAAA,gDAAAC,QAAA,uRAAqXF,MAAA,0BAAAC,KAAA,oDAAAC,QAAA,4uBAAm1BF,MAAA,mCAAAC,KAAA,oDAAAC,QAAA,0zBAA06BF,MAAA,+BAAAC,KAAA,wCAAAC,QAAA,8UAA8aF,MAAA,oBAAAC,KAAA,wCAAAC,QAAA,iVAAsaF,MAAA,QAAAC,KAAA,oCAAAC,QAAA,mMAAwQF,MAAA,OAAAC,KAAA,mCAAAC,QAAA,ufAA0jBF,MAAA,aAAAC,KAAA,yCAAAC,QAAA,gfAA+jBF,MAAA,eAAAC,KAAA,2CAAAC,QAAA,8SAAiYF,MAAA,YAAAC,KAAA,wCAAAC,QAAA,0IAAuNF,MAAA,OAAAC,KAAA,mCAAAC,QAAA,udAA0hBF,MAAA,OAAAC,KAAA,mCAAAC,QAAA,miBAAsmBF,MAAA,0BAAAC,KAAA,wCAAAC,QAAA,yVAAobF,MAAA,kBAAAC,KAAA,8CAAAC,QAAA,4jBAAqpBF,MAAA,gBAAAC,KAAA,4CAAAC,QAAA,iaAAsfF,MAAA,sBAAAC,KAAA,2CAAAC,QAAA,iJAA2OF,MAAA,wBAAAC,KAAA,6CAAAC,QAAA,wJAAsPF,MAAA,QAAAC,KAAA,oCAAAC,QAAA,uTAA4XF,MAAA,UAAAC,KAAA,gCAAAC,QAAA,KAAwEF,MAAA,oBAAAC,KAAA,6CAAAC,QAAA,0zBAAo5BF,MAAA,0BAAAC,KAAA,iDAAAC,QAAA,y+BAA6kCF,MAAA,sBAAAC,KAAA,+CAAAC,QAAA,8gCAA4mCF,MAAA,SAAAC,KAAA,qCAAAC,QAAA,+QAAsVF,MAAA,YAAAC,KAAA,uCAAAC,QAAA,qmEAAirEF,MAAA,iBAAAC,KAAA,sCAAAC,QAAA,8vKAA80KF,MAAA,KAAAC,KAAA,iCAAAC,QAAA,6WAA4aF,MAAA,OAAAC,KAAA,mCAAAC,QAAA,sKAAyOF,MAAA,eAAAC,KAAA,mCAAAC,QAAA,kPAA6TF,MAAA,cAAAC,KAAA,yCAAAC,QAAA,wPAAwUF,MAAA,QAAAC,KAAA,oCAAAC,QAAA,iiCAAsmCF,MAAA,OAAAC,KAAA,mCAAAC,QAAA,mQAAsUF,MAAA,kBAAAC,KAAA,6CAAAC,QAAA,6XAAqdF,MAAA,aAAAC,KAAA,oCAAAC,QAAA,wvEAAk0EF,MAAA,qBAAAC,KAAA,8CAAAC,QAAA,kvBAA80BF,MAAA,yBAAAC,KAAA,kDAAAC,QAAA,w+BAA4kCF,MAAA,MAAAC,KAAA,kCAAAC,QAAA,6oBAA8sBF,MAAA,UAAAC,KAAA,sCAAAC,QAAA,wSAAiXF,MAAA,YAAAC,KAAA,uCAAAC,QAAA,onBAAgsBF,MAAA,eAAAC,KAAA,0CAAAC,QAAA,y0KAA25KF,MAAA,YAAAC,KAAA,wCAAAC,QAAA,kSAA+WF,MAAA,cAAAC,KAAA,0CAAAC,QAAA,iRAAkWF,MAAA,cAAAC,KAAA,yCAAAC,QAAA,iWAAibF,MAAA,OAAAC,KAAA,mCAAAC,QAAA,gfAAmjBF,MAAA,qBAAAC,KAAA,yCAAAC,QAAA,mSAA0XF,MAAA,KAAAC,KAAA,wBAAAC,QAAA,KAA2DF,MAAA,eAAAC,KAAA,mCAAAC,QAAA,8mBAAyrBF,MAAA,kBAAAC,KAAA,sCAAAC,QAAA,kkTAAmpTF,MAAA,kBAAAC,KAAA,+BAAAC,QAAA,uxCAAi2CF,MAAA,eAAAC,KAAA,4BAAAC,QAAA,qhBAAylBF,MAAA,oBAAAC,KAAA,iCAAAC,QAAA,odAAkiBF,MAAA,QAAAC,KAAA,+CAAAC,QAAA,KAAqFF,MAAA,aAAAC,KAAA,iDAAAC,QAAA,07FAAihGF,MAAA,SAAAC,KAAA,6CAAAC,QAAA,ylGAAwqGF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,KAAiFF,MAAA,oBAAAC,KAAA,2CAAAC,QAAA,6/DAAqlEF,MAAA,WAAAC,KAAA,yCAAAC,QAAA,0wBAAu1BF,MAAA,4BAAAC,KAAA,kEAAAC,QAAA,+dAAslBF,MAAA,eAAAC,KAAA,sDAAAC,QAAA,mjBAAipBF,MAAA,wBAAAC,KAAA,oDAAAC,QAAA,ycAA8iBF,MAAA,oBAAAC,KAAA,gDAAAC,QAAA,4SAAyYF,MAAA,uBAAAC,KAAA,mDAAAC,QAAA,4ZAA+fF,MAAA,0BAAAC,KAAA,sDAAAC,QAAA,8ZAAugBF,MAAA,gBAAAC,KAAA,uDAAAC,QAAA,6VAA6bF,MAAA,aAAAC,KAAA,4DAAAC,QAAA,6GAA+MF,MAAA,iBAAAC,KAAA,8DAAAC,QAAA,6DAAqKF,MAAA,OAAAC,KAAA,kDAAAC,QAAA,ybAA2gBF,MAAA,QAAAC,KAAA,+CAAAC,QAAA,KAAqFF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,KAAiFF,MAAA,WAAAC,KAAA,yCAAAC,QAAA,+hCAA4mCF,MAAA,YAAAC,KAAA,iEAAAC,QAAA,yyCAA+4CF,MAAA,SAAAC,KAAA,8DAAAC,QAAA,2UAA2aF,MAAA,eAAAC,KAAA,0DAAAC,QAAA,wJAA0PF,MAAA,aAAAC,KAAA,kEAAAC,QAAA,m7BAA2hCF,MAAA,OAAAC,KAAA,4DAAAC,QAAA,2LAAuRF,MAAA,QAAAC,KAAA,6DAAAC,QAAA,2NAAyTF,MAAA,aAAAC,KAAA,kEAAAC,QAAA,q5CAA6/CF,MAAA,OAAAC,KAAA,4DAAAC,QAAA,ohBAAgnBF,MAAA,YAAAC,KAAA,iEAAAC,QAAA,slBAA4rBF,MAAA,eAAAC,KAAA,oEAAAC,QAAA,iWAA6cF,MAAA,eAAAC,KAAA,0DAAAC,QAAA,oKAAsQF,MAAA,cAAAC,KAAA,yDAAAC,QAAA,seAAskBF,MAAA,OAAAC,KAAA,4DAAAC,QAAA,qSAAiYF,MAAA,SAAAC,KAAA,oDAAAC,QAAA,6YAAmeF,MAAA,QAAAC,KAAA,+CAAAC,QAAA,KAAqFF,MAAA,UAAAC,KAAA,yCAAAC,QAAA,KAAiFF,MAAA,WAAAC,KAAA,yCAAAC,QAAA,qhDAAkmDF,MAAA,WAAAC,KAAA,iCAAAC,QAAA,KAA0EF,MAAA,sBAAAC,KAAA,0CAAAC,QAAA,g1DAAy6DF,MAAA,cAAAC,KAAA,mCAAAC,QAAA,4+BAAsjCF,MAAA,cAAAC,KAAA,mCAAAC,QAAA,0hBAAomBF,MAAA,qBAAAC,KAAA,0CAAAC,QAAA,oEAA4JF,MAAA,QAAAC,KAAA,8BAAAC,QAAA,ytEAAwxEF,MAAA,QAAAC,KAAA,8BAAAC,QAAA,s5BAAq9BF,MAAA,UAAAC,KAAA,gCAAAC,QAAA,q2LAAw6LF,MAAA,qBAAAC,KAAA,yCAAAC,QAAA,6wBAAo2BF,MAAA,eAAAC,KAAA,oCAAAC,QAAA,ghGAA4lGF,MAAA,KAAAC,KAAA,wBAAAC,QAAA,KAA2DF,MAAA,kBAAAC,KAAA,+BAAAC,QAAA,0nDAAosDF,MAAA,MAAAC,KAAA,kBAAAC,QAAA,KAAsDF,MAAA,WAAAC,KAAA,UAAAC,QAAA,kzBAAg2BF,MAAA,eAAAC,KAAA,cAAAC,QAAA,kjEAAwmEF,MAAA,uCAAAC,KAAA,IAAAC,QAAA","file":"36.1137f43ad4908373e1c8.chunk.js","sourcesContent":["webpackJsonp([36],{\n\n/***/ \"./app/cb-utils/services/docsIndex.json\":\n/***/ (function(module, exports) {\n\nmodule.exports = [{\"title\":\"Adapters\",\"href\":\"/1-platform_concepts/Adapters\",\"content\":\"IoT solutions are comprised of many devices and sensors In many cases the devices and sensors will not be able to directly connect to the ClearBlade Platform via HTTP or MQTT due to their power consumption or connectivity limitations In these cases the IoT solution will need to utilize an Adapter An Adapter is a custom software component deployed on IoT Gateway devices executing the ClearBlade Edge whose purpose is to serve as a proxy between the ClearBlade platform and IoT devices that cannot directly communicate with the ClearBlade Platform Adapters can be written in any language ClearBlade provides a number of language specific SDKs that can be utilized when constructing adapters In the event that a SDK does not exist for a particular language the REST API can be utilized to communicate with the ClearBlade platform from an adapter The ClearBlade Platform developers console provides facilities to assist with 1 Defining new adapters to the ClearBlade Platform 2 Managing the files utilized with each adapter 3 Managing the commands utilized by the ClearBlade Platform to administer the adapters 4 Viewing the status of the adapter across all ClearBlade Edges 5 Administering the adapter on ClearBlade Edge 6 Navigating to each adapter \"},{\"title\":\"Architecture\",\"href\":\"/1-platform_concepts/Administration/Architecture\",\"content\":\"The ClearBlade Platform can be installed in a variety of configurations This allows for creating a range of implementations from Enterprise highly secure environment where all data is safely kept behind a firewall Hybrid some assets are connected to internal systems via VPN while others are publically available Public data is available publically to internet end users mobile devices Single support several smaller internal enterprise apps Cluster support many apps with broad public use Additionally these environments can include mixtures of the configurations to get the correct environment for the enterprise Overview The simplest installation is a single machine that is hosting all ClearBlade components via docker containers The architecture is represented below ClearBlade OverviewstaticimgconsoleoverviewoverviewSingleArchitecturepng NGinx In a simple environment NGinx represents a basic http router and SSL layer for encryption ClearBlade This is the primary process executing on the instance to handle all application logic security and routing Web Console A set of html5 and javascript that is served by NGinx for presenting a simple developer UI SuperVisor A recommended linux process for managing and ensuring the ClearBlade dependencies are appropriately started and running Postgres An open source database that stores all data related to the ClearBlade Platform and its systems The ClearBlade process makes data available via three primary protocols 1 REST over HTTP 80 or HTTPS 443 2 MQTT over TCP via ports 1883 and 1884 includes TLS 3 WebSockets on port 8906 Cluster Configurations The ClearBlade Platform can be easily scaled horizontally The following considerations are in effect 1 Database sharding techniques The Postgres database running the ClearBlade platform can be sharded to split and and expand the allowed disk across many machines 2 The ClearBlade REST endpoints The ClearBlade process serving REST endpoints is stateless as such requests routed through NGinx can be sent to the ClearBlade process that is running on multiple machines in a round robin fashion 3 The ClearBlade messaging Messaging connections are held open and devices must connect to dedicated endpoints ClearBlade provides a relay broker to allow for horizontal scaling of this connection process The basic steps are Client connects to a single relay broker Client sends credential information Relay broker sends a valid token and messaging url for broker Client disconnects from relay broker Client connects to broker with token Client performs all messaging against broker Integrations Many integrations are available via the ClearBlade Platform They include but are not limited to HTTP SOAP Sockets File IO Cloud based Java RPG DB2 SQL Server MySQL PostGres OPC Oracle Infobright For each of the integrations basic platform considerations must be made to ensure security and access Environment Requirements ClearBlade runs on linux AMD 64 bit Operating Systems ClearBlade recommends the following distrobutions Like much of the available cloud architectures the ClearBlade platform is built on a AMD64 linux architecture with a minimum supported kernal of 2623 Below are the available releases and their minimum version requirements Ubuntu 1010 26354 Red Hat 6 263271 CentOS 6 263271 Debian 6 ARCH Fedora 13 2633 Gentoo SLES 11 2627195\"},{\"title\":\"Installation\",\"href\":\"/1-platform_concepts/Administration/Installation\",\"content\":\" Overview ClearBlade manages deployments using Docker From a fresh linux box you can be up and running in 3 steps Step 1 Obtain Trial Key and Docker Key from ClearBlade 1 Trial keys and Docker Keys are issued by ClearBlade and can be requested via email supportclearbladecom Step 2 Install Docker 1 Request the installation shell curl sSL httpsgetdockercom sh 2 Add your user to the docker group shell sudo usermod aG docker 3 Switch to new user shell su 4 Log into Docker shell docker login e u jsonkey p cat pathtodockerjson httpsgcrio Step 3 Install and Launch ClearBlade 1 This is an example of our deployment script which pulls and launches five containers shell docker run d name cbdata gcriocbpostgres210 docker run d name cbpostgres gcriocbpostgres210 docker run d name clearblade gcrioclearblade33 pkeypathtotrialkey docker run d name cbconsole gcriocbconsole33 docker run d name cbnginx gcriocbnginx240 Begin developing\"},{\"title\":\"IoT\",\"href\":\"/1-platform_concepts/Administration/IoT\",\"content\":\" Introduction Summary The word platform is massively overloaded today and there now exists a platform for the most nuanced of websites ClearBlade lives at the other extreme that allows for a highly scalable backend that supports the broadest of solutions The following describes the technical usage model for ClearBlade as an IoT platform Purpose This section should be informative and factual guide for implementation of an IoT solution Background IoT networks contain the following possible physical elements Device network This is where devices all coexist together Those devices may all be together in a private cloud or exist together on a mesh environment in a house or industrial facility Cloud network This is the public internet space where devices laptops and servers can communicate with one another Enterprise network This represents the traditional protected networks where most enterprises execute their business processes It is often protected from the public internet via a firewall software and other rules Physical Devices Many devices can perform activities in the Internet of Things These devices can be advanced as laptops ubiquitous as mobile phones emerging as raspberry pis appealing as an iBeacon or as simple as a basic temperature sensor Device Firmware Software that runs on a device directly This software may be very advanced and perform operating system like activities or may be simple binaries running in a limited linux environment M2M communication A number of protocols that support the transfer of information between devices This includes bluetooth RFID iBeacon mqttsn zigbee and tcpip IP communication To directly participate in the internet a device must receive an IP address IoT OverviewstaticimgconsoleoverviewoverviewIoTArchitecturepng Terminology ClearBlade platform middleware server software that provides connectivity to end point devices SDK A library for a specific programming language that simplifies the communication from a client device to the ClearBlade platform Client An endpoint device that will access the clearblade platform for information Cloud Integration A bidirectional communication typically REST that supports sharing data or messages with a cloud based service provider often free or purchase via SaaS Enterprise Integration A bidirectional communication via industry protocols for that supports sharing data or executing transaction with an existing enterprise software package homegrown solution or legacy middleware Requirements Platform Concerns ClearBlade supports the creation of a secure highly scalable internet of things that connects to existing systems of record Below each one of these requirements is defined along with the recommend solution using the ClearBlade platform Connect devices with TCPIP Low and high powered devices that have TCPIP capabilities can directly connect to the ClearBlade platform Each device must authenticate with the platform even for anonymous access Authentication may be done via HTTP REST endpoint to v2userauthenticate MQTT Broker connect to ClearBlade auth broker Point of consideration MQTT provides significantly higher performance for much less battery and processing power For devices with limited capability consider a solution where devices only use MQTT and the ClearBlade platform handles the heavier workload activities Once connected these devices may choose to encrypt traffic between themselves and the ClearBlade server This decision is influenced by 1 The processing capability of the end device 2 The privacy concerns of the data in transit 3 The security of the network in use The devices may include Smartphones like Android iOS Windows Ubuntu FirefoxOS Miniprocessors like Raspberry Pi BeagleBone Arduino Intel Galileo These devices may use raw protocol libraries in any language or leverage ClearBlade SDKs for Objective C Android Java GoLang Python or NodeJS Connect devices without TCPIP Some of the most powerful participants in an IoT infrastructure are lower power minimal processing sensors that report small payloads These devices do not include network cards for IP based communication nor do they include the processing capability required for encryption For communication these devices may have wireless communication over standards like bluetooth RFID or 802154 and may use protocols like ZigBee or MQTTsn Each of these devices will connect to a gateway that is IP connected The gateway will have the capability to communicate with the ClearBlade platform using TCPIP over the HTTPs or MQTT protocols Gateways may have processing capability to rapidly implement encryption Gateways will execute software that receives non TCPIP communication and relays it to the ClearBlade platform see Gateway design Gateway Design Gateways provide a midpoint for gathering data from a primitive set of devices and routing that information to a server for analysis and collection Gateways have the ability to be as lightweight as a mobile phone or as heavy as a traditional server depending upon environment and computing needs Gateways implement local area networking communication via solutions like RFID BLE 802154 that talk directly to the sensors and non TCPIP enabled devices From those devices information is packaged into a format desired for traveling over the internet see followon sections for BLE zigbee iBeacon recommendations Gateways also connect to the ClearBlade platform securely using a ClearBlade SDK The ClearBlade SDK will allow for authentication from the device Data from gateway can be sent to the platform via a message publish or an HTTP REST call to a ClearBlade platform endpoint Data can be pushed directly from the ClearBlade platform to the Gateway using a message publish This message publish may be caused by other clients or executed from a service authored within the ClearBlade platform See services for more information Point of Consideration If a gateway has limited bandwidth processing limitations or battery concerns we recommend using mqtt as a primary or only point of interaction with the ClearBlade platform In some cases it is desirable to perform a workload or computation logic within the gateway when data needs raking or when the processing capabilities exist In this case a ClearBlade platform in cache mode may be installed on the gateway This environment will allow for bridging messages or sending data home via REST Finally this configuration will allow for gateways to perform significant business logic prior to arriving server side See recommend deployment architectures ClearBlade Cache only Recommended deployment architectures Infrastructure topology for IoT is massively ignored by cloud and software vendors today There are many variables and many concerns for which to account Below represent different deployment models available with the ClearBlade platform and their attributes value The simplest architecture for ClearBlade is an environment where all devices are IP address enabled Public IP Connected This architecture is for a public network where all IoT devices the ClearBlade platform and any integration exist in the public internet domain IoT OverviewstaticimgconsoleoverviewoverviewPublicIPIoTArchitecturepng Private IP Connected This architecture is for a set of IoT devices on a private network to communicate with ClearBlade server and enterprise integrations IoT OverviewstaticimgconsoleoverviewoverviewPrivateIPIoTArchitecturepng Private IoT to Public ClearBlade to Public enterprise This architecture diagram describes a private set of devices connecting to a publically available ClearBlade instance and publically available enterprise infrastructure IoT OverviewstaticimgconsoleoverviewoverviewPrivatePublicIPIoTpng Private IoT to Public ClearBlade to Private Enterprise This architecture describes a private network of devices communicating with a publically available ClearBlade instance that communicates with a private enterprise network IoT OverviewstaticimgconsoleoverviewoverviewMixIPIoTpng Private IoT to Private Virtualized Within many corporate networks there are layers of protection This means that IoT devices may participate on networks not directly accessible to legacy applications or employees IoT OverviewstaticimgconsoleoverviewoverviewVirtualizedIoTpng Advanced PERA Purdue Enterprise Reference Architecture The Purdue model gives us a rich network architecture that offers protection from malicious activities ClearBlade can participate in this architecture by behaving as a secure gateway between layers This means that its possible to filter and expose data from highlevel end users that can access information that is typically stored ClearBlade Processing This subarchitecture shows a nonpersistent ClearBlade instance supporting logic processing on the device network while communicating back to a master ClearBlade instance that will do persistent storage and IoT OverviewstaticimgconsoleoverviewoverviewProcessingIoTpng ClearBlade Cluster IoT OverviewstaticimgconsoleoverviewoverviewClusterIoTpng ClearBlade Cache only Realtime messaging Messaging information between clients in under 100ms is critical to achieving perceived real time behavior Removing physical network constraints ClearBlade messaging achieves this goal while also implementing authority and authentication Traditional REST endpoints cannot do this Point of Consideration traditional OSs do not achieve industry standard real time operating systems like linuxRT may achieve much faster behavior and can be considered for integration with ClearBlade Enforce authentication To protect rogue devices from participating in your network it is important to enforce authentication of each device Unlike typical users the preferred model of authenticating devices is to embed a list of valid authkeys in the device firmware This list of authkeys will then be used in a specific order for authenticating with the backend A backend will evaluate those keys for a valid device auth key to deviceid paring a valid date window of operation of validity Operators should have the ability to disable a devices access by simply disabling the authority of those keys Additionally a device should be able to update its valid keyset with an update to the locally running firmware ClearBlade supports this auth model with the use of a simple collection that contains the devicekey deviceid startdate enddate and finally an isValid override fields The creation of a key set is easily done during the firmware load with a call to a ClearBlade service named GenerateDeviceKeys This call will return a set of keys for loading into the firmware while also inputting them into the DeviceKeyCollection Once the keys are in place the device will make a call to a ClearBlade service named AuthenticateDevice As parameters this services accepts deviceId devicekey The service will evaluate the sent key with the DeviceKeyCollection If the key is found to be valid the service will auth into the platform with a device role and produce a token This token is then returned to the device Point of Consideration This authorization process is extremely flexible and can be used to support device authentication into a large number of third party user registries Finally ClearBlade uniquely allows the execution of this login process via either traditional heavy REST or it can be done in a lightweight manner over MQTT Enforce encryption When the processing power exist for your devices and security is desired encryption should be enforced There are multiple places where encryption may be desired 1 Device network If this network is physically accessible or can be scanned by other devices then the data should be encrypted as it travels across wireless protocols 2 Public cloud internet If you data has any potential for privacy then this is the most important domain to ensure all traffic is encrypted ClearBlade enforces this by having all communication between its APIs leverage the latest OpenSSL 3 Enterprise network Often traffic will move safely behind firewalls without encryption where environments are more trusted ClearBlade will use the standard associated with this environment and the integration available to work with ClearBlade will encrypt at this layer if desired Horizontal Scaling Many millions of devices has the ability to put a significant performance load on any backend infrastructure Your IoT platform should be capable of horizontal scaling For Request Response like HTTP this means the backend should be stateless and allow for many machines to be setup in parallel to handle millions of request per second For messaging protocols where sessions are held open more broker intelligence is required An architecture that supports devices connecting to many machines and then brokers being bridged together is the preferred solution ClearBlade provides both the stateless REST interactions that can scale horizontally along with the scaling of the message broker With each new node of ClearBlade a new message broker is made available for devices to connect to ClearBlade is defaulted to allow 50000 device connections per broker but this number can be changed in a setting for handling higher transaction rates Gateway vs Direct model When designing an Internet of THings solution a gateway can be a critical piece of the solution in order to control cost of devices A gateway can perform the most basic task of relaying information from an endpoint device to an internet based server or it can do advanced activities of compressing data and relaying data intelligently A gateway is critical to a solution when in a device ecosystem that contains non ip enabled devices ClearBlade supports all types of device ecosystems In the case of direct connections devices can connect to an internet based ClearBlade server In the case of a simple pass through gateway the ClearBlade SDK can be used to connect the M2M protocol to an internet based ClearBlade server In the most flexible scenario of an intelligent gateway its recommended to run a headless ClearBlade instance on the gateway device This instance will cache data in memory only and will execute business rules as desired Relaying the m2m protocol data into this instance gives the IoT network the ability to monitor alert respond to and provide intelligence at multiple points in the IoT solution Enterprise Integration Many IoT providers fail to see the true opportunity of IoT participating with existing infrastructures This means that while devices may be unaware of legacy architecture and systems of record those applications still have meaningful actions to perform to either optimize business process or enhance the value of the device network IoT devices may replace field data entry or be configured to gather new data depending on new business offerings ClearBlade provides a powerful and extremely flexibly Integration engine This real time code engine allows for logic that execute to talk directly to sockets protocols databases or other middleware and COTS applications Cloud Integrations Many cloud services are available that contain public or social data This data set can be valuable to IoT to both enrich with device information and to better target the use of IoT data Imagine a store being able to track employees through a store walk through and then matching that behavior to twitter reactions and sentiment Through ClearBlades integration libraries apps and systems can quickly gather information from these third party cloud services ClearBlade systems can positively impact those public solutions while also enhancing the apps opportunity to increase overall user value Realtime Data Synchronization A huge challenge and desire for many working in the internet of things is the ability to get data from and to devices in a real time manner Realtime information means your users and devices can get the latest information when they request it but also have the ability to get pushed the latest information when it happens Many solutions attempt to emulate the push process via a long pole This ultimately is a poor solution due to battery life and inconsistencies Instead we see a subscribe publish model replacing the request response model Today its possible for to use a number of protocols to accomplish including websockets amqp xmp and mqtt An IoT solution should most likely leverage one of these technologies to be considered capable of supporting real time considerations ClearBlade supports extremely rich real time requirements by allowing by HTTP websockets and MQTT to be used interchangeably with a single authority model and underlying logic and data structures This means devices can simply subscribe to information and automatically receives any updates A customizable trigger infrastructure allows for reacting and writing business logic that handles specific events like humidity warnings setting off business triggers and alerts Point of consideration It is not enough to simply reuse an existing endpoint available over HTTP for most devices This will result in performance and battery issues that are acceptable in most IoT environments Payload Optimization As data moves from one device to another there is very often a need to modify the structure and size of the payload to optimize for the device and network constraints We first saw this pain in the failure of many websites to adequately respond and send data to mobile devices Mobile devices were often on slower carrier networks and lacked the processing power to render the data into long lists when it arrived Overall the failure to optimize payload resulted in many poor mobile experiences Today we see this happening again with IoT Very often the urban carrier networks of today have far more capabilities than the small unstable connectivity environments of IoT For IoT we need the ability to optimize both sending and receiving payloads ClearBlade rapidly supports this requirements by allowing for systems of devices to all work together Those devices can share endpoints of have specific endpoints for their needs Those endpoints can work off of shared data sources that means a sensor may have a simply mqtt publish of data for sharing temperature while a rich web client will look at the same data with a heavy call to months of temperature data across multiple sensors Point of Consideration Paging of data has never been of more importance If your platform doesnt page conservatively by default then youre likely to encounter a number of issues when immediately rolling out on the IoT networks Big Data Integration Many people look to big data to better understand their customers or enhance their processes to better serve their audiences This opportunity is real and continuously growing The first challenge to achieve this understanding is to begin collecting data with consistency and concurrency All too often business are stymied for starting their big data initiatives with IoT because of the simply overwhelming amount of possible data ClearBlade eases this pain by providing a conduit to third party analytics and databases Whether sending analytics to generic cloud vendors or to domain specific processors this can easily be achieved within the platform The platform can directly route the request of can subscribe to the general activity in the system and send it along as business rules apply Creating Alarms Alarms are critical to making an IoT based network smarter and more productive An IoT platform should be able to allow for custom alarms when certain thresholds are realized of certain events occur ClearBlade allow for triggers and timers that allow for business process to be injected into normal data flow These triggers can watch data from sensors and store critical information Generating reports Reports are built from an understanding and summary of data gathered over a period of time This data should be accessible at all times via an API such that both visual representation and data exports can be gathered for an immediate review or high quality physical reports The data should include both generic information about usage but also information around the domain in question ClearBlade by default produces and analytics API that summarizes events transactions usage and users to easily be represented graphically These APIs are available live and up to date at all times Additionally ClearBlade allows for dynamic data structures and customizable report logic to build the preferred data set into a single aggregated view Finally Clearblade offers triggers allowing for traditional daily rollups and compression of data to simplifiy large data stores into summary information that can more easily be consumed M2M Protocols BLE Bluetooth integration BLE Bluetooth is a widely used protocol for having nonip connected devices communicate with more powerful devices that have an IP address Very often devices in close proximity will share streaming information via bluetooth Using open source drivers IoT networks can leverage bluetooth to get data from sensors and other devices to IP connected devices The IP connected devices can then packaged the data appropriately and send it back to the internet for IoT participation ClearBlade provides and SDK readily able to communicate data transferred via BLE or bluetooth to Ip enabled gateways or devices Additionally beacon assets can be inventoried and managed via collections in the ClearBlade platform The collections may contain custom information including geolocation brick and mortar information and mobile phone pairings all for the purpose of gathering future analytics iBeacon integration iBeacon represent a specific implementation and protocol on top of bluetooth To build an IoT solution that includes iBeacon support you will need to have iBeacon devices and then firmware or apps that can communicate of the iBeacon standards There are opensource and proprietary implementations of that specification depending on the device type Apps will then need to take the data gather in an M2M environment and convert it to an internet based protocol for interoperating in the internet of things ClearBlade provides and SDK readily able to communicate data transferred via iBeacons to Ip enabled gateways or devices Additionally beacon assets can be inventoried and managed via collections in the ClearBlade platform The collections may contain custom information including geolocation brick and mortar information and mobile phone pairings all for the purpose of gathering future analytics zigbee integration Zigbee represents a specific implementation and protocol on top of 802154 To build an IoT solution that includes zigbee support you will need to have zigbee enabled hardware devices and then firmware or apps that can communicate of the standards There are opensource and proprietary implementations of that specification depending on the device type Apps will then need to take the data gather in an M2M environment and convert it to an internet based protocol for interoperating in the internet of things ClearBlade provides and SDK readily able to communicate data transferred via zigbee to Ip enabled gateways or devices Additionally beacon assets can be inventoried and managed via collections in the ClearBlade platform The collections may contain custom information including geolocation brick and mortar information and mobile phone pairings all for the purpose of gathering future analytics MQTTsn MQTTsn and MQTT provides a similar application interface to developers but is used significantly different in implementation and use case for a different use case and leverage different underlying technologies MQTTsn does not run over TCPIP but instead uses wireless network protocols like zigbee In environment where devices do not have IP capabilities MQTTsn can be used to subscribe and publish Bridging MQTT specifications Messages from MQTTsn can easily be relayed from MQTTsn to MQTT A custom MQTT client can provide that needed capability Device Management Cycling device keys Unlike humans devices do not have the ability to reset passwords with traditional means with 2nd and 3rd party factor authentication This constraint removes many concerns with access associated with humans like spoofing or phishing but it requires a more programmatic way to ensure trust One such way is to assign a set of keys to a device which have an expiration associated with them and can be disabled by the server to force cycling onto the next key Depending on the desired model this solution can be built with the ClearBlade platform leverage the authentication token model End devices can be provided sets of tokens and then use them in the prescribed fashion The token may even represent no associate authority but simply act as password to be granted authorities The additional abstraction gives the IoT administrator the ability to rapidly have all devices immediately move to a non compromised token when a breach has occurred quickly deauthorize certain behaviors in the network or in a worst case scenario immediately disable the entire device network Devices participating in IoT network must be traceable and installed with default firmware or apps that handle IoT connectivity This application that runs on the devices needs the ability to securely connect to any IoT platform ClearBlade supports this default application by providing SDKs and open access to protocols used for internet communication ClearBlade simplifies and communicate a secure authentication model for those devices and can encourage encryption where network and cpu resources are available Update device software aka firmware updates That firmware or app must be updatable to ensure longevity and maturity of any project This update can be received through a third party like an Apple App Store or may be fetched from a file server that contains updated resources Installed firmware on the device should be aware of how to get the latest version and dynamic replace the executing app and appropriately recycle the executing process ClearBlade supports this activity by providing static file hosting that can be referenced via APIs Those APIs can send firmware update availability along with appropriate file downlocations The app or firmware may be downloaded and restarted by leveraging SDK in use API Device Provisioning Because devices must be assembled and provisioned in manufacturing scenarios it is important that no human intervention is required to generate device specific keys or SDKs ClearBlade exposes all application and administration activities via REST based endpoints ideal for integrating with manufacturer requirements Conclusion This document address the major concepts associated with implementing IoT based solutions Ultimately this It includes both generic descriptions of the challenges and how ClearBlade uniquely and powerfully solves those issues IoT represents the opportunity to make technology an invisible but indispensable part of peoples lives Technically it represents a significant challenge across the domains of hardware low level software communication protocols security internet and cloud based interactions and ultimately data science The ClearBlade platform provides the versatility required to achieve those goals\"},{\"title\":\"Security\",\"href\":\"/1-platform_concepts/Administration/Security\",\"content\":\"There are three attack surfaces the platform has outside of the security of the platform They are Linux Postgres and Nginx The platform design helps mitigate the exposure of Postgres to the outside world but best practices should still be followed Most importantly Linux and Nginx should be reviewed for latest security policies and best practices Current best practice thoughts are documented below Linux Configuration Since nginx handles the incoming requests our issues with Linux will mostly arise from the network stack and nonplatform operations like SSH ICMP To those ends most of the recommendations involve changing file permissions and updating the configuration files to mitigate DenialofService attacks DOSs limit the impact of reverse shells and improve performance 1 Monitor users 2 Enable linux firewall solution 3 Enable access via SSH only 4 Disable user based login 5 Use token based authentication only 6 Ensure maintence upgrades 7 Configure etcsysctrlconf netipv4icmpechoignorebroadcasts 1 netipv4icmpignoreboguserrorresponses 1 netipv4confallacceptsourceroute 0 netipv4confdefaultacceptsourceroute 0 netipv4confallacceptredirects 0 netipv4confdefaultacceptredirects 0 netipv4confallsecureredirects 0 netipv4confdefaultsecureredirects 0 Database Possible Postgres liability comes in two places Snooping on the communications link between Postgres nodes This is more likely to happen on a public network rather than an internal This can is mitigated by the use of SSL between Postgres nodes Someone injecting arbitrary SQL into the query This is mitigated by the use of Postgres userspace to silo information The platform does not allow for direct execution of statements as they are built from the REST API The platform does perform checks for SQL injection on all query parameters Web Server Nginx has been well hardened by its wide community support Serveral configurations do exist to mitigate DOSs and clean up connection handling Recommended configuration updates include Obfusicate the nginx server name This will prevent attackers from being able to identify the server type as nginx This is done by modifying and compiling file srchttpngxhttpheaderfiltermodulec with code like static char ngxhttpserverstring Server nginx CRLF static char ngxhttpserverfullstring Server NGINXVER CRLF becoming static char ngxhttpserverstring ClearBlade Platform CRLF static char ngxhttpserverfullstring ClearBlade Platform CRLF Cut down response times This will limit an external attacker from performing a syn flood type attack Modify etcnginxnginxconf with clientbodytimeout 20 clientheadertimeout 20 keepalivetimeout 5 5 sendtimeout 30 Additional tools Snort Utilizing an intrusion detection system to log all incoming packets provides additional support if an attack does occur Snort is an open source industry standard for monitoring and alerting when certain network events occur Snort will not to prevent an attack but will provide additional information if an attacker does occur to heighten security and react appropriately Fail2Ban External Networking All data currently runs across three ports from the platform These ports should be the only available platform interfaces for the SDKs and external devices 80 REST API Console access 443 Encypted REST API Console access 1883 MQTT based messaging 1884 Encrpyted MQTT based messaging 8904 Websocket messaging Intranet Additionally ClearBlade recommends implementation of corporate best practices for firewall installation and virtual private networks Use of Mobile Device Management or Mobile Application Management software is encouraged as an additional layer of security for data These solutions can easily be configured to allow for the platform to efficiently transmit data to end clients and devices Data Encryption All data from the public APIs and made available by the SDKs is designed to run over SSL This requires that the hosting server be correctly configured with a certificate issued by a valid certificate signing authority The platform does offer the ability to run without SSL or with selfsigned certificates but it requires specific override implementation and is not recommended by ClearBlade Platform Administration The platform allows for developers to signup and create systems The platform provides a Management console where these developers can be granted rights for Creating new systems Accessing other systems Monitoring usage by developer with metrics include number of systems and number of transactions Platform Auth Each System defined in a platform instance has security automatically The system may be implemented by providing a user registry or simply using anonymous users In both cases the API requires that a user first request a token and this token will be included for analytics monitoring Any user named or anonymous in a system has behaviors available for historical audit The user token is designed such that any man in the middle attacks will be mitigated When a user registry is included each asset within the system can be controlled via a defined role based on the activities create read write and delete Each user is assigned a role and has authorities managed This results in a developer of a System being able to control its users and their authorities via the web based console\"},{\"title\":\"Starting\",\"href\":\"/1-platform_concepts/Administration/Starting\",\"content\":\"Configuration of the ClearBlade platform is divided into three pieces The platform process itself The operating system boxes the platform runs on Database dependencies you might have Starting the Platform Process The Platform by default installs into the path optclearblade In there you will find three elements binary for clearblade all clearblade process happens inside of this binary console directory this contains the html to host the developer console javaharnessjar this allows connectivtiy from ClearBlade code services to java based integrations The process for administering the platform is fairly simple The platform has several command line options Option Type Description Has default addr string The address on which the platform will run Usually this is just a port specified as 9000 busconfig string The name of the bus config file cert string If you wish to use TLS to serve the platform this argument should be the location of the SSL certificate codecache int The maximum number of code services to hold in cache 1000 clusternodes string Overrides the value of the Nodes attribute in the bus config file db string The RDBMS implementation to use Valid options are postgres or sqlite postgres dbhost string The host location of the postgresql installed by ClearBlade 127001 dbpass string The password for the postgresql install dbport string The port of the db 5432 dbuser string The user used by the db disablepprof bool Disables pprof output file creation and pprof webserver creation false dumproutes bool For diagnostic purposes Will dump the endpoints being listened to by the platform false expire int The lifetime of keyvalue store nodes 10 expiretokens bool Invalidates user tokens issued more than the systems tokenTTL defaults to 5 days if set to true Dev tokens will not be removed true hostaddr string The ip address for other clustered nodes to contact this platform key string When using TLS use this to specify the location of the SSL key file leanmode bool For the edge should we store all the server side stuff analytics etc false local bool Mainly for development Will run the platform without data persistence false loglevel string Specifies the minimum loglevel Valid values are debug info warn error and fatal info logfile string The destination file for the CB structured logs Accepts a file location stderr or stdout maximumpublishsize int Sets the maximum allowed MQTT publish size in bytes Accepts INTmbkb If no modifier is present will assume bytes 5MB maxprocs int The number of system threads to use Note that this does not apply to duktape 1 messagingaddr string The address the mqtt broker will listen to 1883 messageauthaddr string The address the messaging auth server will listen on 8905 messageauthwebsocket string The port to listen on for webosocket mqtt authorization 8907 messageauthusetls bool Should SSL be used for messaging authorization false messagingurl string Configures the external messaging url for the platform pprofcpuinterval int The length of time in minutes to wait between creating successive pprof cpu profiles 20 pprofcputime int The length of time in minutes to gather pprof cpu profiling data 20 pprofmeminterval int the length of time in minutes to wait between creating successive pprof heap profiles 5 pprofmaxfiles int The maximum number of cpu heap and debug profiles to retain 0 indicates keep all of them 30 pprofmaxfileage int The maximum amount of time specified in minutes in which to retain cpu heap and debug profile data files 1440 rpcport bool Sets the rpc listening port 8950 rpctimeout int Sets the timeout for all rpc calls either within platform or platform to edge 15 score string The name of the scoring function to use sqlitepath string The path to the sqlite3 db for platform data clearbladedb sqlitepathusers string The name of the scoring function to use clearbladeusersdb store string The key value store to use Valid options are dummy and etcd dummy storeaddr string A comma seperated list of etcd addresses Only needed if etcd is specified as the value of the store argument storeanalytics bool Should we store analytics or just drop them true storelogs bool Should we store code service logs or just drop them true storemessagehistory bool Should we store mqtt message history true synctransport string Sets the type of transport to utilize between edge and platform when syncing Default is mqtt Other options are amqp tcp and stub mqtt tls bool Enables TLS false url string Configures the external url of the platform used by Code Services when supplying redirects and urls to call for more information websocketmessagingaddr string the port to use for messaging websockets 8903 The rest of the administration has been covered elsewhere in terms of manipulating users resources Configuring the Operating System We usually recommend using supervisorhttpsupervisordorg supervisord with the platform But you can run it however you like as long as the appropriate ports are open We recommend running on RHELCentos or Ubuntu Configuring your integrated data stores The platform should accommodate itself to any changes you make in your data stores as long as the information on where to find the stores ip database name login info has not changed\"},{\"title\":\"Subcommands\",\"href\":\"/1-platform_concepts/Administration/Subcommand\",\"content\":\"Clearblade provides easy to use subcommands for updating different aspects of its platform Subcommand and its use are documented in the table below Subcommand Description Example setadmin When a platform is installed for the first time there are no Platform Administrators So you need to promote a dev to admin so he can access the adminonly endpointsclearblade setadmin foobarcom setpkey This command is used to update or replace existing platform keyclearblade setpkey platformkey IMPORTANT Subcommands need to be run by the user that started the ClearBlade server or by root\"},{\"title\":\"Trial\",\"href\":\"/1-platform_concepts/Administration/Trial\",\"content\":\"This Trial guide will provide the instructions for setting an instance of the ClearBlade platform that runs on Amazon EC2 Before you will be able to use the trial you will need to get a trialKey and a registrationKey from your ClearBlade contact Email salesclearbladecom for more information We will complete the following steps 1 Provision a cloud instance 2 Install gcloud tools for accessing ClearBlade docker container registry 3 Install docker 4 Pull ClearBlade docker images 5 Set trial and input variables 6 Create Containers The total process should take about 30 minutes NOTE Commands that include ITALICTEXT are variables that will be custom to your installation Provision your Cloud instance Complete the below section based on your operating system or cloud vendor Using an Amazon EC2 instance 1 Define a new instance For trial ClearBlade recommends Ubuntu Server 1404 LTSHVM SSD Volume Type Free tier eligible Set the network group to include the following settings Port Protocol Source 443 tcp 00000 80 tcp 00000 8904 tcp 00000 1883 tcp 00000 22 tcp 00000 2 Shell into your newly created instance 3 Go to the section Install Container Tools Using a gCloud instance 1 Install the gcloud sdk cli tool locally curl httpssdkcloudgooglecom bash exec l SHELL gcloud auth login Now follow the link and copy paste the auth token into your terminal gcloud config set project apiproject320446546234 2 Create a new VM instance gcloud compute instances create image containervm zone uscentral1a machinetype n1standard1 tags httpserverhttpsserverplatform 3 SSH into VM instance gcloud gcloud compute ssh zone uscentral1a 4 Add your user to the docker group sudo usermod a G docker 5 Go to the section Install Container Tools Install Container tools Make the following shell commands 1 export CLOUDSDKCOREDISABLEPROMPTS1 2 curl httpssdkcloudgooglecom bash 3 exec l SHELL 4 nano cbAuthjson paste in the following json object privatekeyid 93c21159545a5eda0350badd1ac88d3e192ad24f privatekey BEGIN PRIVATE KEYnMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCxcEutj1K6vu1UnsZlETTLIGXVHnaG1xESLZozFb2NlJykZX2kdcxgyZNZ3EbKdvKsp9nvY48IETc5NnREFCLbrfSohzDzRV5VEuSLshkqb4CACB2ZTLVnXOHm4gKad0h3qXZ9G174bnLsCdPPNVKe7JjxLhZauLbfWidyyCM6OWjwXzESSO7B1Nz7Pvq0xVY6hgfaxySB3nyyvaD5TX8vYD1Pzt8YPOAdmM4xm4CqDWt2SvJxURiS0Wqe1hHliWGaTaYMb7X1C3nOO7UqTgTmOF6mPADd20X1MuzS0BH7i87zbfB39uS1PJsD7YlOZ2kzA9Ps9hn48fK8bCTAgMBAAECggEAMaITySy6G3qksHgtQynE9qwIXkv9maWpde9sMyDpRvbnJznFEXPMZOxIAW515CGOT2KfKgArmUCaYIqjJnvcNfGHVNCUgri41lsisT6vSALndcTPYr5OThLGres6UQ9jx8Gb6uewaGNPZIArO17TCZlu8Ctq1bhMVNEznkfd5nFGazFURTzVeuebiEVg10NYZ5fz209Qi45rBf1nB08U65KOpVJQ92K8ITGCQDEeVUnXFZtmbMKOmUpDXbCaZgOpnIcLpJeE8b3Ry9AAdnj3esbIHhYDxNFOEnVrVLVGCLFny3tJl05pwbsxAiJ4FpGtk47JAQAhZwOsG4UWsPqgQKBgQDmpldqOiL8qXHGDUtnFQuYI5I0nTlDIPVNEEoQ1GlV1GFzikWGIpD4N6kffafiAh3JJgD0Xsji2Krzy5np846vu0ZMyn0QqP9UaFFemMqdIV7Uun4pIyRTCbARntJupTtwlGQXvhotL9JqnrVb3qqifXIlM5JmqwViZzl2AwKBgQDE8Mis3mbAkuCrPSwuQ39DH8fPmNsbvPhniB2c7GqsoRWKh4kAWBk6WLPr5nTlrL0LbkyIkgSCgHXBcDkZ5tScodXC7lmd27nQODUMjzhbDnaqgiF7V2dwgDURw0Y5ak1QvW9RCorOeTdG1jkZs25liMAG2Y8EnnInCYd9eMQKBgBZobKA1N7byQ1JpcjmdYTnV8rwqVijWZ95yaJO8JzMoOftoHniCnTDwP2cGzyue5wPmxEr5dmzLffhHfILkqc6q37EYVggAwZRSC53i6MEDWwOnXjli56GFnGxp0KndNaQfVoYTvkO31Nr2bogA1fQJqqovuEkmAZSXvuAoGAaLmpn3NNEIAqe0jBraAaYidAZ5JfIXbxlh9dtDZb4SFUe8YYRwiSEcbNlmosS136ATnQcGpubLlJlTAIDO1TWRpyAcXIR0bHdI4PF6ipTTJ5w94DMXtkvflGOpkFyGEcn0AyMP0od2gH3dQHBx3r06UiiAH03XzofKdTAmECgYEAy2Uhi2PHIzfk1dUfsoKRnTPcfs2VTuln5eeF8NwwNtUxoHP0T2Xl3fNWGuez2mxJ8mniq8QXSGZ1Gk2TLYtnxh2ufKdZBooAv17JR1Fm9dSRlWl5sRNxg7OBR3g4EfwZyWdALlAug57sfyMGvnnd384DBt9JQ67KXyUBHEBz2Iu003dnEND PRIVATE KEYn clientemail 32044654623419ecrjc8uhbfus4vh4jh4sceo7m8iu7fdevelopergserviceaccountcom clientid 32044654623419ecrjc8uhbfus4vh4jh4sceo7m8iu7fappsgoogleusercontentcom type serviceaccount save and quit 5 gcloud auth activateserviceaccount keyfile cbAuthjson 6 gcloud config set project apiproject320446546234 Install Docker 1 Request the installation curl sSL httpsgetdockercom sh 2 Add your user to the docker group sudo usermod aG docker USER Exubuntu 3 Exit your shell session exit 4 Restart your shell session ssh i mykeypem ubuntu54111 Pull Docker ClearBlade Images 1 gcloud docker pull gcrioapiproject320446546234cbpostgres200 2 gcloud docker pull gcrioapiproject320446546234clearblade200 3 gcloud docker pull gcrioapiproject320446546234cbnginx200 4 gcloud docker pull gcrioapiproject320446546234cbconsole200 Set ClearBlade Trial Key 1 echo YOURTRIALKEY devkey Create Containers 1 docker run name cbdata v varclearbladedatavarlibpostgresqldata gcrioapiproject320446546234cbpostgres200 true 2 docker run d name cbpostgres volumesfrom cbdata restart always gcrioapiproject320446546234cbpostgres200 3 docker run d name clearblade v varclearbladelogvarlog e DEVKEYcat devkey p 18831883 p 89048904 link cbpostgrescbpostgres restart always gcrioapiproject320446546234clearblade200 4 docker run d name cbconsole restart always gcrioapiproject320446546234cbconsole200 5 docker run d name cbnginx p 8080 p 443443 restart always link cbconsolecbconsole link clearbladeclearblade gcrioapiproject320446546234cbnginx200 Browse your newly instantiated platform 1 Open a local web browser 2 Enter the IP address of your server 3 In the top right select Sign Up 4 Use the registration key you have been provided 5 Complete the new developer form You are now ready to complete your desired tutorial iOS4developerreferenceiosTutorial Android4developerreferenceandroidTutorial JavaScript4developerreferencejavascriptTutorial See the documentation for more information\"},{\"title\":\"Update\",\"href\":\"/1-platform_concepts/Administration/Update\",\"content\":\"Prior to upgrading ClearBlade always recommends doing a complete backup for restoration purposes The following backup processes are available depending on restoration needs 1 Use standard linux imaging snapshot tools Will ensure to protect both the machine configuration ClearBlade configuration and System information 2 Execute PostgresSQL database dump Will ensure to protect ClearBlade configuration and System information 3 Use the ClearBlade CLI to export systems individually Will ensure to protect System information The upgrade process will execute the following changes Potentially Modify the database schema Potentially Modify the configuration of nGinx Upgrade all platform based binaries and developer console html5 located on the local machine Restart the platform The upgrade process will not Remove the existing data Modify any clustering configuration that has been done Modify any port or networking configurations To run the upgrade complete the following commands from the linux command line 1 tar xvf platformtargz This will unpack the installation files 2 cd deployinstallScripts 3 sudo updatesh This will perform the update tasks\"},{\"title\":\"Administration\",\"href\":\"/1-platform_concepts/Administration/_default\",\"content\":\"\"},{\"title\":\"Analytics\",\"href\":\"/1-platform_concepts/Analytics\",\"content\":\"Analytics allows the platform developer to view a history of requests users have made to the platform The platform stores a small amount of metadata on each request the IP it came from the date what was requested and on what resources There are several types of calls that can be made Storage Size Count Event Totals Event List and User Events Storage size allows the developer to query the size in bytes of regular collection tables stored within the platform Count gets the count of rows Event Totals gets the total number of requests for each type of event This is intended to provide a summary of actions the users have requested from the platform over periods of time Event List allows the developer to drill down and returns a selection of discrete events that have been performed against the platform User Events is the previous Event List but queryable by user This is particularly useful for auditing Note that analytics calls are only available to developer users Scope A key concept to analytics is scope Scope is the breadth of the dataset There are several scopes The largest scope is Platform which allows the user to to see the totals for the entire platform including every system and its subcomponents ScopeDescription PlatformThe largest scope It aggregates data across every system on the platform OrganizationWhen a developer registers they provide an organization This allows the data to be aggregated across any developer and developers systems who belong to the specified organization DeveloperCovers the systems owned by a specific developer SystemOnly that system and its subcomponents Event Types Here is a listing of event types that the platform records Event TypeDescription CreateThe creation of some kind of resource in the platform a collection or an item within the collection Password ResetA user resets their password UpdateUpdating a resource within the platform Dev AlterA developer altering a resource in the platform Dev Password ResetA developer resets their password Dev DeleteA developer deletes a resource Dev ReadA dev reads a resource out of the platform Dev UpdateA dev updates a resource ReadA user reads Delete A user deletes a resource Dev CreateA dev creates a resource ExecuteA service is executed Dev SaveA developer saves a code service PublishA message is published via MQTT ConnectionA client connects to MQTT LoginA user logs in to the platform LogoutA user logs out of the platform SubscribeA client subscribes to an MQTT topic UnsubscribeA client unsubscribes to an MQTT topic DisconnectA client disconnects from MQTT\"},{\"title\":\"CLI Tool\",\"href\":\"/1-platform_concepts/CLI\",\"content\":\"The ClearBlade Platform includes a command line interface CLI that supports development on a developer PC Using the command line interface developers are able to accomplish the following tasks Author services with their preferred IDEs Test services locally Source control the systems Import and Export their systems between ClearBlade Platform Instances Promote code between dev test staging and production systems Generate SOAP client services Get the CLI from GithubstaticimggithubpngClearBladecbclihttpsgithubcomClearBladecbcli\"},{\"title\":\"Code\",\"href\":\"/1-platform_concepts/Code\",\"content\":\"Code provides developers the ability to implement a backend API necessary to make web mobile and IoT apps all perform and integrate in the desired way The ClearBlade Platform makes it easy to author JavaScript that will be securely protected and execute in a highly scalable manner This JavaScript follows the best practices associated with the microservice architectures of today ClearBlade OverviewstaticimgconsoleoverviewoverviewCodepng Within the Code section of a System you can device two types of Code that ultimately make up the application layer of your System Services are available externally and called by clients via HTTP or MQTT Libraries are lines of javascript that can be included into services to provide reusable logic Services A service in the ClearBlade Platform represents the creation of a custom API endpoint This service can be called by clients when specific business function needs to be executed In addition to implementing business logic services are capable of Accessing and modifying data Sending messages Integration with legacy enterprise systems cloudbased applications the local server IO Services take parameters that are simple string or complex JSON structures Responses from Services can be as complex as the developer desires Each Service is secured via the System authority model that allows only defined roles execution priviledges Libraries Libraries allow for creating reusable logic within a System Libraries contain JavaScript with all the same functional capabilities of Services but are not directly exposed to the clients A Service that requires a Library will have the library code injected into the Service at the beginning of the service execution Libraries are valuable for creating global style variables helper functions or just improving the readability of a service There are two types of libraries Native Libraries Native Libraries are not editable by developers and are available in all Systems They contain code written by ClearBlade that performs lowlevel highperformance interactions These libraries include clearblade crypto filewriter geo http jsutil log mailer netcb and oauth2lib Custom Libraries Developers may create their own reusable libraries that execute within the scope of a single System These libraries contain javascript that will be injected into the beginning of each service that requires them\"},{\"title\":\"Data\",\"href\":\"/1-platform_concepts/Data/_default\",\"content\":\"\"},{\"title\":\"Collections\",\"href\":\"/1-platform_concepts/Data/collection\",\"content\":\" Simple Abstraction The ClearBlade Platform allows for exposing database tables views and collections as simple structures available from REST based APIs Whether you want to create and store information in the ClearBlade Platform itself or map to existing databases the ClearBlade Platform makes it easy ClearBlade OverviewstaticimgconsoleoverviewdataOverviewpng Cloudbased The ClearBlade platform provides the ability to create new data structures and make them available via a REST API or MQTT This data is stored and secured within the ClearBlade platform The ClearBlade platform provides relational based queries while also storing document styled elements The cloud structures allow for creating custom columns with explicit type definitions ClearBlade OverviewstaticimgconsoleoverviewcloudDataOverviewpng\"},{\"title\":\"Connections\",\"href\":\"/1-platform_concepts/Data/connection\",\"content\":\" Connections The data integration piece of the ClearBlade Platform allows the developer to treat preexisting databases as a part of the Platform This means that 3rd party DBs like like DB2 Oracle or SQLServer for example would have the same REST api and interaction with code servicesmessaging as a Platform cloud collection At the same time all of the security measures provided to the platform would be applied when accessing the existing database Effectively one can map a table to a collection At the same time the Platform disallows manipulation of the datastores schema adding removing columns etc via the REST api so developers and a database administrator DBA would still maintain control over their database structure ClearBlade OverviewstaticimgconsoleoverviewconnectionDataOverviewpng\"},{\"title\":\"Query\",\"href\":\"/1-platform_concepts/Data/query\",\"content\":\" General Structure javascript this is the outer array in case of an OR this is an array that holds all of the individual filters this is an object that holds all of the keyvalue pairs for a particular Operator EQ this is the operator stringColumn stringValue the first value is the name of the column the second is the value you wish to match GT this is another operator intColumn 4 if we had an or it would start after this line This structure would represent a query for all items whose stringColumn equal stringValue and whose intColumn is greater than 4 This structure can be used to match when doing a GET PUT or DELETE but each have this structure wrapped in an object specific to that method Method Specific Structure GET A request that uses the GET method should have the following in a querystring with query as the key javascript SORT the sort key dictates what order the data is returned in ASCcolumnName the key for each entry in sort is either ASC or DESC if sorting by more than one column the next entry would get its own object following this line PAGESIZE 100 this is the amount of items that will be returned from a request default 100 PAGENUM 1 this is the page number based on the above pagesize given default 1 FILTERS EQ stringColumn stringValueGT intColumn 4 this is the same stucture as defined in General Structure above This is then URL encoded and transmitted like javascript platformIPapiv1dataquery7B22SORT223A5B7B22ASC223A22columnName227D5D2C22PAGESIZE223A201002C22PAGENUM223A2012C2022FILTERS223A205B5B7B22EQ223A207B22stringColumn223A2022stringValue227D7D2C7B22GT223A207B22intColumn223A2047D7D5D5D7D0A PUT A request that uses the PUT method should have the following in the body of the request javascript queryEQ stringColumn stringValueGT intColumn 4 this is the same structure as defined in General Structure above set column newValue DELETE A request that uses the DELETE method should have the following in a querystring with query as the key javascript EQ stringColumn stringValueGT intColumn 4 this is the same structure as defined in General Structure above This is then URL encoded and transmitted like javascript platformIPapiv1dataquery5B5B7B22EQ223A207B22stringColumn223A2022stringValue227D7D2C7B22GT223A207B22intColumn223A2047D7D5D5D Filtering Filtering is an aspect of querying Essentially it is the part of the query analogous to the where clause in a regular SQL query Lets refresh ourselves with the filtering structure javascript this is the outer array in case of an OR this is an array that holds all of the individual filters this is an object that holds all of the keyvalue pairs for a particular Operator EQ this is the operator stringColumn stringValue the first value is the name of the column the second is the value you wish to match GT this is another operator intColumn 4 if we had an or it would start after this line On the outermost level we have the OR queries Or queries hold multiple AND queries inside of them Like so javascript Foo is Equal To Quux one Or Branch Bar is Not Equal To Spam another Or Branch What this translates to is WHERE Foo Quux OR Bar Spam Now lets cover AND statements javascript Foo is Equal To Quux Bar is Equal To Spam This translates to WHERE Foo Quux AND Bar Spam Its important to note here that we still have the OR wrapper around the query but it only has one branch We can add arbitrarily many conditions like this together and well still be presenting the platform a valid filter As long as the filter matches an entry in your collection it will return something At present JOINs across collections is not allowed but may be added in the future\"},{\"title\":\"Types\",\"href\":\"/1-platform_concepts/Data/types\",\"content\":\"The standard platform collection can handle the following data types Type Name Representation StringA standard string of characters UTF8 encoded IntA 32 bit signed integer BigintA 64 bit signed integer FloatA 32 bit floating point number DoubleA 64 bit floating point number BlobA binary blob of arbitrary size UuidA standard Uuid sometimes called a GUID TimestampAn RFC 3339 timestamp BooleanA boolean value true or false In addition null values are allowed in all collection columns except the itemid column which is supplied by the platform When accessing data from a collection the platform returns values in JSON format Therefore numeric values will be returned with a data type of Double The platform returns Blobs as base64 encoded strings\"},{\"title\":\"Devices\",\"href\":\"/1-platform_concepts/Devices/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/1-platform_concepts/Devices/overview\",\"content\":\"The ClearBlade platform has the concept of devices physical entities that interact with your system Devices are similar to the users platform concept in that a device can authenticate itself with the system and perform various operations within the system The ability to perform such operations is governed by ClearBlades RoleBased Access Control RBAC in the exact same way that it is applied to users Just like users devices exist in a device table and by default a device is allowed to only modify its entry in the table Any device can have its own custom fields fields that may only apply to that device but could apply to any number of devices Thus the fieldscolumns in the device table are not homogeneous certain fields are available for some devices but not others For example you might want to define temperature sensor devices that have a temperature custom field You could also define torque wrench devices that have a current torque setting field Device Authentication While authentication for users is accomplished using passwords devices are authenticated using preshared keys These keys can either be manually set when creating devices or they can be generated by the system for you To set up keys during device creation CREATE admindevicessystemKeyname three device attributes need to be set 1 allowkeyauth Boolean Set this to true 2 activekey String This value will be the current active key and this must be shared with the device or device surrogate prior to device authentication This is what is passed in when authenticating the device 3 keys String This is a commaseparated list of keys that can be cycled through using key rotation Again these keys are generated by the caller during the create operation If you want the system to generate keys you use the CREATE admindeviceskeyssystemKeyname endpoint This will create a keyset set the activekey and set allowkeyauth to true It will return the newly generated info To rotate keys use UPDATE admindeviceskeyssystemKeyname All this does is set the new activekey It is returned in the response To turn off keybased authentication use DELETE admindeviceskeyssystemKeyname To read the current activekey and keys attributes use GET admindeviceskeyssystemKeyname Finally to authenticate a device use POST apiv2devicessystemKeyauth endpoint In the POST body you pass two keyvalue pairs deviceNamenameofdevice activeKey valueforactivekey Edge Synchronization Like users device state is automatically synchronized between ClearBlade and its Edges Enabled and Disabled Devices Unlike users devices can either be enabled or disabled This roughly corresponds to commissioningdecommissioning devices in a realworld environment and will be discussed in more detail later\"},{\"title\":\"Cloud\",\"href\":\"/1-platform_concepts/Integration/Cloud\",\"content\":\"\"},{\"title\":\"DB2 System I\",\"href\":\"/1-platform_concepts/Integration/Databases/DB2\",\"content\":\"DB2 System I integration is a fairly simple process for the platform developer In order to connect to a DB2 database first create a new collection and fill in the Connection radio button We will then require a few pieces of information Field NameDescription Database NameThe name of the database to connect to as on the server IP addressThe IP address of the server Be sure to use the IP relative to the platforms install location So if it is a subnet use the subnet address PortThe port for connecting UsernameThe database user PasswordThe database users password Table Name The table you wish to correspond to the collection SchemaIf there is a schema supply its name here LibraryThe same for the library CatelogThe same for the catelog Please note that as with all connect collections you will be able to perform CRUD operations on the table adding or removing columns or changing datatypes or dropping the table itself is disallowed by design\"},{\"title\":\"Microsoft SQL Server\",\"href\":\"/1-platform_concepts/Integration/Databases/MSSqlServer\",\"content\":\"Once intragrated you will be able to treat a MSSQL server instance like any other clearblade collection You will be able to use it for data calls triggersfrom services and other operations Field NameDescription Database NameThe name of the database to connect to as on the server IP addressThe IP address of the server Be sure to use the IP relative to the platforms install location So if it is a subnet use the subnet address PortThe port for connecting UsernameThe database user PasswordThe database users password Table Name The table you wish to correspond to the collection\"},{\"title\":\"Mongo\",\"href\":\"/1-platform_concepts/Integration/Databases/Mongo\",\"content\":\"\"},{\"title\":\"MySQL\",\"href\":\"/1-platform_concepts/Integration/Databases/MySQL\",\"content\":\"\"},{\"title\":\"Postgresql\",\"href\":\"/1-platform_concepts/Integration/Databases/Postgres\",\"content\":\"The ClearBlade platform runs off of a postgres instance internally that stores configuration and administration information and default collection information If you have external Postgresql instances you wish to integrate with the ClearBlade platform you can do so like any other Connection Collection Field NameDescription Database NameThe name of the database to connect to as on the server IP addressThe IP address of the server Be sure to use the IP relative to the platforms install location So if it is a subnet use the subnet address PortThe port for connecting UsernameThe database user PasswordThe database users password Table Name The table you wish to correspond to the collection Setting up Postgres for a local ClearBlade instance Mac OSX Installing Postgres Verify that you have Brew installed brew v If needed install brew usrbinruby e curl fsSL httpsrawgithubusercontentcomHomebrewinstallmasterinstall Next update brew to the latest build brew update Finally install postgres brew install postgresql94 If an installation error is recieved try brew install homebrewversionspostgresql94 Configure Postgres First start postgres brew services start postgresql94 Next open the postgres console psql d Add roles and create seed databases CREATE ROLE cbuser LOGIN PASSWORD CREATE DATABASE admin CREATE DATABASE userdata Close the console q\"},{\"title\":\"Databases\",\"href\":\"/1-platform_concepts/Integration/Databases/_default\",\"content\":\"\"},{\"title\":\"Java\",\"href\":\"/1-platform_concepts/Integration/Java\",\"content\":\"\"},{\"title\":\"Legacy\",\"href\":\"/1-platform_concepts/Integration/Legacy\",\"content\":\"\"},{\"title\":\"Libraries\",\"href\":\"/1-platform_concepts/Integration/Libraries\",\"content\":\"\"},{\"title\":\"REST\",\"href\":\"/1-platform_concepts/Integration/REST\",\"content\":\"\"},{\"title\":\"SOAP\",\"href\":\"/1-platform_concepts/Integration/SOAP\",\"content\":\"\"},{\"title\":\"Integration\",\"href\":\"/1-platform_concepts/Integration/_default\",\"content\":\"\"},{\"title\":\"Integration Overview\",\"href\":\"/1-platform_concepts/Integration/overview\",\"content\":\"The ClearBlade Platform provides deep integrations for exposing cloud and legacy system information to a ClearBlade System At the core it uses the following techniques for archieving this integration SQL and NoSQL Database drivers REST most cloud offerings SOAP legacy enterprise integrations Java binding for legacy jars Sockets for legacy protocols File IO for file system interactions MQTT connect or bridge with external MQTT brokers DataBases ClearBlade connect directly to the following databases Postgres MySQL MongoDB Cassandra DB2 i DB2 distributed Microsoft SQL Server Oracle Contact ClearBlade for additional available databases Cloud Services Almost all cloud service offerings are available via a ClearBlade service leveraging REST based APIs ClearBlade has validated support for the following offerings Google Drive Google Calendar Box Dropbox Twilio Kandy Zendesk Nest Amazon Cloud SendGrid Weathercom Spotify SalesForce SugarCRM WorkDay IFTT Facebook Twitter gCloud Slack Sharepoint Office365 Shopify Paypal LinkedIn Contact ClearBlade for additional Cloud integration requests Transmission Legacy supported protocols that have been validated are SOAP The ClearBlade CLI offers a client generation tool This tool generates Libraries that are capable of making the SOAP calls and transfering the responses into simple JSON objects RPG Calls RPG programs running on System i CICS Call CICS transactions OPC Open communication and sendreceive messages with OPC Contact ClearBlade for additional legacy integration requests Onpremise Enterprise Software ClearBlade provides specific connects for working with existing Enterprise Software This includes but is not limited to InfoBright SAP Magento Tessitura WebSphere Netsuite Rational MS Visual Studio Supported Clouds ClearBlade Platform supports the following Cloud architectures but is not limited to Google Cloud Azure Linode Digital Ocean RackSpace Amazon EC2 Softlayer MicroProcessors Micro Controllers ClearBlade Platform SDKs supports the following IoT compatible processors but is not limited to Raspberry Pi Arduino BeagleBone Pico SystemonModules Atmel\"},{\"title\":\"Messaging\",\"href\":\"/1-platform_concepts/Messaging/_default\",\"content\":\"\"},{\"title\":\"Connections\",\"href\":\"/1-platform_concepts/Messaging/connections\",\"content\":\" Connection Details There are a other capabilities that MQTT provides that allows one to tune the protocol a little Last will and testament The biggest of these features is the LastWillAndTestament LWAT message LWAT messages are publish messages that are packaged up with the connect packet and held by the server for the duration of the connection If the client loses the connection with the broker say by missing a ping or closing the connection without sending a disconnect packet then the LWAT will be sent by the broker on the topic specified in the connect packet A common use case would be for clients to have their LWAT message publish on a topic dedicated to these messages A subscriber on that topic could then restart the clients or forward the reports to a different service Note that the LWAT is completely optional Retain Another feature is the retain flag If the retain flag is set then the message will be retained for that topic and sent to any new subscribers Sending a message with the retain flag overwrites the currently the currently retained message a particular topic\"},{\"title\":\"Message Relay\",\"href\":\"/1-platform_concepts/Messaging/message_relay\",\"content\":\"The ClearBlade Message Relay is a way for edge MQTT clients to communicate with the Novi MQTT clients as well as other Edge MQTT clients In order to achieve this there are a few reserved MQTT topic paths that one needs to follow for the message relay to work The message relay uses the following 6 topic paths to route messages between edges and their parent platform Message relay applies to communication between edges and platform within one single system Edge to Platform message For sending a MQTT message from the edge to its parent platform use the following topic path platform For receiving a message on the platform you need to subscribe to the same topic Platform to Edge message For sending a MQTT message from the platform to an edge connected to it use the following topic path edge For receiving a message on the edge you need to subscribe to the same topic Edge to Edge message For sending a MQTT message from an edge to another edge use the following topic path edge Here the should be the ID of the other edge that will receive the message For receiving a message on the other edge you need to subscribe to the same topic Platform to All Broadcast message For sending a MQTT message from the platform to all edges use the following topic path broadcast For receiving a message on all the edges you need to subscribe to the same topic Edge to All Broadcast message For sending a MQTT message from an edge to all other edges and the platform use the following topic path broadcast For receiving a message on all the other edges and the platform you need to subscribe to the same topic Edge to Edge and Platform message For sending a MQTT message from an edge to another edge and to the platform use the following topic path edgeAndPlatform Here the should be the ID of the other edge that will receive the message For receiving a message you need to subscribe to the same topic on the platform as well as the other edge\"},{\"title\":\"Overview\",\"href\":\"/1-platform_concepts/Messaging/overview\",\"content\":\"With the ClearBlade platform developers can make their client applications behave in realtime using Messaging Using ClearBlade Messaging apps are able to publish and subscribe to events and data within the system using a simple topic Although ClearBlade uses an open standard for all message based communication the platform uniquely provides both scalability and security Learn more at ClearBlade MQTT Reference4developerreferenceMQTT Messaging simplifies and optimizes live group chat online gaming Messaging is critical to solutions for IoT device interactions Extremely fast communications ClearBlade OverviewstaticimgconsoleoverviewoverviewMessagingpng What makes the ClearBlade Messaging so powerful is its ability to integrate with the other elements of a System Messages can be sent by code services Messages can trigger events to execute Messages can synchronize data around a single source of truth Finally the Messaging architecture is completely integrated with the security model already in place meaning that Auth tokens used over HTTP and the associated role based priveledges are also valid and used in Messaging Open Standards ClearBlade leverages the MQTT protocol for its messaging and makes it available both in its raw form or through websockets for browser based apps The protocol is extremely lightweight simple to use and sits ontop of the widely available TCP network layer It uses a publishsubscribe model rather than the less efficient requestresponse model This means a message may be published to a topic and received instantly by many subscribers Finally the ClearBlade platform implements the full specification of MQTT to allow for multiple Quality of Service settings that best fit a developers use case If you wish to read the specification check it out at MQTT Oasis specificationhttpdocsoasisopenorgmqttmqttv311osmqttv311oshtml MQTT specification\"},{\"title\":\"QoS\",\"href\":\"/1-platform_concepts/Messaging/qos\",\"content\":\" Quality of Service MQTT was designed to be rugged The sensors or what have you publishing may not always be available They may go offline for whatever reason A bird picked up the sensor or the car drove through a tunnel The real world is pretty unpredictable by the standards of application design While we cant ever be 100 we can mitigate some of these problems MQTTs Quality of Service can help The quality of service defines the semantics of how the message published is delivered There are 3 qualities of service and a few options that are related that well cover here The ratings for quality of service are 01and 2 Otherwise known as At most once At least once Exactly once respectively QOS 0 or At Most once At most once means that when a message is sent from the publisher it is only relayed by the broker once If there is some reason that the subscriber doesnt receive it for example a netsplit or their incoming buffers are full then that is their fault and the message is lost While this seems pretty dire there are very many messages that dont need 100 accuracy Sometimes the costs of storing messages to be resent outweighs the cost of missing them QOS 1 or At least once With this setting the broker resends the message until it has been acknowledged by the subscriber That means that it is possible for the receiver to get the message more than once because of a gap between transmission and reception times for whatever reason For idempotent operations this is totally okay and is useful sometimes when you want to assure that a message has been received but dont want the heavier semantics of QOS 2 QOS 2 or Exactly once Quality of service 2 will communicate with the subscriber before publishing and ask them if theyre ready to receive the publish It will hold onto the publish until they assent to having it sent to them Useful in the case of chat programs and other highly important but perhaps not millisecondsensitive transactions\"},{\"title\":\"Topics\",\"href\":\"/1-platform_concepts/Messaging/topics\",\"content\":\" Understanding Topics We mentioned above that MQTT separates messages via topics These topics exist in a hierarchical tree For example SportsAmerican FootballNFLBearsScores and SportsAustrialian FootballAFLCrowsScores are two equally valid topic paths While it isnt a rule that topics go from large scopes all of sports to small scopes team scores it is a very common idiom to do so This is due to the semantics behind subscriptions There are three kinds of subscription The first is a regular subscription SportsGolfTournamentsWinners here is a good time to note that a topic consists of any UTF8 character excluding the and runes The last two subscriptions are wildcard subscriptions That means they are subscribed to multiple topics simultaneously The first wildcard well discuss is the single level wildcard otherwise known as the wildcard The single level wildcard allows a subscription to skip an entire level of the topics path In our experience this is the more difficult of the two types of wildcard to visualize so well use some examples Lets say we have a single level wildcard in our subscription SportsTennisWinners Publish NumberPublish Topic Receives 1SportsTennisWimbledonWinners 2SportsTennisFrench OpenWinners 3SportsTennisWinners 4SportsTennisUS OpenMixed DoublesWinners 5SportsProfessional EatingOystersWinners Okay lets break down what happened 1 2 matched because they had the same path preceding the wildcard and the same path after the wildcard The only difference between the two was the topic section that took place in the wildcard 3 matched preceding the wildcard but then didnt have anything after 4 matched the preceding but had too much going on after the single level wildcard to match The fifth while the wildcard position and the topic portions after the wildcard matched the preceding didnt match Pretty simple so far Here is where it gets crazy You can have an arbitrary number of single level wildcards in a subscription Here are some examples Subscription This one says Give me any publish whose topic is four sections deep So foobarbazquux and spameggspotatobiscut match but foobarbazquuxspam do not match Subscription SportsTexasScores This one says give me the scores of any sport in Texas So SportsFootballTexasCollegeScores matches As does SportsRivalriesTexasBaylorScores But SportsTexasUTexaseventstailgaiting does not I want to point out that there is no set way of structuring topics with regards to the information youre trying to model so when you decide upon your models keep the wildcard subscribes in mind The second kind of wildcard has immensely simpler semantics The multilevel wildcard The multilevel wildcard subscribes to every topic that is on the same level or deeper in the hierarchy than the hash The simplest case is simply subscribing to which will deliver every single message published on any topic Lets run through some examples Our subscription topic is SportsF1 Publish Number Publish TopicReceives 1SportsF1Circut of the Americas 2SportsTennisFrench OpenWinners 3SportsF1Hungarian Grand PrixAccidentsWheel DamageLeftFront 4SportsTennisUS OpenMixed DoublesWinners 1 most certainly matches Its only one deeper 2 does not match we veer off at the Tennis subsection 3 is incredibly specific and deep but still matches due to our multilevelwildcard 4 Does not match once again because of Tennis Its important to note that a subscription topic like FooBar is invalid Once a hash is in the subscription that hash is the last element in that subscription Keep wildcard hashes in mind while modeling your security for MQTT ClearBlade will have a solution to manage this in the coming future though by providing full Read and Write ACL on arbitrary topic trees\"},{\"title\":\"Systems\",\"href\":\"/1-platform_concepts/System\",\"content\":\"When a developer ready to begin using the ClearBlade Platform the first element that must be created is a System ClearBlade OverviewstaticimgconsoleoverviewoverviewSystempng This System represents a backend for the mobile apps web dashboard fat clients or IoT networks that need a common system of record The System contains an API for clients to consume data saved in well defined structures custom business logic messages being published a role based authority model for users and devices\"},{\"title\":\"Timers\",\"href\":\"/1-platform_concepts/Timers\",\"content\":\"Timers provide a mechanism where a ClearBlade code service can be scheduled to execute at certain time intervals Timers are similar to Unix cron jobs with a simpler scheduling mechanism The key pieces of a timer are its name description associated code service and schedule The schedule determines when the code service is executed The name of a timer must be unique within a systemapplication The description is optional Schedules A schedule consists of three parts 1 Start date This defines the date in which the timer should become effective 2 Start time This defines the time on the specified Start Date in which the timer should become effective 3 Repeats This specifies how many times the timer should repeat after the first execution 0 zero means run only once 1 means run forever 4 Frequency This specifies the time interval between runs of the associated code service Frequency can be expressed in terms of seconds minutes hours days or weeks With these simple schedule parameters You can specify schedules such as Run forever every five minutes starting now Run 26 times every two weeks starting Friday December 25th 2015 Run once at midnight Execution Context Unlike services that are called by clients and execute with the user privledges the default user context for the timer is the developer who initially created the timer Unless the associated code service specifies a Run as other than caller the timer will always run as the developer who created the timer Secondly other than the standard parameters that ClearBlade passes to code services no parameters are passed to timers\"},{\"title\":\"Triggers\",\"href\":\"/1-platform_concepts/Triggers/_default\",\"content\":\"\"},{\"title\":\"Event Types\",\"href\":\"/1-platform_concepts/Triggers/events\",\"content\":\" Available Events Data ItemCreated ItemUpdated ItemDeleted CollectionCreated CollectionUpdated CollectionDeleted User UserCreated UserUpdated UserDeleted Device DeviceCreated DeviceUpdated DeviceDeleted Messsaging Publish Subscribe Unsubscribe Attributes When you define a trigger you provide the following information 1 The event described above 2 The code service to be executed 3 Filters for the trigger The process for firing triggers is very simple When an event occurs in the system the system passes the event information to the trigger processor The trigger processor searches for triggers that match that event When it finds such a trigger its code service is invoked in the background The system uses trigger filters to perform the match We will now discuss this important matching process Filters and Trigger Matching Each event specifies a set of filters that when the event occurs are passed to the matching system for processing These are then compared to each userdefined trigger for that event Details of how this match occurs is given below An event payload is also passed to the system The payload contains other relevant information about the event The paylood is passed as a proporty or properties to the code service for the trigger For example for the DataItemCreated event there is a property items passed to the code service for the trigger The filters and payload passed for each event are as follows DataItemCreated Filters collectionId collectionName Payload itemsitemId DataItemUpdated Filters collectionId collectionName Payload querythe query used for the update operation DataItemDeleted Filters collectionId collectionName Payload query the query used for the update operation DataCollectionCreated Filters none Payload collectionId DataCollectionUpdated Filters collectionId collectionName Payload changes changeKeychangeVal DataCollectionDeleted Filters collectionId collectionName Payload collectionId UserUserCreated Filters none Payload userId UserUserUpdated Filters userId Payload changes changeKeychangeVal UserUserDeleted Filters userId Payload userId DeviceDeviceCreated Filters none Payload deviceName devicekey val DeviceDeviceUpdated Filters deviceName Payload deviceName changeskey val DeviceDeviceDeleted Filters deviceName Payload deviceName MessagingPublish Filters topic Payload topic body MessagingSubscribe Filters topic Payload userId topic MessagingUnsubscribe Filters topic Payload userId topic How the filtering process works can best described using a couple of examples First lets look at DataItemCreated When creating your trigger you can optionally specify a collection id or a collectionName to apply to that trigger This means that your trigger will only fire when an item is created in that collection If you do not specify a collectionId or collectionName your trigger will be executed whenever any item is created in your system regardless of collection The situation is a bit different when creating triggers for the messaging subsystem Here the system takes into account MQTTs wildcard capability When creating triggers for Publish Subscribe and Unsubscribe you can pass in the topic filter as a topic commands ie it can contain the and path elements See the MQTT documentation for a description of wildcards Of course if you dont use wildcards the match must be exact If for any of events Publish Subscribe and Unsubscribe you do not provide a topic all such events will match and fire your trigger\"},{\"title\":\"Messaging\",\"href\":\"/1-platform_concepts/Triggers/messaging\",\"content\":\"Messaging Events can also cause triggers to start Here the system takes into account MQTTs wildcard capability When creating triggers for Publish Subscribe and Unsubscribe you can pass in the topic filter as a topic commands ie it can contain the and path elements See the Topics documentation1platformconceptsmessagingtopics for a description of wildcards Of course if you dont use wildcards the match must be exact If for any of events Publish Subscribe and Unsubscribe you do not provide a topic all such events will match and fire your trigger\"},{\"title\":\"Overview\",\"href\":\"/1-platform_concepts/Triggers/overview\",\"content\":\"The ClearBlade platform provides a trigger mechanism that lets you respond to specific platform events by executing a code service whenever such an event occurs The events for which you can specify triggers are predefined by the platform and available through the API Terminology note 1 Trigger The platform defines and generates events You create a trigger for responding to each event 2 Events A platform defined internal action generates an event such as User Created Item Updated etc 3 Filter A set of criteria to narrow and refine when a trigger is actually executed For example you could define a trigger to handle all User Updated events or you could define a trigger to only handle User Updated events for user Joe Attributes When you define a trigger you provide the following information 1 The event described above 2 The code service to be executed 3 Filters for the trigger The process for firing triggers is very simple When an event occurs in the system the system passes the event information to the trigger processor The trigger processor searches for triggers that match that event When it finds such a trigger its code service is invoked in the background The system uses trigger filters to perform the match\"},{\"title\":\"Users\",\"href\":\"/1-platform_concepts/Users\",\"content\":\"The ClearBlade Platform allows for Systems to define and customize their own user registry The users that get created have special permissions allowing them to only view and edit properties related to them Users are granted roles see below which then describe and grant users specific authorities Following an oAuth model users are given tokens when successfully authenticated which then allow for all future API calls to be correctly permissioned and audited ClearBlade OverviewstaticimgconsoleoverviewoverviewUserpng Users Roles Permissions The ClearBlade platforms security design is based off of the idea of Role Based Access ControlhttpcsrcnistgovgroupsSNSrbac Some NIST information about RBAC otherwise known as RBAC The central idea is that permissions are applied to roles rather than directly to the user In ClearBlades implementation the users are then associated with those roles You can think of a user on the ClearBlade Platform as a tuple consisting of an identifier and a list of roles There is no root user exposed to the consumers of your applications written with the platform The only user with complete permissions over everything is the Developer user Which is as it says reserved for developers and should never be used from within applications built with the platform The user identifier is important for auditing purposes and general ease of use We use the users identifier to keep records of actions performed by that user in addition to using it for authentication purposes Roles are important because they define the actions that can be performed by the users those roles are associated with These permissions include CRUD on collections and executing code services In the near future they will also include publish and subscribing to certain MQTT topics The process for authenticating to the platform is fairly simple The user performs a POST request against the apiv1auth endpoint with their username password the System Key and System Secret If the login information is valid the user is returned a token The token is valid for a configurable number of days the default is 30 days That token is attached as a header to each subsequent API request The token is required for virtually all transactions within the platform except logging in Session Another simple but important concept is the Session When a user logs into the platform they are issued a token that they must use for every platform request That token will become invalid upon logout or token expiration Each token is associated with a session which is a record of who is logged in at any given moment The session does not correspond to the permissions applied to a role so if the permissions are changed on a role the changes will apply even to users who are currently in a session Creating users can be done via HTTP endpoint or via the GUI It requires an email for the user and a password Other information that the developer may require can be processed via that endpoint Once a user is created it has no default permissions to any resource on the platform Roles must be associated with users The developer must supply the registration sigil their first and last name their organization and an email and password to register Creating Roles This may be done via the GUI or via an endpoint Roles are created and permissions are assigned to them Those permissions correspond to operations on various resources Note that users may have multiple roles So if a user has a role that has certain permissions and has another role that doesnt the user will have the permissions even though one of their roles doesnt specify them Managing users User management may be performed via the API or the GUI Its possible to add and remove roles from users alter the permissions of roles and many other things Note that if you alter or delete a role that change will propagate to every user who has that role Its also possible to delete users from the platform This will immediately stop their session and log them out Rolebased Permissions Roles as we have mentioned in the About section are groups of permissions to be applied to various resources within the platform The permissions that can be applied to a resource vary depending on the resource We shall list the permissions below Resource Type Permission Semantic Meaning CollectionCreateAdd a new item to a collection CollectionReadPerform queries on the collection CollectionUpdateCan update items within a collection CollectionDeleteCan remove items from a collection UsersReadCan read information from the users table ServiceExecutableCan make a request to the code service Is synonymous with read but the end user never sees the Code Message HistoryReadCan read message history PushCan PushJust what it says on the tin can make a push if push is included with your installation Generally speaking permissions map to endpoints The CRUD permissions on a collection map to the POSTGETPUTDELETE HTTP verbs respectively The executable permission maps to calling POST to a code service etc etc\"},{\"title\":\"Concepts\",\"href\":\"/1-platform_concepts/_default\",\"content\":\"\"},{\"title\":\"Administering Adapters\",\"href\":\"/2-console_administration/Adapters/AdapterAdministration\",\"content\":\" Overview Once an adapter has been deployed to an Edge it can be started stopped restarted or undeployed using the ClearBlade Platform developers console The ClearBlade Platform developers console can also be used to view log files associated with the adapter Start Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the Start button If the start button is disabled that would indicate a Start Command has not been specified in the Config tab of the adapter settings See adapter managementAdapterManagement 5 A message will be displayed indicating the adapter was started or an appropriate error will be displayed if the adapter could not be started Stop Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the Stop button If the stop button is disabled that would indicate a Stop Command has not been specified in the Config tab of the adapter settings See adapter managementAdapterManagement 5 A message will be displayed indicating the adapter was stopped or an appropriate error will be displayed if the adapter could not be stopped ReloadRestart Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the ReloadRestart button If the stop button is disabled that would indicate a Stop Command has not been specified in the Config tab of the adapter settings See adapter managementAdapterManagement 5 A message will be displayed indicating the adapter was started or an appropriate error will be displayed if the adapter could not be started Undeploy Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the Undeploy button 5 A message will be displayed indicating the adapter was undeployed or an appropriate error will be displayed if the adapter could not be undeployed View Adapter Logs 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the button 5 The logs will be displayed in the textbox \"},{\"title\":\"Configuring Adapters\",\"href\":\"/2-console_administration/Adapters/AdapterConfiguration\",\"content\":\" Overview Once an adapter has been created in the ClearBlade Platform shell commands or scripts need to be specified on the Config tab within adapter settings so that the adapter can be correctly administered The currently supported commands are Deploy Command A command or shell script that will be run after the files are installed on a ClearBlade Edge Startup Command A command or shell script that will be executed to start the adapter on a ClearBlade Edge Stop Command A command or shell script that will be run to stop the adapter on a ClearBlade Edge Status Command A command or shell script that will be run to determine the status of the adapter on a specific ClearBlade Edge Undeploy Command A command or shell script that will be run to uninstall the adapter from a ClearBlade Edge Logs Command A command or shell script that will be used to retrieve any logs printed out by the adapter while it is Commands specified in the Config tab of the adapter settings dialog are executed from the directory where the Edge was started Any adapter configuration commands and shell scripts need to account for this The commands contained on the Config tab of the adapter settings dialog are described in this document Deploy Command When an adapter is deployed any files specified in the Files tab of the adapter settings dialog will be copied to the directory where ClearBlade Edge was started The deploy command therefore is optional In order to prevent naming collisions resulting in overwritten files it is recommended that an adapters files be copied to an adapter specific directory The files can be copied using either a shell command or a shell script If using a shell script to accomplish tasks needed for deployment the shell script must be included as one of the adapter files in the Files tab of the adapter settings A best practice would be to provide an archivezip file containing all the files required to execute and manage an adapter The deploy command would the simply be a shell command to extract the contents of the archive for example tar xvzf MyAdaptertargz C MyAdapter A sample shell script named deploysh is as follows binbash mkdir ShowTimeAdapter mv startsh ShowTimeAdapter mv stopsh ShowTimeAdapter mv statussh ShowTimeAdapter mv deploysh ShowTimeAdapter mv undeploysh ShowTimeAdapter mv showTime ShowTimeAdapter echo ShowTimeAdapter Deployed In the Config tab of the adapter settings dialog the deploy command specified to execute the deploysh shell script would be deploysh Startup Command After an adapter has been deployed it must be started on the Edge where it was deployed The Startup Command provides the mechanism that allows the ClearBlade Platform to start an adapter on ClearBlade Edge The startup command is a required command If a startup command is not specified on the Config tab of the adapter settings dialog the adapter would need to be manually started by connecting to the gateway device via ssh and issuing an appropriate start command If using a shell script to accomplish tasks needed for starting the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named startsh is as follows binbash nohup ShowTimeAdaptershowTime ShowTimeAdaptershowTimelog 21 In the Config tab of the adapter settings the startup command specified to execute the startsh shell script would be ShowTimeAdapterstartsh Note that the command takes into account the fact that the deploy script copied the startsh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Startup Command as nohup ShowTimeAdaptershowTime ShowTimeAdaptershowTimelog 21 Stop Command After an adapter is started there may be a need to stop it occasionally The Stop Command provides the mechanism that allows the ClearBlade Platform to stop an adapter running on ClearBlade Edge The stop command is an optional command If the Stop Command is not specified on the Config tab of the adapter settings dialog the adapter would need to be manually stopped by connecting to the gateway device via ssh and issuing an appropriate stop command The stop command will most likely be a command that kills the adapter process such as ps ef grep showTime grep v grep awk print 2 xargs kill If a more sophisticated shutdown of the adapter is needed shutdown logic can be incorporated into a shell script If using a shell script to accomplish tasks needed for stopping the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named stopsh is as follows binbash ps ef grep showTime grep v grep awk print 2 xargs kill In the Config tab of the adapter settings the stop command specified to execute the stopsh shell script would be ShowTimeAdapterstopsh Note that the command takes into account the fact that the deploy script copied the stopsh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Stop Command as ps ef grep showTime grep v grep awk print 2 xargs kill Status Command Various views and dialogs within the ClearBlade developers console display the status of the adapters Unfortunately it is not a trivial process to determine the status of the adapter The Status Command provides the mechanism that allows the ClearBlade Platform to determine the status of an adapter running on ClearBlade Edge Therefore a shell script that echoes the status of an adapter should be supplied The shell script should account for and echo the following values Deployed Running Stopped If the Status Command is not specified on the Config tab of the adapter settings dialog the views in the developers console that display the status of an adapter will not be able to reliably display the status of an adapter In these cases the status will most likely be displayed as No Status Available If using a shell script to accomplish tasks needed for stopping the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named statussh is as follows binbash If this script is executed we know the adapter has been deployed No need to test for for the undeployed status STATUSDeployed if ps ef grep showTime grep v grep then STATUSRunning else STATUSStopped fi echo STATUS In the Config tab of the adapter settings the status command specified to execute the statussh shell script would be ShowTimeAdapterstatussh Note that the command takes into account the fact that the deploy script copied the statussh file to a directory named ShowTimeAdapter Undeploy Command If an adapter is no longer needed the Undeploy Command can be used to remove the adapter files from the ClearBlade Edge The undeploy command is an optional command If the Undeploy Command is not specified on the Config tab of the adapter settings dialog the default behavior of the ClearBlade platform is to remove the adapter files from the directory where Edge is running The default undeploy behavior therefore would not delete any log files that were created or remove any files that were moved to adapter specific directories The undeply command will most likely be a command that deletes an adapter specific directory and any files contained within it such as rm rf ShowTimeAdapter If a more sophisticated undeploymentdeletion of the adapter is needed undeploy logic can be incorporated into a shell script If using a shell script to accomplish tasks needed for deletingundeploying the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named undeploysh is as follows binbash rm rf ShowTimeAdapter In the Config tab of the adapter settings the undeploy command specified to execute the undeploysh shell script would be ShowTimeAdapterundeploysh Note that the command takes into account the fact that the deploy script copied the undeploysh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Undeploy Command as rm rf ShowTimeAdapter Logs Command While an adapter is running it would be advantageous to be able to view any execution logs written by the adapter The Logs Command provides the mechanism that allows the ClearBlade Platform to retrieve the contents of log files from an adapter running on ClearBlade Edge The logs command is an optional command If the Logs Command is not specified on the Config tab of the adapter settings dialog any log files written by the adapter would need to be viewed manually via ssh or sftp The log command will most likely be a cat or tail command that displays the contents of a file such as cat ShowTimeAdaptershowTimelog In many cases the Logs Command will be directly dependent on the Startup Command piping output to a file unless the adapter is written in such a manner that it creates its own log files If more sophistication is needed to read log files the logic can be incorporated into a shell script If using a shell script to accomplish tasks needed for displaying log files the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named logsh is as follows binbash cat ShowTimeAdaptershowTimelog In the Config tab of the adapter settings the logs command specified to execute the logssh shell script would be ShowTimeAdapterlogssh Note that the command takes into account the fact that the deploy script copied the logssh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Logs Command as cat ShowTimeAdaptershowTimelog \"},{\"title\":\"Managing Adapters\",\"href\":\"/2-console_administration/Adapters/AdapterManagement\",\"content\":\" Overview Working with adapters is a straightforward process You can create update and delete adapters like any other object in a ClearBlade system Each Adapter consists of a name a small number of administrative commands and a small number of files comprising the administrative and executable assets of an adapter Create Adapter While it is not required it is assumed that any executable code and dependant libraries comprising an adapter have been created 1 Navigate to the Adapters tab in the developers console 2 Click New 3 Enter the name architecture and description for the adapter and click Submit Adapter names must be unique within a system The new adapter will now be displayed in the list of adapters defined within the selected system Update Adapter Updating an existing adapter is very easy When updating an adapter you can change the adapter architecture and description add modify and delete adapter files and modify the commands associated with the adapter Edit Adapter Properties 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Properties tab 4 Make the necessary changes to the Architecture and Description fields and click Save Edit Adapter Files See Adapter File ManagementFileManagement Edit Adapter Configuration For a description of the commands that can be configured on the adapter see Adapter ConfigurationAdapterConfiguration 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Config tab 4 Enter shell commands that should be executed for each of the associated fields Deploy Command A command or shell script that will be run after the files are installed on a ClearBlade Edge Startup Command A command or shell script that will be executed to start the adapter on a ClearBlade Edge Stop Command A command or shell script that will be run to stop the adapter on a ClearBlade Edge Status Command A command or shell script that will be run to determine the status of the adapter on a specific ClearBlade Edge Undeploy Command A command or shell script that will be run to uninstall the adapter from a ClearBlade Edge Logs Command A command or shell script that will be used to retrieve any logs printed out by the adapter while it is executing 5 Select the updated file and click Open 6 Click Save Delete Adapter Deleting an adapter is also very simple Follow steps 12 above and then click on the Trash CanstaticimgTrashCanpng icon Tap Confirm in the dialog that appears You must UNDEPLOY the adapter from all Edges prior to deleting it Deploy Adapter In order to be able to manage and administrate adapters using the ClearBlade Platform developers console the adapter must be deployed to a gateway device running the ClearBlade Edge 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to deploy 3 Select the checkbox or select multiple checkboxes of the Edge you wish to deploy the adapter to 4 Click the Deploy to Selected Edges button 5 A message indicating whether or not the adapter was deployed will be displayed Once an adapter is deployed you will need to startAdapterAdministration the adapter It will not be automatically started Undeploy Adapter There are two methods that can be utilized to undeploy an adapter from an Edge To undeploy an adapter from a single Edge see startAdapterAdministration To undeploy an adapter from 1 or more Edges 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to undeploy 3 Select the checkbox or select multiple checkboxes of the Edge you wish to undeploy the adapter from 4 Click the Delete from Selected Edges button 5 A message indicating whether or not the adapter was undeployed will be displayed Start Adapter startAdapterAdministration Stop Adapter startAdapterAdministration ReloadRestart Adapter startAdapterAdministration\"},{\"title\":\"Adapter File Management\",\"href\":\"/2-console_administration/Adapters/FileManagement\",\"content\":\" Overview Adapters will typically consist of 1 or more files The files comprising an adapter will consist of executable code and supporting libraries as well as shell scripts used to administer adapters While the developers console provides the ability to add multiple files to an adapter a suggested best practice would be to include all files within a single archivezip file and add a single zip file to the adapter Add New Adapter Files 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Files tab 4 Click the Add File link 5 Select one or more files to add and click Open 6 Click Save Delete Adapter Files 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Files tab 4 Click the Trash CanstaticimgTrashCanpng icon to the right of one of the files There is no confirmation dialog displayed when a file is deleted 5 A message will be displayed indicating that the file was deleted Update Adapter Files 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Files tab 4 Click the File UploadstaticimgadaptersAdaptersAdapterFileUploadpng icon to the right of one of the files 5 Select the updated file and click Open 6 Click Save \"},{\"title\":\"Adapters\",\"href\":\"/2-console_administration/Adapters/_default\",\"content\":\"\"},{\"title\":\"Analytics\",\"href\":\"/2-console_administration/Analytics\",\"content\":\"The Analytics tab on each system is used to display the actions of users on that particular system Scope The scope component is a part of every analytics query It has a special shape well outline here Platform scope is the largest scope It covers every resource contained by a platform instance regardless of the developer The section looks like platformadminEmailHere The second largest scope is the Organization Scope When a developer registers they provide an organization they work with This scope uses that information to find every developer and their resources associated with that organization organizationorgName The Developer scope is the next largest scope Using it focuses the analytics reporting to systems owned by that developer developerdeveloperID generally look something like aabfe1d20aeedaeae1cf9dc7a4a301 That ID can be acquired by calling adminuserinfo on a logged in developer The last is the system level which is the smallest scope A system is a grouping of collections roles users an MQTT namespace and code services systemSystemKey Storage This endpoint is somewhat unique amongst the endpoints in that it doesnt apply to all requests and isnt time series It allows the developer to request the size of existing collections Note that Connect collections are not included Endpoint apiv2analyticsstorage query scopeplatformplatform email Count The count endpoint returns a count of items in currently in collections Endpoint apiv2analyticscount query scopesystemd29bf3be0ac0d3faa1eebbedc6c401 filterloginlogout the query is composed of the actions listed in the About page Event Totals The totals of events for a given period of time Endpoint apiv2analyticseventtotals query scopeorganizationClearBlade filter modulemessaging the module being requested The choices are messaging codedatapush if available message history users id mycollection the name of the resource putting implies all resources actionconnection from the list of actions mentioned in about interval500 the interval you want the data to be grouped into in seconds limit20 the total number of event points you want to collect this keeps the queries from being too large range start1439574288 the start date in epoch time end1439575288 the end date in epoch time List of Events The list of events for the duration It uses the same filter object as event totals Endpoint apiv2analyticseventlist query scopedevelopere8c2eacb0a8ca68a8d859780b82c filter modulecode id actionexecute interval5000 limit2000 rangestart1439574288end1439584288 User Events A list of events delineated per user Endpoint apiv2analyticsuserevents query scopesystemd29bf3be0ac0d3faa1eebbedc6c401 filter userse8c2eacb0a8ca68a8d859780b82c an array of userids moduledataas with the events object idfe96a6c00ab8c8aef7e88cb2f051 here a collection id actiondelete as with events rangestart1439574288end1439584288as with events limit2345 see events \"},{\"title\":\"Override User Authentication\",\"href\":\"/2-console_administration/AuthOverride\",\"content\":\" Overview This feature allows a developer to override the default authentication mechanism for users with a custom one using a Code Service When a user uses the apiv1userauth endpoint for authentication his credentials will be sent to a admin defined Code Service for further processing and authentication Usage You must return a JSON with the following structure javascript authTokenAUTHTOKEN userid the value for can be left as empty string Setup Code Service for User Authentication Go to the Code tab and create a new Code Service This service will get executed when a user call the apiv1userauth endpoint over REST Go to the service settings and in the Requires tab enter clearblade as the dependency Then in the Security tab make sure the service is executable by an Anonymous user Enter the following code and hit Save javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret email reqparamsemail password reqparamspassword callback functionerr body iferr resperrorinitialization error JSONstringifybody else bodyoptions respsuccessbody This service will take the users credentials ie email and password and authenticate the user You can add password restrictions before the init call or give your own options in the bodyoptions JSON object which will be received by the user upon successful authentication Setting up Authentication Override Go into your System Settings and click the Access tab Enter the name of the authentication Code Service that you just created and hit Save Auth Overridestaticimgauthoverridepng User Authentication The user can then use any of our SDKs to authenticate with the ClearBlade Platform and the authentication Code Service will be executed instead of the default authentication logic\"},{\"title\":\"Code Services\",\"href\":\"/2-console_administration/Code/Creating\",\"content\":\" Creating a new Code Service Click New from the System nav bar to open the Create New Service modal New Code ServicestaticimgconsoleoverviewnewCodeServicepng Give the code service a one word name for the system to refer to Select Service from the Type dropdown Add Code ServicestaticimgconsoleoverviewaddCodeServicepng To execute the Code Service with the same permissions as the developer creating it leave in the Run As textbox To run with limited permissions create a new user or choose an existing user and associate that user with the appropriate roles See the Permissions section for more information To allow passing Request parameters to the executing function select Add Parameter and enter a name to refer to the parameter by The key will be associated with a value and passed in later when the service is called\"},{\"title\":\"Debugging\",\"href\":\"/2-console_administration/Code/Debugging\",\"content\":\"To debug your code service ClearBlade provides as simple but flexible logging facility There are three steps involved When you create your code service you can enable logging for that code service by selecting Yes to the Logging enabled option buttom in the lower left corner of the dialog box Turn On LoggingstaticimgTurnOnLoggingpng When you createedit your code service you can embed log calls in strategic places to monitor exection progress Added Code LogsstaticimgAddedLogspng You can then runtest the code service After the service executes click on the ListstaticimgListIconpng icon You should see this Empty LogstaticimgEmptyDebugLogpng Click in the box just below Debug Logs You will see a list of logs with a date Select the top most recent one This shows all of the logs for the last run of the service Debug LogstaticimgDebugLogpng Note For each service the platform keeps the most recent 20 execution logs Finally when you have finished you debugging and your service is working perfectly You can turn off logging by selecting the CogstaticimgCogpng icon and selecting No for Logging enabled Note that you do not have to remove the logs from the code They just become noop statements\"},{\"title\":\"Community\",\"href\":\"/2-console_administration/Code/Libraries/Community\",\"content\":\"\"},{\"title\":\"Creating Custom Libaries\",\"href\":\"/2-console_administration/Code/Libraries/Creating\",\"content\":\" Libraries Libraries are code that you wish to share between Code Services A library should be structured like a service in the sense that it is a function one calls Most likely something that returns an object with methods When a library is added to a service nothing from that library is instantiated You can treat it like regular JavaScript\"},{\"title\":\"Requires\",\"href\":\"/2-console_administration/Code/Libraries/Requires\",\"content\":\"\"},{\"title\":\"Libraries\",\"href\":\"/2-console_administration/Code/Libraries/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/2-console_administration/Code/Libraries/overview\",\"content\":\"Quickly create reusable logic using libraries Click here for more background To create a New Service 1 Navigate to the Code menu tab 2 Click the New code icon in the top left 3 Enter a name for your library 4 Select to create a Library 5 Click Finish ClearBlade OverviewstaticimgconsoleoverviewnewLibConsolepng Next steps Each library is required from a service itself Using the requires capability you can order the require loading process and bring in libraries only as you need them\"},{\"title\":\"LocalDev\",\"href\":\"/2-console_administration/Code/LocalDev\",\"content\":\"\"},{\"title\":\"Permissions\",\"href\":\"/2-console_administration/Code/Permissions\",\"content\":\"Code permissions are simple on the surface and complex internally At the most basic level one assigns the ability to execute a service to a role and then assigns that role to a user However there are situations where it is beneficial to allow a user to call a code service that executes as another user For example if one wants to have custom filtering done to data before it is added to a table but do not want to allow any old user access to that table it would be beneficial to create a role that has access to that table and then assign it to a single user It should be noted that the Collections user should also have a role with permissions to execute the code service Another thing to remember is that when a service is executed unless it is executed in another users context as noted above that the service mechanism is designed to have all calls made by that service to the platform made in the context of that user The developer is able to login manually as another user and perform calls but this adds unnecessary overhead to the service\"},{\"title\":\"Samples\",\"href\":\"/2-console_administration/Code/Samples\",\"content\":\"\"},{\"title\":\"Code\",\"href\":\"/2-console_administration/Code/_default\",\"content\":\"\"},{\"title\":\"Connections\",\"href\":\"/2-console_administration/Data/Connections\",\"content\":\" Connections Collections come in two flavors There is the standard collection which is backed by a Postgresql instance that comes with the ClearBlade platform These collections are able to be completely manipulated by the platform in terms of their schema and the data put into them The second flavor of collection is the Connect collection The Connect Collection allows the platform developer to integrate already existing data sets with their platform application Since this data already exists the platform disallows altering of the schema adding or deleting columns etc via the platform though you are totally free to update it via normal means the platform will adapt However the platform is able to perform all CRUD operations on the databases exposed As far as security is concerned they will be treated as any other collection Please see the Integrations section for more specific information Adding new data source From the developer landing page or the system navbar select the Data button Landing PagestaticimgconsoleoverviewDataButtonpng Connecting to existing data source Select the Connection radio button at the top of the Add Collection or Connection modal Enter the following information that corresponds to your existing database settings Ask your database administrator if you arent sure Connection Name string Database select option from dropdown menu Currently supported database types are MySQL PostgreSQL Oracle DB2 System i Microsoft SQL Server Database Name string IP Address string Port integer Username string Password string Table Name string After verifying the above information click Submit Creating a new cloud collection Select the Cloud radio button at the top of the Add Collection or Connection modal Enter a name that will be used to refer to the cloud collection and click Submit\"},{\"title\":\"Debugging\",\"href\":\"/2-console_administration/Data/Debugging\",\"content\":\"\"},{\"title\":\"Editing\",\"href\":\"/2-console_administration/Data/Editing\",\"content\":\" The following applies to Cloud Collections ONLY Select an existing Cloud Collection from the sliding side bar to manage Select Data CollectionstaticimgconsoleoverviewselectDataCollectionpng Adding a new column Select Column above the table display Add Data ColumnstaticimgconsoleoverviewaddDataColumnpng Enter a one word column name and select the corresponding data type from the dropdown Verify the information and click Submit Hiding an existing column Click the arrow to the right of the column name that is to be hidden Hide Data ColumnstaticimgconsoleoverviewhideDataColumnpng Hiding a column will not delete the data To restore the column to the view refresh the page Select Hide Column from the dropdown and then click Submit on the modal that appears Remove an existing column WARNING Data will be permanently deleted Click the arrow to the right of the column name that is to be deleted Remove Data ColumnstaticimgconsoleoverviewremoveDataColumnpng Select Delete Column from the dropdown and then click Submit on the modal that appears Add a new data row Select Row above the table display Add Data RowstaticimgconsoleoverviewaddDataRowpng A new row will be created with a unique itemid To enter data into the row click the cell corresponding to the row and column Remove an existing data row WARNING Data will be permanently deleted Click the checkmark icon to the left of the row that is to be deleted Select Row above the table display Remove Data RowstaticimgconsoleoverviewremoveDataRowpng\"},{\"title\":\"ImportExport\",\"href\":\"/2-console_administration/Data/ImportExport\",\"content\":\"\"},{\"title\":\"Permissions\",\"href\":\"/2-console_administration/Data/Permissions\",\"content\":\"Permissions for data are fairly straightforward They correspond to regular Create Read Update Delete operations on a table As with the rest of the platform the permissions themselves are applied to roles and the role is applied to the user Managing permissions Permissions are managed through the settings modal on the Collection Click the gear icon to open the settings modal Add Permissions to CollectionstaticimgconsoleoverviewaddNewDataPermissionpng Select the Security Tab on the modal The Security tab displays a list of the roles that are associated with the Collection and what actions each role is allowed By default roles are not allowed to perform any actions on a Collection To associate a new role click Role above the list of roles Begin typing to select the label of an existing role As an example we have typed Administrator and selected it from the list of options Allow the selected role to Create Read Update and Delete items from the Collection by checking the appropriate checkboxes\"},{\"title\":\"Data\",\"href\":\"/2-console_administration/Data/_default\",\"content\":\"\"},{\"title\":\"Messaging\",\"href\":\"/2-console_administration/Messaging\",\"content\":\" Message History Message history is stored by ClearBlade for analytical purposes It allows the platform developer to replay certain messaging transactions The endpoint is as follows GET apiv1messagesystemKey Arguments count a count of how many messages you want returned topic a specific topic you require last The time of the most recent message we are going backwards in epoch time \"},{\"title\":\"Console Overview\",\"href\":\"/2-console_administration/Overview\",\"content\":\"The console is the developers web interface into the ClearBlade platform From the console you can create and configure systems users code services data collections triggers and timers You can also perform various operations related to analytics and inspect MQTT messaging history This section is a brief reference showing you how to use the console For real world examples see our tutorials\"},{\"title\":\"Override User Registration\",\"href\":\"/2-console_administration/RegOverride\",\"content\":\" Overview This feature allows a developer to override the default registration mechanism for users with a custom one using a Code Service When a user uses the apiv1userreg endpoint for registration the registration data will be sent to a admin defined Code Service for further processing and registration Setup Code Service for User Registration Go to the Code tab and create a new Code Service This service will get executed when a user call the apiv1userreg endpoint over REST Go to the service settings and in the Requires tab enter clearblade as the dependency Then in the Security tab make sure the service is executable by an Anonymous user Enter the following code and hit Save javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret email reqparamsemail password reqparamspassword registerUser true callback functionerr body iferr resperrorinitialization error JSONstringifybody else bodyoptions respsuccessbody This service will take the users credentials ie email and password and register the user You can add password restrictions before the init call or give your own options in the bodyoptions JSON object which will be received by the user upon successful registration Setting up Authentication Override Go into your System Settings and click the Access tab Enter the name of the registration Code Service that you just created and hit Save Reg Overridestaticimgregoverridepng User Registration The user can then use any of our SDKs to register with the ClearBlade Platform and the registration Code Service will be executed instead of the default registration logic\"},{\"title\":\"Using Timers\",\"href\":\"/2-console_administration/Timers\",\"content\":\"Timers are very simple to create update and delete Lets give it a go For our example well deal with a common use case within the ClearBlade platform Polling an external internet site for information on a regular basis Specifically lets pretend were polling a weather service such as NOAA for the daily weather report in your area For the sake of this example we wont actually write the code to do that Just assume we have a ClearBlade code service called myWeatherForcast that can download weather forcasts for your area Creating a Timer The first thing you need to do is in the Code section of your application find and select the myWeatherForcast code service Once youve done that locate and click on the Cog IconstaticimgCogpng icon and select the Timers tab You should see a window like this Add TimerstaticimgAddTimerpng Now set Logging enabled to Yes This simplifies the debugging process Once youve finished debugging the timer you can disable logging Now click on Add Timer You should now see this Create TimerstaticimgCreateTimerpng Now follow the following steps 1 In the Name text box give the timer a name It must be unique within your system You can also optionally enter a description 2 Well run our timer for a year so enter 365 in the Repetitions text box 3 In the Frequency text box enter 1 In the Frequency pulldown menu select Days 4 Tap in the box next to Start Time and select tomorrows date In the time boxes below enter 12 00 AM Now your window should look something like this the date will obviously be different Almost Done TimerstaticimgReadyTimerpng Tap on Apply The timer is now ready to run Note Youll want to debug your code service first to make sure it works Otherwise you have to wait until the first scheduled time to know if your code is correct Updating a Timer Suppose we love this timer so much that we want to run it forever You can accomplish this by following these steps 1 Locate and select the myWeatherForcast code service in your application 2 Click on the CogstaticimgCogpng icon and select the Timers tab 3 Locate the timer you created above 4 Either make the Repetitions textbox blank or set it to 1 5 Table the Apply button and tap the Confirm button in the popup dialog Deleting a Timer Normally you dont have to delete a timer They delete themselves when they expire However if you have a timer that runs for a long time or forever you might want to get rid of it at some point To delete a timer follow steps 13 in the Updating a Timer section above Next find and tap the Trash CanstaticimgTrashCanpng icon Next tap the Confirm button in the pop up dialog\"},{\"title\":\"Using Triggers\",\"href\":\"/2-console_administration/Triggers\",\"content\":\" Overview Working with triggers is very simple You can create update and delete triggers just like any other object in the ClearBlade system Each trigger consists of a name an event to handle with or without filters and a code service to be executed when the trigger fires This section shows you how to triggers are created and manipulated from the ClearBlade console Create Trigger The first step in creating a trigger is to create your code service that will be executed In this example well create a trigger for the DataItemCreated event for items created in any collection To do this go to your systemapplication and click the Code tab Next enter the javascript for your service as explained in the Code section of the documentation Call the service myCodeService When you have finished entering the javascript click on this icon CogstaticimgCogpng in the upperright portion of the screen A dialog will pop up with a set of tabs on top Select Triggers Your screen should look something like this Trigger DialogstaticimgCreateTriggerpng Click on Add Trigger In the dialog that appears enter anyItemCreated in the Name field In the Source pulldown menu select Data When you do this and Action dropdown menu will appear Click on that and select ItemCreated One more dropdown will appear titled Collection Leave that blank At this point the dialog should look like this Ready To CreatestaticimgReadyToCreateTriggerpng Now go ahead and click the Apply button Your trigger has been created and is immediately active Any future items that are created will cause myCodeServce to be executed Update Trigger Updating an existing trigger is very easy The only thing you can update for an existing trigger are its filters the things specific to the actual triggerevent itself For example in the trigger we created above we can only update the collection associated with the trigger To do that do the following 1 Navigate to the myCodeService service 2 Click on the CogstaticimgCogpng icon and select the Triggers tab 3 Find the anyItemCreated trigger and select any collection assuming you have at least one collection in your application The anyItemCreated trigger will now only fire when an item is created in that collection Delete Trigger Deleting a trigger is also very simple Follow steps 13 above and then click on the Trash CanstaticimgTrashCanpng icon Tap Confirm in the dialog that appears Note that deleting a trigger does not delete the code service associated with that trigger\"},{\"title\":\"Managing System Users\",\"href\":\"/2-console_administration/Users\",\"content\":\" Creating Users Creating users for your system is a simple process First select the Auth tab for your system You should see something like the following Auth ScreenstaticimgAuthScreenpng click on User In the dialog that appears enter a valid email address eg myUsermyDomaincom a password and a password confirmation Tap on Register New User You should see a new row in the users table that looks something like this New UserstaticimgUserAddedpng Each newly created user is assigned one role by default Authenticated You can change the roles to which the user is assigned by clicking on ViewEdit for that user Doing so brings up a dialog that looks something like this ViewEdit UserstaticimgViewEditUserpng This dialog shows that myUser is assigned the Authenticated role To unassign that role click on the x To assign more roles click on the Add Roles popdown menu and choose from any of the existing roles and tap on Add Role You may do this repeatedly When you are finished Tap on the Close button Note that you cannot create roles from this dialog You can only assign andor unassign existing roles See Creating Roles below for instructions on creating roles Creating Developers The process for creating developers is different from creating regular users With the ClearBlade platform a new developer first receives a registration key and then signs up using that key Here is how it is done using the console 1 The developer goes to the main ClearBlade page for his or her installation The page should look something like this Main PagestaticimgMainPagepng Click on Sign Up on the upperright portion of the page You will be presented with the following form Sign UpstaticimgSignUppng Enter valid information for every field in the form and click on the Register button Youre now an official ClearBlade developer The first thing youll want to do is Link to creating a system Creating Roles ClearBlade uses a rollsbased permissions model Roles are created and permissions are assigned to them Those permissions correspond to operations on various resources Note that users may have multiple roles So if a user has a role that has certain permissions and has another role that doesnt the user will have the permissions even though one of their roles doesnt specify them Roles can be managed from many different places in the console but we will focus here on the roles management process under the Auth tab First we need to go to the appropriate screen First select the Auth tab on the system you are working on Next click on the Nav BarstaticimgNavBarpng icon in the upper left of the screen and select Roles in the navigation bar The following page will appear Roles PagestaticimgRolesPagepng The contents of this page deserve explanation Each row corresponds to a role in the system Each system has three predefined roles Authenticated Anonymous and Administrator When you click on Edit within a cell in the table the action is determined by the column in which the cell is contained as follows Collections You can select a specific collection and set create read update andor delete permissions for that role on that collection Services You can select a specific service and specify whether the role has execute permission Users Here you specify what permissions CRUD the role has on the entire users table Message History Here you specify the CRUD permissions the role has on the message history Push This specifies whether or not the role can use the push messaging system\"},{\"title\":\"Console\",\"href\":\"/2-console_administration/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/3-edge/Overview/_default\",\"content\":\"\"},{\"title\":\"Capabilities\",\"href\":\"/3-edge/Overview/capabilities\",\"content\":\"ClearBlade EDGE allows for easily connecting local wireless networks of many different protocols into a larger IoT solution The EDGE is capable of authenticating devices executing APIs communicating with all types of devices and then synchronizing that information back into the cloud or server based ClearBlade Platform Core Function Strong edge security Encryption authentication and authorization of API access including tokens and certificates Sync and state management Both user and device states are synced with IoT systems as devices go on and offline Offline Continuity Devices continue real time behaviors and 100 up time even when connection to the Internet is lost Strong integration capabilities Connectivity via MQTT REST and sockets along with prebuilt patterns for BLE Zigbee MQTTsn and more Data filtering and streaming Store modify analyze manage and route data at the edge Business rules and events Implement business rules trigger and react to events and analyze results via business logic locally Messaging Scalable secure brokering of messages between devices and users at the edge Deployment flexibility ClearBlade EDGE can be deployed onto any gateway device Features The Edge allows for running your IoT solution on gateway devices and keeping assets in sync The Edge supports offlinedisconnected states for ensuring local IoT environments maintain functionality The Edge provides multiple configurations for maintaining security of devices and data moving to the cloud The Edge provides cloud based authoring of IoT Solutions The Edge provides real time OTA updates of IoT Solution software configuration data The Edge provides real time syncing of device states to the ClearBlade cloud\"},{\"title\":\"Architecture\",\"href\":\"/3-edge/Overview/edgearchitecture\",\"content\":\"The Edge allows for gateway devices to perform full stack function include data storage logic execution message brokering and device and user management The Edge automatically handles the synchronzation of device and user information back to the ClearBlade Platform Each System is comprised of many assets including collections services libraries triggers timers edge roles users devices Central System is a subset of system assets that run and execute on ClearBlade typically in the cloud It behaves as the controllerbroker of system communications Edge System A defined set of assets that run on a gateway device Example system and how assets are deployed System Central Edge1 Edge2 Edge3 Settings YES YES YES YES Collection1 YES NO NO NO Collection2 NO YES NO NO Collection3 NO YES YES NO Service1 YES NO NO NO Service2 YES YES YES YES Service3 NO YES YES YES Trigger1 YES YES YES YES Trigger2 YES NO NO NO Trigger3 NO YES YES NO Edge1 YES YES NO NO Edge2 YES NO YES NO Edge3 YES NO NO YES Role1 YES YES YES YES Role2 YES YES YES YES Role3 YES YES YES YES User1 YES YES YES YES User2 YES YES YES YES User3 YES YES YES YES Device1 YES YES YES YES Device2 YES YES YES YES Device3 YES YES YES YES Relationships A system has only 1 central system and many edges System 1 1 Central 1 Edge An edge system can only be deployed on 1 gateway current limitation Edge 11 Gateways\"},{\"title\":\"Lifecycle\",\"href\":\"/3-edge/Overview/lifecycle\",\"content\":\" Provisioning The following steps are used to create a new edge instance Create a System within a ClearBlade Platform instance In the newly created System create an Edge Assign the Edge an access key Install the Edge Raspberry Pi image Use the help to start the edge that points to Instance url System key Edge key Edge Startup The following lifecycle occurs once the edge has successfully started and opened a connection to the base control system on a ClearBlade instance 1 Edge updates the base control system with connection details related to internal IP Addresses and ports 2 Edge requests all of the latest information regarding its system schema including Data structures Services libraries Roles User table schema Device table schema Edge requests users data and updates the edge user table Edge requests the device data and updates the edge device table 3 Edge attempts to maintain an open connection with the base control system to keep users and devices in sync Offline Events The edge offers a disconnected mode while running without an active IP connection but Edge must start with an IP connection While offline all Edge based services data collections users roles devices triggers and timers are able to interact with each other An online event results in the Edge triggering its online sync requirements to update to the latest system schema and user device information with the base control system Reconnect Conflict Resolution During offline events it is possible that the Edge will have a different state than the base control system Resolution of state conflicts fall under two types 1 System Schema Edges will always default to the instance definition of the schema 2 User and Devices Users and devices will be reconciled according to their last modified date on the base control system Edge Persistence Edges have the ability to persist across restarts or work in a cacheonly mode When starting with the local flag the edge will only keep a local cache of all collection information When the Edge is restarted any information in the edge that is not stored in the base control system instance is lost Edge Data Constraints By default the ClearBlade platform can grow infinitely to store analytics events logs and histories This poses a risk to gateway devices that have limited resources and run for long periods of time The Edge offers a lean mode which is ideal for long running Edge instances Running Edge in lean mode results in the following 1 Analytics information is not stored 2 Logs are not persisted 3 Histories are taken off of queues when they are read\"},{\"title\":\"Reference\",\"href\":\"/3-edge/Reference/_default\",\"content\":\"\"},{\"title\":\"Edge Flags\",\"href\":\"/3-edge/Reference/flags\",\"content\":\"Updated 315rc1 brokertcpport string brokers tcp port default 1883 brokertlsport string brokers tls port default 1884 brokerwsport string brokers websocket port default 8903 brokerwssport string brokers secure websocket port default 8904 codeexecutiontimeout int How many seconds to wait before stopping a long running code service default 600 db string postgressqlite default postgres dbhost string address of database default 127001 dbpass string password of the database role default dbport string port of db default 5432 dbuser string database role to use default cbuser disablepprof boolean Disables pprof output file creation and pprof webserver creation default false edgecookie string the cookie for the edges session serves as a shared secret will be replaced soon by better ingress edgeid string the edges id edgeip string the edges ip default localhost edgelistenport string the port the edge is to listen on default 9000 edgeprivateip string the edges ip default localhost expiration int The duration of time before the system should expire a token in seconds expiretokens set to invalidate user tokens issued more than the systems tokenTTL defaults to 5 days Dev tokens will not be removed default true insecureauth DEVELOPMENTONLY tells platform to skip encryption for passwords leanmode For the edge should we store all the server side stuff local run using corecaching or the db default is db log Specifies amount of logging loglevel string raise minimum loglevel debuginfowarnerrorfatal default info logfile string file we should point the logs at stderr means stderr stdout means stdout default stdout mqttauthport string mqtt auth port default 8905 mqttwsauthport string mqtt webosocket auth port default 8907 mysqlconnections int Max of connections to MySQL to open per collection default 5 parentsystem string the parent system of the edge platformip string the ip address of the platform without port platformport string port that platform message broker is listening on default 1883 pprofcpuinterval integer The length of time in minutes to wait between creating successive pprof cpu profiles default 20 pprofcputime integer The length of time in minutes to gather pprof cpu profiling data default 20 pprofmeminterval integer The length of time in minutes to wait between creating successive pprof heap profiles default 5 pprofmaxfiles integer The maximum number of cpu heap and debug profiles to retain 0 indicates keep all of them default 30 pprofmaxfileage integer The maximum amount of time specified in minutes in which to retain cpu heap and debug profile data files default 1440 registrationkey string key to require when creating a new developer account rpctimeout int timeout value for rpc calls to platform default 15 sqlitepath string sqlite3 db for platform data default clearbladedb sqlitepathusers string sqlite3 db for user data default clearbladeusersdb storeanalytics Should we store analytics or just drop them default true storelogs Should we store code service logs or just drop them default true storemessagehistory Should we store mqtt message history default true synctransport string Set the type of transport between edge and platform when syncing Default is mqtt Other options are amqp tcp and stub default mqtt timeprofile int Enables time profiling of HTTP requests in ms default 1\"},{\"title\":\"Raspberry Pi Installation\",\"href\":\"/3-edge/Reference/installation\",\"content\":\"The ClearBlade Edge can be installed on a Raspberry Pi 2 or 3 First download the ClearBlade Raspberry Pi image To install insert the Pis memory card into the computer and follow the instructions for your operating system MAC 1 Open Disk Utility 2 Determine which disk is your memory card and take note of its disk number diskn 3 Unmount partition so that you will be allowed to overwrite the disk 4 From terminal run the command sudo dd bs1m ifpathofyourimageimg ofdevrdiskn Replace n with the number you noted previously USE CAUTION SELECTING DISK This may take around 30 min 5 Once complete properly edge the memory card and insert into Raspberry Pi 6 The Clearblade Edge is now installed on your Raspberry Pi LINUX 1 Run df h to determine where your memory card is currently located Should appear along the lines of devmemcard1 2 Unmount the partition using the command unmount devmemcard1 Replace memcard1 with proper card name 3 From terminal run the command sudo dd bs1m ifpathofyourimageimg ofdevmemcard Replace memcard with proper card name without the last number USE CAUTION SELECTING MEMORY CARD LOCATION This may take around 30 min 4 Once complete properly edge the memory card and insert into Raspberry Pi 5 The Clearblade Edge is now installed on your Raspberry Pi WINDOWS 1 Determine the drive letter assigned to the memory card when inserted 2 Download Win32DiskImagerhttpsourceforgenetprojectswin32diskimager extract rightclick and Run as administrator 3 Select the image file you downloaded earlier and select memory cards drive 4 Click Write and wait for write to complete This may take a while 5 Once complete properly edge the memory card and insert into Raspberry Pi 6 The Clearblade Edge is now installed on your Raspberry Pi\"},{\"title\":\"Lean Mode\",\"href\":\"/3-edge/Reference/lean\",\"content\":\" Description Lean mode is a mode of running the ClearBlade edge on an edge device with minimal disk storage It eliminates a lot of heavy server side stuff like analytics Specifically it disables the following ClearBlade platform features 1 Analytics no analytics info is written to the database 2 Code Logs There are no saved code logs 3 Message History There is no saved messages history Lean mode is independent of local you can be in lean mode writing to the cache or the database Instructions When running the edge use the leanmodetrue flag The default is false\"},{\"title\":\"Raspberry Pi Setup\",\"href\":\"/3-edge/Reference/setup\",\"content\":\" EDGE Settings By default the edge will be launched when the Raspberry Pi is powered up To change the edges startup flags run the command on the Pi sudo nano etcsupervisorsupervisordconf Proceed to change the flags at the bottom on the configuration file Exit save and run sudo shutdown r now to complete setup Raspberry Pi Network Settings A network connection can be setup by simply connecting an ethernet cord or running the following commands to connect to a wireless network sudo nano etcwpasupplicantwpasupplicantconf Set SSID and PASSWORD to your desired network settings Exit and save the changes Restart the Raspberry sudo shutdown r now\"},{\"title\":\"Edge Tutorial\",\"href\":\"/3-edge/Reference/tutorials\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform STEP 1 Create an Edge 1 On your ClearBlade Platform Click on the New button which is highlighted below 2 Give a name to your edge with a suitable description and click on Generate button to generate a token 3 Finally click on the Create button to create the edge 4 Once you click on the Create button Show Edges button will appear on your System 5 You can click on the Show Edges button to view the list of Edges that you have created 6 Once you click on the Show Edges button you will see the Edges that you have created on your system 7 You can view the settings for an edge by clicking on the Settings icon button to the right of a particular Edge 8 You can view these important settings for your Edge 9 This concludes STEP 1 of Creating a new Edge and viewing important settings about the newly created Edge This information will be used in subsequent steps STEP 2 Install an Edge 1 If your Edges are not currently displayed click on the Show Edges button 2 Click on the Settings icon button for the Edge that was created in the previous step 3 Click on the Config tab within the settings dialog 4 Select the operating system the Edge will be installed on from the Target dropdown If the target operating system you wish to install the edge on is not listed we recommend you install VirtualBoxhttpswwwvirtualboxorgwikiDownloads or any other virtualizer and create a virtual machine with one of the target operating systems listed in the dropdown 5 Once the operating system has been selected commands will be displayed that can be used to download unzip install and modify permissions for an edge installation 6 Open a terminal prompt on the target operating system and download the Edge executable using the Download command listed ex curl sSL O L httpsgithubcomClearBladeEdgereleasesdownload320edgelinuxamd64targz For your convenience you can also click the Copy icon to have the command copied to your clipboard 7 From the terminal prompt on the target operating system unzip the Edge executable using the Unzip command listed ex tar xzvf edgelinuxamd64targz For your convenience you can also click the Copy icon to have the command copied to your clipboard 8 From the terminal prompt on the target operating system install the Edge executable using the Install command listed ex sudo ln f edge320 usrlocalbinedge For your convenience you can also click the Copy icon to have the command copied to your clipboard 9 From the terminal prompt on the target operating system modify the permissions of the Edge executable using the Permission command listed ex sudo chmod x usrlocalbinedge For your convenience you can also click the Copy icon to have the command copied to your clipboard STEP 3 Connect an Edge 1 If your Edges are not currently displayed click on the Show Edges button 2 Click on the Settings icon button for the Edge that was created in the previous step 3 Click on the Config tab within the settings dialog 4 Scroll to the bottom of the Config tab within the settings dialog until the Generate Startup Command section is displayed 5 Enter the IP address of the machine the Edge was installed on into the Edge IP field 6 Click the Copy icon to the far right of the Start script field to have the Edge startup command copied to the clipboard 7 From the terminal prompt cd into the directory where Edge was installed typically usrlocalbin on Mac OS and Linux cd usrlocalbin 7 Paste the startup command into the terminal window and run it javascript user edge parentsystem noviip edgeip edgeid edgecookie local Flags A complete listing of the flags that can be used when starting the Edge can be found hereflags 1 parentsystem The System Key for parent system on which Edge is created 2 noviip The IP addressHostname of your ClearBlade Platform Without Http or Https 3 edgeip The IP addressHostname of your Edge Without Http or Https 4 edgecookie Click on the Show Edges button for the appropriate System and view the settings for an edge by clicking on the Settings icon button The edgecookie is the Token represented in the Settings window below 5 edgeid Click on the Show Edges button for the appropriate System and view the settings for an edge by clicking on the Settings icon button The edgeid is the System Name represented in the Settings window below STEP 4 Add Customize Devices Add Devices 1 Click on the Auth button to navigate to the Auth section of your System 2 Click on the highlighted Menu button to view the different Auth tables 3 Once you click on the Menu button you can see that you can create 4 types of Auth tables Users Devices Edges Roles 4 Click on the Devices item from the Menu as highlighted above 5 You can add a new Device by clicking on the Device button as highlighted below 6 Select your preferences and click on the Create button Name TemperatureSensor Type Home Temperature Sensor State Blank EnabledYES Allow Key AuthorizationYES Allow Certificate AuthorizationYES 7 You will see a newly created device as above Additional Functionality Update Device State 8 Device state is an important column of the newly created device It represents the current state of the device and it accepts String values 9 In the case of the Temperature Sensor device you can change the state by doubleclicking the state column in this row 10 Lets assume the temperature state be in units of Fahrenheit You can set the Temperature Sensor state to be 100 Fahrenheit as highlighted above Add columns to Devices 11 You can add some additional properties to your device by clicking on the Column button as highlighted above 12 This will add some properties as Columns to your Device table 13 Suppose you want value of the temperature sensor to be in different units of measure You can add additional columns to represent the different units of measure NOTE Additional columns can accept only String type values 14 In the above example we also want the value of temperature sensor to be in degrees celsius along with original value of degrees Fahrenheit We have added a column named Celsius which accepts data of type String and it shows us the degrees Celsius value of the Temperature Sensor device 15 You can see that the additional column has been added at the end of the columns list Delete Device 16 You can also delete the device by selecting the checkbox in front of the device that you want to delete and clicking on the Device button 17 Once you delete a device you will see a success notification on top right corner of your screen STEP 5 Message at Edge Messaging at the Edge is similar to Messaging using the ClearBlade platform This minimizes developer rampup time by sharing a familiar design If you are new to Messaging via the ClearBlade Platform please see the Messaging Docs1platformconceptsMessagingoverview A key difference will be that we need to acquire the IP Address of our Edge beforehand Follow these steps to acquire the IP Address Linux or Mac OS ifconfig Windows ipconfig Raspberry PI Find the address of pi httpswwwraspberrypiorgdocumentationremoteaccessipaddressmd With ClearBlade you can use popular languages such as Java C JavaScript C Python iOS Android and many more to utilize messaging with the ClearBlade Edge Just choose your language and follow the tutorials for your ClearBlade SDKs In this tutorial we are going to use JavaScript to create a simple web application that can be used to Publish a message on the Edge Perform the following installation procedures and use the code snippet to Publish a message on the Edge Installation 1 Create a project directoryfolder with name webapp 2 Go to webapp folder and Create a indexhtml file 3 Open the indexhtml file in any text based editor of your choice and Copy Paste the following code snippet HTML Sample Publish App Messaging Sample Publish App Message to Publish Publish 4 Download the ClearBladejshttpsrawgithubusercontentcomClearBladeJavaScriptAPImasterClearBladejs file and place inside your project directory 5 Download the mqttws31jshttpsrawgithubusercontentcomClearBladeJavaScriptAPImastermqttws31js file and place it inside your project directory Usage 1 Initialize ClearBladeinit from the below JavaScript code snippet pointing to your Edge correctly Edit the initOptions to appropriate values 2 You need to copy and paste the following Javascript snippet into the section of the indexhtml file that you just created Javascript var cb new ClearBlade var topic mytopic Example Var initOptions URI http192168092 messagingURI 192168092 messagingPort 8904 useMQTT true cleanSession true systemKey f887dxxxxxxxxxxxxxxxxxxxxxxx01 systemSecret F887DCxxxxxxxxxxxxxxxxxxxxxx01 Email fancbcom password password var initOptions URI messagingURI messagingPort useMQTT true cleanSession true systemKey systemSecret email password var startup function var initCallback functionerr data iferr consoleloginit failed else connectToMessaging initOptionscallback initCallback cbinitinitOptions var connectToMessaging function var connectCallback functiondata consolelogconnected to messaging Write your code here Set useSSltrue if your platform url starts with https or else false messaging cbMessaginguseSSLfalse connectCallback consolelogconnecting to messaging var publishMsg functionevent var msg documentgetElementByIdmsgPubvalue consolelogpublishing to topic with message msg messagingpublishtopic JSONstringifymsg The javascript code will publish a message to a topic called mytopic on your edge 3 Open indexhtml in your web browser 4 You can verify the messages getting published on your Edge by following below steps 1 Go to your System on ClearBlade platform 2 Login to your Edge by clicking on the Edge and enter the correct credentials 3 You will see an Edge platform similar to following 4 Go to Messaging to tab by clicking on the Message button 5 Click on the Subscribe button this will subscribe you to mytopic on the Edge 6 Open the indexhtml file that you just created in a web browser 7 Input your message in the Message to Publish text box and click on the Publish button 8 You will see a message getting published on your Edge under the topic mytopic 9 You have successfully completed the Messaging at Edge tutorial\"},{\"title\":\"Tasks\",\"href\":\"/3-edge/Tasks/_default\",\"content\":\"\"},{\"title\":\"Add Devices\",\"href\":\"/3-edge/Tasks/addDevice\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade Platform 3 You have created User accounts on the ClearBlade Platform Add Customize Devices 1 Go to Auth section of your ClearBlade Platform and from the Menu select Devices 2 Click on the Device button to create a new device 3 To add a column to the device click on Column 4 To delete a device click on Device\"},{\"title\":\"App Connecting to an Edge\",\"href\":\"/3-edge/Tasks/appEdge\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade Platform 3 You have created User accounts on the ClearBlade Platform Connect a Web application to an Edge 1 Connecting a web application to an Edge is similar to using our JavaScript SDK You need to just change the initOptions according to your Edge Settings 2 Refer to the JavaScript SDK 4developerreferenceJavaScriptQuickStart Javascript var cb new ClearBlade Example Var initOptions URI http192168092 messagingURI 192168092 messagingPort 8904 useMQTT true cleanSession true systemKey f887dxxxxxxxxxxxxxxxxxxxxxxx01 systemSecret F887DCxxxxxxxxxxxxxxxxxxxxxx01 Email fancbcom password password var initOptions URI messagingURI messagingPort useMQTT true cleanSession true systemKey systemSecret email password \"},{\"title\":\"Connect an Edge\",\"href\":\"/3-edge/Tasks/connectEdge\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform Connect an Edge 1 Setup the Raspberry Pi according to this link 2 Run the following command with appropriate flag information from your Edge directory Edge will be successfully running on the pi javascript user edge parentsystem noviip edgeip edgeid edgecookie local \"},{\"title\":\"Create an Edge\",\"href\":\"/3-edge/Tasks/createEdge\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform Create an Edge 1 Edge can be created on the ClearBlade platform httpsplatformclearbladecom on a system 2 When you login to the ClearBlade platform you will see an option to create an Edge under a System 3 Click on the New button and fill in the information 4 You have successfully created an Edge\"},{\"title\":\"Messaging at Edge\",\"href\":\"/3-edge/Tasks/message\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform Message at Edge 1 Create a project directoryfolder with name webapp 2 Go to the webapp folder and Create a indexhtml file 3 Open the indexhtml file in any text based editor of your choice and Copy Paste the following code snippet HTML Sample Publish App Messaging Sample Publish App Message to Publish Publish 4 Download and place httpsrawgithubusercontentcomClearBladeJavaScriptAPImasterClearBladejs inside your project directory 5 Download and place httpsrawgithubusercontentcomClearBladeJavaScriptAPImastermqttws31js inside your project directory Usage 1 Initialize ClearBladeinit from the below JavaScript code snippet pointing to your Edge correctly Edit the initOptions to appropriate values 2 You need to copy and paste the following Javascript snippet into section of the indexhtml file that you just created Javascript var cb new ClearBlade var topic mytopic Example Var initOptions URI http192168092 messagingURI 192168092 messagingPort 8904 useMQTT true cleanSession true systemKey f887dxxxxxxxxxxxxxxxxxxxxxxx01 systemSecret F887DCxxxxxxxxxxxxxxxxxxxxxx01 Email fancbcom password password var initOptions URI messagingURI messagingPort useMQTT true cleanSession true systemKey systemSecret email password var startup function var initCallback functionerr data iferr consoleloginit failed else connectToMessaging initOptionscallback initCallback cbinitinitOptions var connectToMessaging function var connectCallback functiondata consolelogconnected to messaging Write your code here Set useSSltrue if your platform url starts with https or else false messaging cbMessaginguseSSLfalse connectCallback consolelogconnecting to messaging var publishMsg functionevent var msg documentgetElementByIdmsgPubvalue consolelogpublishing to topic with message msg messagingpublishtopic JSONstringifymsg It will publish a message to a topic called mytopic on your edge 3 You can verify the messages getting published on your Edge by following below steps 1 Go to your System on the ClearBlade platform 2 Login to your Edge by clicking on the Edge and enter the correct credentials 3 You will see an Edge platform similar to following 4 Go to Messaging to tab by clicking on the Message button 5 Click on the Subscribe button this will subscribe you to mytopic on the Edge 6 Open the indexhtml file that you just created in a web browser 7 Input your message in the Message to Input text box and click on the Publish button 8 You will see a message getting published on your Edge under the topic mytopic 9 You have successfully completed Messaging at Edge Using the ClearBlade Message Relay Information on how to use the ClearBlade Message Relay can be found here\"},{\"title\":\"Edge\",\"href\":\"/3-edge/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/Android/API_Reference\",\"content\":\" Setup The ClearBlade Android API requires three JAR files that should be copied to your projects libs folder ClearBladeAndroidAPIjar orgeclipsepahoclientmqttv3102jar orgeclipsepahoandroidservice103jar gson224jar Download these jars from httpsgithubcomClearBladeAndroidAPI They are located in the jars folder AndroidManifestxml Configuration The AndroidManifestxml files needs to be modified in order to start the Messaging service in the background Add the following within the tags java Add the following within the tags java Authenticating Authentication is the very first and crucial step in using the ClearBlade Android API for your application You will not be able to access any features of the ClearBlade platform without Authentication You will need to import the following packages in your java file import comclearbladeplatformapiClearBlade import comclearbladeplatformapiInitCallback There are two ways to authenticate to the ClearBlade platform Without Options Anonymous Authentication java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initCallback With Options java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret HashMap initOptions new HashMap Available init options email String to register or login as specific user required if password is given Default null password password String for given user required if email is given Default null platformURL Custom URL for the platform Default httpsplatformclearbladecom messagingURL Custom Messaging URL Default tcpmessagingclearbladecom1883 registerUser Boolean to tell if youd like to attempt registering the given user Default false logging Boolean to enable ClearBlade Internal API logging Default false callTimeout Int number of milliseconds for call timeouts Default 30000 30 seconds allowUntrusted Boolean to connect to a platform server without a signed SSL certificate Default false InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage initOptionsputplatformURL httpsyourURLcom initOptionsputmessagingURL tcpyourURL1883 ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initOptions initCallback Code The ClearBlade Android API allows executing a Code Service on the platform from your Android device Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Code API You need to import the following packages to use the Code API import comclearbladeplatformapiCode import comclearbladeplatformapiCodeCallback Code Service Without Parameters A code service which does not take any parameters can be executed as follows java String serviceName yourServiceName CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName codeServiceexecuteWithoutParamscodeCallback Code Service With Parameters A Json Object of parameters needs to be passed to the Code class constructor along with the service name java String serviceName yourServiceName String parameters param1value1 JsonObject parameterJsonObject new JsonParserparseparametersgetAsJsonObject CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName parameterJsonObject codeServiceexecuteWithParamscodeCallback Data With the ClearBlade Android API a developer can use the Query Item and Collection objects to manipulate data on the ClearBlade platform Import the following packages import comclearbladeplatformapiCollection import comclearbladeplatformapiQuery import comclearbladeplatformapiItem import comclearbladeplatformapiDataCallback Query Create a new Query object java String collectionID yourCollectionID Query query new QuerycollectionID queryEqualToString field Object value java Creates an equality clause in the query object queryequalToname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is equal to John querynotEqualString field Object value java Creates a nonequality clause in the query object querynotEqualname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is not equal to John querygreaterThanString field Object value java Creates a greater than clause in the query object querygreaterThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than age 18 if present querygreaterThanEqualToString field Object value java Creates a greater than or equal to clause in the query object querygreaterThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than equal to age 18 if present querylessThanString field Object value java Creates a less than clause in the query object querylessThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than age 18 if present querylessThanEqualToString field Object value java Creates a less than equal to clause in the query object querylessThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than equal to age 18 if present queryupdatefinal DataCallback callback java Call an update on all items matching the query criteria to conform to the changes that have been added via the addChange method queryequalToname John queryaddChangename Johan queryupdate new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful queryremovefinal DataCallback callback java Removes on all items matching the query criteria within a Collection queryequalToname John queryremove new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful The page size and page number of the results to be returned can be set by using querysetPageSizeint pageSize and querysetPageNumint pageNum Collections The Collection class contains functions to fetch GET update PUT create POST and remove DELETE a collection using the REST API A collection object needs to be created first java String collectionID yourCollectionID Collection collection new CollectioncollectionID collectionfetchQuery query final DataCallback callback java Gets all Items that match Query criteria from the platform in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty Query query new Query queryequalToheight 105 collectionfetchquery new DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionfetchAllfinal DataCallback callback java Gets all Items that are saved in the collection in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty collectionfetchAllnew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionupdatefinal DataCallback callback java Query query new QuerycollectionID queryequalToname John queryaddChangename Johan collectionupdatenew DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectioncreateString columns final DataCallback callback java String column columnNamenewColumn collectioncreatecolumn new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectionremoveDataCallback callback java Deletes all Items that are saved in the collection in the Cloud synchronously Deleted Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in the callback error function collectionremovenew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure Messaging The Messaging API is used initialize connect and communicate with the ClearBlade MQTT Broker for publishing messages subscribing unsubscribing to and from topics and disconnect The API uses the Paho MQTT Asynchronous Client Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Messaging API This is important because the ClearBlade MQTT Broker requires the authentication token to establish a successful connection This authentication token can only be obtained by initializing and authenticaing with the ClearBlade platform You will need to import the following packages for using the Messaging API import comclearbladeplatformapiMessage import comclearbladeplatformapiMessageCallback Initialize and Connect The first step is to create a new Message object by passing the application context and messaging QoS optional The Message constructor will then initialize and connect with the MQTT Broker java Context context this context this iff your main class extends Activity If your main class extends Application context getApplicationContext Message message new Messagecontext QoS 0 Default OR java int qos 1 QoS can be 01 or 2 Context context this context this iff your main class extends Activity If your main class extends Application context getApplicationContext Message message new Messagecontext qos After the connection is successful you can publish subscribe unsubscribe or disconnect using the Message object Publish The publish function takes a topic and message of type String and publishes to the MQTT Broker java String topic yourTopic String message yourMessage messagepublishtopic message Subscribe The subscribe function takes a topic of type String and a callback to handle the arrived messages java String topic topicToSubscribe MessageCallback messageCallback new MessageCallback Override public void doneString topic String messageString Message arrived on subscribed topic messagesubscribetopic messageCallback Unsubscribe The unsubscribe function takes a topic of type String java String topic topicToUnsubscribe messageunsubscribetopic Disconnect The disconnect function is used to disconnect from the MQTT Broker Note that this does not disconnect the user from the ClearBlade platform User logout needs to be called separately java messagedisconnect \"},{\"title\":\"Javadoc\",\"href\":\"/4-developer_reference/Android/Javadoc\",\"content\":\"The Javadoc for the Android API can be found at Android APIstaticandroidapiindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Android/QuickStart\",\"content\":\" Installing Android Studio Download and install Android Studio from httpsdeveloperandroidcomsdkindexhtml and configure the SDKs from the instructions given at httpsdeveloperandroidcomsdkinstallingindexhtml Configuration After you open your project in Android Studio download the required jars and edit the AndroidManifestxml file specified in the API Reference After that you can initialize with the platform and use its features\"},{\"title\":\"Tutorial\",\"href\":\"/4-developer_reference/Android/Tutorial\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device ready to be part of the internet of things Concepts include data management API creation messaging triggering of events timers for scheduled work all done in a secure coherent manner Lets get started Setup Before starting we need to make sure you have access to a ClearBlade platform instance Many organizations have their own private hybrid or public instances which can made available to you If your not sure or dont have access yet you can always use a free trial account at the public SaaS ClearBlade platform instance at httpsplatformclearbladecom Now Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the wrench icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the Android tutorial source files from Github httpsgithubcomClearBladeTutorialAndroid 1 Clone the repository with the command git clone httpsgithubcomClearBladeTutorialAndroidgit 2 Start up Android Studio and on the welcome screen select Open an existing Android Studio Project OR go to File Open and browse to the TutorialAndroid directory and hit open 3 In Android Studio navigate to TutorialAndroid app src main java tutorialclearbladecomclearbladetutorial 4 Open the PlatformConstantsjava file and add your systemkey systemsecret platformURL messagingURL and email address and save public final static String SYSTEMKEY YOURSYSTEMKEY public final static String SYSTEMSECRET YOURSYSTEMSECRET public final static String PLATFORMURL YOURPLATFORMURL ex http1921681689000 public final static String MESSAGINGURL YOURMESSAGINGURLMESSAGINGPORT ex 1921681681883 public static String USEREMAIL YOUREMAILADDRESS 7 Launch your client by hitting the RUN button 8 The final step of Part 1 is to initialize to the ClearBlade Platform anonymously Follow the instructions in your client UI to complete that task In some cases this tutorial will show examples of the client in Javascript Expect comparable user interface exists in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased Although you have already created a developer account to login on the platform each system you create will have its own user registry For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation1platformconceptsUsers 6 Go back to you client app and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 This data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature int d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin Tx USA 102 Sunny 9 Insert a row for New York Ny USA 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 You now have defined populated and authorized a new data structure 12 Finally you need to add the newly created collection id to the PlatformConstantsjava You get this id from the top right of the collection screen Simply click on it to copy to the clipboard public final static String COLLECTIONID dc80b68e0bf8bcaaa3baebd8f19501 NOTE For more information on the client app you can checkout the readme available on the Tutorial GitHub page Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service Best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input parameter named city to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the parentheses around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess send back the payload to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by Click the service settings icon Select Logging enabled to YES Click the Requires tab and add the log library Choose Apply Now add update your service to write the request object to the log javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the logs icon in the top right d Choose the service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update permissions for the service to execute for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Execute permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 and add parameters city state and country 2 Copy and insert the following code into the newly created service javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry ClearBladeinitrequestreq var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccesstemperature 70 weather Sunny collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetch callback NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Create Query object to go and search for existing data in the collection that matched the information passed over parameters c Update logic to add the new city if it didnt exist in the collection javascript var updateCollection function var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country var updateRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifyupdateRow queryupdateupdateRow callback 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Developers always need to make reusable logic that can be leveraged across their applications In step 5 you used the built in library called ClearBlade You may also create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and confirm the collectionName is the same as the collection you created earlier javascript var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperialAPPID4b7403db83c14490daa37a57b722743f strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectionNameWeather qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the setting for the updateCityLibrary by clicking the wrench icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 11 Add these 3 params city state and country 12 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also include calls to your custom library javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp Mathrounddatamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city ClearBladeinitrequestreq var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 13 In your new servicePart6 open the setting and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 14 You can now complete Part 6 validation in your app 15 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices on in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 2 Click the subscribe button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking publish That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensuring the message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients be the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library notifyLib 4 Select the Code type to Library 5 Use the standard process for updating the service required libraries to include clearblade 6 Copy and paste the following code javascript var notify functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 7 Next create a new service ServicePart8 and copy and paste the following code javascript function ServicePart8req resp var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather notifyJSONstringifymessage respsuccessDone var query ClearBladeQuerycollectionNameWeather queryequalTocity Austin queryfetchqueryCallback ClearBladeinitrequestreq getWeather 8 In the newly create servicePart8 open the settings and update the requires to include the libraries clearblade and notifyLib 9 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 10 Click the button Save and Test 11 Look in your client app and validate the message from Part 8 now appears in your message box 12 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic of building your own API that includes data live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by create a new service called ServicePart9Trigger and copy and paste the following code javascript function ServicePart9Triggerreq resp ClearBladeinitrequestreq notifyJSONstringifypartpart9 reqJSONstringifyreq respsuccessdone 2 Update the settings of the new service by clicking the wrench icon and require the notifyLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers Tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description ClearBladeinitrequestreq getWeathercity getWeatherCallback 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute the ServicePart9Caller from the console When this service runs it should create in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a time that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp ClearBladeinitrequestreq var message partpart10 ts Date message Service executing every 10 seconds notifyJSONstringifymessage respsuccessdone 4 Add administrator to your test users roles 5 Set the service security to administrator 6 Leave Run as blank 7 Use the standard process for updating the service required libraries to include clearblade and notifyLib 8 Test the service in the console by clicking the Save and Test button 9 Click on the wrench icon and go to the Timers tab 10 Set the timer to run the service every 10 seconds 11 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Part 11 View Analytics With each action you have been completing during this tutorial the ClearBlade platform has been building up a store of event and history This information makes up vital information that can be fed into analytics tools provided by ClearBlade partners These partners can identify usage trends penetration attempts and any number of device patterns Most important a REST API exist for access all the analytics stored in the ClearBlade Platform Explore the visualization of this data from the analytics tab Whats Next 1 Create a Portal5portalportalgettingstarted and begin to visualize the data within your ClearBlade Platform instance 2 Familiarize yourself with the raw APIs at the swagger SwaggerAnalyticsstaticrestapiindexhtmlanalytics 3 Familiarize yourself with samples tank chats 4 Learn about the integrations available Sockets Files 5 Review the CLI and development best practices 6 Install about the system patterns for IoT Social SalesForce AS400 and others 7 Communicate on the forums\"},{\"title\":\"Tutorial OLD\",\"href\":\"/4-developer_reference/Android/TutorialOLD\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device ready to be part of the internet of things Concepts include data management API creation messaging triggering of events timers for scheduled work all done in a secure coherent manner Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the gear icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the Android tutorial source files from Github httpsgithubcomClearBladeTutorialAndroid 7 In the client package of your choice follow the README instructions to set the key secret and platform urls 8 The final step of Part 1 is to initialize to the ClearBlade Platform anonymously Follow the instructions in your client UI to complete that task In some cases this tutorial will show examples of the client in Javascript Expect comparable user interface exists in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased and extremely rich Although you have already created a developer account to login on the platform each system you create will have its own user registry Th For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation at httpdocsclearbladecom 6 Go back to you client app and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 This data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature int d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin TX US 102 Sunny 9 Insert a row for New York NY US 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 Before you leave your collection find the collectionid This value will be used later to access this collection 12 You now have defined populated and authorized a new data structure Continue in your client app to now complete and validate your work NOTE Be sure to review your readme on adding your collectionid to your client app Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service Best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the parentheses around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess send back the payload to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by a Click the service settings icon b Select Logging enabled to Yes 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the logs icon in the top right d Choose the service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update permissions for the service to execute for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Execute permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 2 Copy and insert the following code into the newly created service and dont forget to replace the collection ID with the collection you created earlier javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var collectionID YOURCOLLECTIONID ClearBladesetUserrequserEmail requserToken var updateCollection function var collection ClearBladeCollectioncollectionID var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccesstemperature 70 weather Sunny collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather var q ClearBladeQuerycollectioncollectionID qequalTocity city qequalTostate state qequalTocountry country qfetchcallback 3 NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Add a call to ClearBladesetUser that will make all calls to the clearblade platform use testclearbladecom authorities c Create Query object to go and search for existing data in the collection that matched the information passed over parameters d Update logic to add the new city if it didnt exist in the collection 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Almost always developers need to make reusable logic that can be leveraged in multiple endpoints While the ClearBlade library is built into the Platform you may create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and replace the collection ID with the collection ID of the collection you created earlier javascript function updateCityLibreq resp var collectionID YOURCOLLECTIONID var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperial strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectioncollectionID qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the setting for the updateCityLibrary by clicking the gear icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 11 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also include calls to your custom library Dont forget Be sure var collectionID YOURCOLLECTIONID with your collection ID javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var collectionID YOURCOLLECTIONID var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp datamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback ClearBladesetUserrequserEmail requserToken var updateCollection function var collection ClearBladeCollectioncollectionID var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city var q ClearBladeQuerycollectioncollectionID qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 12 In your new servicePart6 open the setting and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 13 You can now complete Part 6 validation in your app 14 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices on in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 Javascript Tutorial shown below 2 Click the subscribe button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking publish That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensure that message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients be the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library AlertLib 4 Copy and paste the following code javascript var alert functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 5 Next create a new service ServicePart8 and copy and paste the following code and add the collectionID email and password javascript function ServicePart8req resp var collectionID YOURCOLLECTIONID var userEmail USEREMAIL var userPassword USERPASSWORD var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather alertPart 8 dataDATA0city is dataDATA0temperature degrees and dataDATA0weather alertJSONstringifymessage respsuccessDone var query ClearBladeQuerycollection collectionID queryequalTocity Austin queryfetchqueryCallback var initClearBlade function var initCallback functionerr data if err resperrordata else getWeather var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 6 In the newly create servicePart8 open the settings and update the requires to include the libraries clearblade and alertLib 7 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 8 Click the button Save and Test 9 Look in your client app and validate the message from Part 8 now appears in your message box 10 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic of building your own API that includes data live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by create a new service called ServicePart9Trigger and copy and paste the following code and add the email and password most likely your user is testclearbladecom with clearblade as the password javascript function ServicePart9Triggerreq resp var userEmail YOUREMAIL var userPassword YOURPASSWORD var initClearBlade function var initCallback functionerr data if err resperrordata else alertJSONstringifyreq respsuccessdone var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 2 Update the settings of the new service by clicking the gear icon and require the alertLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers Tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code and add the collectionId email and password javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var collectionID YOURCOLLECTIONID var userEmail YOUREMAIL var userPassword YOURPASSWORD var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionID var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description var initClearBlade function var initCallback functionerr data if err resperrordata else getWeathercity getWeatherCallback var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute the ServicePart9Caller from the console When this service runs it should create in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a time that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp var userEmail testclearbladecom var userPassword clearblade var initClearBlade function var initCallback functionerr data if err resperrordata else var message partpart10 ts Date message Service executing every 10 seconds alertJSONstringifymessage respsuccessdone var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 4 Set the service to run as an administrator 6 Use the standard process for updating the service required libraries to include clearblade and AlertLib 7 Test the service in the console by clicking the Save and Test button 8 Click on the gear icon and go to the Timers tab 9 Set the timer to run the service every 10 seconds 10 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Part 11 View Analytics With each action you have been completing during this tutorial the ClearBlade platform has been building up a store of event and history This information makes up vital information that can be fed into analytics tools provided by ClearBlade partners These partners can identify usage trends penetration attempts and any number of device patterns Most important a REST API exist for access all the analytics stored in the ClearBlade Platform Explore the visualization of this data from the analytics tab Whats Next 1 Familiarize yourself with the raw APIs at the swagger 2 Familiarize yourself with samples tank chats 3 Learn about the integrations available Sockets Files 4 Review the CLI and development best practices 5 Install about the system patterns for IoT Social SalesForce AS400 and others 6 Communicate on the forums\"},{\"title\":\"Android\",\"href\":\"/4-developer_reference/Android/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/C/API_Reference\",\"content\":\" Initialize and Authenticate You must initialize and authenticate with the ClearBlade Platform first before you perform any other functions If you have not installed the prerequisites please follow the tutorial PrerequisitesQuickstartprerequisites After you have installed all the prerequisites and the C SDK include the clearbladeh header in your code include Call the initializeClearBlade function to initialize and authenticate your user with ClearBlade C void cbInitCallbackbool error char result iferror printfClearBlade init failed sn result exit1 else printfClearBlade Init SucceedednAuth token sn result initializeClearBladeSYSTEMKEY SYSTEMSECRET PLATFORMURL MESSAGINGURL USEREMAIL USERPASSWORD cbInitCallback You will need to pass the function your SYSTEMKEY SYSTEMSECRET PLATFORMURL httpsplatformclearbladecom or similar MESSAGINGURL tcpplatformclearbladecom1883 or similar USEREMAIL USERPASSWORD and a function as a callback After successful authentication you will receive an authentication token in the callback You can choose to store it in a variable but the SDK stores a copy of it for itself MQTT Functions Connect to the MQTT Broker Before you connect to the MQTT Broker make sure you include the include MQTTAsynch header in your code and link the lpahomqtt3as library when you compile your code There are two functions to choose from when connecting to the MQTT Broker with the following signatures C connectToMQTTchar clientId int qualityOfService void mqttOnConnectvoid context MQTTAsyncsuccessData response int messageArrivedCallbackvoid context char topicName int topicLen MQTTAsyncmessage message OR C connectToMQTTAdvancedchar clientId int qualityOfService void mqttOnConnectvoid context MQTTAsyncsuccessData response int messageArrivedCallbackvoid context char topicName int topicLen MQTTAsyncmessage message void onConnLostCallbackvoid context char cause The difference between the two is that the first one does not take an onConnectionLost callback whereas the second one does What this means is that if for some reason the connection to the MQTT Broker was lost and you choose the first function the code will notify you and try to reconnect once and then leave everything to the Gods of MQTT But if you used the second function you will be able to handle the connection lost event and take a decision accordingly We recommend you use the second function Heres an example of how you would connect to the MQTT Broker using the connectToMQTT function C char clientID testclient int qos 0 int messageArrivedvoid context char topicName int topicLen MQTTAsyncmessage message printfMessage arrivedn printfTopic sn topicName char messagePayload mallocmessagepayloadlen 1 strncpymessagePayload messagepayload messagepayloadlen messagePayloadmessagepayloadlen 0 printfMessage sn messagePayload MQTTAsyncfreeMessagemessage MQTTAsyncfreetopicName freemessagePayload return 1 void onConnectvoid context MQTTAsyncsuccessData response printfSuccessful connection to MQTT Brokern extern int finished Get the finished variable from the CB SDK and set it to 1 to stop the connect loop finished 1 connectToMQTTclientID qos onConnect messageArrived To the connectToMQTT function you need to pass the clientID string quality of service int a callback to notify you of a successful connection and a callback to notify you when a message arrives on a subscription In the onConnect callback be sure to grab the finished variable from the C SDK using the extern keyword and set it to 1 This tells the SDK that the connect call was completed successfully and the C SDK can stop its internal loop that was waiting for the connection to complete Now to use the connectToMQTTAdvanced function use the following code as a template C char clientID testclient int qos 0 int messageArrivedvoid context char topicName int topicLen MQTTAsyncmessage message printfMessage arrivedn printfTopic sn topicName char messagePayload mallocmessagepayloadlen 1 strncpymessagePayload messagepayload messagepayloadlen messagePayloadmessagepayloadlen 0 printfMessage sn messagePayload MQTTAsyncfreeMessagemessage MQTTAsyncfreetopicName freemessagePayload return 1 void onConnectvoid context MQTTAsyncsuccessData response printfSuccessful connection to MQTT Brokern extern int finished Get the finished variable from the CB SDK and set it to 1 to stop the connect loop finished 1 void onConnectionLostvoid context char cause printfnConnection lostn printfCause sn cause printfReconnectingn Your Code Goes Here connectToMQTTAdvancedclientID qos onConnect messageArrived onConnLostCallback In this case the extra argument is the OnConnectionLost callback In the onConnect callback be sure to grab the finished variable from the C SDK using the extern keyword and set it to 1 This tells the SDK that the connect call was completed successfully and the C SDK can stop its internal loop that was waiting for the connection to complete Publish a message To publish a message once a successful connection has been established to the MQTT Broker use the publishMessage function C char message Hello World chat topic AwesomeTopic int qos 0 int retained 0 publishMessagemessage topic qos retained Subscribe to a topic To subscribe to a topic use the subscribeToTopic function C char topic AwesomeTopic int qos 0 subscribeToTopictopic qos Unsubscribe from a topic To unsubscribe from a topic use the unsubscribeFromTopic function C char topic AwesomeTopic unsubscribeFromTopictopic Disconnect from MQTT Broker To disconnect your client from the MQTT Broker call the disconnectMQTTClient function Code Service Functions You can execute a Code Service using the C SDK There are two ways to do it one with parameters that you want to pass to a Code Service and one without Execute a Code Service without parameters To execute a Code Service without passing any parameters use the executeCodeServiceWithoutParams function C char serviceName TestService void codeServiceCallbackbool error char result iferror printfCannot execute Code Service sn result else printfExecution successful sn result executeCodeServiceWithoutParamsserviceName codeServiceCallback Execute a Code Service with parameters To execute a Code Service by passing parameters use the executeCodeServiceWithParams function C char serviceName TestService char params name Bubba void codeServiceCallbackbool error char result iferror printfCannot execute Code Service sn result else printfExecution successful sn result executeCodeServiceWithParamsserviceName params codeServiceCallback \"},{\"title\":\"Quickstart\",\"href\":\"/4-developer_reference/C/Quickstart\",\"content\":\" Prerequisites To install the C SDK you will need the following dependencies libcurl openssl Paho MQTT library Jansson JSON library The Paho MQTT Library contains a Makefile that only supports Linux systems You can try to install it on other operating systems but there is a chance that it might not work So you may need to edit the Makefile for your operating system or install the C SDK on a Linux system Installing libcurl and openssl You can download and install libcurl library from httpscurlhaxxselibcurl Depending on your operating system you may download the compiled libraries or build from source You can also download and install the openssl library from httpswwwopensslorg Installing the Paho MQTT Library To install the Paho MQTT Library execute the following commands bash git clone httpsgithubcomeclipsepahomqttcgit cd pahomqttc make sudo make install Install the Jansson JSON Library You can follow the instructions given httpjanssonreadthedocsioen210gettingstartedhtmlcompilingandinstallingjansson to install the Jansson JSON Library Install the C SDK Execute the following commands to install the C SDK on your system bash git clone httpsgithubcomClearBladeClearBladeCSDKgit cd ClearBladeCSDK make sudo make install \"},{\"title\":\"C\",\"href\":\"/4-developer_reference/C/_default\",\"content\":\"\"},{\"title\":\"target\",\"href\":\"/4-developer_reference/CLI/10_target\",\"content\":\" Name cbcli target Retargets an existing local system to a different ClearBlade platform The target action is executed within an existing local system that has already been previously initd Synopsis cbcli target url systemkey email password Description The target action allows for changing the target of a local system This local system should have been exported already This action is importing for supporting the promotion of systems between environments\"},{\"title\":\"Example\",\"href\":\"/4-developer_reference/CLI/11_Example\",\"content\":\" Step 1 Developer uses init to create initial directory structure Command cbcli init Platform URL System Key Developer Email Password Result A new directory will be created named your System Name Inside there will be a single file called cbmeta cbmeta Step 2 Developer exports their system locally This process will bring all the schema and asset definitions to your local environment Command cd cbcli export Result Your folder should now be filled with a structure that looks like cbmeta systemjson services helloworldjs libraries data roles users triggers timers Step 3 Developer modifies a local service This step represents a typical developer activity of making a modification to a service For this task modify a service of your choice function helloworldreq resp COMMENT CHANGED respsuccesshello world Step 4 Developer views the differences Action cbcli diff servicehelloworld Result the differences in your file will be listed Step 5 Developer tests the new service This is an optional step but often developers want to ensure that their changes work Action cbcli test servicehelloworld paramsnameBill Result The latest service source code is uploaded to the system and then execute with the parameters passed in The response will be similar to NOTE Testing a service will push your service to your system This actvity should be done against a Test System Step 6 Developer pushes their changes back to the ClearBlade system Next if the developer has diffs that have not been tested and already sent the server they can now push those changes NOTE Now is a good time to commit your code to a source control repository Action cbcli push servicehelloworld Results Upon completion you will receive a list of all the files successully pushed up to the ClearBlade System Step 7 Pulling the latest code In a team environment you may want to pull latest changes that others have running on the system You can accomplish this using a source control branch the asset running in the system To get the asset running in the system locally use the pull command Action cbcli pull serviceanotherworld Result Your file system is now updated with the latest javascript in the anotherworldjs file Summary The process for developing a local system continues with these above steps Done correctly you should include a source control repository tool and best practice for backup and change history purposes To learn more about the devops lifecycle the CLI also supports see the DevOps Example\"},{\"title\":\"DevOps\",\"href\":\"/4-developer_reference/CLI/12_ExampleOps\",\"content\":\"In addition to supporting local development on services and systems the CLI also provides critical capability to integrate your current DevOps processes with the ClearBlade platform The below describes a typical agile development team working within the ClearBlade Platform Multiple Developers working with their own Systems A ClearBlade platform System for a shared Development instance A ClearBlade platform System for Test and QA A ClearBlade platform System for Production To support this environment ClearBlade expects a mature use of a source control environment where developers are able to work in shared isolation git svn cvs and others are supported with the same pattern Task Developer works in local branch During this period the developer will use their own ClearBlade platform System and use the standard local development process When ready to move forward with a feature the developer will commit their work to a source control development branch within the source control environment Task Promotion of feature branch to Development With the development source control branch updated current devops build system can take control This involves the following steps 1 A build system checks out the latest version of the development branch git pull origin development 2 The build system ensures they are initd into the correct development system cbcli init 3 The build system promotes any code that is now in the stream cbcli push At this point the development system is now running the latest code running as captured in source control Summary This process can be leveraged by DevOps tools to continue the promotion and roll back of any environment\"},{\"title\":\"Github Project\",\"href\":\"/4-developer_reference/CLI/13_GithubProject\",\"content\":\" Github Project For more help about using the tool refer to github project on httpsgithubcomClearBladecbcli\"},{\"title\":\"Overview\",\"href\":\"/4-developer_reference/CLI/1_GettingStarted\",\"content\":\" Clearblade CLI tool The clearblade CLI tool provides easy to use commands for interacting with ClearBlade platform You can easily export pull push import diff Services can be written in editor of your choice after exporting Push command allows to reflect these changes on the platform Creating a mirror image of your system is easily achieved with the use of import command File Structure Before we start making changes and pushing to platform we need to export the system The directory structure after export will look as cbmeta code libraries services TestPull TestPulljs TestPulljson data roles Administratorjson Anonymousjson Authenticatedjson systemjson timers triggers users schemajson MetaData After exporting the system cbmeta is created in the exported folder as shown above This file contains devEmail platformURL assetRefreshDates and an auth token for developer access to the system\"},{\"title\":\"Installation\",\"href\":\"/4-developer_reference/CLI/2_Installation\",\"content\":\" Source Installation For source installation GO should be installed If its not install go from goLanghttpsgolangorgdocinstall After go is installed run go get githubcomclearbladecbcli Either add path to cbcli executable to PATH in bashrc or execute using full path Add pathThese commands work if your are using bash echo export PATHPATHGOPATHbin bashrc source bashrc or execute using full path GOPATHbincbcli Binary Installation Go to cbcli releaseshttpsgithubcomClearBladecbclireleases and download latest release for your platform OSXLinux Unpack the archive to a location of your choise Add path of your unpacked archive to PATH\"},{\"title\":\"init\",\"href\":\"/4-developer_reference/CLI/3_Init\",\"content\":\" Name cbcli init Initializes a ClearBlade system locally Synopsis cbcli init url systemkey email password Options The init command is the first command to be run when wanting to work on a ClearBlade system locally It has four options which can be specified on the command line or entered at prompts given by the command These options are url The full url of the ClearBlade platform eg httpsplatformclearbladecom systemkey The system key for the system being brought local messagingurl The messaging url for the system being brought local email The email address of the developer working on the system you password Your password for the ClearBlade platform system You can specify all some or none of these options on the command line itself For those that you didnt specify The system will prompt you for the values Description On successful completion of this command a skeleton tree structure is created under your current working directory with the root of the tree named after the ClearBlade system you just inited Note that if the system name had spaces they are converted to underscores Inside the root directory of the system two special files are created cbmeta This holds information specific to the developer It is used to streamline authentication so that you dont have to enter emails passwords and tokens for all future commands systemjson This contains information specific to the system youre working on system name system key etc The directory structure for a system looks like this for a system named Outstanding System OutstandingSystem cbmeta systemjson code libraries services data roles timers triggers users Once youve successfully executed the init command you should cd into and live in the repo when running all future commands The behavior is similar to the git command in that you can run any of the other cbcli commands from anywhere in the repo Integration with SCM An example of using the init command from inside an existing repo is as follows Suppose multiple developers are working on the same system and youre using git as a repository for the repo In this case you would do a git clone go grab the repo Youd then cd into the repo and run cbcli init This would set up the cbmeta file to contain your credentials If youre using cbcli in concert with git in the gitignore file for the repo add cbmeta This way when anybody clonespulls the repo from git theyll have to use the init command to associate their credentials with the associated platform \"},{\"title\":\"export\",\"href\":\"/4-developer_reference/CLI/4_Export\",\"content\":\" Name cbcli export Brings a ClearBlade platform System to the local development environment Synopsis cbcli export exportrows exportusers Options Once you have run the init command one next step is to cd into the newly created repo and run cbcli export or cbcli pull see below This will download all useful clearblade objects into the repo it completely populates the repodirectory structure shown above The options specific to the export command are url The full url of the ClearBlade platform eg httpsplatformclearbladecom systemkey The system key for the system being brought local messagingurl The messaging url for the system being brought local email The email address of the developer working on the system you cleanup Clears all directories prior to performing the export exportrows This not only exports the collection objects but also export all rows or items in each collection Be very careful when using this option as it may be unfeasable to export very large collections exportusers This exports the data minus passwords from the systems users table If not present on the command line only the users table schema is exported exportitemid When exporting data collections this option indicates that the itemid column should also be exported with each row sortcollections This option when specified will sort the rows of an exported data collection by itemid This is useful when using a version control system and you wish to view the differences between two versions of a data collection datapagesize When exporting the rows of a data collection and there are a large number of rows 100k it is adviseable to increase the number of rows constituting a page This will improve the performance of the export by decreasing the number of queries against the database Once completed all of the services collections timers triggers etc will reside in current repo Meta data for all objects is in prettyprinted json format In addition the actual code for services and libraries is in javascript js format You can shortcut the cbcli initcbcli export steps by just calling cbcli export outside of a repo This will do a combination of init and export You can either provide the init options on the command line or you will be prompted for them This is a common way to begin working on a system locally EXAMPLES cbcli export cbcli export exportrows exportusers\"},{\"title\":\"import\",\"href\":\"/4-developer_reference/CLI/5_Import\",\"content\":\" Name cbcli import Takes the assets stored locally and creates a new ClearBlade platform System with the same structure and assets Synopsis cbcli import url email password importrows importusers Description The import command is run from inside an existing repo for a system It creates an entirely new system perhaps on a different clearblade platform instance Think of it as cloning the system somewhere else A common use would be as follows Suppose youre developing and testing a ClearBlade system inside your private development sandbox When the system is ready to be deployed to production you would use the import command to effectively push it into production Note Only assets that a currently local are imported into the new system Options url The URL of the destination system ie where the new system should be If you dont specify this option on the command line you will be prompted for it email The developers email on the destination system If you dont specify this option on the command line you will be prompted for it password The developers password If you dont specify this option we recommend you dont you will be prompted for it importrows By default collection rows items are not imported Pass this option to import all items importusers By default the users are not imported into the new system If you set this option the users will imported but their passwords will all be set to password since we dont transfer passwords back and forth between systems Once this command is completed the newly imported system is fullyfunctional except for the importusers caveat mentioned above Examples cbcli import urlhttpsplatformclearbladecom cbcli import emailfooclearbladecom passwordfoo cbcli import emailfooclearbladecom passwordfoo importrows\"},{\"title\":\"push\",\"href\":\"/4-developer_reference/CLI/6_Push\",\"content\":\" Name cbcli push Send the local development versions of assets back to the ClearBlade platform system Synopsis cbcli push allservices alllibraries alledges alldevices allportals allplugins alladapters userschema edgeschema deviceschema service library collection user role trigger timer edge device portal plugin adapter Description The push command allows you upload changes to local copies of ClearBlade objects back out the the remote ClearBlade system Obviously it is the opposite of the pull command Again it has the same options as the diff and pull commands You can combine these options on a single command line just like with diff and pull Options allservices Pushes all the services stored in a local repo alllibraries Pushes all of the libraries stored in a local repo alledges Pushes all of the edges stored in a local repo alldevices Pushes all of the devices stored in a local repo allportals Pushes all of the portals stored in a local repo allplugins Pushes all of the plugins stored in a local repo alladapters Pushes all of the adapters stored in a local repo Includes adapter metadata as well as all files associated with each adapter userschema Pushes the local version of the users table schema to a remote ClearBlade system edgeschema Pushes the local version of the edge table schema to a remote ClearBlade system deviceschema Pushes the local version of the device table schema to a remote ClearBlade system service Pushes the local version of a specific service to a remote ClearBlade system library Pushes the local version of a specific library to a remote ClearBlade system collection Pushes the local version of a specific collections metadata to a remote ClearBlade system user Pushes the local version of the user record to a remote ClearBlade system Also Pushes the roles assigned to a user role Pushes all the capability details of the specific role to a remote ClearBlade system trigger Pushes the local version of a specific trigger to a remote ClearBlade system timer Pushes the local version of a specific timer to a remote ClearBlade system edge Pushes the local version of a specific edge to a remote ClearBlade system device Pushes the local version of a specific device to a remote ClearBlade system portal Pushes the local version of a specific portal to a remote ClearBlade system plugin Pushes the local version of a specific plugin to a remote ClearBlade system adapter Pushes the local version of a specific adapter to a remote ClearBlade system Includes the adapter metadata as well as the files associated with the adapter Examples cbcli push cbcli push allservices cbcli push collectionMyCollection\"},{\"title\":\"pull\",\"href\":\"/4-developer_reference/CLI/7_Pull\",\"content\":\" Name cbcli pull Brings the latest versions of assets from the ClearBlade platform System to the local development environment Synopsis cbcli pull allservices alllibraries alledges alldevices allportals allplugins alladapters userschema service library collection user role trigger timer edge device portal plugin adapter Description The pull command allows you to selectively grab a specific object eg a specific code service or library from the associated ClearBlade system and pull it down to your local repo This is useful when for example multiple developers are working on the same code service When one developer modifies the code service you can pull it down and make modifications to the latest version Options allservices Pulls all of the services stored in the repo alllibraries Pulls all of the libraries stored in the repo alledges Pulls all of the edges stored in the repo alldevices Pulls all of the devices stored in the repo allportals Pulls all of the portals stored in the repo allplugins Pulls all of the plugins stored in the repo alladapters Pulls all of the adapters stored in the repo Includes adapter metadata as well as all files associated with each adapter userschema Pulls the remote version of the users table schema to a local repository service Pulls the remote version of a specific service to a local repository library Pulls the remote version of a specific library to a local repository collection Pulls the remote version of a specific collections metadata to a local repository user Pulls the remote version of a specific user record to a local repository Also Pulls the roles assigned to a user role Pulls all the capability details of the specific role to a local repository trigger Pulls the remote version of a specific trigger to a local repository timer Pulls the remote version of a specific timer to a local repository edge Pulls the remote version of a specific edge to a local repository device Pulls the remote version of a specific device to a local repository portal Pulls the remote version of a specific portal to a local repository plugin Pulls the remote version of a specific plugin to a local repository adapter Pulls the remote version of a specific adapter to a local repository Includes the adapter metadata as well as the files associated with the adapter Example cbcli pull cbcli pull allservices cbcli pull collectionMyCollection\"},{\"title\":\"test\",\"href\":\"/4-developer_reference/CLI/8_Test\",\"content\":\" Name cbcli test Execute a code service update code service from your local file system and send MQTT message Synopsis cbcli test service params topic payload push Description The test command allows you execute your code services from your local machine along with update the code itself and send MQTT Messages You can combine these options on a single command line just like with diff and pull Options service Executes the selected service If your local version has newer changes than the cloud platform we recommend using push flag to push new changes params The payload is the parameters for the code service request This must be valid JSON topic Sends an MQTT Message with the provided topic The payload contains the MQTT message payload payload Payload for the respective service or MQTT message If service flag is used then If topic is used then the payload is the MQTT payload push push flag pushes the local version of the respective code service prior to executing Examples cbcli test serviceMyService\"},{\"title\":\"diff\",\"href\":\"/4-developer_reference/CLI/9_Diff\",\"content\":\" Name cbcli diff Compares the local files with the versions stored on the ClearBlade platform System Synopsis cbcli diff allservices alllibraries service userschema collection user role trigger timer Description This command allows you to do a diff between an object in your current repo and the corresponding object residing in the associated remote ClearBlade system This involves diffing the meta data for the object and if the object is a code service or library also performing a traditional diff on the code For example consider a code service If you locally changed the actual code for the service and also locally changed the library dependencies for the service the diff command will report both changes Options The following options are available allservices Diffs all the services stored in the repo alllibraries Diffs all of the libraries stored in the repo service Diffs the local and remote versions of library Diffs the local and remote versions of userschema Diffs the local and remote versions of the users table schema collection Diffs the local and remote versions of the collections metadata Does not diff the items of the collection user Diffs the local and remote versions of the user record Also diffs the users roles role Diffs all the capability details of the specific role trigger Diffs triggers timer Diffs timers Example cbcli diff collectionfgbfgb Output hostmtpgmailcom cbcli diff collectionsamplecollection \"},{\"title\":\"CLI\",\"href\":\"/4-developer_reference/CLI/_default\",\"content\":\"\"},{\"title\":\"Authenticating\",\"href\":\"/4-developer_reference/CSharp/API_Reference/Authenticating\",\"content\":\"Authentication is the very first and crucial step in using the ClearBlade C API for your application You will not be able to access any features of the ClearBlade platform without Authentication You will need to clone the following C repository for using the ClearBlade services httpsgithubcomClearBladeCSharpSDK There are two ways to authenticate to the ClearBlade platform Without Options C String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret public static void InitCallbackbool success string data if success initialization successful else initialization failed given a ClearBladeException with the cause ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initCallback With Options C String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret Dictionary initOptions new Dictionary Available init options email String to register or login as specific user required if password is given Default null password password String for given user required if email is given Default null platformURL Custom URL for the platform Default httpsplatformclearbladecom messagingURL Custom Messaging URL Default tcpmessagingclearbladecom1883 registerUser Boolean to tell if youd like to attempt registering the given user Default false logging Boolean to enable ClearBlade Internal API logging Default false callTimeout Int number of milliseconds for call timeouts Default 30000 30 seconds allowUntrusted Boolean to connect to a platform server without a signed SSL certificate Default false public static void InitCallbackbool success string data if success initialization successful else initialization failed given a ClearBladeException with the cause initOptionsAddplatfromURL httpsstagingclearbladecom initOptionsAddmessageURL stagingclearbladecom initOptionsAddemail initOptionsAddpassword initOptionsAddregisterUser false initOptionsAddlogging false initOptionsAddcallTimeout30000 initOptionsAddallowUntrusted false ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initOptions initCallback \"},{\"title\":\"Code\",\"href\":\"/4-developer_reference/CSharp/API_Reference/Code\",\"content\":\"The ClearBlade Java API allows executing a Code Service on the platform from your Java application Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Code API You will need to clone the following C repository for using the Code API httpsgithubcomClearBladeCSharpSDK Code Service Without Parameters A code service which does not take any parameters can be executed as follows C string serviceName yourServiceName ClearBladeCodeService codeService new ClearBladeCodeServiceserviceName codeServiceexecuteWithoutParamsserviceName Code Service With Parameters A string object of parameters needs to be passed to the ClearBladeCodeService class constructor along with the service name C string serviceName yourServiceName string parameters param1value1 ClearBladeCodeService codeService new ClearBladeCodeServiceserviceName parameters codeServiceexecuteWithParamsserviceName parameters \"},{\"title\":\"Messaging\",\"href\":\"/4-developer_reference/CSharp/API_Reference/Messaging\",\"content\":\"The Messaging API is used to initialize connect and communicate with the ClearBlade MQTT Broker for publishing messages subscribing unsubscribing to and from topics and disconnect Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Messaging API This is important because the ClearBlade MQTT Broker requires the authentication token to establish a successful connection This authentication token can only be obtained by initializing and authenticaing with the ClearBlade platform You will need to clone the following C repository for using the Messaging API httpsgithubcomClearBladeCSharpSDK Initialize and Connect The first step is to create a new ClearBladeMessageService object by passing the client ID and messaging QoS optional The ClearBladeMessageService constructor will then initialize and connect with the MQTT Broker C string clientID ClearBladeJavaTest ClearBladeMessageService message new ClearBladeMessageServiceclientID QoS 0 Default OR C int qos 1 QoS can be 01 or 2 string clientID ClearBladeCTest ClearBladeMessageService message new ClearBladeMessageServiceclientID qos OR C int qos 1 QoS can be 01 or 2 string clientID ClearBladeCTest bool cleanSession true or false ClearBladeMessageService message new ClearBladeMessageServiceclientID qos After the connection is successful you can publish subscribe unsubscribe or disconnect using the ClearBladeMessageService object Publish The publish function takes a topic and message of type string and publishes to the MQTT Broker C string topic yourTopic string message yourMessage messagepublishtopic message OR C string topic yourTopic string message yourMessage int qos bool retain true or false messagepublishtopic message qos retain Subscribe The subscribe function takes a topic of type string and a callback to handle the arrived messages C string topic topicToSubscribe messagesubscribetopic Unsubscribe The unsubscribe function takes a topic of type string C string topic topicToUnsubscribe messageunsubscribetopic Disconnect The disconnect function is used to disconnect from the MQTT Broker Note that this does not disconnect the user from the ClearBlade platform User logout needs to be called separately C messagedisconnect \"},{\"title\":\"API_Reference\",\"href\":\"/4-developer_reference/CSharp/API_Reference/_default\",\"content\":\"\"},{\"title\":\"CSharp\",\"href\":\"/4-developer_reference/CSharp/_default\",\"content\":\"\"},{\"title\":\"Example\",\"href\":\"/4-developer_reference/CSharp/examples\",\"content\":\"Heres an example of a ClearBlade C Client that initializes with the ClearBlade platform connects to the MQTT broker and publishes and subscribes to messages Then it disconnects from the MQTT Broker and logs out the user c using System using SystemCollectionsGeneric using SystemLinq using SystemText using SystemThreadingTasks namespace CSharpSDK class Program static void Mainstring args string Systemkey YOUR SYSTEM KEY string SystemSecret YOUR SYSTEM SECRET Dictionary initOptions new Dictionary initOptionsAddplatfromURL httpsstagingclearbladecom initOptionsAddmessageURL stagingclearbladecom initOptionsAddemail initOptionsAddpassword initOptionsAddregisterUser false initOptionsAddlogging false initOptionsAddcallTimeout30000 initOptionsAddallowUntrusted false ClearBlade clearblade new ClearBlade clearbladeinitializeSystemkey SystemSecret InitCallbackinitOptions string parameters nameAmeya ClearBladeCodeService code new ClearBladeCodeServicetempServ parameters bool codeResult codeexecuteCodetempServ parameters ConsoleWriteLineCode result codeResult SystemThreadingThreadSleep1000 ClearBladeMessageService message new ClearBladeMessageServiceTest Client1true SystemThreadingThreadSleep1000 messagepublishTopicName Hello from C client 2 true SystemThreadingThreadSleep1000 messagesubscribeTopicName messagepublishTopicName Received Nicely by C subscriber 2 true SystemThreadingThreadSleep1000 messageunsubscribeweave messagepublishTopicName Received Nicely by C subscriber 2 true SystemThreadingThreadSleep1000 bool disconnect messagedisconnect ConsoleWriteLineDisconnected disconnect public static void InitCallbackbool success string data if success ConsoleWriteLineResult is success else ConsoleWriteLine \"},{\"title\":\"Errors\",\"href\":\"/4-developer_reference/Errors\",\"content\":\"Errors returned by the ClearBlade platform are formatted in a structured way to allow for developers to debug applications more easily as well as react programmatically Error object shape javascript error id ed8df83b9d494287adb4f1a0c7948311 id for the request made to the platform code 1421 code specific to this error level 1 criticality level category Admin the module that returned the error message Internal Server Error brief description of the error detail Invalid Password lowLevelError Message Invalid Password List of errors CodeMessageLevel 101Invalid method1 102Internal Server Error1 103Route not found1 104Unable to marshal JSON1 106Poorly formatted json object1 107Internal Server Error1 108Endpoint is not yet implemented1 109Unreachable Code Reached Incredible1 110Body Required1 111Internal Server Error3 112Bad request1 113Internal Server Error1 114Internal Server Error1 115Internal Server Error1 116Internal Server Error1 117Internal Server Error1 118Internal Server Error1 119Internal Server Error1 200Invalid Permissions1 201User does not have access to system1 202Bad request1 203Internal Server Error1 204Bad request1 205Internal Server Error1 206Internal Server Error1 207Internal Server Error1 208Internal Server Error1 210Internal Server Error1 211Internal Server Error1 213Internal Server Error1 214Unable to validate arguments for user roles1 215Unable to fetch all users1 216Bad request1 217Bad request1 218Bad request1 219Internal Server Error1 220Internal Server Error1 221Internal Server Error1 223Internal Server Error1 300Internal Server Error1 301Bad request1 3021 303Internal Server Error1 304Internal Server Error1 305Bad request1 306Internal Server Error1 307Internal Server Error1 308Internal Server Error1 309Bad request1 310Bad request1 311Bad request1 312Bad request1 313Bad request1 314Internal Server Error1 315Internal Server Error1 316Bad request1 317Internal Server Error1 400Internal Server Error1 401Internal Server Error1 402Internal Server Error1 403Internal Server Error1 404Bad request1 405Internal Server Error1 406Internal Server Error1 407Name too short1 408Bad request1 409Internal Server Error1 410Internal Server Error1 411Internal Server Error1 412Bad request1 413Internal Server Error1 414Internal Server Error1 415Internal Server Error1 416Internal Server Error1 417Bad request1 418Internal Server Error1 419No service with that name1 420Internal Server Error1 421Bad request1 500Internal Server Error1 501Internal Server Error1 502Bad request1 503Internal Server Error1 504Bad request1 505Internal Server Error1 506Bad request1 507Internal Server Error1 600Unable to fetch event definitions2 601Unable to fetch event handlers2 602Unable to create event handler2 603Unable to fetch event handler2 604Unable to update event handler2 605Unable to remove event handler2 606Unable to fetch all timers2 607Unable to create timer2 608Unable to fetch timer2 609Unable to update timer2 610Unable to delete timer2 611No name specified for trigger1 900Bad request1 9012 902Internal Server Error2 903Internal Server Error2 904Internal Server Error2 905Internal Server Error2 906Internal Server Error1 907Bad request1 908Internal Server Error1 909Internal Server Error1 910Bad request1 911Internal Server Error1 912Bad request1 913Internal Server Error1 914Internal Server Error1 915Internal Server Error1 916Internal Server Error1 917Internal Server Error1 918Internal Server Error1 919Bad request1 920Internal Server Error1 921Internal Server Error1 922Internal Server Error1 923Bad request1 924Bad request1 925Internal Server Error1 926Internal Server Error1 1000Internal Server Error1 1001Internal Server Error1 1002Bad request1 1003Internal Server Error1 1004Internal Server Error1 1005Internal Server Error1 1100Bad request1 1101Internal Server Error1 1102Internal Server Error1 1103Internal Server Error1 1104Internal Server Error1 1105Internal Server Error1 1106Unable to validate arguments for device1 1107Internal Server Error1 1108Internal Server Error1 1109Internal Server Error1 1110Internal Server Error1 1111Unable to validate arguments for device roles1 1200Bad request1 1201Internal Server Error1 1202Bad request1 1203Internal Server Error1 1300Internal Server Error1 1401Internal Server Error1 1402Bad request1 1403Bad request1 1404Internal Server Error1 1405Internal Server Error1 1406Internal Server Error1 1407Bad request1 1408Internal Server Error1 1409Internal Server Error1 1410Bad request1 1411Internal Server Error1 1412Bad request1 1413Internal Server Error1 1414Internal Server Error1 1415Internal Server Error1 1416Internal Server Error1 1417Bad request1 1418Internal Server Error1 1419Internal Server Error1 1420Bad request1 1421Internal Server Error1 1422Internal Server Error1 1423Bad request1 1424Internal Server Error1 1425Internal Server Error1 1426Bad request1 1427Internal Server Error1 1428Bad request1 1429Internal Server Error1 1430Bad request1 1431Internal Server Error1 1432Bad request1 1433Internal Server Error1 1500Internal Server Error1 1501Bad request1 1502Internal Server Error1 1503Internal Server Error1 1504Internal Server Error1 1505Internal Server Error1 1600Bad request1 1601Internal Server Error1 1602Internal Server Error1 1603Internal Server Error1 1604Internal Server Error1 1605Internal Server Error1 1606Bad request1 1607Internal Server Error1 1608Internal Server Error1 1609Internal Server Error1 1610Internal Server Error1 1611Bad request1\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/Go/API_Reference\",\"content\":\" Setup newUserClientsystemkey systemsecret email password string UserClient systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings email string Email of nondev user to connect to system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles password string Password of nondev user to connect to system as Authentication userClientAuthenticate error Authenticates credentials set on userClient and sets session token userClientRegisterusername password string error Register a new user with the platform username string Email of the new user password string Password of the new user userClientRegisterUserusername password string mapstringinterface error Register a new user with the platform and return response with token username string Email of the new user password string Password of the new user userClientLogout error End session for current user Data userClientInsertDatacollectionid string data interface error Insert new item in the collection collectionid string ID assigned to the collection by the system data interface Representatation of data object to be inserted userClientCreateDatacollectionid string data interface interface error Insert new item in the collection and return the response collectionid string ID assigned to the collection by the system data interface Representation of data object to be inserted userClientGetDatacollectionId string query GoSDKQuery mapstringinterface error Retrieve array of items from the collection using the collection ID collectionId string ID assigned to the collection by the system query GoSDKQuery Custom query created using this SDK userClientGetDataByNamecollectionName string query GoSDKQuery mapstringinterface error Retrieve array of items from the collection using the collection name collectionName string Name assigned to the collection by the developer query GoSDKQuery Custom query created using this SDK userClientUpdateDatacollectionid string query GoSDKQuery changes mapstringinterface error Updates existing items in the collection that match the provided query collectionId string ID assigned to the collection by the system query GoSDKQuery Custom query created using this SDK changes mapstringinterface Keyvalue pairs representing column names to be updated and new values userClientDeleteDatacollectionid string query GoSDKQuery error Removes every item in the collection that match the provided query collectionId string ID assigned to the collection by the system query GoSDKQuery Custom query created using this SDK userClientGetColumnscollectionid string interface error Retrieves column names types and primary keys for a collection collectionId string ID assigned to the collection by the system Queries query NewQuery GoSDKQuery Returns new Query to be used in Data operations queryEqualTofield string value interface Select where field is equal to value field string Field column name in collection value interface Data to match in field queryGreaterThanfield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryGreaterThanEqualTofield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryLessThanfield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryLessThanEqualTofield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryNotEqualTofield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryMatchesfield string value interface Query where field is than value using regex field string Field column name in collection value interface Data to match in field queryOrorQuery GoSDKQuery Join two queries together with OR condition orQuery GoSDKQuery Second GoSDkQuery Code Services userClientCallServicesystemKey name string params mapstringinterface mapstringinterface error Run a named code service that exists on the system with options and returns the response object or an error systemKey string Key to system that contains desired code service name string Name of code service to be executed params mapstringinterface Request object to be passed to code service function on execution Messaging userClientInitializeMQTTclientid string ignore string timeout int error Set required MQTT options on user client clientid string MQTT client id ignore string Not used default to timeout int Timeout value for MQTT client in Seconds userClientConnectMQTTssl tlsConfig lastWill GoSDKLastWillPacket error Establish MQTT connection for set user clientid tlsConfig lastWill GoSDKLastWillPacket userClientPublishtopic string message byte qos int error Publish message on MQTT topic topic string MQTT topic to publish on message byte Byteseralized message qos int QOS priority for message userClientSubscribetopic string qos int chan mqttPublish error Asynchronoulsy subscribe to MQTT topic and push messages onto channel as they arrive topic string MQTT topic to subscribe qos int QOS priority for message userClientUnsubscribetopic string error Stop subscription to MQTT topic topic string MQTT topic to unsusbcribe userClientDisconnect error End MQTT connection for set user\"},{\"title\":\"GoDoc\",\"href\":\"/4-developer_reference/Go/GoDoc\",\"content\":\"The GoDoc for the Go API can be found at Go SDKstaticgoapipkggithubcomclearbladeGoSDKindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Go/QuickStart\",\"content\":\" Download and Install Go Follow the instructions for downloading and installing Go from httpsgolangorgdocinstall Clone the ClearBlade GoSDK repository Do a git clone httpsgithubcomClearBladeGoSDKgit to clone the GoSDK for the ClearBlade Platform Import the GoSDK package in your project In order to use the GoSDK in your project you will need to import the GoSDK package that you cloned from github in your project\"},{\"title\":\"Go\",\"href\":\"/4-developer_reference/Go/_default\",\"content\":\"\"},{\"title\":\"ClearBlade on Raspberry Pi\",\"href\":\"/4-developer_reference/IoT_Gateways/ClearBladePlatform_Standalone\",\"content\":\" Setting up the ClearBlade platform on Raspberry Pi Login to your Raspberry Pi and download the ClearBlade Platform binary novibinarytargz from httpsdrivegooglecomfolderviewid0B1WqgabOjCgCNEZJMGRhQld5MXcuspsharing Unzip to a directory of your choice and go to that directory Contact ClearBlade support to get you key needed to start the platform Start the ClearBlade platform using the following commands clearblade tkey yourkey local Setting up the ClearBlade Console on your local machine On your computer download the ClearBlade Console from noviconsoletargz httpsdrivegooglecomfolderviewid0B1WqgabOjCgCNEZJMGRhQld5MXcuspsharing Unzip to a directory of your choice and go to that directory Execute the following commands to start the Console npm install grunt local goplatform platformURLhttpraspberrypiIPaddress9000 Open a web browser and go to httplocalhost3000 and you should see the console Create a new account by clicking Sign Up and you are good to go\"},{\"title\":\"Eclipse Kura\",\"href\":\"/4-developer_reference/IoT_Gateways/Kura\",\"content\":\" Overview and Setup The Raspberry Pi can be used as an IoT Gateway to communicate with the ClearBlade Platform We make use of Eclipse Kura to achieve this Eclipse Kura is an Eclipse IoT project that provides a platform for building IoT gateways It is a smart application container that enables remote management of such gateways and provides a wide range of APIs for allowing you to write and deploy your own IoT application Kura runs on top of the Java Virtual Machine JVM and leverages OSGi a dynamic component system for Java to simplify the process of writing reusable software building blocks Kura APIs offer easy access to the underlying hardware including serial ports GPS watchdog USB GPIOs I2C etc It also offer OSGI bundle to simplify the management of network configurations the communication with IoT servers and the remote management of the gateway Setting up Kura on Eclipse First of all you will need to download Eclipse and set up your workspace for Kura Please follow the instructions given at httpeclipsegithubiokuradockurasetuphtml Setup Kura on the Raspberry Pi Download the Kura image for the Raspberry Pi from httpswwweclipseorgkuradownloadsphp Select the Raspbian Model 2 No Net with Web UI Stable in the Kura Extended Downloads section Copy the downloaded file to your Raspberry Pi Check whether Java is installed on your Raspberry Pi by executing the following command java version If Java is not installed please install it with the following command sudo aptget install java Now cd to the directory where you copied the Kura image and install Kura with the following commands sudo aptget update sudo dpkg i yourkuraimagefilenamedeb sudo aptget install f After successful installation of Kura reboot your Raspberry Pi sudo reboot After reboot you can check whether Kura is running by going to httpyourraspberrypiIP in your browser and the Kura console should show up The default username is admin and the default password is admin Developing a Kura Plugin for the Raspberry Pi Now we will create a Kura plugin in Eclipse bundle it as a JAR and deploy it to the Raspberry Pi This plugin will use the ClearBlade Java SDK to communicate with the platform The plugin will initialize with the ClearBlade Platform and send a message over MQTT This plugin contains the source code of the ClearBlade Java API Eclipse Paho MQTT and and Activate class which runs when the plugin is deployed on the Raspberry Pi The ClearBlade Java API depends on the Google Gson library so we will create a separate dependency plugin for it and deploy it separately to the Raspberry Pi Deploy the Google GSON Bundle Dependency for the Plugin and ClearBlade Java SDK to the Raspberry Pi First of all clone the ClearBlade Java SDK repo git clone httpsgithubcomClearBladeClearBladeJavaSDKgit and import this repo into Eclipse Open Eclipse and expand the targetdefinition folder and double click the kuraequinoxXXXtarget file Click the Set as Target Platform link Now click File New Other and select Plugins from Existing JAR Archives Click Next Click Add and expand the ClearBlade Java SDK that you imported and expand the libs folder within that SDK Select the gson23jar and hit Ok Give your project a name and uncheck the Unzip the JAR archives into the project option and click Finish Next we will create a Deployment Bundle of the google gson library rightclick your newly created project comgooglegson from the screenshot above and Export Plugin Development Deployable plugins and fragments Note If you get an error regarding Java SE 18 during Export go to your MANIFESTMF and delete the line BundleRequiredExecutionEnvironment JavaSE18 save and try again Click Next and choose the directory to save and click Finish Next step is to transfer the Google GSON Deployment Bundle to the Raspberry Pi For deploying bundles to the Raspberry Pi you will need the mToolkit in Eclipse If you have followed the Eclipse Kura setup instructions you will have installed it already If you have not installed it please follow the instructions at httpeclipsegithubiokuradockurasetuphtml Select the Eclipse menu Window Show View Other Select mToolkit Frameworks entry to open the mToolkit Frameworks view Enter a name for the framework definition and the IP address of the target device Close the dialog by clicking the OK button Rightclick the framework icon name and select Connect Framework The list of installed bundles and deployment packages should be retrieved shortly Rightclick the Framework name and select Install Bundle and select the JAR Deployment bundle that you just created for the google gson library If everything goes well if you expand the Bundles folder in your framework you should see your newly deployed bundle running If its not running you can rightclick the bundle and choose to start or stop it You can see any errors related to the bundle in the Console Deploy the Plugin to the Raspberry Pi Now we will create a new Plugin project and copy the ClearBlade Java SDK and Eclipse Paho source files to it and create an activator class containing the code to make the hardware communicate with the ClearBlade Java API Clone the Eclipse Paho Java repo git clone httpsgithubcomeclipsepahomqttjavagit In Eclipse click File New Other and select Plugin Project Click Next Give your project a name and select the Standard OSGI framework as shown in the screen capture below Click Next and make sure that the Generate an activator is unchecked and click Finish Now copy and paste the ClearBlade Java SDK and Paho MQTT packages in your plugins src folder The end result should look like this First you will use the Manifest Editor in Eclipse to add some dependencies Click the Dependencies tab at the bottom of the editor screen and then click the Automated Management of Dependencies heading to expand it and make sure that ImportPackage radio button is selected Click Add and make sure you add the dependencies as seen in the screen capture below Now you are ready to start writing a simple Java class Rightclick your plugin project Select New Class The New Java Class window appears Give your class a name and click Finish Copy and paste the following code in you newly created class and replace YOURCLASSNAME with the class name you just created and replace the system key system secret email and password with yours java private static final Logger slogger LoggerFactorygetLoggerYOURCLASSNAMEclass private static final String APPID ClearBlade Test protected void activateComponentContext componentContext sloggerinfoBundle APPID has started sloggerdebugAPPID This is a debug message initCB protected void deactivateComponentContext componentContext sloggerinfoBundle APPID has stopped private void initCB InitCallback initCallback new InitCallback Override public void doneboolean results SystemoutprintlnClearBlade platform initialized Message message new MessageclientIDtest 1 try Threadsleep2000 catchInterruptedException ex exgetMessage messagepublishhellothere yes kura works Override public void errorClearBladeException error String message errorgetMessage Systemoutprintlnmessage String systemKey YOURSYSTEMKEY String systemSecret YOURSYSTEMSECRET String userEmail YOUREMAIL String userPassword YOU String platformURL httpsrtpclearbladecom String messagingURL tcprtpclearbladecom1883 HashMap options new HashMap optionsputemail userEmail optionsputpassword userPassword optionsputplatformURL platformURL optionsputmessagingURL messagingURL ClearBladeinitializesystemKey systemSecret options initCallback Switch back to the Manifest Editor Under Automated Management of Dependencies ensure the ImportPackage option button is selected Click the add dependencies link to automatically add packages to the dependencies list based on the import statements in your example code Save changes to the Manifest again The end result should look like this Next go to your MANIFESTMF and delete the line BundleRequiredExecutionEnvironment JavaSE18 and save Now we need to create a component class Rightclick the plugin project and select New Other From the wizard select Plugin Development Component Definition and click Next In the Class field of the New Component Definition window shown below click Browse Search for your class and select it and hit Ok In the Enter or select the parent folder field of the New Component Definition window add OSGIINF to the existing entry eg orgeclipsekuratestclearbladeTestCBOSGIINF Then click Finish After the Component class has been created it will open in the Workspace In the Overview tab the Name and Class point to our Java class Set the Activate field to activate and set the Deactivate field to deactivate Doing so tells the component where these OSGi activation methods are located Then save the Component class definition file Next we will create a Deployment Bundle of the plugin rightclick your newly created plugin project and Export Plugin Development Deployable plugins and fragments Click Next and choose the directory to save and click Finish Now we need to deploy the exported plugin to the Raspberry Pi Rightclick on the framework that you use to connect to your Pi and select Install Bundle Choose the newly created plugin bundle and hit install This should deploy the plugin to the Raspberry Pi and start it Any errors or logs can be seen in the Console If all goes well you will see a message published on the ClearBlade Console \"},{\"title\":\"IoTGateways\",\"href\":\"/4-developer_reference/IoT_Gateways/_default\",\"content\":\"\"},{\"title\":\"Authenticating\",\"href\":\"/4-developer_reference/Java/API_Reference/Authenticating\",\"content\":\"Authentication is the very first and crucial step in using the ClearBlade Java API for your application You will not be able to access any features of the ClearBlade platform without Authentication You will need to import the following packages in your java file import comclearbladejavaapiClearBlade import comclearbladejavaapiInitCallback There are two ways to authenticate to the ClearBlade platform Without Options java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initCallback With Options java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret HashMap initOptions new HashMap Available init options email String to register or login as specific user required if password is given Default null password password String for given user required if email is given Default null platformURL Custom URL for the platform Default httpsplatformclearbladecom messagingURL Custom Messaging URL Default tcpmessagingclearbladecom1883 registerUser Boolean to tell if youd like to attempt registering the given user Default false logging Boolean to enable ClearBlade Internal API logging Default false callTimeout Int number of milliseconds for call timeouts Default 30000 30 seconds allowUntrusted Boolean to connect to a platform server without a signed SSL certificate Default false InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage initOptionsputplatformURL httpsyourURLcom initOptionsputmessagingURL tcpyourURL1883 ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initOptions initCallback \"},{\"title\":\"Code\",\"href\":\"/4-developer_reference/Java/API_Reference/Code\",\"content\":\"The ClearBlade Java API allows executing a Code Service on the platform from your Java application Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Code API You need to import the following packages to use the Code API import comclearbladejavaapiCode import comclearbladejavaapiCodeCallback Code Service Without Parameters A code service which does not take any parameters can be executed as follows java String serviceName yourServiceName CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName codeServiceexecuteWithoutParamscodeCallback Code Service With Parameters A Json Object of parameters needs to be passes to the Code class constructor along with the service name java String serviceName yourServiceName String parameters param1value1 JsonObject parameterJsonObject new JsonParserparseparametersgetAsJsonObject CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName parameterJsonObject codeServiceexecuteWithParamscodeCallback \"},{\"title\":\"Data\",\"href\":\"/4-developer_reference/Java/API_Reference/Data\",\"content\":\"With the ClearBlade Java API a developer can use the Query Item and Collection objects to manipulate data on the ClearBlade platform Import the following packages import comclearbladejavaapiCollection import comclearbladejavaapiQuery import comclearbladejavaapiItem import comclearbladejavaapiDataCallback Query Create a new Query object java String collectionID yourCollectionID Query query new QuerycollectionID queryEqualToString field Object value java Creates an equality clause in the query object queryequalToname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is equal to John querynotEqualString field Object value java Creates a nonequality clause in the query object querynotEqualname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is not equal to John querygreaterThanString field Object value java Creates a greater than clause in the query object querygreaterThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than age 18 if present querygreaterThanEqualToString field Object value java Creates a greater than or equal to clause in the query object querygreaterThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than equal to age 18 if present querylessThanString field Object value java Creates a less than clause in the query object querylessThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than age 18 if present querylessThanEqualToString field Object value java Creates a less than equal to clause in the query object querylessThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than equal to age 18 if present queryupdatefinal DataCallback callback java Call an update on all items matching the query criteria to conform to the changes that have been added via the addChange method queryequalToname John queryaddChangename Johan queryupdate new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful queryremovefinal DataCallback callback java Removes on all items matching the query criteria within a Collection queryequalToname John queryremove new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful The page size and page number of the results to be returned can be set by using querysetPageSizeint pageSize and querysetPageNumint pageNum Collections The Collection class contains functions to fetch GET update PUT create POST and remove DELETE a collection using the REST API A collection object needs to be created first java String collectionID yourCollectionID Collection collection new CollectioncollectionID collectionfetchQuery query final DataCallback callback java Gets all Items that match Query criteria from the platform in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty Query query new Query queryequalToheight 105 collectionfetchquery new DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionfetchAllfinal DataCallback callback java Gets all Items that are saved in the collection in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty collectionfetchAllnew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionupdatefinal DataCallback callback java Query query new QuerycollectionID queryequalToname John queryaddChangename Johan collectionupdatenew DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectioncreateString columns final DataCallback callback java String column columnNamenewColumn collectioncreatecolumn new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectionremoveDataCallback callback java Deletes all Items that are saved in the collection in the Cloud synchronously Deleted Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in the callback error function collectionremovenew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure \"},{\"title\":\"Messaging\",\"href\":\"/4-developer_reference/Java/API_Reference/Messaging\",\"content\":\"The Messaging API is used initialize connect and communicate with the ClearBlade MQTT Broker for publishing messages subscribing unsubscribing to and from topics and disconnect Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Messaging API This is important because the ClearBlade MQTT Broker requires the authentication token to establish a successful connection This authentication token can only be obtained by initializing and authenticaing with the ClearBlade platform You will need to import the following packages for using the Messaging API import comclearbladejavaapiMessage import comclearbladejavaapiMessageCallback Initialize and Connect The first step is to create a new Message object by passing the client ID and messaging QoS optional The Message constructor will then initialize and connect with the MQTT Broker java String clientID ClearBladeJavaTest Message message new MessageclientID QoS 0 Default OR java int qos 1 QoS can be 01 or 2 String clientID ClearBladeJavaTest Message message new MessageclientID qos After the connection is successful you can publish subscribe unsubscribe or disconnect using the Message object Publish The publish function takes a topic and message of type String and publishes to the MQTT Broker java String topic yourTopic String message yourMessage messagepublishtopic message Subscribe The subscribe function takes a topic of type String and a callback to handle the arrived messages java String topic topicToSubscribe MessageCallback messageCallback new MessageCallback Override public void doneString topic String messageString Message arrived on subscribed topic messagesubscribetopic messageCallback Unsubscribe The unsubscribe function takes a topic of type String java String topic topicToUnsubscribe messageunsubscribetopic Disconnect The disconnect function is used to disconnect from the MQTT Broker Note that this does not disconnect the user from the ClearBlade platform User logout needs to be called separately java messagedisconnect \"},{\"title\":\"Setup\",\"href\":\"/4-developer_reference/Java/API_Reference/Setup\",\"content\":\" Dependencies The ClearBlade Java API requires three JAR files that should be copied to your projects libs folder ClearBladeJavaAPIjar orgeclipsepahoclientmqttv3102jar gson23jar\"},{\"title\":\"API_Reference\",\"href\":\"/4-developer_reference/Java/API_Reference/_default\",\"content\":\"\"},{\"title\":\"Example\",\"href\":\"/4-developer_reference/Java/Example\",\"content\":\"Heres an example of a ClearBlade Java Client that initializes with the ClearBlade platform connects to the MQTT broker and publishes and subscribes to messages Then it disconnects from the MQTT Broker and logs out the user java package comexampleclient import javautilHashMap import comclearbladejavaapi import comclearbladejavaapiinternal public class MQTTClientJava private static Message message private static boolean isInit false public static void mainString args initClearBlade if isInit connectToMQTT try Threadsleep2000 catchInterruptedException ex exgetMessage subscribehello try Threadsleep5000 catchInterruptedException ex exgetMessage publishhello this is a test try Threadsleep5000 catchInterruptedException ex exgetMessage messagedisconnect logoutUser private static void initClearBlade InitCallback initCallback new InitCallback Override public void doneboolean results SystemoutprintlnClearBlade platform initialized isInit true Override public void errorClearBladeException error isInit false String message errorgetMessage Systemoutprintlnmessage String systemKey yourSystemKey String systemSecret yourSystemSecret String userEmail exampleclearbladecom String userPassword password String platformURL httpsexampleclearbladecom String messagingURL tcpexampleclearbladecom1883 HashMap options new HashMap optionsputemail userEmail optionsputpassword userPassword optionsputplatformURL platformURL optionsputmessagingURL messagingURL ClearBladeinitializesystemKey systemSecret options initCallback private static void connectToMQTT message new MessageclientIDtest 1 private static void subscribeString topic MessageCallback messageCallback new MessageCallback Override public void doneString topic String message SystemoutprintlnTopic topic Message received message Override public void errorClearBladeException exception String message exceptiongetLocalizedMessage SystemoutprintlnCB Subscribe Exception message messagesubscribetopic messageCallback private static void publishString topic String payload messagepublishtopic payload private static void logoutUser User currentUser ClearBladegetCurrentUser currentUserlogoutnew InitCallback Override public void doneboolean results SystemoutprintlnUser logged out Override public void errorClearBladeException exception SystemoutprintlnLogout failed exceptiongetMessage \"},{\"title\":\"Javadoc\",\"href\":\"/4-developer_reference/Java/Javadoc\",\"content\":\"The Javadoc for the Java API can be found at Java APIstaticjavaapiindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Java/Quickstart\",\"content\":\" Installation Java clients using the ClearBlade java SDK can be written in any idea of your choice Popular recommended IDEs include Eclipse IntelliJ NetBeans Dependencies The ClearBlade Java API requires three JAR files that should be copied to your projects libs folder ClearBladeJavaAPIjar orgeclipsepahoclientmqttv3102jar gson23jar The assets can be downloaded from ClearBlade Java SDKhttpsgithubcomClearBladeClearBladeJavaSDK\"},{\"title\":\"Java\",\"href\":\"/4-developer_reference/Java/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/JavaScript/API_Reference\",\"content\":\" Setup var cb new ClearBlade cbinitOptions Options object systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings logging boolean Enable logging by setting logging key to true email string Email of nondev user to connect to system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles password string Password of nondev user to connect to system as registerUser boolean If registerUser key is present and set to true a new user will be created in the system using the values set to email and password callback function Callback to be asynchronously fired when the connection to the system is established callTimeout integer Seconds to wait before timing out requests URI Platform instance to connect to Defaults to httpsplatformclearbladecom if not provided messagingURI Platform instance to connect to for messaging Defaults to platformclearbladecom if not provided messagingPort Port to use when connecting to messaging server Authentication cbsetUseremail authToken Set which user will make requests to the platform email string Required The email of the user authToken string Required The authToken returned by the platform as an argument to the init callback cbregisterUseremail password callback Register a new user with the platform email string Required The email of the new user password string Required The password of the new user callback function Asynchronously fired after user is registered with the platform cbisCurrentUserAuthenticatedcallback Check if currently set user has an active session in the platform callback functionerr response Asynchronously fired after response is received cblogoutUsercallback End session for currently set user callback functionerr response Asynchronously fired after platform returns repsonse cbloginAnoncallback Authenticate with platform as anonymous user callback functionerr response Asynchronously fired after platform creates new anonymous session cbloginUseremail password callback Authenticate with platform as provided user email string Required The email for an existing user password string Required The password for an existing user callback functionerr response Asynchronously fired after platform creates new session for provided user Collections var collection cbCollectionOptions Options object or serialized string Required Provide either collectionName Name of the collection on current system to connect to collectionID ID of the collection on current system to connect to Available on data tab of console collectionfetchquery callback Retrieve array of items from the collection query object keyvalue pairs representing column names and desired values callback functionerr dataArray Asynchronously fired after platform returns response collectioncreatenewItem callback Create new item in the collection newItem object Required An object with keyvalue pairs representing column names and desired values callback functionerr newItem Asynchronously fired after platform returns response collectionupdatequery changes callback Updates existing item in the collection query ClearBladeQuery changes object Required An object with keyvalue pairs representing column names to be updated and new values callback functionerr updatedItem Asynchronously fired after platform returns response collectionremovequery callback Removes every item in the collection matching query query ClearBladeQuery callback functionerr removedItem Asynchronously fired after platform returns response collectioncolumnscallback Retrieve column names data types and whether the column is a primary key callback functionerr columnsArray Asynchronously fired after platform returns response collectioncountquery callback Count items in collection matching query query ClearBladeQuery callback functionerr count Asynchronously fired after platform returns response Query var query cbQueryOptions Creates new ClearBladeQuery to be used in Collection operations Options object or serialized string Required Provide either collectionName Name of the collection on current system to connect to collectionID ID of the collection on current system to connect to Available on data tab of console queryaddSortToQueryqueryObj direction fieldName Sort results according to direction by fieldName queryObj object direction string Required Choose from ASC or DESC fieldName name of column to sort by queryaddFilterToQueryqueryObject condition key value Filter results accord to queryObject queryObj object condition string choose from key string value string integer float queryascendingfieldName Sort results ascending by fieldName fieldName string querydescendingfieldName Sort results descending by fieldName fieldName string queryequalTofieldName value Query where field is equal to value fieldName string value string integer float querygreaterThanfieldName value Query where field is greater than value fieldName string value string integer float querygreaterThanEqualTofield value Query where field is greater than value fieldName string value string integer float querylessThanfieldName value fieldName string value string integer float querylessThanEqualTofieldName value fieldName string value string integer float querynotEqualTofieldName value fieldName string value string integer float querymatchesfieldName regexPattern fieldName string value string queryorotherQuery otherQuery ClearBladeQuery querysetPagepageSize pageNum pageSize int pageNum int queryfetchcallback Execute built query and retrieve matching items callback functionerr itemsArray queryupdatechanges callback Execute built query and update matching items callback functionerr itemsArray queryremovecallback Execute built query and remove matching items callback functionerr itemsArray Item var item cbItemdata collectionID data object contains structure of collection item collectionID string data collection ID in current system itemsavecallback callback functionerr result itemrefreshcallback callback functionerr result itemdestroycallback callback functionerr result Code Services var code cbCode codeexecutename options callback Run a named code service that exists on the system with options name string Required The name of code service to be executed options object The request object to be passed to the code service function on execution callback functionerr response codegetCompletedServicescallback callback functionerr response codegetFailedServicescallback callback functionerr response User Management var user cbUser ClearBlade User Object usergetUsercallback Retrieve info on the current set user callback functionerr userInfo usersetUseruserInfo callback Set info on the current active user userInfo object contains keyvalue pairs representing the user info to be updated callback functionerr userInfo userallUsersquery callback Return all users that match the specified query query ClearBladequery callback functionerr usersArray usersetPasswordold new callback Change current set users password old string old password of user new string new password of user callback functionerr response usercountquery callback Return a count of all users that match the specified query query ClearBladequery callback functionerr count Messaging var messaging cbMessagingoptions callback ClearBlade Messaging object callback functionerr data asynchronously fired upon error or successful connection to messaging server messaginggetMessageHistorytopic last count callback topic string that signifies which topic to search count int that signifies how many messages to return 0 returns all messages last int Epoch timestamp in seconds that will retrieve count number of messages before that timestamp callback Function that handles the response from the server messaginggetMessageHistoryWithTimeFrametopic count last start stop callback topic string that signifies which topic to search count int that signifies how many messages to return 0 returns all messages last int Epoch timestamp in seconds that will retrieve count number of messages before that timestamp start int Epoch timestamp in seconds that will retrieve count number of messages within timeframe stop int Epoch timestamp in seconds that will retrieve count number of messages within timeframe callback Function that handles the response from the server messaginggetAndDeleteMessageHistorytopic count last start stop callback topic string that signifies which topic to search count int that signifies how many messages to return and delete 0 returns and deletes all messages last int Epoch timestamp in seconds that will retrieve and delete count number of messages before that timestamp start int Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe stop int Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe callback Function that handles the response from the server messagingcurrentTopicscallback Retrieve all active messaging topics on current system callback functionerr topicsArray messagingpublishtopic payload Publish payload on messaging topic via MQTT topic string Required Messaging topic publish on payload object messagingpublishRESTtopic payload callback Publish payload on messaging topic via HTTP topic string Required Messaging topic publish on payload object Message payload callback functionerr data messagingsubscribetopic options callback Subscribe to MQTT topic topic string messaging topic to subscribe to via MQTT options object onSuccess functionpayload Fired on successful subscription Defaults to null onFailure functionerr Fired on error with subscription Defaults to null callback functionerr payload messagingunsubscribetopic options Unsubcribe from MQTT topic topic string name of MQTT topic to unsubscribe from options object onSuccess function Fired on successful subscription Defaults to null onSuccess functionresponse onFailure function Fired on error with subscription Defaults to null onFailure functionerr messagingdisconnect Close connection to messaging server MessagingStats var messagingStats cbMessagingStats ClearBlade Messaging Statistics object messagingStatsgetAveragePayloadSizetopic start stop callback topic string that signifies which topic to search start int Epoch timestamp in seconds that will retrieve count number of messages within timeframe stop int Epoch timestamp in seconds that will retrieve count number of messages within timeframe callback Function that handles the response from the server messagingStatsgetOpenConnectionscallback callback Function that handles the response from the server messagingStatsgetCurrentSubscriberstopic callback topic string that signifies which topic to search callback Function that handles the response from the server Analytics var analytics cbAnalytics ClearBlade Analytics Object Example filter object scope system filter module users action create range start 1493010000 end 1493137098 analyticsgetStoragefilter callback filter filter object see above callback Function that handles the response from the server analyticsgetCountfilter callback filter filter object see above callback Function that handles the response from the server analyticsgetEventListfilter callback filter filter object see above callback Function that handles the response from the server analyticsgetEventTotalsfilter callback filter filter object see above callback Function that handles the response from the server analyticsgetUserEventsfilter callback filter filter object see above callback Function that handles the response from the server\"},{\"title\":\"JSDoc\",\"href\":\"/4-developer_reference/JavaScript/JSDoc\",\"content\":\"The Javadoc for the JavaScript API can be found at JS APIstaticjsapiindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/JavaScript/QuickStart\",\"content\":\" Installation Download and place httpsrawgithubusercontentcomClearBladeJavaScriptAPImasterClearBladejs inside your project directory and include it in your HTML files header Usage The ClearBlade object attaches to window after being included Calling ClearBladeinitconfigObject will initialize ClearBlade settings and functions and pass it as an argument to a callback javascript ClearBladeinit URI platform address eg httpsplatformclearbladecom systemKey theSystemKey systemSecret theSystemSecret email userEmail use registerEmail instead if you wish to create a new user password userPassword callback initCallback function initCallbackerr cb err is a boolean cb has APIs and constructors attached if err throw new Errorcb else var collection cbcollection collectionfetchsomeQuery collectionFetchCallbackerr rows if err throw new Errorrows else do something with the collection rows var messaging cbmessaging messagingsubscribesomeTopic timeout 120 subscribeCallbackerr message if err throw new Errormessage else do something with response See SDK Reference for a full list of APIs\"},{\"title\":\"Tutorial\",\"href\":\"/4-developer_reference/JavaScript/Tutorial\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device to be part of the internet of things Concepts include data management API creation messaging triggering of events and timers for scheduled work all done in a secure coherent manner Setup Before starting we need to make sure you have access to a ClearBlade instance Many organizations have their own private hybrid or public instances which can made available to you If your not sure or dont have access yet you can always use a free trial account at the public SaaS ClearBlade instance at httpsplatformclearbladecom Now Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the gear icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the JavaScript tutorial source files from Github httpsgithubcomClearBladeTutorialJavaScript 1 Clone the repository with the command git clone httpsgithubcomClearBladeTutorialJavaScriptgit 2 Edit the file TutorialJavaScriptjspart1js and save javascript var initOptions URI httpsclearbladeYOURDOMAINcom messagingURI clearbladeYOURDOMAINcom messagingPort 8904 useMQTT true cleanSession true systemKey YOURSYSTEMKEY systemSecret YOURSYSTEMSECRET If you are using the public platform use URI httpsplatformclearbladecom messagingURI platformclearbladecom 7 Open the file indexhtml in your local browser 8 The final step of Part 1 is to initialize the ClearBlade Platform anonymously Follow the instructions in your client UI to complete that task In some cases this tutorial will show examples of the client in Javascript Expect comparable user interfaces to exist in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased Although you have already created a developer account to login to the platform each system you create will have its own user registry For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab to Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation1platformconceptsUsers 6 Go back to you client app and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 The data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature float d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin Tx USA 102 Sunny 9 Insert a row for New York Ny USA 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 You now have defined populated and authorized a new data structure NOTE For more information on the client app you can checkout the readme available on the Tutorial GitHub page Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service Best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input parameter named city to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the parentheses around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess sends the payload back to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by Clicking the service settings icon Set Logging enabled to YES Click the Requires tab and add the log library Choose Apply Now update your service to write the request object to the log javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the history icon in the top right d Choose the appropriate service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update the permissions of the service to allow execution for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Executable permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 and add parameters city state and country 2 Copy and insert the following code into the newly created service javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry ClearBladeinitrequestreq updateCollection goes here var createCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifynewRow collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 createCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather updateCollection var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetch callback NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Create Query object to go and search for existing data in the collection that matched the information passed over parameters c Update logic to add the new city if it didnt exist in the collection javascript var updateCollection function var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country var updateRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifyupdateRow queryupdateupdateRow callback 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Developers always need to make reusable logic that can be leveraged across their applications In step 5 you used the built in library called ClearBlade You may also create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and confirm the collectionName is the same as the collection you created earlier javascript var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperialAPPID4b7403db83c14490daa37a57b722743f strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectionNameWeather qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the setting for the updateCityLibrary by clicking the wrench icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 and add parameters city state and country 11 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also include calls to your custom library javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp datamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city ClearBladeinitrequestreq var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 12 In your new servicePart6 open the setting and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 13 You can now complete Part 6 validation in your app 14 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices or in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 Javascript Tutorial shown below 2 Click the subscribe button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking publish That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensuring the message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients be the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library notifyLib 4 Select the Code type to Library 5 Use the standard process for updating the service required libraries to include clearblade 6 Copy and paste the following code javascript var notify functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 7 Next create a new service ServicePart8 and copy and paste the following code javascript function ServicePart8req resp var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather notifyJSONstringifymessage respsuccessDone var query ClearBladeQuerycollectionNameWeather queryequalTocity Austin queryfetchqueryCallback ClearBladeinitrequestreq getWeather 8 In the newly create servicePart8 open the settings and update the requires to include the libraries clearblade and notifyLib 9 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 10 Click the button Save and Test 11 Look in your client app and validate the message from Part 8 now appears in your message box 12 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic of building your own API that includes data live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by create a new service called ServicePart9Trigger and copy and paste the following code javascript function ServicePart9Triggerreq resp ClearBladeinitrequestreq notifyJSONstringifypartpart9 reqJSONstringifyreq respsuccessdone 2 Update the settings of the new service by clicking the wrench icon and require the notifyLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers Tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description ClearBladeinitrequestreq getWeathercity getWeatherCallback 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute the ServicePart9Caller from the console When this service runs it should create in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a time that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp ClearBladeinitrequestreq var message partpart10 ts Date message Service executing every 10 seconds notifyJSONstringifymessage respsuccessdone 4 Add administrator to your test users roles 5 Set the service security to administrator 6 Leave Run as blank 7 Use the standard process for updating the service required libraries to include clearblade and notifyLib 8 Test the service in the console by clicking the Save and Test button 9 Click on the wrench icon and go to the Timers tab 10 Set the timer to run the service every 10 seconds 11 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Whats Next 1 Create a Portal5portalportalgettingstarted and begin to visualize the data within your ClearBlade Platform instance 2 Familiarize yourself with the raw APIs at swagger SwaggerAnalyticsstaticrestapiindexhtmlanalytics 3 Familiarize yourself with samples tank chats 4 Learn about the integrations available Sockets Files 5 Review the CLI and development best practices 6 Practice using the system integration patterns for IoT Social SalesForce AS400 and others found on githubhttpsgithubcomClearBladeClearBladePatterns 7 Communicate on the forums\"},{\"title\":\"JavaScript\",\"href\":\"/4-developer_reference/JavaScript/_default\",\"content\":\"\"},{\"title\":\"MQTT\",\"href\":\"/4-developer_reference/MQTT\",\"content\":\"The ClearBlade Platform contains a fully compliant MQTT broker including backlevel support to 30 for supporting high speed and large scale IoT solutions In addition to honoring the core specification ClearBlade has added enhanced capability to secure assets in cotenanted environments and to provide horizontal scalability To connect standard MQTT clients you will need to use the following pattern Before Begining 1 Ensure you have an existing developer account on a ClearBlade platform instance 2 Create a System that will be your isolated messaging topic 3 Create a user in your System here2consoleadministrationUsers for how to create a new user Authentication Before a client can communicate with a broker it must first obtain a ClearBlade Token This token grants the user access and control to the System assets A token can be obtained via a REST endpoint call or via MQTT Using REST Authentication In each language specific SDK the init or login functions are provided They all use the common REST endpoint found herestaticrestapiindexhtmluserAuthenticationpost1 Using MQTT Authentication Alternatively ClearBlade provides an authentication broker for obtaining a user token The auth broker ensures the integrity and security of the transaction to prevent other clients from subscribing to client specific auth topics TCP URL Port 8905 Username Password ClientId The broker will reply back with Work broker IP address ClearBlade Auth Token Establish a Connection The MQTT protocol allows for the connect action to provide a username and password We will modify the use of those fields to accomodate our oAuth styled token model URL Username Password ClientID If you subscribe with same client ID as another subscriber your subscribe will fail With that configuration clients will now be able to connect to the broker as normal for publishing and subscribing to topics\"},{\"title\":\"SDK\",\"href\":\"/4-developer_reference/NodeJS/API_Reference\",\"content\":\"You can interact with the ClearBlade Platform using the NodeJS SDK Check it out herehttpsgithubcomClearBladeNodeSDK\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/NodeJS/QuickStart\",\"content\":\" ClearBlade Node SDK SDK for Nodejs applications to have a simple interface into ClearBladepowered servers Build StatushttpstravisciorgClearBladeNodeSDKsvgbranchmasterhttpstravisciorgClearBladeNodeSDK Installation npm install clearblade Usage To use in Nodejs javascript var ClearBlade requireclearblade ClearBladeinit \"},{\"title\":\"NodeJS\",\"href\":\"/4-developer_reference/NodeJS/_default\",\"content\":\"\"},{\"title\":\"npm\",\"href\":\"/4-developer_reference/NodeJS/npm\",\"content\":\"ClearBlade provides an npm package for simplifying the usage of the ClearBlade platform ClearBlade npmhttpswwwnpmjscompackageclearblade\"},{\"title\":\"ClearBlade.js\",\"href\":\"/4-developer_reference/PlatformSDK/ClearBlade.js\",\"content\":\"The ClearBlade library provides all the methods necessary for interacting with the ClearBlade Platform and its resources from within a code service Usage 1 Initializationinit 1 Devicesdevice 1 Queryquery 1 Collectioncollection 1 Messagingmessaging 1 Triggerstrigger 1 Edgeedge Overview ClearBladejs Library enables users to 1 Query a local or remote data collection 2 Listen to an MQTT topic and process the payload 3 Store data into a collection 3 Modify devices attributes 4 Create a timer or trigger 5 Register new users 6 Log users in or out ClearBlade The available methods for the ClearBlade class and examples of how to use them are listed below init This method sets up the ClearBlade object with a few configuration values necessary for subsequent operations against the ClearBlade Platform You must init before accessing any ClearBlade resources within your system Passing the request into the init function is the simplest and most performant way to establish an authorized instance of the ClearBlade object The ClearBlade object will inherit the permissions associated with the calling user This is the recommended way to initialize ClearBladejs Request Example javascript In this example the passed in information on the request object is used to init the ClearBlade object ClearBladeinitrequestreq Invalid credentials bad username or password leads to the init methods to throw an error You must catch this error using a try catch block To establish a new session for the ClearBlade object the options object contains all the parameters passed into the init method It can contain the following keys value pairs Mandatory Parameters systemKey the system key of the system you would like to access available in req object systemSecret the system secret of the system you would like to access available in req object Optional Parameters email the email of the user you would like to loginregister for subsequent operations password the password of the user you would like to loginregister for subsequent operations registerUser boolean that signifies that the email and password params should be used to register a new user with the platform The newly registered user will be logged in useUser an object in the form of authToken userToken used to set the user for any ensuing operations callback a function that takes a boolean for error checking and a JSON object Must be supplied if any of the following options are supplied email password registerUser If none of the mentioned options are supplied an anonymous token will be used for following operations Basic Example javascript this example simply initializes the ClearBlade object with the desired system ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret Authorization Example javascript this example uses a users email and password to log in ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret email password callback functionerr body iferr resperrorinitialization error JSONstringifybody else respsuccessbody Registration Example javascript this example uses an email and password to register a new user with the platform ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret registerUser true email password callback functionerr body iferr resperrorRegistration Error JSONstringifybody else respsuccessbody Returns a user token Preauthed example javascript Uses an email and auth token of a preauthorized user no need for a callback ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret useUser email requserid authToken requserToken ClearBladesetUseremail authToken This method sets the user to be used for all operations against the ClearBlade Platform Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladesetUseruserEmail ClearBladeloginAnoncallback This method will log into the ClearBlade platform anonymously and use the token for subsequent requests Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeloginAnonfunctionerr body iferr resperrorAnonymous login failure JSONstringifybody else respsuccessbody body object contains Auth Token ClearBladeregisterUseremail password callback This method will register a user against the ClearBlade Platform with the supplied email and password and then log them in Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeregisterUser functionerr body iferr resperrorRegister user failure JSONstringifybody else respsuccessbody body object contains Auth Token ClearBladeisCurrentUserAuthenticatedcallback This method is used to check and see if current users authentication token is still valid Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeisCurrentUserAuthenticatedfunctionerr body iferr resperrorAuth check fail JSONstringifybody else respsuccessbody body contains a boolean value ClearBladeloginUseremail password callback This method is used to log a user into the ClearBlade Platform before making requests Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeloginUser functionerr body iferr resperrorUser login failure JSONstringifybody else respsuccessbody Return an auth token ClearBladelogoutUsercallback This method is used to log the current user out from the platform Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeloginUser functionerr body iferr resperroruser login fail JSONstringifybody else ClearBladelogoutUserfunctione res ife resperroruser logout fail JSONstringifybody else respsuccessres Returns authTokennullemailnull Device ClearBladegetAllDevicesForSystemcallback This method is used to retrieve all devices from the Devices Auth table If successful the response will contain an array of every device defined within a System Each element in the array will be a JSON object whose attributes correspond to the columns in the Devices table including any custom columns json HostId 20b6b82639f34a23955962099d08c42a activekey 1234567890 allowcertificateauth true allowkeyauth true certificate createddate 20170404T1439320500 customcolumn1 customcolumn2 description devicekey b0889f8e0b86df81dff589e6840d BLE Gateway RPi enabled true keys lastactivedate 20170406T1043530500 name BLE Gateway RPi state systemkey b0889f8e0b86df81dff589e6840d type BLE Gateway Example javascript ClearBladeinitrequest req ClearBladegetAllDevicesForSystemfunctionerr data iferr resperrorUnable to get all devices JSONstringifydata respsuccessdata ClearBladegetDeviceByNamename callback This method is used to retrieve a device from the Devices Auth table If successful the response will contain a JSON object representing the requested device The attributes in the JSON object correspond to the columns in the Devices table including any custom columns json HostId 20b6b82639f34a23955962099d08c42a activekey 1234567890 allowcertificateauth true allowkeyauth true certificate createddate 20170404T1439320500 customcolumn1 customcolumn2 description devicekey b0889f8e0b86df81dff589e6840d BLE Gateway RPi enabled true keys lastactivedate 20170406T1043530500 name BLE Gateway RPi state systemkey b0889f8e0b86df81dff589e6840d type BLE Gateway If unsuccessful an error will be returned in the data parameter passed to the callback function json error id 00000000000000000000000000000000 code 1102 level 1 category Devices message Internal Server Error detail Device test does not exist lowLevelError Example javascript ClearBladeinitrequest req ClearBladegetDeviceByNameTest Device functionerr data iferr resperrorUnable to get device JSONstringifydata else respsuccessdata ClearBladecreateDevicename object causeTrigger callback This method is used to create a new device in the Devices Auth table The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column If successful the data parameter passed to the callback will contain a json object representing the created device json HostId 172d7a09c8c4449c87b6958d6dc04941 allowcertificateauth true allowkeyauth true causeTrigger true createddate 20170406T1134310500 devicekey b0889f8e0b86df81dff589e6840d Test Device enabled true lastactivedate 20170406T1134310500 name Test Device state systemkey b0889f8e0b86df81dff589e6840d type If unsuccessful an error will be returned in the data parameter passed to the callback function json error id00000000000000000000000000000000 code1103 level1 categoryDevices messageInternal Server Error detailDevice Test Device already exists in system b0889f8e0b86df81dff589e6840d lowLevelError Example javascript ClearBladeinitrequest req Default is true so device table changes can trigger code services var DEVICETRIGGERENABLED true var device name activekey exampleactivekey type state enabled true allowkeyauth true allowcertificateauth true ClearBladecreateDevicedevicename device DEVICETRIGGERENABLED functionerr data iferr resperrorUnable to create device JSONstringifydata respsuccessdata ClearBladeupdateDevicename object causeTrigger callback This method is used to update a device in the Devices Auth table The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column If successful the data parameter passed to the callback will contain a success attribute Once a device has been created you CANNOT change its name Do not specify the name attribute when updating a device json success true If unsuccessful an error will be returned in the data parameter passed to the callback function json error id00000000000000000000000000000000 code1106 level1 categoryDevices messageUnable to validate arguments for device detailNot allowed to update field name lowLevelError Example javascript ClearBladeinitrequest req var deviceNameToUpdate Default is true so device table changes can trigger code services var DEVICETRIGGERENABLED true var deviceUpdates activekey exampleactivekey type state enabled true allowkeyauth false allowcertificateauth false ClearBladeupdateDevicedeviceNameToUpdate deviceUpdates DEVICETRIGGERENABLED functionerr data iferr resperrorUnable to update device JSONstringifydata respsuccessdata ClearBladedeleteDevicename causeTrigger callback This method is used to create a device in the Devices Auth table The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column If successful the data parameter passed to the callback will contain a success attribute json success true If unsuccessful an error will be returned in the data parameter passed to the callback function json error id00000000000000000000000000000000 code1104 level1 categoryDevices messageInternal Server Error detailCannot delete Device Test Device does not exist lowLevelError Example javascript ClearBladeinitrequest req Default is true so device table changes can trigger code services var DEVICETRIGGERENABLED true ClearBladedeleteDevice DEVICETRIGGERENABLED functionerr data iferr resperrorUnable to update device JSONstringifydata respsuccessdata Query Class ClearBladeQueryoptions Queries make it possible to retrieve and update data in collections based on criteria The ClearBladeQuery object is used to rapidly create the query and ultimately perform possible fetch update create and delete actions Dive into the Query concept Query Learn More1platformconceptsdataquery To instantiate a query object you have three options Here are the mutually exclusive values for the object collectionName string the name of the collection you want to access collectionID string the ID of the collection you want to access collection string the ID of the collection you want to access 1 Supply an object containing the javascript var query ClearBladeQuerycollectionName Alternatively the collectionID key can be used with the value javascript var query ClearBladeQuerycollectionID Additionally the can be used javascript var query ClearBladeQuery 3 Supply nothing this only applies when using the methods on the ClearBladeCollection or ClearBladeUser classes to make requests against data javascript var query ClearBladeQuery Querycolumnsstring This method is used to limit the columns returned by the query to the specified array of strings javascript var query ClearBladeQuerycollectionName querycolumns Queryascendingfield This method is used to sort the response from the query by a particular field in ascending order javascript var query ClearBladeQuerycollectionName queryascending if applicable apply second sort for entries with same value for column colName queryascending Querydescendingfield This method is used to sort the response from the query by a particular field in descending order javascript var query ClearBladeQuerycollectionName querydescending if applicable apply second sort for entries with same value for column colName querydescending ClearBlade timestamp types are in ms milliseconds not ns nanoseconds If you use the JavaScript Date Object you will need to 1000 QueryequalTofield value This method is used to filter the data by using an equality operator on a given column javascript var query ClearBladeQuerycollectionName Column Type String queryequalTo mustEqualThis Column Type Boolean queryequalTo true this is valid queryequalTo true this is valid Column Types Int BigInt Float Double queryequalTo 100 this is valid queryequalTo 100 this is NOT valid QuerygreaterThanfield value This method is used to filter the data by using a greater than operator on a given column javascript var query ClearBladeQuerycollectionName querygreaterThanYOURCOLUMNOFTYPEINT 4 QuerygreaterThanEqualTofield value This method is used to filter the data by using a greater than equal to operator on a given column javascript var query ClearBladeQuerycollectionName querygreaterThanEqualToYOURCOLUMNOFTYPEINT 4 QuerylessThanfield value This method is used to filter the data by using a less than operator on a given column javascript var query ClearBladeQuerycollectionName querylessThanYOURCOLUMNOFTYPEINT 4 QuerylessThanEqualTofield value This method is used to filter the data by using a less than equal to operator on a given column javascript var query ClearBladeQuerycollectionName querylessThanEqualToYOURCOLUMNOFTYPEINT 4 QuerynotEqualTofield value This method is used to filter the data by using a not equal to operator on a given column javascript var query ClearBladeQuerycollectionName querynotEqualToYOURCOLUMNOFTYPESTRING hello Querylikefield value This method is used to filter the data by using a SQL LIKE clause Like comparisons are NOT case sensitive javascript var query ClearBladeQuerycollectionName querymatchesYOURCOLUMNOFTYPESTRING mustContainThis Wildcards The value string can contain any number of the standard SQL wildcard characters and Wildcard Definition Example Represents zero or more characters Start will match any any character string that begins with Start start or any other uppercaselowercase combinations the letters s t a r t StaRT me up Represents a single character ail will match any 4 character string that ends with ail AIL or any other uppercaselowercase combinations the letters a i l tail sail mail etc will all match The character has special meaning in the context of URLs and HTTP payloads In order utilize the wildcard you will need to URL encode the string representing your value javascript querylikemycollection encodeURIComponentyour matching text javascript Lets assume we have a collection named PokmonCollection This collection has two columns column1 of type string column2 of type string There is a single row column1charizard column2holographic var query ClearBladeQuerycollectionName PokmonCollection the first parameter is the column name in this case column1 the second parameter is a string literal querylikecolumn1 encodeURIComponentzard queryfetchfunctionerr data the second parameter encodeURIComponentzard will match any column value that ends with zard The single row column1charizard column2holographic will match and be returned Querymatchesfield value This method is used to filter the data by using a regular expression against a given column javascript var query ClearBladeQuerycollectionName querymatchesYOURCOLUMNOFTYPESTRING mustContainThis If regex flags are needed the regular expression should be preceded by flags For example a regular expression for a case insenstive match would resemble iThis is a case insensitive match The second parameter is a string literal not a JavaScript Regex object You do not need to surround your regex with Example passing in zard as a second parameter will be executed as zard Many characters used in regular expressions have special meanings in the context of URLs and HTTP payloads If you receive a fetch error unexpected end of JSON input error you will need to URL encode your regular expression javascript querymatchesblahcol lowercase javascript Lets assume we have a collection named PokmonCollection This collection has two columns column1 of type string column2 of type string There is a single row column1charizard column2holographic var query ClearBladeQuerycollectionName PokmonCollection the first parameter is the column name in this case column1 the second parameter is a string literal querymatchescolumn1 izard queryfetchfunctionerr data the second parameter izard will be executed as izard and will match any column value that ends with zard ignoring case The single row column1charizard column2holographic will match and be returned QuerysetPagepageSize pageNum This method is used to set the desired page and page size for the request javascript var query ClearBladeQuerycollectionName querysetPage25 3 You can set the page number to 0 to retrieve all results javascript var query ClearBladeQuerycollectionName querysetPage0 0 Queryorquery chains an existing query object to the Query object with or on the same column title javascript Assume your collections name is Activity var query1 ClearBladeQuerycollectionName Activity var query2 ClearBladeQuerycollectionName Activity query1equalTotitleEngineer query2equalTotitleManager If an entry has Engineer or Manager in title column they will be fetched with finalQuery var finalQuery query1orquery2 chains an existing query object to the Query object with or on different columns title city javascript Assume your collections name is Activity var query1 ClearBladeQuerycollectionName Activity var query2 ClearBladeQuerycollectionName Activity query1equalTotitleEngineer query2equalTocityAustin If an entry has Engineer in title column or Austin in the city column they will be fetched with finalQuery var finalQuery query1orquery2 Queryfetchcallback Reqests an item or a set of items from the query Requires that the Query object was initialized with a collection javascript param function callback Supplies processing for what to do with the data that is returned from the collection var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var query ClearBladeQuerycollectionName queryfetchcallback Queryupdatechanges callback Updates an existing item or set of items Requires that a collection was set when the Query was initialized Example javascript param Object changes Object representing the attributes that you want changed param function callback Function that handles the response of the server This example assumes a collection of items that have the columns name and age var query ClearBladeQuerycollectionName queryequalToname John var changes age 23 var callback function err data if err resperrorupdate error JSONstringifydata else respsuccessdata queryupdatechanges callback sets Johns age to 23 Queryremovecallback Removes an existing item or set of items Requires that a collection was set when the Query was initialized Example javascript param function callback Function that handles the response from the server var query ClearBladeQuerycollectionName This example contains the item with name column entry is John queryequalToname John var callback function err data if err resperrorremoval error JSONstringifydata else respsuccessdata queryremovecallback removes every item whose name attribute is equal to John Collection Class ClearBladeCollectionoptions To instantiate a collection object you can either supply an object containing or a string for the collectionID Here are the mutually exclusive values for the object collectionName string the name of the collection you want to access collectionID string the ID of the collection you want to access collection string the ID of the collection you want to access javascript With collectionName key and value var collection ClearBladeCollectioncollectionName javascript With collectionID key and value var collection ClearBladeCollectioncollectionID javascript With collectionID value var collection ClearBladeCollection The available methods for the Collection class and examples of how to use them are listed below Collectionfetchquery callback Reqests an item or a set of items from the collection param Query query Used to request a specific item or subset of items from the collection on the server Optional param function callback Supplies processing for what to do with the data that is returned from the collection Basic Example javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colfetchcallback Example with Query javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName var query ClearBladeQuery queryequalToYOURCOLUMNOFTYPESTRING hello colfetchquery callback CollectioncreatenewItem callback Creates a new item in the collection and returns the created item to the callback param Object newItem An object that represents an item that you want to add to the collection param function callback Supplies processing for what to do with the data that is returned from the collection Example javascript This example assumes a collection of items that have the columns name height and age var newPerson name Jim height 70 age 32 var callback function err data if err resperrorcreation error JSONstringifydata else respsuccessdata var col ClearBladeCollection collectionName colcreatenewPerson callback this inserts the the newPerson item into the collection that col represents Collectionupdatequery changes callback Updates an existing item or set of items param Query query Query object to denote which items or set of Items will be changed param Object changes Object representing the attributes that you want changed param function callback Function that handles the response of the server Example javascript This example assumes a collection of items that have the columns name and age var query ClearBladeQuery queryequalToname John var changes age 23 var callback function err data if err resperrorupdate error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colupdatequery changes callback sets Johns age to 23 Collectionremovequery callback Removes an item or set of items from the specified collection param Query query Query object that used to define what item or set of items to remove param function callback Function that handles the response from the server Example javascript This example assumes that you have a collection with the item whose name attribute is John var query ClearBladeQuery queryequalToname John var callback function err data if err resperrorupdate error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colremovequery callback removes every item whose name attribute is equal to John Collectioncountquery callback Retrieves the count of items in a collection that match the supplied query param Query query Query object that used to define what item or set of items to remove Optional param function callback Function that handles the response from the server Basic Example javascript var callback function err data if err resperrorcount error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colcountcallback this returns an object in the form of count 5 Example with Query var callback function err data if err resperrorcount error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName var query ClearBladeQuery queryequalToname John colcountquery callback this returns an object in the form of count 2 Class ClearBladeDeviceoptions To instantiate a Device object all you need to do is call javascript var dev ClearBladeDevice The available methods for the Device class and examples of how to use them are listed below Devicefetchquery callback Reqests a device or a set of devices from the devices collection param Query query Used to request a specific device or subset of devices from the devices collection on the server Optional If a query is not specified ALL devices will be returned param function callback Supplies processing for what to do with the data that is returned from the collection Basic Example javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var dev ClearBladeDevice devfetchcallback Example with Query javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var query ClearBladeQuery querycolumnsname type state queryequalTotype Weight Sensor devfetchquery callback Devicecreatedevice callback Creates a new device in the devices collection param object device A json object representing the device to be created The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column param function callback Supplies processing for what to do with any returned data when the invocation is completed Example javascript var callback function err data if err resperrorcreate error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var newDevice name MyNewDevice allowkeyauth false allowcertificateauth true enabled false state type activekey devcreatenewDevice callback Deviceupdatequery changes callback Updates a device or a set of devices from the devices collection param Query query Used to request a specific device or subset of devices from the devices collection on the server Optional param object changes A json object representing the device columns to be updated The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to update the contents of the respective column param function callback Supplies processing for what to do with any returned data when the invocation has been completed Example javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var query ClearBladeQuery querycolumnsname type state queryequalTotype Weight Sensor devfetchquery callback Devicedeletequery callback Deletes a device or a set of devices from the devices collection param Query query Used to delete a specific device or subset of devices from the devices collection on the server REQUIRED If a query is not specified an error will be returned preventing the inadvertent situation where all devices are deleted param function callback Supplies processing for what to do with the any returned data when the invocation is completed Example javascript var callback function err data if err resperrordelete error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var thequery ClearBladeQuery thequeryequalToname Device 2 devdeletethequery callback Messaging Class ClearBladeMessaging To instantiate a Messaging object all you need to do is call javascript var msg ClearBladeMessaging The available methods for the Messaging class and examples of how to use them are listed below MessaginggetMessageHistorytopic last count callback Retrieves the message history for a topic within the specified parameters param string topic String that signifies which topic to search param int count Number that signifies how many messages to return 0 returns all messages param int last Epoch timestamp in seconds that will retrieve count number of messages before that timestamp param function callback Function that handles the response from the server Example javascript var msg ClearBladeMessaging var unixTimeNano new DategetTime var unixTimeMilli unixTimeNano 1000 msggetMessageHistorycoolTopic unixTimeMilli 25 functionerr body iferr resperrormessage history error JSONstringifydata else respsuccessbody MessaginggetMessageHistoryWithTimeFrametopic count last start stop callback Retrieves the message history for a topic within the specified parameters param string topic String that signifies which topic to search param int count Number that signifies how many messages to return 0 returns all messages param int last Epoch timestamp in seconds that will retrieve count number of messages before that timestamp param int start Epoch timestamp in seconds that will retrieve count number of messages within timeframe param int stop Epoch timestamp in seconds that will retrieve count number of messages within timeframe param function callback Function that handles the response from the server Example javascript var msg ClearBladeMessaging var unixTimeNano new DategetTime var unixTimeMilli unixTimeNano 1000 msggetMessageHistoryWithTimeFramecoolTopic 25 unixTimeMilli null null functionerr body iferr resperrormessage history error JSONstringifydata else respsuccessbody Messagepublishtopic payload Publishes to a topic param string topic Is the topic path of the message to be published This will be sent to all listeners on the topic No default param string payload The payload to be sent Also no default A topic is comprised one or more topic levels ex factory1device3 is a single topic with four topic levels The is a reserved character to separate topic levels and thus a topic level cannot contain in its name However spaces and punctuation are allowed Example javascript var msg ClearBladeMessaging msgpublishClearBladeis awesome TopicClearBlade totally rules MessagegetCurrentTopicscallback Returns the current topics for a system param function callback Function that handles the response from the server Example javascript var callback function err data iferr resperrorUnable to retrieve current topics JSONstringifydata else respsuccessdata var msg ClearBladeMessaging msggetCurrentTopicscallback MessagegetAndDeleteMessageHistorytopic count last start stop callback This call deletes all of the message history for mqtt topic topic It has 4 options that you can set when you delete the message history count is the number of messages you wish to delete For count 0 all messages for that topic are deleted You can also use either the last or the start and stop options to widen you search The last options which is an epoch timestamp in seconds will retrieve and delete count number of messages before that timestamp The start and stop options which are also an epoch timestamp will retrieve and delete count number of messages within that timeframe For each of these cases you can either set count to zero or a non zero value depending on how many messages you wish to delete The return value is a list of js objects one for each returned item in the message history param string topic String that signifies which topic to search param int count Number that signifies how many messages to return and delete 0 returns and deletes all messages param int last Epoch timestamp in seconds that will retrieve and delete count number of messages before that timestamp param int start Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe param int stop Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe param function callback Function that handles the response from the server Example javascript var callback function err data iferr resperrorgetcurrenttopics error JSONstringifydata else respsuccessdata var msg ClearBladeMessaging msggetAndDeleteMessageHistoryTestTopic 0 null null null callback get and delete all messages for TestTopic Class ClearBladeCode The code class is used to call other code services from within a service To instantiate the code class just call javascript var code ClearBladeCode Codeexecutename params loggingEnabled callback Executes another code service javascript param string name String representing the name of the code service that should be executed param Object params Object that contains all the parameters that will be used for the code service Optional param Boolean loggingEnabled Boolean that represents whether or not the code service should use logging param callback To handle response from code service function MyServicereq resp ClearBladeinitrequestreq var codeEngine ClearBladeCode var serviceToCall RegisterWizards var loggingEnabled true var params firstnameHarry lastnamePotter codeEngineexecuteserviceToCall params loggingEnabled functionerr data iferr resperrorFailed to complete my service JSONstringifydata respsuccessYay Here is my response JSONstringifydata Class ClearBlade User javascript var user ClearBladeUser usergetUserfunctionerr data respsuccessJSONstringifydata This class allows for interacting with user information UsergetUsercallback Returns the user table row for the user that the service is running as UserallUsersquerycallback Accepts a ClearBladeQuery object and a callback It will return all users that match on the query excepting attempting to match on the password field UsersetUsersquerychangescallback operates on the users table in much the same way update works on a collection UsersetUserchangescallback updates just the user the service is running as Usercountquerycallback returns a count of users who have matched the query Events ClearBlade Timer ClearBladeTimerCreatename options callback Create a new Timer runs a function at a set interval javascript ClearBladeTimerCreaterunValidatorEveryHour frequency 3600 servicename validator functionerr response if err resperrorresponse respsuccessTimer successfully created ClearBladeTimerFetchname callback Fetch an existing Timer timerUpdateoptions callback javascript ClearBladeTimerFetchrunValidatorEveryHour function err timer if err resperrorresponse else timerUpdatedefmoduledefnamebar function err response if err resperrorresponse respsuccessTimer successfully updated timerDeletename callback javascript ClearBladeTimerFetchrunValidatorEveryHour function err timer if err resperrortimer timerDeletefunction err response if err resperrorresponse respsuccessTimer deleted Trigger Events ClearBlade Trigger ClearBladeTriggerCreatename options callback Create a new Trigger runs a service after a defined action is detected javascript ClearBladeTriggerCreaterunTestAfterPublishOnTopicFoo defmodule Messaging defname Publish keyvaluepairs topicfoo servicename test function cberr t respsuccessOK ClearBladeTriggerFetchname callback Fetch an existing Trigger triggerUpdateoptions callback javascript ClearBladeTriggerFetchrunTestAfterPublishOnTopicFoo function err trigger if err resperrortrigger triggerUpdate defmoduleCOLLECTIONID defnamebar functionerr response if err resperrorresponse respsuccessTrigger updated triggerDeleteoptions callback javascript ClearBladeTriggerFetchunTestAfterPublishOnTopicFoo functionerr trigger if err resperrortrigger triggerDeletefunctionerr response if err resperrorresponse respsuccessTrigger deleted Edge ClearBladeisEdge Returns true if code service is executing on an Edge Otherwise false javascript function myServicereq resp ClearBladeinitrequestreq if ClearBladeisEdge respsuccessI am an Edge resperrorThis is not an Edge this is running on a platform ClearBladeedgeId Returns the name of Edge if running on an Edge else returns empty string javascript function myServicereq resp ClearBladeinitrequestreq var edgeId ClearBladeedgeId respsuccessEdge Id edgeId \"},{\"title\":\"Crypto.js\",\"href\":\"/4-developer_reference/PlatformSDK/Crypto.js\",\"content\":\" cryptcrypto The crypto module offers a way of encapsulating secure credentials cryptocreateHash cryptoupdate cryptodigest cryptocreateHashhashName Creates and returns a hash object which can be used to generate hash digests Supported hash types for sha1md5sha256sha512 Example javascript var sha1 cryptocreateHashsha1 cryptoupdatedata Updates the hash content with the given data Example javascript var sha1 cryptocreateHashsha1 sha1updateHello World cryptodigestencodingType Calculates the digest of all of the passed data to be hashed The encoding can be binarybase64 or hex Example javascript var sha1 cryptocreateHashsha1 sha1updateHello World var hash sha1digesthex \"},{\"title\":\"FileWriter.js\",\"href\":\"/4-developer_reference/PlatformSDK/FileWriter.js\",\"content\":\"The file library helps to create files on server and remove when needed Writer Initialization This method creates an object for the file library javascript var fileWriter new Writer fileWriterwriteToFile This method writes the specified data to a file in txtdoc format On successful write a url is returned which points to the location of file on server host the server on which platform is running data string that is to be written to file filename name of file as string Example javascript var fileWriter new Writer var text This is a test string var fileName Testdoc fileWriterwriteToFilesfoperacom text fileName functionerrurl if err resperrorWrite failed else respsuccessurl filewriterremoveFile This method removes the file from server on which it is stored Cannot be retrieved again filename name of file to be removed as string Example javascript var fileWriter new Writer var fileName testsyskeyTestdoc fileWriterremoveFilefileName functionerrurl if err resperrorWrite failed else respsuccessurl \"},{\"title\":\"HTTP.js\",\"href\":\"/4-developer_reference/PlatformSDK/HTTP.js\",\"content\":\"The HTTP library is a library for making HTTP calls to external services It supports four HTTP verbs GETPOSTDELETEPUT Class Requests The Requests class is invoked to get an HTTP requesting object Note that it depends on the ClearBlade object so the ClearBlade object must also be included in your service HTTP Request Options Options passed into each request uri The url to be requested qs Query string parameters body Request Payload in the form of a JSON Object Not valid on verbs that do not have bodies such as DELETE or GET form only applicable on the POST method headers Header properties to be passed of the request maxFollows a number the maximum number of redirects to follow timeout The amount of seconds to wait for a response auth Support for HTTP basic auth the object must have the user and pass keys all others will be ignored strictSSL Fails the request if the identity on the SSL certificate cannot be verified set to false to use with selfsigned certs getProxyUrl If you are using a proxy to call the outside world and need to get the proxy URL from an environment variable set this to true isSoap Force an XML based response full Gets back all the HTTP response headers javascript get a Requests object var requestObject Requests options are fed into each object var options urihttpsgooglecom qs qclearblade platform body hello world formtrue headers ContentType applicationjsondateThu 13 Aug 2015 212453 GMTServernginx121 maxFollows12 timeout30 authusermepasssecret strictSSLfalse getProxyUrlfalse isXMLtrue isSoaptrue full true requestget Execute GET on the http request object javascript perform a GET request requestObjectgetoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response requestpost Execute POST on the http request object javascript performs a POST request requestObjectpostoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response requestdelete Execute DELETE on the request object javascript performs a delete requestObjectdeleteoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response requestput Execute PUT on the request object javascript performs a put requestObjectputoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response \"},{\"title\":\"Introduction to Code Services\",\"href\":\"/4-developer_reference/PlatformSDK/Introduction\",\"content\":\"Each code service receives a req object and a resp object req object javascript function myServicereq resp logreq Below is the value of req The email of the user that invokes this code service userEmail rreinoldclearbladecom Any parameters passed into this service You can also pass in parameter using Test Parameters in the Developer Console in browser params key1value1 key2value2 System Key of this system systemKey e095a19d0b94e48dee9bff87e5fd01 System Secret of this system systemSecret E095A19D0B9ACD9EFA86AEEDFCC001 The active user token used to invoke this service userToken U1hNf7o4bEXpiE4aGhb79MQv4jH0v2U8nH5OqanGEjQh5kfAozv6CbDhDHA4xPwlRSkh2XeD1KhdQg6Q is logging enabled see logLogjs library isLogging true User UUID of user who invoked this service userid fc8cfcea0a96ebebc7f5d4edd414 resp Object When you make a call with the resp object the code service completes and ends its lifecycle Your code service will call respsuccess by default if you fail to call respsuccess or resperror To complete a code service one of the two methods must be called respsuccess When you use this method a success true key will be included to your response Example 1 We return a success message string javascript function myServicereq resp var message Successfully updated position respsuccessmessage Code Service terminates Example 2 We return a JSON Object with our success javascript function myServicereq resp var winning messageWe succeeded contextWe tried it with the included query query firstnameJulian respsuccesswinning Code Service terminates When you use this method a successfalse will be included to your response Example 1 An error message is returned javascript function myServicereq resp var errorMessage Unable to process due to missing data resperrorerrorMessage Code Service terminates Example 2 An error JSON object is returned javascript function myServicereq resp var error message Unable to process due to missing data query firstnameHarry lastnamePotter resperrorerror Code Service terminates If your code service throws an uncaught error the code service defaults to the aforementioned behavior for unterminated code service respsuccess is called by default \"},{\"title\":\"JSUtil.js\",\"href\":\"/4-developer_reference/PlatformSDK/JSUtil.js\",\"content\":\"The JSUtil library is a utility library for converting javascript objects to strings and formatting numbers and JSON objects for print output utilinspectvar Returns the variable converted to a string javascript perform a GET request logThe response from the server was utilinspectmyVar utilformatargs Returns a formatted string using a variable array s String d Number both integer and float j JSON javascript perform a GET request utilformatHello s welcome to s Steve Austin \"},{\"title\":\"Log.js\",\"href\":\"/4-developer_reference/PlatformSDK/Log.js\",\"content\":\"The Log library is a library for issueing log statements during the execution of a service These logs can be reviewed later from the console or the returning payload logSTRING Issue a statement to log a message to the service logs javascript perform a GET request logThe response from the server was JSONstringifymyVar \"},{\"title\":\"Net.js\",\"href\":\"/4-developer_reference/PlatformSDK/Net.js\",\"content\":\"The socket library is used for communicating with servers using raw TCPUDP sockets Methods new netcbSocket socketconnect socketreadWithSize socketread socketwrite socketlookup socketbytesRead socketdestroy Class netcbSocket Initialization This method creates an object needed to interact with the socket library Example javascript var socket new netcbSocket socketconnect Opens a new socket and connects to the specified server Parameters connectionurl can be of the form ipaddressport type is the type of socket tcpudp Example javascript var callback function err if err resperrorCould not connect else respsuccessConnected socketconnect1270019999tcpcallback socketreadWithSize Read a specified number of bytes from the server This method blocks until the buffer is filled with the specified number of bytes and returns data to the user If no data is received for 10 seconds a timeout occurs and control is given back to the user Parameters size is size in bytes Example javascript var callback functionerrdata if err resperrorerror else respsuccessdata socketreadWithSize100callback socketread This function should be used to read a stream of bytes from a server Example javascript var readCallback functiondata respDatadata ifrespDatasearchn respsuccesssuccess socketreadcallback socketwrite This function is used to send a request to a server The response can be read using read or readWithSize methods Parameters request can be of any type that server can read bytesstring Example javascript var writeCallback functionerrinfo iferr resperrorfailureinfo else Ideally you would be calling read from here socketwriteHello I am a testncallback socketlookup This function is used to provide name resolution using the IP address Parameters ip the IP address Example javascript socketlookup127001functionerrhost if err resperrorerror err else respsuccesshost socketbytesRead This function returns the number of bytes read from the server This can be used to verify that no data loss has occurred Parameters message is the data that is returned from read or readWithSize methods Example javascript socketbytesReadThis is a message of random lengthfunctionerrval if err resperrorerror val else respsuccessval socketdestroy This function closes the connection to server Example javascript socketObjectdestroyfunctionerrsucc if err resperrorerror err else respsuccesssucc \"},{\"title\":\"OAuth2.js\",\"href\":\"/4-developer_reference/PlatformSDK/OAuth2.js\",\"content\":\"This library is used to connect to different OAuth 2 servers and get an authorization token back Google OAuth is the only OAuth 2 provider supported at the moment Class OAuth2 Initialize This method creates an oauth2 object instance Example javascript var oauth2 new OAuth2 oauth2googleAuth Connects to the Google OAuth endpoint and retrieves an authorization token Parameters options is a json object with the following keys email authScope privateKey Example javascript var oauth2 new OAuth2 var options email yourgoogleserviceaccount authScope httpswwwgoogleapiscomauthbigquery httpswwwgoogleapiscomauthcompute Auth scopes seperated by spaces privateKey BEGIN PRIVATE KEYnyourprivatekeynEND PRIVATE KEYn var callback functionerr data iferr resperrorError data else respsuccessSuccess data oauth2googleAuthoptions callback \"},{\"title\":\"Platform SDK\",\"href\":\"/4-developer_reference/PlatformSDK/_default\",\"content\":\"\"},{\"title\":\"Geo.js\",\"href\":\"/4-developer_reference/PlatformSDK/geo.js\",\"content\":\"The geo library provides core functionality used to calculate geometric spacial relationships geo geoCircle geoPolygon geoLineSegment geoPoint geoWithinCircle geoWithin geoNearest geoFarthest geoDistance geooptions Creates a geo object to perform necessary geometric calculations Parameters options polarcartesian Example javascript var geoObj new geopolar javascript var geoObj new geocartesian geoObjPoint Lat Long Define a point on a coordinate system Parameters LAT number representing a latitude LONG number representing a longitude Example javascript var geoObj new geopolar var myPoint geoObjPoint 3026675 97742439 geoObjPoint x y Define a point on a coordinate system Parameters x number representing x position x number representing y position Example javascript var myPoint geoObjPoint 44 764 geoObjCircleLat Long Radius Defines a shape of type circle on a coordinate system Parameters LAT number representing a latitude LONG number representing a longitude RADIUS number in meters Example javascript var geoObj new geopolar var myCircle geoObjCircle 3026675 97742439 1000 geoObjCirclex y Radius Defines a shape of type circle on a coordinate system Parameters x number representing x position of circle center y number representing y position in circle center Radius number in meters Example javascript var geoObj new geocartesian var myCircle geoObjCircle 50 414 1000 geoObjWithinCircleCircle Point Test for whether a point is within the bounds of a circle Parameters Circle Circle Shape Point a point Object at a location Example javascript var myPoint geoObjPoint 3426675 91742439 var myCircle geoObjCircle 3026675 97742439 4000 var isInside geoObjWithinCirclemyCircle myPoint geoObjPolygonPoint1 Point2 Point3 Define a polygon object made up of at least three point objects All shapes will be closed Parameters Points array of point objects that when connected according their order forms a closed shape Example javascript var geoObj new geopolar var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA var southwest geoObjPolygon pointAustin pointLincoln pointVegas geoObjWithinPolygon Point Check if a point exists within the bounds of a polygon Parameters Polygon a defined polygon object Point a defined point object Example javascript var geoObj new geopolar var southwest geoObjPolygon point1 point2 point3 var tulsa geoObjPoint 36153982 95992775 var isSouthwest geoObjWithinsouthwestwest tulsa geoObjLineSegmentPoint1 Point2 Width Creates a line segment of a certain width Returns a polygon shape Parameters Point1 the start Point object of a line segment Point2 the end Point object of a line segment Width a number in meters for the width of the line Example javascript var geoObj new geopolar var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA geoObjLineSegmentpointAustin pointVegas 1000 geoObjNearestPoint Point1 Point2 Point3 Size Returns the nearest points from a list in relation to a source point The size parameter will limit the number of responses returned Parameters Point A source point to compare distances from Points A set point to search for distance from the source Size A number representing the return size of nearest points Example javascript var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA retun closestToAustin geoObjNearestpointAustin pointVegas pointLincoln 1 geoObjFarthestPoint Point1 Point2 Point3 Size Returns the farthest points from a list in relation to a source point The size parameter will limit the number of responses returned Parameters Point A source point to compare distances from Points A set point to search for distance from the source Size A number representing the return size of farthest points Example javascript var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA retun farthestFromAustin geoObjNearestpointAustin pointVegas pointLincoln 1 geoObjDistancePoint1 Point2 Calculates the distance in meters between two points Parameters Point1 Point object for distance start calculation Point2 Point object for distance end calculation Example javascript var geoObj new geopolar var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var distance geoObjDistancepointAustin pointLincoln Example javascript var geoObj new geocartesian You can use any unit in Cartesian var point1 geoObjPoint 44 19 Point on 2D cartesian graph var point2 geoObjPoint 23 7 Point on 2D cartesian graph var distance geoObjDistancepoint1 point2 Distance in designated units \"},{\"title\":\"Mailer.js\",\"href\":\"/4-developer_reference/PlatformSDK/mailer.js\",\"content\":\"The module offers a way to send SMTP based emails from a ClearBlade service mailercreateTransportoptions transportsendMailoptions transportclose mailercreateTransportoptions options host HOSTNAME port PORT Creates and returns a transport object used for sending mail to an appropriate SMTP server Example javascript function sendMailGmailreq resp var transport mailercreateTransport host port587 transportsendMailmailoptions callback Sends a mail object to the SMTP server for delivery mailoptions from FROMADDRESS password ACCOUNTPASSWORD to TOADDRESS subject MAILSUBJECTTEXT text EMAILBODY callback functionerror response Example javascript transportsendMail from mailid passwordyourpassword to receiveremail subject Test subject text Hi How are you doing today functionerror response transportclose iferror resperrorerror else respsuccessSuccess transportclose Closes the connection to the transport object Gmail Example Below is a complete example that will use a gmail based address NOTE Google protects unauthorized uses of gmail accounts uses multifactor verification In order to make this send work you will need to ensure that the privacy and permissions on your gmail account allow for third party sending Example javascript function sendMailGmailreq resp var transport mailercreateTransport hostsmtpgmailcom port587 function sendEmailrequestObj transportsendMail from yourgmailid passwordyourpassword to receiveremail subject Test subject text Hi How are you doing today functionerror response transportclose iferror resperrorerror else respsuccessThank you reqparamsfirstName reqparamslastName Your request has been submitted ClearBladeinitrequestreq sendEmail \"},{\"title\":\"Python\",\"href\":\"/4-developer_reference/Python/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/Python/v1/API Reference\",\"content\":\" Setup ClientUserClientsystemkey systemsecret email password platformURL systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings email string Email of nondev user to connect to system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles password string Password of nondev user to connect to system as platformURL string URL for platform eg httpsplatformclearbladecom ClientDevClientsystemkey systemsecret deviceName deviceActiveKey platformURL systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings deviceName string Required The name of the device to connect to the system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles deviceActiveKey string Required The current active key specified in the Devices collection for the device platformURL string URL for platform eg httpsplatformclearbladecom Authentication authAuthenticateUserClientDevClient object Authenticates credentials set on userClientdevClient and sets session token authRegisterUserusername password userClient Register a new user with the platform username string Email of the new user password string Password of the new user authRegisterDevUserusername password userClient Register a new user with the platform username string Email of the new user password string Password of the new user Code Services userClientCallServicesystemKey name string params Run a named code service that exists on the system with options and returns the response object or an error systemKey string Key to system that contains desired code service name string Name of code service to be executed params dict Request object to be passed to code service function on execution Messaging Create Messaging object message MessagingMessaginguserClient messageInitializeMQTT messagepublishMessagetopic message qos Publish message on MQTT topic topic string MQTT topic to publish on message string String message qos int QOS priority for message messageSubscribetopic qos Asynchronously subscribe to MQTT topic and push messages onto channel as they arrive Topics with leading forward slashes are stripped Ex Topic abc becomes abc topic string MQTT topic to subscribe qos int QOS priority for message messageUnsubscribetopic Stop subscription to MQTT topic topic string MQTT topic to unsusbcribe messageDisconnect error End MQTT connection for set user\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Python/v1/QuickStart\",\"content\":\" Download and Install Python dependencies To install pip follow instruction on httpspippypaioenstableinstalling If you get any error install that dependency using pip install dependencyname Clone the ClearBlade PythonSDK repository Do a git clone httpsgithubcomClearBladePythonAPI to clone the PythonSDK for the ClearBlade Platform\"},{\"title\":\"v1\",\"href\":\"/4-developer_reference/Python/v1/_default\",\"content\":\"\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Python/v2/QuickStart\",\"content\":\"Click to view our Python SDK Documentation and Installation Guidehttpsgithubcomclearbladeclearbladepythonsdk\"},{\"title\":\"v2\",\"href\":\"/4-developer_reference/Python/v2/_default\",\"content\":\"\"},{\"title\":\"REST\",\"href\":\"/4-developer_reference/REST\",\"content\":\" You can interact with the ClearBlade Platform using our REST API Check it out herestaticrestapiindexhtml \"},{\"title\":\"Dev Console\",\"href\":\"/4-developer_reference/ReleaseNotes/Console/_default\",\"content\":\" 320 November 13 2017 1 Added support for MongoDB connected collections\"},{\"title\":\"Platform\",\"href\":\"/4-developer_reference/ReleaseNotes/Platform/_default\",\"content\":\" 318 November 13 2017 1 General Bug Fixes 2 v1 of MongoDB connector 38 May 8 2017 1 General bug fixes 2 Performance enhancements 37 May 1 2017 1 Message Relay1platformconceptsmessagingmessagerelay 2 Adapter Manager1platformconceptsAdapters 3 General bug fixes 4 Performance enhancements 36 April 26 2017 1 General bug fixes 2 Performance enhancements 35 April 18 2017 1 Message history fixplatformsdkClearBladejsmessaginggetmessagehistorywithtimeframetopiccountlaststartstopcallback 2 New analytics functionality 3 General bug fixes\"},{\"title\":\"Portal\",\"href\":\"/4-developer_reference/ReleaseNotes/Portal/_default\",\"content\":\" 320 November 13 2017 1 General bug fixes 2 exposed ClearBlade object to CBPORTAL interface More info here5portalv2featurescbPortalInterfacecbportalclearblade 3 Toggle widget can now be uncontrolled in the sense that a dynamic datasource is not required for the input value 4 Widgets can now be shorter 5 added HTTP datasource 6 added edge list datasource 7 added edge metrics datasource\"},{\"title\":\"Release Notes\",\"href\":\"/4-developer_reference/ReleaseNotes/_default\",\"content\":\"\"},{\"title\":\"Reference\",\"href\":\"/4-developer_reference/_default\",\"content\":\"\"},{\"title\":\"AngularJS\",\"href\":\"/4-developer_reference/angularjs/_default\",\"content\":\"\"},{\"title\":\"AngularJS SDK\",\"href\":\"/4-developer_reference/angularjs/sdkreference\",\"content\":\"You can interact with the ClearBlade Platform using the AngularJS SDK Check it out herehttpsgithubcomClearBladeAngularSDK\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/iOS/API_Reference\",\"content\":\" Authenticating There are multiple ways to authenticate with the platform With the ClearBlade object The most common way of authentication is to do so at initialization of the ClearBlade static object objectivec ClearBlade initSettingsWithSystemKeySYSKEY withSystemSecretSYSSECRET withOptions CBSettingsOptionServerAddressplatformclearbladecom CBSettingsOptionEmailyourUserEmail CBSettingsOptionPasswordyourPassword withSuccessCallbackClearBlade cb NSLogYay we did it Or you could create a object manually objectivec CBUser authenticateUserWithSettingscb ClearBlade object withEmail MYEMAIL withPassword PASSWORD withSuccessCallback CBUserNSLogwhoo withErrorCallback NSErroroh no or CBUser authenticateUserWithEmail MYEMAIL withPassword PASSWORD withSuccessCallback CBUserNSLogwhoo withErrorCallback NSErroroh no Or you can create an anonymous user objectivec CBUser anonymousUserWithSettingscb ClearBlade object WithErrorerr Calling Code Services We provide a function for calling code services asynchronously objectivec CBCode executeFunction myServiceName withParamsmyAwesomeParamNamedictionary value withSuccessCallback NSString result NSLogdid it withErrorCallbackNSError err oh no Getting Data There is an interrelationship between the concepts of Collections Items and Queries in the iOS SDK It is possible to access data via any of these mechanisms well go through each of them and what they mean Item An item roughly represents a row within a collection The iOS api allows the developer to create delete an item or items directly objectivec Init the item with a dictionary CBItem itm CBItem itemWithDatarownamerowvalue withCollectionIDMYCOLID Save the item Remember that the items data must correspond to the columns in the collection An item can even correspond to a row in a collection stored in an integrated database itm saveWithSuccessCallbackCBItemNSLogWhoo CBItem itemNSError err id JSONlots to do here the JSON can be helpful if the json failed to parse for some reason refresh the item perhaps other users are mutating the same row itm refreshWithSuccessCallbackCBitemNSLogWhoo withErrorCallbackCBItem itemNSError err id JSONstuff the items contents have changed delete the item This only applies if youve refreshed the item or have somehow populated the itemid somehow itm removeWithSuccessCallbackCBitemNSLogWhoo withErrorCallbackCBItem itemNSError err id JSONstuff Query If you want to make a direct query to the data you can just use a query object objectivec CBQuery cbq CBQuery initWithCollectionID MYCOLLECTION however we can apply filters to this object much like we can with the other platform SDKs lets say we want to find all hair color with value brown cbq equalTobrown forhair color whose age is also 23 cbq equalToNSNumber numberWithInt23 forage now if we want an OR on that query then we apply another query to it so we want hair color brown AND age 23 OR name jim CBQuery otherQuery CBQuery initWithCollectionID MYCOLLECTION otherQuery equalTojim forname and we apply the query to the first query cbq addQueryAsOrClauseUsingQuery otherQuery you can think of adding queries as creating an abstract syntax tree of your query no confusion on operator precedence now were ready to execute the query the first thing well do with it is a fetch to get items cbq fetchWithSuccessCallbackCBQueryResponse srstuff withErrorCallbackNSError err strong id JSONstuff alternatively we can update a row or rows depending on what the query matches cbq updateWithChangeshair colorgreen withSuccessCallbackCBQueryResponse srstuff withErrorCallbackNSError err strong id JSONstuff or even remove items cbq removeWithSuccessCallbackCBQueryResponse srstuff withErrorCallbackNSError err strong id JSONstuff Collections One can operate on collections but they are very intertwined with queries However sometimes it is valuable to use collections themselves objectivec CBCollection col CBCollection collectionWithIdMYCOLLECTION we can fetch the entire collection if we wish col fetchWithSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or we can fetch with a query CBQuery qry CBQuery initWithCollectionID MYCOLLECTION cbq equalTobrown forhair color col fetchWithQueryqry withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or we can update with that query col updateWithQueryqry withChanges hair color Puce withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or we can remove with a query col removeWithQueryqry withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or finally we can create with info assuming the columns and types match with the collection in the platform col createWithDatahair colorbrown namejohn doe withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON Messaging The iOS SDK uses the mosquitto MQTT messaging client We expose a callbackbased interface objectivec were going to assume you already have a setup ClearBlade client object creating the object is quite easy CBMessageClient msgcli CBMessageClient client here one can supply a varying number of delegates to fire when messaging actions occur messageClientDidConnectCBMessageClient fires when the messaging client connects with the broker messageClientDidDisconnectCBMessageClient fires when the disconnection occurs whether it is purposeful or not messageClientCBMessageClient didPublishToTopicNSString withMessageCBMessage fires whena publish is sent to the broker messageClientCBMessageClient didReceiveMessageCBMessage fires whenever a message arrives This applies to all topics messageClientCBMessageClient didSubscribeNSStringtopic fires when a subscription succeeds messageClientCBMessageClient didUnsubscribeNSStringtopic fires when an unsubscribe succeedes messageClientCBMessageClient didFailToConnectCBMessageClientConnectStatus fires whenever the client fails to connect even on a reconnect attempt then connecting to the default host is fairly simple msgcli connect if you have a custom host msgcli connectToHost NSURL URLWithString MYIPADDR NSString top agoodtopic subscribe to a topic msgcli subscribeToTopictop publish to a topic msgcli publishMessageGreetz toTopictop note that if we assigned a function to didReceiveMessage it would fire when this message was received unsubscribe now that weve gotten our message msgcli unsubscribeFromTopictop disconnect msgcli disconnect Message history If you wish to obtain the message history and have the permissions to do so objectivec This is a static method NSError err NSArray res CBMessageClient getMessageHistoryOfTopictop fromTime NSDate initWithTimeIntervalSinceNow0 withCountNSNumber initWithInt30 withErrorerr \"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/iOS/QuickStart\",\"content\":\" New xCode Project Use xCode to create a new iOS project This project can target any desired set of iOS devices Install Cocoapods 1 Within your Xcode project directory open a terminal window and enter in the following commands sudo gem install cocoapods pod setup 2 Add ClearBladeAPI pod Create a podfile for your project Edit vim emaces nano etc Podfile Insert the following pod ClearBladeiOSAPI Install the pod pod install Open the xcworkspace file From now you will open the file with the extension xcworkspace instead of the project file Open this from Finder or Xcode to start working on your app Sample Calls To initialize the app call the class method ClearBlade initSettingsWithAppKeyltapp keygt withAppSecretltapp secretgt To fetch all from a collection Initialize a collection col CBCollection collectionWithIDltcollection IDgt Call the instance method col fetchWithSuccessCallbackCBQueryResponse successfulResponse NSLog CBItem successfulResponsedataItems objectAtIndex0 objectForKeyname NSMutableString str NSMutableString alloc init for int i 0 i lt successfulResponsedataItems count i str appendFormati n i CBItem successfulResponsedataItems objectAtIndexi data description NSLogStr str withErrorCallbackNSError err id stuff NSLog err description Learn More Try the iOS tutorial to learn more about the ClearBlade backend with examples for Objective C\"},{\"title\":\"Tutorial\",\"href\":\"/4-developer_reference/iOS/Tutorial\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device which will be ready to be part of the internet of things Concepts include data management API creation messaging triggering of events and timers for scheduled work all done in a secure coherent manner Lets get started Setup Before starting we need to make sure you have access to a ClearBlade instance Many organizations have their own private hybrid or public instances which can made available to you If your not sure or dont have access yet you can always use a free trial account at the public SaaS ClearBlade instance at httpsplatformclearbladecom Now Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the wrench icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the iOS tutorial source files from Github httpsgithubcomClearBladeTutorialiOS 1 Clone the repository with the command git clone httpsgithubcomClearBladeTutorialiOSgit 2 Open the iOS Tutorial xcode project located within the cloned repository in xcode 3 Edit the file ViewControllerm and save NSString SystemKey YOURSYSTEMKEY NSString SystemSec YOURSYSTEMSECRET NSString collectionId COLLECTIONID NSString platformURL httpsclearbladeYOURDOMAINcom NSString messagingURL clearbladeYOURDOMAINcom NSString userEmail testclearbladecom NSString userPassword clearblade 7 Launch the iOS simulator using an iPhone 8 The final step of Part 1 is to initialize to the ClearBlade Platform anonymously Follow the instructions in the iOS Simulator to complete that task In some cases this tutorial will show examples of the client in Javascript Comparable user interfaces exist in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased Although you have already created a developer account to login on the platform each system you create will have its own user registry For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation1platformconceptsUsers 6 Go back to your iOS simulator and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 This data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature int d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin Tx USA 102 Sunny 9 Insert a row for New York Ny USA 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 You now have defined populated and authorized a new data structure 12 Go back to your iOS simulator and execute the Part 3 Fetch Your Data action NOTE For more information on the client app you can checkout the readme available on the Tutorial GitHub page Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service A best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input parameter named city to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the quotes around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess send back the payload to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by Clicking the wrench icon Select Logging enabled to YES Click the Requires tab and add the log library Choose Apply Now add the following logic to your service to write the request object to the log javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the history icon in the top right d Choose the appropriate service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update permissions for the service to execute for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Execute permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 and add parameters city state and country 2 Copy and insert the following code into the newly created service javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry ClearBladeinitrequestreq var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccesstemperature 70 weather Sunny collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetch callback NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Create a Query object to go and search for existing data in the collection that matched the information passed over parameters c Update logic to add the new city if it didnt exist in the collection javascript var updateCollection function var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country var updateRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifyupdateRow queryupdateupdateRow callback 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation in the iOS Simulator Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Developers always need to make reusable logic that can be leveraged across their applications In step 5 you used the built in library called ClearBlade You may also create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and confirm the collectionName is the same as the collection you created earlier javascript var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperialAPPID4b7403db83c14490daa37a57b722743f strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectionNameWeather qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the settings for the updateCityLibrary by clicking the wrench icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 11 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also includes calls to your custom library javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp datamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city ClearBladeinitrequestreq var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 12 In your new servicePart6 open the settings and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 13 You can now complete Part 6 validation in your app 14 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices or in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 2 Click the Subscribe to Weather button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking Publish to Weather That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensuring the message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients are the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library notifyLib 4 Select the Code type to Library 5 Use the standard process for updating the service required libraries to include clearblade 6 Copy and paste the following code javascript var notify functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 7 Next create a new service named ServicePart8 and copy and paste the following code javascript function ServicePart8req resp var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather notifyJSONstringifymessage respsuccessDone var query ClearBladeQuerycollectionNameWeather queryequalTocity Austin queryfetchqueryCallback ClearBladeinitrequestreq getWeather 8 In the newly created ServicePart8 open the settings and update the requires to include the libraries clearblade and notifyLib 9 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 10 Click the button Save and Test 11 Look in your client app and validate the message from Part 8 now appears in your message box 12 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic ideas of building your own API that includes data and live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by creating a new service called ServicePart9Trigger and copy and paste the following code javascript function ServicePart9Triggerreq resp ClearBladeinitrequestreq notifyJSONstringifypartpart9 reqJSONstringifyreq respsuccessdone 2 Update the settings of the new service by clicking the wrench icon and require the notifyLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description ClearBladeinitrequestreq getWeathercity getWeatherCallback 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute ServicePart9Caller from the console When this service runs it should create an entry in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a timer that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp ClearBladeinitrequestreq var message partpart10 ts Date message Service executing every 10 seconds notifyJSONstringifymessage respsuccessdone 4 Add Administrator to your test users roles 5 Add the Administrator role to the service security 6 Leave Run as blank 7 Use the standard process for updating the services required libraries to include clearblade and notifyLib 8 Test the service in the console by clicking the Save and Test button 9 Click on the wrench icon and go to the Timers tab 10 Set the timer to run the service every 10 seconds 11 Click Apply 12 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Part 11 View Analytics With each action you have been completing during this tutorial the ClearBlade platform has been building up a store of events and history This information makes up vital information that can be fed into analytics tools provided by ClearBlade partners These partners can identify usage trends penetration attempts and any number of device patterns Most important a REST API exists for access to all of the analytics stored in the ClearBlade Platform Explore the visualization of this data from the analytics tab Whats Next 1 Create a Portal5portalportalgettingstarted and begin to visualize the data within your ClearBlade Platform instance 2 Familiarize yourself with the raw APIs at the swagger SwaggerAnalyticsstaticrestapiindexhtmlanalytics 3 Familiarize yourself with samples tank chats 4 Learn about the integrations available Sockets Files 5 Review the CLI and development best practices 6 Practice using the system integration patterns for IoT social networks SalesForce AS400 and others found on githubhttpsgithubcomClearBladeClearBladePatterns 7 Communicate on the forums\"},{\"title\":\"iOS\",\"href\":\"/4-developer_reference/iOS/_default\",\"content\":\"\"},{\"title\":\"Portal\",\"href\":\"/5-portal/_default\",\"content\":\"\"},{\"title\":\"Sources\",\"href\":\"/5-portal/v1/Sources/_default\",\"content\":\"\"},{\"title\":\"Utility: Aggregator\",\"href\":\"/5-portal/v1/Sources/aggregator_source\",\"content\":\" Description A source that allows for the combination of other sources This aggregator source will be updated each time its child sources are updated This source type is useful when creating widgets that need data from multiple sources Return format childSourceName1 childSource1Value childSourceName2 childSource2Value \"},{\"title\":\"Analytics: Count\",\"href\":\"/5-portal/v1/Sources/analytics_count_source\",\"content\":\" Description Source to pull a count of entities within the platform OPTIONS Name String Local reference in portal Query String commaseparated list of modules to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Analytics: Event List\",\"href\":\"/5-portal/v1/Sources/analytics_eventList_source\",\"content\":\" Description Source to pull a list of events for specified modules OPTIONS Name String Local reference in portal Module String user collection messaging service push ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform Security This datasource requires that the user role has permission to access the relevant module\"},{\"title\":\"Analytics: Event Totals\",\"href\":\"/5-portal/v1/Sources/analytics_eventTotals_source\",\"content\":\" Description Source to pull count totals for specified modules OPTIONS Name String Local reference in portal Module String user collection messaging service push ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform Security This datasource requires that the user role has permission to access the relevant module\"},{\"title\":\"Analytics: Storage\",\"href\":\"/5-portal/v1/Sources/analytics_storage_source\",\"content\":\" Description Source to pull the storage used for a system or a specific collection OPTIONS Name String Local reference in portal Collection ID String If omitted will retrieve storage for all collections in a system Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Analytics: Top Entities\",\"href\":\"/5-portal/v1/Sources/analytics_topEntities_source\",\"content\":\" Description A wrapper around the Event List source which sums the count of requests for a unique ID or user ID OPTIONS Name String Local reference in portal Module String user collection messaging service push ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Analytics: User or Device Events\",\"href\":\"/5-portal/v1/Sources/analytics_userOrDeviceEvents\",\"content\":\" Description A wrapper around the Event List source which sums the count of requests for a unique ID or user ID OPTIONS Name String Local reference in portal Entity String Search events for users or devices User or Device IDs Array of user or device IDs Module String Module to filter for ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Average Message Payload Size\",\"href\":\"/5-portal/v1/Sources/avg_payload_size\",\"content\":\" Description A source that retrieves the average payload size for a specified topic OPTIONS Name String Local reference in portal Topic Name String Name of the topic to query for Start Time Beginning of time window to query for Stop Time End of time window to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"ClearBlade Device\",\"href\":\"/5-portal/v1/Sources/cb_device_source\",\"content\":\" Description Link to a ClearBlade platform systems device OPTIONS Name String Local reference in portal Device Name String Name of ClearBlade platform device Refresh Time Int Loop duration in seconds before reloading source Security This datasource requires that the user role has permission to access the ClearBlade platform device\"},{\"title\":\"Clock\",\"href\":\"/5-portal/v1/Sources/clock_source\",\"content\":\" Description Display the current time or provide a shared time reference to synchronize widgets OPTIONS Name String Local reference in portal Refresh Every Int Loop in seconds to update time\"},{\"title\":\"Code\",\"href\":\"/5-portal/v1/Sources/code_source\",\"content\":\" Description Link to a ClearBlade platform code service OPTIONS Name String Local reference in portal Code Name String Name of ClearBlade platform code service Refresh Interval Int Loop duration in seconds before reloading source Set to 0 for no refresh interval Default Payload obj If a refresh interval is set this is the payload attached to the service request Must be valid JSON Security This datasource requires that the user role has permission to execute the ClearBlade platform code service\"},{\"title\":\"Collection\",\"href\":\"/5-portal/v1/Sources/collection_source\",\"content\":\" Description Fetch an entire ClearBlade platform collection OPTIONS Name String Local reference in portal Collection Name String Name of ClearBlade platform collection Columns Array The columns to fetch from collection Defaults to all if left blank Refresh Time Duration of update loop Format Returns an array of collection items data specificToCollection destroy fn refresh fn save fn Security This datasource requires that the user role has permission to read the systems target collection\"},{\"title\":\"Current User\",\"href\":\"/5-portal/v1/Sources/current_user_source\",\"content\":\" Description Gather an object describing the current portal user OPTIONS Name String Local reference in portal Refresh Time Int Loop duration in seconds before reloading source Format Returns an object of the current user account creationdate Stringtimestamp email Stringemail userid Stringvarchar\"},{\"title\":\"Edge List\",\"href\":\"/5-portal/v1/Sources/edge_list_source\",\"content\":\" Description Gather a list of system edges OPTIONS Name String Local portal reference Refresh Time Int Loop to update in milliseconds\"},{\"title\":\"Item\",\"href\":\"/5-portal/v1/Sources/item_source\",\"content\":\" Description A Source linked to a particular item in a system collection OPTIONS Name String Portal local reference Collection Name String Name of collection in the ClearBlade platform System Field Name String Column name Field Value The matching value to return Format Returns an array of matching items data specificToCollection destroy fn refresh fn save fn Security This datasource requires that the user role has permission to read the systems target collection\"},{\"title\":\"JSON\",\"href\":\"/5-portal/v1/Sources/json_source\",\"content\":\" Description A JSON data source generated from a desired request OPTIONS Name String Portal local reference URL String Address to send the request Try Thingproxy Bool A direct JSON connection will be tried first if that fails a JSONP connection will be tried If that fails you can use thingproxy which can solve many connection problems to APIs See httpsgithubcomFreeboardthingproxy Refresh Every Int Loop in seconds to resend request Method Option Body Payload delivered with request usually POST Headers Request headers to send with request\"},{\"title\":\"Utility: Local Variable\",\"href\":\"/5-portal/v1/Sources/local_var_source\",\"content\":\" Description A source that allows for widgets to communicate locally throughout the portal For example a on list item click a local variable source can be assigned the value of that clicked element Other widgets in the portal could then react and display relevant information about that element OPTIONS Name String Local reference in portal\"},{\"title\":\"Message History\",\"href\":\"/5-portal/v1/Sources/message_history_source\",\"content\":\" Description Retrieve the message history of a systems messaging topic OPTIONS Name String Portal local reference name Message Topic String The topic in ClearBlade platform messaging Message Count Int Maximum number of messages to fetch Start Time Int Epoch timestamp in milliseconds to start searching from Refresh Time Int Refresh loop in seconds Format Returns an array of topics messages similar to message Stringany senddate Inttimestamp userid Stringvarchar Security This datasource requires that the user role has permission to read the systems message history\"},{\"title\":\"Message Topic\",\"href\":\"/5-portal/v1/Sources/message_topic_source\",\"content\":\" Description Link to a systems message topic OPTIONS Name String Portals local reference name Message Topic The topic in ClearBlade platform messaging If one does not exist it will be created on first publish Format Returns the most recent message as a string Expects a message payload as a string Security This datasource requires that the user role has permission to create and read the systems message history\"},{\"title\":\"Open DB Connections\",\"href\":\"/5-portal/v1/Sources/open_db_connections\",\"content\":\" Description A source to retrieve the open number of database connections made by the platform OPTIONS Name String Local reference in portal\"},{\"title\":\"Open MQTT Connections\",\"href\":\"/5-portal/v1/Sources/open_mqtt_connections\",\"content\":\" Description A source to retrieve a count of the open number of MQTT connections made by the platform OPTIONS Name String Local reference in portal\"},{\"title\":\"Users\",\"href\":\"/5-portal/v1/Sources/users_source\",\"content\":\" Description Provides a list of the users in the current system OPTIONS Name String The local name of the source in your portal Format Data creationdate timstampString email emailString userid varCharString Total Int Security This datasource requires that the user role has permission to read the user list\"},{\"title\":\"Widgets\",\"href\":\"/5-portal/v1/Widgets/_default\",\"content\":\"\"},{\"title\":\"Bar Graph - Basic\",\"href\":\"/5-portal/v1/Widgets/barGraph_basic_widget\",\"content\":\"PicstaticimgportalbarChartbasicpng Description A bar graph generated from input data OPTIONS Orientation Option Vertical or horizontal Graph Title String Title displayed in widget container Data An array of coordinate objects where x represents domain and y represents range x 0 y 1 x 1 y 2 x 2 y 4 x 3 y 8 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Bar Color CSS Qualified Color Fill color of the bars CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Bar Graph - Dual Y Axis\",\"href\":\"/5-portal/v1/Widgets/barGraph_dualYAxis_widget\",\"content\":\"PicstaticimgportalbarChartdualYAxispng Description A bar graph with two y axes generated from input data OPTIONS Orientation Option Vertical or horizontal Graph Title String Title displayed in widget container Data An array of coordinate objects where x represents domain y represents the first range and y2 represents the second range x label1 y 5000 y2 100 x label2 y 65000 y2 200 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Range Title 2 String Y2Axis Label for vertical orientation X2Axis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Bar Color CSS Qualified Color Fill color of the bars CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Bar Graph - Grouped\",\"href\":\"/5-portal/v1/Widgets/barGraph_grouped_widget\",\"content\":\"PicstaticimgportalbarChartgroupedpng Description A bar graph generated from input data OPTIONS Orientation Option Vertical or horizontal Graph Title String Title displayed in widget container Data An array of groups where name equals the group name and values is an array of coordinate objects Note that each x value must be unique for its containing group Label is used for the graph legend groups name CA values x 0 y 5000 label Under 40 x 1 y 500 label 40 name TX values x 0 y 6500 label Under 40 x 1 y 500 label 40 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Bar Color CSS Qualified Color Fill color of the bars CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Button\",\"href\":\"/5-portal/v1/Widgets/button_widget\",\"content\":\" Description The button widget allows a user to perform some action when the button is clicked OPTIONS Button Label String The text inserted in this fielded will appear on the button Event Target The relevant source and outgoing parser Size Option Size of the button\"},{\"title\":\"CRUD Grid\",\"href\":\"/5-portal/v1/Widgets/crudGrid_widget\",\"content\":\" Description An interactive grid for working with a sources data OPTIONS Grid Title String Title displayed in widget container Data The data displayed in the appropriate grid column Expected format columnname anyvalue anothercolumnname anyvale Columns The columns in the grid should correlate to datas keys and data type Optionally include a disabled attribute to prevent value updates Expected format name columnname type string name anothercolumnname type int disabled boolean Size In Blocks Int See Portal Overview for info on block size Example This example configuration uses ClearBlade Collection and Collection Columns datasources and all users with access to the portal have been given CRUD permissions Note that any datasource may be used but parsers need to be adjusted for expected format andor the relevant query Incoming parser for Data javascript ifthisdatasource undefinedreturn var fmtData forvar i 0 len thisdatasourcelength i len i fmtDatapushthisdatasourceidata return fmtData Here we extract the data from the collection datasource results data itemid 0001 col1 4321 data itemid 0002 col1 1234 and format it to the grids expected data itemid 0001 col1 4321 itemid 0002 col1 1234 Outgoing parser for Data javascript var query cbQuery queryequalToitemid thiswidgetdataitemid thiswidgetquery query return thiswidget For this outbound parser the widget is assigned a ClearBlade Query to updatedelete items with matching unique keys itemid Note that this logic may need to be adapted if you are working with a datasource other than a collection Incoming Parser for Columns javascript ifthisdatasource undefinedreturn var fmtColumns forvar c 0 len thisdatasourcelength c len c var col name thisdatasourcecColumnName type thisdatasourcecColumnType disabled thisdatasourcecColumnName itemid true false fmtColumnspushcol return fmtColumns Finally we take the collection columns datasource ColumnName itemid ColumnType uuid ColumnName col1 ColumnType int and format it to the grids expected column data name itemid type uuid disabled true name col1 int disabled false Since itemid is disabled a user will not be able to edit its value\"},{\"title\":\"Custom Widgets\",\"href\":\"/5-portal/v1/Widgets/custom_widgets\",\"content\":\" Walkthrough To understand widget source structure we will walk through the creation of a basic button widget First create a javascript file myCustomWidgetjs Widget Schema The first component of your widget is the schema delivered to the portal interface Loaded at runtime it contains meta information along with user editable settings relating to the widgets function js freeboardloadWidgetPlugin typename mycustomwidget displayname My Custom Widget description A custom button widget settings name containerwidth displayname Container width type integer description Width of your widgets container as a percentage Useful when juxtaposing widgets defaultvalue 100 required true newInstance functionsettings newInstanceCallback updateCallback newInstanceCallbacknew myCustomWidgetsettings updateCallback typename A unique reference that will be used locally in the portal displayname The name that appears in the list of available widgets description A text description of the widgets function settings The user editable settings Included is the required containerwidth attribute more details below newInstance An initialization function that generates an instance of myCustomWidget For this example we will add user settings that allow for customization of a button and link to an existing datasource Lets add the following so that our settings include js name buttonLabel displayname Button Label type text name eventTarget displayname Event Target type data outgoingparser true multiinput true forcedata dynamic name heightAdjust displayname height in blocks type number defaultvalue 4 name containerwidth displayname Container width type number description Width of your widgets container as a percentage Useful when juxtaposing widgets defaultvalue 100 required true Every setting has a name that is used within scope of the portal a displayname shown to users in the widgets settings panel type for relevant value handling a defaultvalue for initial states and a required flag to force user entry Setting types with relevant optionals text varchar number integer double float data Links the widget to a portals datasource outgoingparser Flag to signify the widget should have an outbound parser incomingparser Flag to signify the widget should have an inbound parser multiinput Flag specifying if multiple datasources can be triggered forcedata Do not allow a user to choose between data types Options dynamic static Widget Model Now that we have a schema in place a user can select and modify attributes of the widget We will add a model that will be used to run the widgets interaction within the portal Below is the model scaffolding with required methods js var myCustomWidget functionsettings updateCallback var self this var currentSettings settings selfrender functioncontainerElement Outputs element to the DOM selfgetHeight function Returns the block height of the widget A block is 60px return selfcurrentSettingsheightAdjust selfonSettingsChanged functionnewSettings User has opened and saved settings selfcurrentSettings newSettings selfonCalculatedValueChanged functionsettingName newValue Called when a linked datasource updates If multiple sources are linked using different setting objects handling can be filtered by checking settingName selfonDispose function Removal from portal methods selfgetValue function Used in parser to fetch value using thiswidget For the purpose of this example we will render a basic html form button When clicked a linked datasource will be sent whatever a user specifies in the outbound parser One possible implementation is given below js var myCustomWidget functionsettings updateCallback var self this var currentSettings settings Create a JQuery element refrence var myButtonElement attr typebutton value settingsbuttonLabel addClasswidgetbutton wrap Create a placeholder payload Will be modified by datasource var submitPayload selfrender functioncontainerElement Add the button element to the DOM container containerElementappendmyButtonElement Add an event listner to fire the datasource event myButtonElementon click selfonEvent selfgetHeight function Validated block value using utilswidgetcalculateHeightint Validates value type and range return utilswidgetcalculateHeightcurrentSettingsheightAdjust selfonSettingsChanged functionnewSettings Update settings currentSettings newSettings Update possible UI changes myButtonElementvalnewSettingsbuttonLabel selfonCalculatedValueChanged functionsettingName newValue Called when a linked datasource updates If multiple sources are linked using diffrent setting objects handling can be filtered by checking settingName Update the payload with the last known DS value submitPayload newValue selfonDispose function selfgetValue function return submitPayload selfonEvent function updateCallbacksubmitPayload Now that you have a functioning widget upload your source to GitHub or file hosting server Link custom widget to portals Within the portals tab of your ClearBlade platform system click New and select plugin In the name field enter a ClearBlade platform reference name Note that the name of the widget declared within your source will still be the name within your portal In the URL field include the raw link to your hosted source code If hosted on GitHub you may need to change rawgithubusercontentcom to rawgitcom nonproduction or cdnrawgitcom production\"},{\"title\":\"D3\",\"href\":\"/5-portal/v1/Widgets/d3_widget\",\"content\":\" Description The D3 widget allows users to display D3 graphics OPTIONS Source Data used for graph Expected data dynamic based on d3 implementation CSS D3 css style code Will affect global stylesheet Use CSS best practice graphId style path HTML HTML object of D3 object EX D3 Code Where the D3 script should be written thisdatasource is accessible through data\"},{\"title\":\"Dial\",\"href\":\"/5-portal/v1/Widgets/dial_widget\",\"content\":\" Description The dial widget allows the user to have a dial input OPTIONS Dial Name String Title displayed in widget Dial Value Expected incoming data format int\"},{\"title\":\"Message Feed\",\"href\":\"/5-portal/v1/Widgets/feed_widget\",\"content\":\" Description The message feed widget will display a live feed of the latest messages for a given topic OPTIONS Feed Name String Name of message feed widget Feed Source Select a message history source Size Option Predetermined block sizes\"},{\"title\":\"Flip Switch\",\"href\":\"/5-portal/v1/Widgets/flipSwitch_widget\",\"content\":\" Description A switch widget to control binary states OPTIONS Title String Title displayed in widget True Label String Text indicating the true state False Label String Text indicating the false state Switch Value Expected incoming format Bool\"},{\"title\":\"Gauge\",\"href\":\"/5-portal/v1/Widgets/gauge_widget\",\"content\":\" Description Displays a gauge indicating the current source value OPTIONS Title String Title of gauge Varient Option Indicator a gauge with a background that fills as a value changes Segmented a gauge with multiple segments of background Commonly used to distinguish thresholds Gauge Value Incoming data format Int Units String Units to be displayed Minimum Int Minimum gauge value Maximum Int Maximum gauge value Title Color CSS Qualified Color Gauge Background Indicator Gauge The background of the nonfilled gaugeCSS Qualified Color Segmented Gauge An array of gauge percent shares with respective colors Total of all shares must equal 1 Default if left blank share 040 color 569922 share 025 color FFF131 share 025 color CC5C2F share 010 color AA3224 Filled Gauge Color CSS Qualified Color Filled portion of gauge when an indicator variant Needle Color CSS Qualified color Color of indicator needle Label Color CSS Qualified Color Colors of current value display and minmax labels CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"HTML\",\"href\":\"/5-portal/v1/Widgets/html_widget\",\"content\":\" Description A widget composed of custom HTML OPTIONS Content The HTML to render for display Expected incoming data String Example parser Where chosen sources data is text return thisdatasource Height Blocks Int See Portal Overview for info on block size\"},{\"title\":\"Indicator Light\",\"href\":\"/5-portal/v1/Widgets/indicatorLight_widget\",\"content\":\" Description The indicator light widget display a small light that can be turned on and off OPTIONS Title String Title of widget Indicator Text Off Displayed when status is false Expected incoming data format String Indicator Text On Displayed when status is true Expected incoming data format String Light Status Current status of the light Expected incoming data format Bool\"},{\"title\":\"HTML Input\",\"href\":\"/5-portal/v1/Widgets/input_widget\",\"content\":\" Description An HTML input for user interaction OPTIONS Title String The title displayed within widget container Input Type Option Available types listed below Value Incoming parser specified the value of input Update datasource with value on input submission See expected value type for relevant input below Relevant Attributes Expected object See expected attributes for relevant input below Size Options Predefined block sizes Available Inputs Below are all of the available widgets along with expected value inputs attributesif supported and the type of data each returns It is recommended that validation for inputs is included in the outgoing parser Note that a return of value is the value from your optionsvalue datasource Button Expected Value string Attributes none Returns value Checkbox Expected Value any Attributes javascript checked stringboolean Example checked true Returns value Color Expected Value stringHEX Attributes none Returns stringHEX Date Expected Value stringyyyymmdd Attributes none Returns stringyyyymmdd Datetimelocal Expected Value stringyyyymmddT0000 Attributes none Returns stringyyyymmddT0000 Email Expected Value string Attributes none Returns string Month Expected Value stringyyyymm Attributes none Returns stringyyyymm Number Expected Value number Attributes javascript min number max number Example min 10 max 300 Returns number Password Expected Value string Recommend returning with incoming parser Attributes none Returns string Range Expected Value number Attributes javascript min number max number step number Example min 10 max 300 step 5 Returns number Search Expected Value string Attributes none Returns string Select Expected Value number Attributes javascript options String Expected options as strings options String selected String Optionally set a static default choice options red green blue selected blue Example Returns string of selected value Telephone Expected Value number string Attributes none Returns number string Text Expected Value string Attributes none Returns string Textarea Expected Value string Attributes none Returns string Time Expected Value stringHHMM Attributes none Returns stringHHMM Url Expected Value string Attributes none Returns string Week Expected Value stringYYYYW Attributes none Returns stringYYYYW\"},{\"title\":\"Line Graph - Basic\",\"href\":\"/5-portal/v1/Widgets/lineGraph_basic_widget\",\"content\":\" Description A line graph generated from input data OPTIONS Graph Title String Title displayed in widget container Data An array of coordinate objects where x represents domain and y represents range x 0 y 1 x 1 y 2 x 2 y 4 x 3 y 8 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Line Color CSS Qualified Color Stroke color of the line CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Line Graph - Multiline\",\"href\":\"/5-portal/v1/Widgets/lineGraph_multiline_widget\",\"content\":\"PicstaticimgportallineChartmultilinepng Description A line graph generated from input data OPTIONS Graph Title String Title displayed in widget container Data An array of groups where name equals the group name and values is an array of coordinate objects Note that each x value must be unique for its containing group groups name Bar sales values x 20160101T060000000Z y 44 x 20160102T060000000Z y 19 name Foo sales values x 20160101T060000000Z y 43 x 20160102T060000000Z y 98 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Line Color CSS Qualified Color Stroke color of the line CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Map\",\"href\":\"/5-portal/v1/Widgets/map_widget\",\"content\":\" Description The map widget allows users to interact with google maps Users may send markets set markers and create a heat map OPTIONS Map Name String Name of map Map Type Option Simple Map Basic map functionality Heat Map Will render a heat map on top of map corresponding to placed markers Location source Select data source input and return location JSON in input parser Expected incoming data format zoom 16 markers lat 30266856 lng 97742322 lat 3027020 lng 97746638 Note Map will scale to show all markers if zoom attribute is ommited For outgoing parser return thiswidget to send created markers to datasource API Key Google API developer key\"},{\"title\":\"Picture\",\"href\":\"/5-portal/v1/Widgets/picture_widget\",\"content\":\" Description The picture widget allows the user to display a picture OPTIONS Image URL Qualified url to an image source Expected incoming data type String Format View Option How the image should be positioned within the container Refresh Every Number of seconds interval to refresh the image\"},{\"title\":\"Pie Chart\",\"href\":\"/5-portal/v1/Widgets/pieChart_widget\",\"content\":\" Description A pie chart generated from input data OPTIONS Graph Title String Title displayed in widget container Data An array of objects where x represents a slice and y represents the relevant value x0 y1 x1 y2 x2 y4 x3 y8 Include Legend Include a legend Size In Blocks Int See Portal Overview for info on block size Slice Colors CSSQualifiedColor Array of colors to be used to fill slices If more slices than color colors will be repeated FFFFFF rgb255255255 CCCCCCrgba200200200 Label Color CSS Qualified Color Color of axis lines and increment labels CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Rule Builder\",\"href\":\"/5-portal/v1/Widgets/ruleBuilder_widget\",\"content\":\" Description An If This Then That widget which will allow users to create simple conditional statements called IFs which will trigger other services such as SMS Email etc OPTIONS Name String The title displayed within widget container Allow Create Boolean Specifies whether or not users are allowed to define new rules within the widget If set to NO the Add New Rule link will NOT be displayed in the widget Allow Delete Boolean Specifies whether or not users are allowed to create delete rules defined within the widget Allow Edit Boolean Specifies whether or not users are allowed to modify rules defined within the widget Allow OnOff Boolean Specifies whether or not users are allowed to enabledisable rules defined within the widget Block Height Integer Predefined block sizes See Portal Overview for info on block size Container Width Integer The width of the widget container expressed as a percentage from 0 to 100 PreConditions In order to create modify and delete rules the user must belong to a role which was granted systemlevel access permissions in the ClearBlade Platform to create update and delete services and triggers USAGE Upon creating a new RuleBuilder widget the Rule Builder widget will be displayed without any rules since none have been created as of yet Clicking the Add New Rule link will allow you to create new rules In order to Create rules the Allow Create option for the RuleBuilder widget must be specified as YES When rules are created they will be listed within the rule builder widget Clicking the button showing the rule name will allow you to modify the configuration of that rule In order to Edit rules the Allow Edit option for the RuleBuilder widget must be specified as YES Clicking the trash can icon to the left of the rule name will allow you to delete a rule In order to Delete rules the Allow Delete option for the RuleBuilder widget must be specified as YES Clicking the ONOFF toggle will allow you to enabledisable a particular rule In order to EnableDisable rules the Allow ONOFF option for the RuleBuilder widget must be specified as YES Creating Rules 1 In the RuleBuilderWidget click the Add New Rule link A dialog will be displayed allowing you to provide a name for the rule and select the data source for the rule 2 Enter a descriptive name for the new rule 3 Select the datasource for the rule message is the only datasource currently supported In the context of the RuleBuilder widget a datasource refers to a ClearBlade Platform asset Future datasources that may be supported include data collections code services users devices etc 4 Upon selecting the message datasource you will be given the opportunity to specify the IF conditions under which the rule will be triggered To specify the triggering conditions for the rule specify values for the following fields 1 Topic The messaging topic associated with the rule Messages published to the specified topic will result in the rule being triggered 2 Variable The name of a variable within the message payload For Example color where the message payload is alertLevel Error color red 3 Operator The comparison operator to use when comparing the Variable to a Value 4 Value The value of the Variable used with the comparison operator to determine whether or not the rule should be triggered 5 Multiple conditions can be joined together with AND and OR operators to produce sophisticated rule triggering conditions Join conditions can be added to a rule by clicking the Add Condition button 6 When all rule triggering conditions have been specified click the Next button 7 Upon clicking the Next button you will be able to define the actions Then section that will be triggered when the conditions entered in steps 35 are met The alert types currently supported are SMS Send an SMS message to one or more mobile devices Twilio is currently the only supported SMS provider Email Send an email to one or more recipients SendGrid is currently the only supported Email provider Service Invoke a ClearBlade Platform code service 8 Select an alert type provide the appropriate values for the required fields and click the Next button 9 Upon clicking the Next button an overview of the rule configuration will be displayed If you are satisfied with the rule and wish to save it click the DONE button Otherwise you can click the Edit buttons within the IF and THEN sections to go back and make changes to the respective conditions and alerts 10 Upon clicking Done the rule will be displayed within the RuleBuilder widget Modifying Rules Clicking the button showing the rule name will allow you to modify the configuration of that rule In order to Edit rules the Allow Edit option for the RuleBuilder widget must be specified as YES Deleting Rules Clicking the icon to the left of the rule name will allow you to delete a rule In order to Delete rules the Allow Delete option for the RuleBuilder widget must be specified as YES Adding conditions to rules While editing the IF section of a rule you can add additional conditions joined by logical AND and OR operators by clicking the Add Condition button Deleting conditions from rules Conditions can be deleted from rules by clicking the icon located in the bottom left corner of a condition Turning rules ONOFF Clicking the ONOFF toggle will allow you to enabledisable a particular rule In order to EnableDisable rules the Allow ONOFF option for the RuleBuilder widget must be specified as YES \"},{\"title\":\"Sparkline\",\"href\":\"/5-portal/v1/Widgets/sparkline_widget\",\"content\":\" Description The sparkline widget displays numeric data in a graph OPTIONS Title String Title of sparkline Sources The source to display current value changes Expected incoming data format Int Include Legend Bool Should a legend be displayed Legend Key displayed to distinguish sources\"},{\"title\":\"Speedometer\",\"href\":\"/5-portal/v1/Widgets/speedometer_widget\",\"content\":\" Description The speedometer widget allows the user to display a speedometer OPTIONS Speedometer Name String Name of speedometer Maximum Value Int Max speed the speedometer can display Unit String Unit of speed to display Speed Source Expected incoming data format Int\"},{\"title\":\"Text Editor\",\"href\":\"/5-portal/v1/Widgets/textEditor_widget\",\"content\":\" Description The text editor widget with formatting capabilities OPTIONS Title String The title displayed within widget container Content The text to render for display Expected incoming data String Example parser Where chosen sources data is text return thisdatasource Size Options Predefined block sizes See Portal Overview for info on block size\"},{\"title\":\"Text\",\"href\":\"/5-portal/v1/Widgets/text_widget\",\"content\":\" Description The text widget allows the user to display text in addition to a corresponding sparkline graphic OPTIONS Title String Title of text Size Option Size of text widget Font Option Display font of text Italic Bool Display text in italics Bold Bool Display text in bold Content Expected incoming data format Text Include Sparkline Bool Display corresponding sparkline graphic Animate Value Changes Bool Animation when values change to new value Units String Units of sparkline display\"},{\"title\":\"Speech Recognition\",\"href\":\"/5-portal/v1/Widgets/voice_recognition\",\"content\":\" Description The speech recognition widget allows a user to convert speech to text Note this widget only works in supported browsers check browser support herehttpcaniusecomfeatspeechrecognition OPTIONS Event Target The relevant source and outgoing parser Size Option Size of the widget\"},{\"title\":\"V1\",\"href\":\"/5-portal/v1/_default\",\"content\":\"\"},{\"title\":\"Data Parsing\",\"href\":\"/5-portal/v1/portal_data_parsing\",\"content\":\" Source A datasource available to all widgets in portal Accessors datasourcessourceKey Available methods latestData Any Return the latest value associated with the source Parser A function that filters data and has access to portals scope variables Widget Scope Variables thisdatasource The current data of the widgets linked source Equivalent to calling datasourcessourceKeylatestData thiswidget The value of the current widget Incoming Filters from source to widget most commonly used to format data into widgets expected format Outgoing Filters from widget to source most commonly used to format payload for source\"},{\"title\":\"Getting Started\",\"href\":\"/5-portal/v1/portal_getting_started\",\"content\":\"This guide will help you get familiar with ClearBlade Portal and demonstrate the usefulness of a growing collection of plugins Creating A Portal First Login to the ClearBlade Platform and select portal in the system that you wish to link a portal CLick portal on desired systemstaticimgportalgettingstartedcreateportal1png You will be directed to the portal management screen where you will see a table of your portals and plugins Since we do not have any portals lets create a new one by clicking new on the left of the top navigation bar Click to add new portalstaticimgportalgettingstartedcreateportal2png Here lets select Portal and give it a name Leave the template selection as empty This is where you could clone existing portals or select from prebuilt templates Create a new portalstaticimgportalgettingstartedcreateportal3png Before we jump into building our portal we need to give permission for our users to access and edit the portal Click the wrench next to your new portal and select the security tab Open portal security settingsstaticimgportalgettingstartedcreateportal4png This step assumes we have users in our system if not please add users in Auth Users Giving the authenticated role access to read will allow these users to sign in and operate a portal By giving administrator roles CRUD access they will be able to modify the portal that will reflect in the public view Give roles access to portalstaticimgportalgettingstartedcreateportal5png Now that we have access to open a portal click the portals link and sign in with an administrators credentials Click portal linkstaticimgportalgettingstartedcreateportal6png Login to portalstaticimgportalgettingstartedcreateportal7png Welcome to your portal Login to portalstaticimgportalgettingstartedcreateportal8png Adding Datasources Before we start adding widgets to our portal lets add a few sources to interact with our ClearBlade system We will provide an overview of how sources work by setting up a Code Collection and Message Topic source Refer to docs for information regarding all sources Code Source For this example lets make a code service in the ClearBlade Platform called helloPortal that responds with Hello plus a random number 0100 Sample code servicestaticimgportalgettingstartedcreatesourcecode1png Similar to giving access to our portal we need to give access to our code service Open the code settings and under security lets add Authenticated and Administrator Note that all users are given the Authenticated so we could have stopped there and the Administrators would have access but in a situation where access may be spread amongst many roles it is important that every role with access to a portal using this service is granted access Give role accessstaticimgportalgettingstartedcreatesourcecode2png Now that our service is set up lets navigate back to our portal and click add under datasources and select code Add Sourcestaticimgportalgettingstartedcreatesourcecode3png Here we enter a local name for our datasource and the name of our service in our ClearBlade system We will set a 10 second interval and since our service does not require parameters we will leave our payload as an empty object Refresh interval and default payload are available if you want your source to update periodically In some cases you will only want to update your source when triggered by a plugin rather than loop Create Code DSstaticimgportalgettingstartedcreatesourcecode4png You will notice that the HelloPortalService updates every 10 seconds We will use that source in a few minutes but first lets set up a message topic and collection datasource Collection Source Lets start by adding a collection to our ClearBlade Platform system First create a json file or saveAs json with weeklyStatsjsonstaticsamplejsonweeklyStatsjson then import this sample collection into ClearBlade Platform system Create Code DSstaticimgportalgettingstartedcreatesourcecollection2png Again we will need to add our roles to access the collection Collection settings Security Give roles access to portalstaticimgportalgettingstartedcreateportal5png Now lets navigate back to our portal and add the collection source Add Collection Sourcestaticimgportalgettingstartedcreatesourcecollection1png Again the name is a local name to refer to our source in the portal and the collection name is what name we gave to our ClearBlade system data collection We will leave columns blank so we can have access to all the data in the collection Since we are not expecting this collection to update frequently we are going to set the refresh interval for every minute Configure Collection Sourcestaticimgportalgettingstartedcreatesourcecollection3png You will notice that the WeeklyUseCollectionSource updates every 60 seconds We will use that source in a few minutes but first lets set up our message topic source Message Topic Source Because we can create new topics by publishing there is no need to already have a topic in our ClearBlade system Although in most scenarios you will already have a message topic set up Lets give our roles permission to publish read and update topics In your ClearBlade Platform system navigate to Auth Roles For our Authenticated and Administrator roles under Message History add publish read and update Give roles access to messagingstaticimgportalgettingstartedcreatesourcemessage1png Now we can add our message topic datasource Navigate back to your portal and click add under datasources Select Message Topic Again the name will be a local reference within your portal and the topic corresponds to a ClearBlade platform message topic Add message data sourcestaticimgportalgettingstartedcreatesourcemessage2png Using Plugins Widgets You have set up three datasources now lets create dynamic widgets that interact with your ClearBlade Platform system Using Our Code Source Well start with a basic text widget that displays the most recent HelloPortalService response First lets delete the default pane and add our own Create and delete a panestaticimgportalgettingstartedcreatewidget1png Now lets add a widget Add widget to panestaticimgportalgettingstartedcreatewidget2png Select Text To understand the options of each widget view our resources in docs We will give the widget a title and select a Dynamic content type This is where we link our HelloPortalService Because a code source responds with an object results success bool we need to format the response to the expected format of our widget Within incoming parser replace with return thisdatasourceresults Close the parser and click save Once your source updates you should see the response from the code service and proceeding updates will update the widgets content Text Widgetstaticimgportalgettingstartedcreatewidget3png Before moving on to using our next datasource lets explore the use of a parser by using the same response to update a gauge widget In the same pane lets add another widget and select Gauge Add Widgetstaticimgportalgettingstartedcreatewidget4png Lets leave all the defaults and just change the gauge value to dynamic and select HelloPortalService Since the gauge expects an integer we need to edit the parser to return the random number after hello Gauge Widget Optionsstaticimgportalgettingstartedcreatewidget5png Gauge incoming parserstaticimgportalgettingstartedcreatewidget6png After modifying your parser click close and save Youll see your gauge adjust as the source updates Note parsers are where you should provide error handling for instance if the response was null or its success attribute was false Youve now used a datasource in two different widgets by utilizing parsers As your source updates the status and gauge will update Working with data sourcesstaticimgportalgettingstartedcreatewidget7png Using Our Collection Source Since our WeeklyStatsSource is a collection of bandwidth use for the last week lets use it to build a bar graph Start by adding a new pane then add a Bar Graph widget to that pane Add a bar graph widgetstaticimgportalgettingstartedcreatewidget8png We need to modify the sources data to the widgets expected format so lets set up our parser Collection format data bandwidth 50 day Mon itemid uniqueid destroy fn refresh fn save fn so lets parse through the data and format to expected xdomain y 00 Setup Graph Parserstaticimgportalgettingstartedcreatewidget9png Once setup click close and save You should now see your bar graph populated with the data in WeeklyStatsSource Example bar graphstaticimgportalgettingstartedcreatewidget10png Using Our Messaging Source Lets build a simple interface to publish messages to our topic First create a new pane and add an input widget By selecting a dynamic value we are able to trigger the messaging data source when we leave our input This will cause the value of out input field to be published to examplePortalTopic Because we just want basic text well leave the outgoing parser to the default returning the widgets value Input widgetstaticimgportalgettingstartedcreatewidget11png Before trying out our input widget lets setup a text widget to display the most recent message In the same pane add a text widget Since our message source is already returning data as text we can leave our incoming parser to return the sources data Text widgetstaticimgportalgettingstartedcreatewidget12png Now we can try out our widgets Type a message into the input field and click off You will see the text field pupulate with the most recent message Using the input widgetstaticimgportalgettingstartedcreatewidget13png If you navigate to messaging in your ClearBlade Platform system you will see the messages sent by your portal along with the userid that published the message Messaging results in ClearBladestaticimgportalgettingstartedcreatewidget14png\"},{\"title\":\"Layout Overview\",\"href\":\"/5-portal/v1/portal_overview\",\"content\":\" Portal A portal is comprised of panes displayed on a responsive grid Layouts are determined based on the number of columns a screen can support Therefore a portal contains a layout relative to each column of support Portal Pane PaneTab Widget Pane A container for a grouping of widgets Title String Displayed in pane header Columns Int Number of columns a pane should occupy If larger than portal columns it will be reduced to portal columns Tabbed Pane Bool Supports multiple tabs within pane When false widgets are placed into initial tab Display Header Bool Whether to display header Header Theme Option Specified theme for header Pane Tab A page of widgets within a pane Tab Title String Displayed at the top of a pane container to identify a tab Widget A specialized element that can display source data andor allow for user interaction Type Option Specified widget type Title String Displayed in relevant widget header position Height Size Int Based on blocks of 60px Not available for widgets with fixed heights Specific Options See all widgets Specific Data A widget may serve as a data display user interface or both Some widgets allow for static sources such as textwidget Dynamic sources allow for the use of parsers to format data to the expected widget format Learn more Data Handling\"},{\"title\":\"Source types\",\"href\":\"/5-portal/v1/source_types\",\"content\":\" Static A static representation of data Useful for displaying text or other values that dont change Dynamic A value that responds to changes in sources Anytime a corresponding source updates a widget that listens on that source will execute its parser Calculated A value that should be dynamic but does not need to respond to source updates One example is for analytics sources that use timebased values to query Example return the yesterdays date at midnight var d new Date dsetDatedgetDate 1 dsetHours0000 return dgetTime1000 \"},{\"title\":\"User Registration\",\"href\":\"/5-portal/v1/user_registration\",\"content\":\"This document demonstrates how to set up the ability for users to register with your IoT system via portals 1 Create an empty Portalportalgettingstartedcreatingaportal 2 Grant create user permissions2consoleadministrationUserscreatingroles to the Anonymous role 3 Test via the portal 1 Open the portal that was created in step 1 2 Click on the Sign Up tab on the login dialog Sign Upstaticimgportaluserregistrationuserregistrationpng 3 Fill in the form and submit\"},{\"title\":\"Types\",\"href\":\"/5-portal/v2/Features/Plugins/Types/_default\",\"content\":\"\"},{\"title\":\"Datasource\",\"href\":\"/5-portal/v2/Features/Plugins/Types/datasource\",\"content\":\"A datasource plugin is made up of two parts 1 A definition5portalv2featurespluginsdefinition that is registered with the portal 2 A functiondatasourcefunction that is responsible for interacting with thirdparty APIs responding to various lifecycle methods and notifying the portal when new data is available In this document we will cover the following 1 Example Definitionexampledefinition 2 Datasource functiondatasourcefunction 3 Example Datasource functionexampledatasourcefunction Example Definition CBPORTALregisterDatasource this function must be called in order to register the datasource as a plugin typename CBPLUGINDATASOURCE displayname Datasource Plugin group ClearBlade Plugins description A datasource as a plugin class PluginDatasourceTest settings name query displayname Search Query type text required true name apiKey displayname Google Search API Key type text required true name searchEngineId displayname Search Engine ID type text required true name dessert displayname Favorite Dessert type text required true name booleanVal displayname Boolean Value type boolean defaultvalue true name numberVal displayname Number Value type number defaultvalue 42 name colorVal displayname Color Value type color defaultvalue fff name optionVal displayname Option Value type option defaultvalue option2 options name Option 1 value option1 name Option 2 value option2 Datasource function The datasource function takes a few parameters nametypedescription settingsobjectThe value for settings upon instantiation updateCallbackfunctionUsed to notify the portal that data has changed will cause widgets that are hooked up to the datasource to rerender errorCallbackfunctionUsed to display an error message inside the portal Takes two parameters title and message The datasource function can implement the following methods namerequireddescription onSettingsChangedfalseCalled when the datasources settings are changed can be used to store new values sendDatatrueUsed to interact with a thirdparty API updateNowfalseUsed to refresh the datasource with the current settings Called when the refresh button is pressed inside the portal onDisposefalseUsed to clean up any functions or objects that could cause memory leaks interval timers IndexedDB connections etc Example Datasource function function PluginDatasourceTestsettings updateCallback errorCallback let payload query settingsquery apiKey settingsapiKey searchEngineId settingssearchEngineId thisonSettingsChanged function settings payload query settingsquery apiKey settingsapiKey searchEngineId settingssearchEngineId thisupdateNow thisupdateNow function thissendDatapayload function handleErrorsresponse if responseok throw ErrorresponsestatusText return response thissendData function data fetchhttpswwwgoogleapiscomcustomsearchv1qdataquerykeydataapiKeycxdatasearchEngineId method GET thenhandleErrors thenresp respjsonthenjsonResp updateCallbackjsonResp catche errorCallbackFailed to search e thisonDispose function thisupdateNow \"},{\"title\":\"Widget\",\"href\":\"/5-portal/v2/Features/Plugins/Types/widget\",\"content\":\"A widget plugin is made up of two parts 1 A definition5portalv2featurespluginsdefinition that is registered with the portal 2 A functionwidgetfunction that is responsible for rendering the widget and responding to various lifecycle methods In this document we will cover the following 1 Example Definitionexampledefinition 2 Widget functionwidgetfunction 3 Example Widget functionexamplewidgetfunction Example Definition CBPORTALregisterWidget this function must be called in order to register the widget as a plugin typename MyTestWidget displayname My Test Widget plugin true class PluginTest settings name textVal displayname Text Value type text defaultvalue Plugin name booleanVal displayname Boolean Value type boolean defaultvalue true name numberVal displayname Number Value type number defaultvalue 42 name colorVal displayname Color Value type color defaultvalue fff name optionVal displayname Option Value type option defaultvalue option2 options name Option 1 value option1 name Option 2 value option2 name multiObjectVal displayname Multiple Objects Value type MULTIOBJECTSETTINGTYPE objectShape name label displayname Label type text name orientation displayname Orientation type option options name left value left name right value right defaultvalue right name paddingTop displayname Top Padding type number defaultvalue 0 name paddingBottom displayname Bottom Padding type number defaultvalue 0 defaultvalue name label displayname Label type text name orientation displayname Orientation type option options name left value left name right value right defaultvalue right name dataVal displayname Data Value type DATASETTINGTYPE group Data incomingparser true expectedformat name Page A uv 4000 pv 2400 av 1400 rv 3000 name Page B uv 3000 pv 1398 av 1400 rv 3000 defaultvalue dataType CALCULATEDDATATYPE value return name Page A uv 4000 pv 2400 av 1400 rv 3000 name Page B uv 3000 pv 1398 av 1400 rv 3000 required true Widget function namerequireddescription rendertrueThis method is responsible for either adding elements to the container element or returning a value to be rendered Called every time a setting or data is updated onSettingsChangedfalseCalled when the widgets settings are changed can be used to store new values onCalculatedValueChangedfalseCalled when a DATASETTINGTYPE setting updates with new data onDisposefalseUsed to clean up any functions or objects that could cause memory leaks interval timers IndexedDB connections etc Example Widget function function PluginTestsettings updateCallback thisallInfo settings settings thisrender function element return Stringified Info Text Value thisallInfosettingstextVal Boolean Value thisallInfosettingsbooleanVal Number Value thisallInfosettingsnumberVal Color Value thisallInfosettingscolorVal Option Value thisallInfosettingsoptionVal Multi Object Value JSONstringifythisallInfosettingsmultiObjectVal Data Value thisallInfodata JSONstringifythisallInfodatadataVal thisonSettingsChanged function settings consolelogsettings thisallInfosettings settings thisonCalculatedValueChanged function data consolelogdata thisallInfodata data thisonDispose function consolelogdisposed \"},{\"title\":\"Plugins\",\"href\":\"/5-portal/v2/Features/Plugins/_default\",\"content\":\"\"},{\"title\":\"Definition Object\",\"href\":\"/5-portal/v2/Features/Plugins/definition\",\"content\":\" Definition keytyperequireddescription typenamestringtrueUnique ID for this plugin pluginbooleantrue displaynamestringtrueThe name of the plugin as it will show up in the list of widgets settingssettingsettingtrueList of configurable settings classfunctiontrueReference to a function that is responsible for rendering the widget groupstringfalseAdd this plugin to a specific group of widgets defaults to Other Setting A setting is an object with the following fields keytyperequireddescription namestringtrueUnique name for the setting displaynamestringtrueUsed in the widget settings modal typestringtrueRefer to setting typesettingtypes for possible values defaultvaluesetting typesettingtypesfalse groupstringfalseAllows for grouping settings into sections descriptionstringfalseDescription for the setting requiredbooleanfalseIf true this setting must be given a value in order to save the widgets settings Advanced Settings Advanced settings are settingssetting that contain additional fields that allow for more customization DATASETTINGTYPE This field is generally used to hook a widget setting up to a datasource5portalv2featuressourcesoverview keytyperequireddescription expectedformatstringfalseUsed to remind users of the format that this setting expects incomingparserbooleanfalseIf true this widget setting will respond to changes in a datasource outgoingparserbooleanfalseIf true this widget setting will be able to send values to a datasource A DATASETTINGTYPE can be one of the following 1 STATICDATATYPE 2 CALCULATEDDATATYPE 3 DYNAMICDATATYPE MULTIOBJECTSETTINGTYPE keytyperequireddescription objectShapesettingsettingtrueDescribes the fields available and their types option keytyperequireddescription optionstrueUsed by the option setting type to give the user a list of possible choices Setting Types nametypeexample textstringHello numbernumber42 booleanbooleantrue colorstringfff optionbottom DATASETTINGTYPEdataType DYNAMICDATATYPE value return thisdatasource MULTIOBJECTSETTINGTYPEorientation left value 42 color red\"},{\"title\":\"Overview\",\"href\":\"/5-portal/v2/Features/Plugins/overview\",\"content\":\" Plugin A JavaScript file that can be loaded by a portal to extend the default list of widgets and datasources Types 1 Widget5portalv2featurespluginstypeswidget 2 Datasource5portalv2featurespluginstypesdatasource Use cases 1 When a custom datasource5portalv2featuressourcesoverview is necessary 2 When a custom widget5portalv2featureswidgetsoverview is called for in a separate portal a plugin can be used to reuse the same widget across multiple portals Note the HTML widget5portalv2featureswidgetstypesHTMLWIDGETCOMPONENT is a custom widget but it is not automatically available in portals other than the original Hosting a plugin A plugin must be hosted on a website that will return the correct ContentType headers when the resource is requested eg RawGithttpsrawgitcom\"},{\"title\":\"Avg. Message Payload Size\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_AVG_MESSAGE_PAYLOAD_SIZE\",\"content\":\" Description Fetch the average payload size for a given topic Settings NameTypeGroupRequiredDescriptionDefault Topic nametextfalse Start timenumberfalse Stop timenumberfalse Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Code Service\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_CODE_SERVICE\",\"content\":\" Description Call a ClearBlade service with parameters Settings NameTypeGroupRequiredDescriptionDefault Code NametexttrueName of the code service which you wish to execute on your system Payloadtextfalsepayload must be a valid JSON object ex parameter value Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Collection\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_COLLECTION\",\"content\":\" Description Perform operations against a collection in your ClearBlade system Settings NameTypeGroupRequiredDescriptionDefault Collection Nametexttrue Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Device\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_DEVICE\",\"content\":\" Description Access a ClearBlade device Settings NameTypeGroupRequiredDescriptionDefault Device NametexttrueName of ClearBlade Device you would like to access Refresh Timenumberfalse Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Edge List\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_EDGE_LIST\",\"content\":\" Description Retrieve all edges in your ClearBlade System Settings NameTypeGroupRequiredDescriptionDefault Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Edge Metrics\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_EDGE_METRICS\",\"content\":\" Description Retrieve metrics for an edge Settings NameTypeGroupRequiredDescriptionDefault Edge Nametexttrue Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Message Topic\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_MESSAGE_TOPIC\",\"content\":\" Description A topic streaming payloads over a websocket Settings NameTypeGroupRequiredDescriptionDefault Topic nametexttrue Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Aggregator\",\"href\":\"/5-portal/v2/Features/Sources/Types/DATASOURCE_AGGREGATOR\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault DatasourcesDATASETTINGTYPEtrueDatasources to aggregate\"},{\"title\":\"Local Variable\",\"href\":\"/5-portal/v2/Features/Sources/Types/LOCAL_DATASOURCE_PLUGIN\",\"content\":\" Description A variable stored in the local portal scope\"},{\"title\":\"HTTP\",\"href\":\"/5-portal/v2/Features/Sources/Types/UtilityHttp\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault URLtexttrue Methodoptionfalseget BodyjsonBuilderfalse HeadersKEYVALUEBUILDERTYPEfalse Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Types\",\"href\":\"/5-portal/v2/Features/Sources/Types/_default\",\"content\":\"\"},{\"title\":\"Sources\",\"href\":\"/5-portal/v2/Features/Sources/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/5-portal/v2/Features/Sources/overview\",\"content\":\" Datasource An instance of a Datasource Model that interacts with a thirdparty API via HTTP websockets etc Create a datasource 1 Click the plus button next to the datasource list Add datasourcestaticimgportalv2sourcesoverviewaddpng 2 Enter values for all required fields Modify datasourcestaticimgportalv2sourcesoverviewdatasourceinfopng Edit a datasource 1 Click the name of the datasource you wish to edit Edit datasourcestaticimgportalv2sourcesovervieweditpng View latest data for datasource 1 Click the timestamp in the Last Updated column of the datasource you wish to view View latest data for datasourcestaticimgportalv2sourcesoverviewlatestdatapng 2 View data View datastaticimgportalv2sourcesoverviewlatestdataviewpng Refresh a datasource 1 Click the refresh button of the datasource you wish to refresh Refresh datasourcestaticimgportalv2sourcesoverviewrefreshpng Delete a datasource 1 Click the trashcan button of the datasource you wish to delete Delete datasourcestaticimgportalv2sourcesoverviewdeletepng 2 Confirm deletion when prompted\"},{\"title\":\"Bar Chart\",\"href\":\"/5-portal/v2/Features/Widgets/Types/BAR_CHART_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Chart DataDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn name Page A uv 4000 pv 2400 av 1400 rv 3000 name Page B uv 3000 pv 1398 av 1400 rv 3000 name Page C uv 2000 pv 9800 av 1400 rv 3000 name Page D uv 2780 pv 3908 av 1400 rv 3000 Bars per groupMULTIOBJECTSETTINGTYPEBarsfalsedataKeyuvdataKeypvdataKeyavdataKeyrv Bar ColorsMULTIOBJECTSETTINGTYPEColorsfalse Data KeydataKeyX Axistruename LabeltextX Axisfalse OrientationoptionX Axisfalsebottom Left PaddingnumberX Axisfalse Right PaddingnumberX Axisfalse Y AxesMULTIOBJECTSETTINGTYPEY Axesfalseorientationleft Reference LinesMULTIOBJECTSETTINGTYPERef Linesfalse Margin TopnumberChartfalse Margin RightnumberChartfalse Margin BottomnumberChartfalse Margin LeftnumberChartfalse BrushbooleanBrushfalse Data KeydataKeyBrushfalse HeightnumberBrushfalse StrokecolorBrushfalse ShowHidebooleanGridfalsetrue Horizontal GridbooleanGridfalsetrue Vertical GridbooleanGridfalsetrue ShowHidebooleanLegendfalsetrue Font ColorbooleanLegendfalse LayoutoptionLegendfalsehorizontal Horizontal AlignoptionLegendfalsecenter Vertical AlignoptionLegendfalsebottom Icon typeoptionLegendfalse TooltipbooleanMiscellaneousfalsetrue Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style\"},{\"title\":\"Button\",\"href\":\"/5-portal/v2/Features/Widgets/Types/BUTTON_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault TargetDATASETTINGTYPETargetfalse Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style Background colorcolorStylefalse Background hover colorcolorStylefalse Font colorcolorStylefalse Border colorcolorStylefalse LabeltextfalseClick me\"},{\"title\":\"Color Picker\",\"href\":\"/5-portal/v2/Features/Widgets/Types/COLOR_PICKER_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ColorDATASETTINGTYPEDatatruedataTypeSTATICDATATYPEvalueffffff Event TargetDATASETTINGTYPEDatatrue\"},{\"title\":\"Google Map\",\"href\":\"/5-portal/v2/Features/Widgets/Types/GOOGLE_MAP_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault API Keytexttrue MarkersDATASETTINGTYPEfalsedataTypeCALCULATEDDATATYPEvaluereturn lng 64404945 lat 32202924 lng 17470493 lat 47867077 lng 145141754 lat 37766372 lng 30785408 lat 46639301 lng 84693432 lat 10479372 lng 12900009 lat 47409968 lng 11272659 lat 59637472 lng 13189259 lat 47483221 lng 61013432 lat 14493688 lng 0490866 lat 40903783 lng 12852459 lat 47609519 lng 111407890 lat 36894037 lng 8838158 lat 46257746 lng 2933736 lat 43269159 lng 17815200 lat 43337255 lng 151750000 lat 16500000 lng 6108742 lat 62226676 lng 11616282 lat 43064389 lng 59070311 lat 52430295 lng 1314712 lat 45922199 lng 18239279 lat 47535341 lng 67549438 lat 20552438 Map ThemetextfalseVisit httpsmapstylewithgooglecom to generate your style Default Zoomnumberfalse3 Default Centertextfalselat 302667824 lng 977424987 Unique StylebooleanfalseSet to true if you dont want the theme to affect this widgets style\"},{\"title\":\"HTML\",\"href\":\"/5-portal/v2/Features/Widgets/Types/HTML_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault CodeDATASETTINGTYPEfalsedataTypeSTATICDATATYPEvalueHTMLn HTML WidgetnnCSSunderline n textdecoration underlinennJavaScriptJavaScriptn\"},{\"title\":\"Input\",\"href\":\"/5-portal/v2/Features/Widgets/Types/INPUT_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Input Typeoptionfalsetext ValueDATASETTINGTYPEfalse TargetDATASETTINGTYPEfalse Relevant AttributestextfalseProvide range options and other relevant input attributes\"},{\"title\":\"Line Chart\",\"href\":\"/5-portal/v2/Features/Widgets/Types/LINE_CHART_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Chart DataDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn temperature 61 humidity 50 wind 14 rainfall 5 timestamp 20160622T022614368Z temperature 52 humidity 60 wind 8 rainfall 6 timestamp 20160623T022741112Z temperature 73 humidity 70 wind 4 rainfall 0 timestamp 20160624T022751132Z Show DotsbooleanLinesfalsetrue LinesMULTIOBJECTSETTINGTYPELinesfalsedataKeytemperaturedataKeyhumiditydataKeywinddataKeyrainfall Line ColorsMULTIOBJECTSETTINGTYPEColorsfalse Data KeydataKeyX Axistruetimestamp LabeltextX Axisfalse OrientationoptionX Axisfalsebottom Left PaddingnumberX Axisfalse Right PaddingnumberX Axisfalse Y AxesMULTIOBJECTSETTINGTYPEY Axesfalseorientationleft Reference LinesMULTIOBJECTSETTINGTYPERef Linesfalse Margin TopnumberChartfalse Margin RightnumberChartfalse Margin BottomnumberChartfalse Margin LeftnumberChartfalse BrushbooleanBrushfalse Data KeydataKeyBrushfalse HeightnumberBrushfalse StrokecolorBrushfalse ShowHidebooleanGridfalsetrue Horizontal GridbooleanGridfalsetrue Vertical GridbooleanGridfalsetrue ShowHidebooleanLegendfalsetrue Font ColorcolorLegendfalse LayoutoptionLegendfalsehorizontal Horizontal AlignoptionLegendfalsecenter Vertical AlignoptionLegendfalsebottom Icon typeoptionLegendfalse Unique StylebooleanMiscellaneousfalseSet to true if you dont want the theme to affect this widgets style TooltipbooleanMiscellaneousfalsetrue\"},{\"title\":\"List\",\"href\":\"/5-portal/v2/Features/Widgets/Types/LIST_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault List SourceDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn label Item 1 valueitemid onelabel Item 2 valueitemid two Event TargetDATASETTINGTYPEDatafalse TitletextDatafalse Tracking Column NametextDatafalseName of column used to keep track of active list itemitemid Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style TitlecolorStylefalse List ItemcolorStylefalse Active ItemcolorStylefalse List Item FontcolorStylefalse\"},{\"title\":\"Pie Chart\",\"href\":\"/5-portal/v2/Features/Widgets/Types/PIE_CHART_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Chart DataDATASETTINGTYPEDatafalsedataTypeCALCULATEDDATATYPEvaluereturn name Page A data 300name Page B data 400name Page C data 500name Page D data 600 Margin TopnumberChartfalse Margin RightnumberChartfalse Margin BottomnumberChartfalse Margin LeftnumberChartfalse Unique StylebooleanMiscellaneousfalseSet to true if you dont want the theme to affect this widgets style Inner RadiusnumberMiscellaneousfalse LabelbooleanMiscellaneousfalsetrue TooltipbooleanMiscellaneousfalsetrue Customize Slice ColorsMULTIOBJECTSETTINGTYPEMiscellaneousfalse\"},{\"title\":\"Radial Gauge\",\"href\":\"/5-portal/v2/Features/Widgets/Types/RADIAL_GAUGE_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ValueDATASETTINGTYPEDatafalsedataTypeSTATICDATATYPEvalue90 Unique StylebooleanFormatfalseSet to true if you dont want the theme to affect this widgets style LabeltextFormatfalse Min ValuenumberFormatfalse Max ValuenumberFormatfalse100 Progress ColorcolorFormatfalse Background ColorcolorFormatfalse\"},{\"title\":\"Rule Builder\",\"href\":\"/5-portal/v2/Features/Widgets/Types/RULE_BUILDER_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Nametexttrue Allow Createbooleanfalse Allow Deletebooleanfalse Allow Editbooleanfalse Allow OnOffbooleanfalse\"},{\"title\":\"Speedometer\",\"href\":\"/5-portal/v2/Features/Widgets/Types/SPEEDOMETER_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ValueDATASETTINGTYPEDatafalsedataTypeSTATICDATATYPEvalue90 SectionsMULTIOBJECTSETTINGTYPESectionsfalsepercentage25percentage25percentage25percentage25 ColorsMULTIOBJECTSETTINGTYPEColorsfalse Unique StylebooleanFormatfalseSet to true if you dont want the theme to affect this widgets style LabeltextFormatfalse Label ColorcolorFormatfalse999999 Min ValuenumberFormatfalse Max ValuenumberFormatfalse100 Arrow ColorcolorFormatfalseccc\"},{\"title\":\"Text\",\"href\":\"/5-portal/v2/Features/Widgets/Types/TEXT_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ContentDATASETTINGTYPEDatafalsedataTypeSTATICDATATYPEvalueHello Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style Font familytextStylefalse Font colorcolorStylefalse Font sizenumberStylefalse\"},{\"title\":\"Toggle\",\"href\":\"/5-portal/v2/Features/Widgets/Types/TOGGLE_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ValueDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn true Event TargetDATASETTINGTYPEDatatrue On LabeltextLabelsfalseOn Off LabeltextLabelsfalseOff Unique StylebooleanColorsfalseSet to true if you dont want the theme to affect this widgets style On ColorcolorColorsfalse Off ColorcolorColorsfalse Background ColorcolorColorsfalse\"},{\"title\":\"Types\",\"href\":\"/5-portal/v2/Features/Widgets/Types/_default\",\"content\":\"\"},{\"title\":\"Widgets\",\"href\":\"/5-portal/v2/Features/Widgets/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/5-portal/v2/Features/Widgets/overview\",\"content\":\" Widget A UI component that displays data from and sends data to a datasource Create a widget 1 Click the plus button on the pane you wish to add the widget to Add widgetstaticimgportalv2widgetsoverviewwidgetaddpng 2 Enter values for all required fields Modify widgetstaticimgportalv2widgetsovervieweditwidget1png 3 Click Apply to save your changes Edit a widget 1 Hover over the widget you wish to edit click the wrench icon when it appears Edit widgetstaticimgportalv2widgetsoverviewwidgetclickeditpng 2 Change the font color by clicking on the Style section and clicking the color palette Change font colorstaticimgportalv2widgetsovervieweditwidget2png 3 Change the Content type to Dynamic and select a datasource to hook up to Change datasourcestaticimgportalv2widgetsovervieweditwidget3png 4 Click Apply to save your changes Widget overviewstaticimgportalv2widgetsovervieweditwidget4png View in fullscreen mode 1 Click the fullscreen icon for the widget Full screen widgetstaticimgportalv2widgetsoverviewwidgetfullscreenpng Resize a widget A widget will fill the space of its pane if it doesnt have any siblings 1 Click the resize handle for the widget and drag to the desired shape Resize Widgetstaticimgportalv2widgetsoverviewwidgetresizepng 2 Click and hold any part of the widget and drag to the desired location Move Widgetstaticimgportalv2widgetsoverviewwidgetresize2png Delete a widget 1 Click the trashcan button of the widget you wish to delete Delete widgetstaticimgportalv2widgetsoverviewwidgetdeletepng 2 Confirm deletion when prompted\"},{\"title\":\"Features\",\"href\":\"/5-portal/v2/Features/_default\",\"content\":\"\"},{\"title\":\"CB_PORTAL Interface\",\"href\":\"/5-portal/v2/Features/cbPortalInterface\",\"content\":\"The CBPORTAL object hangs off of the window object and can be accessed in parsers CBPORTALselectPage Used in parsers to change the page programmatically CBPORTALgetPathParams Used in parsers to get information on URL path variables CBPORTALClearBlade Used in parsers to interact with the underlying ClearBlade JavaScriptAPI CBPORTALregisterDatasource Used by plugin files to register their definition with the portal framework CBPORTALregisterWidget Used by plugin files to register their definition with the portal framework CBPORTALportalModel Used internally by the portal framework to store datasource and widget instances CBPORTALLoadershowhtmlId Used to show loader programmatically param stringundefined the html id of the element you want to show the loading icon over if left off it will show over full page javascript targets or widget with setting HTML Id set to myBtn CBPORTALLoadershowmyBtn targets the entire portal CBPORTALLoadershow CBPORTALLoaderhidehtmlId Used to hide loader programmatically param stringundefined the html id of the element you want to show the loading icon over if left off it will show over full page javascript CBPORTALLoaderhidemyBtn CBPORTALLoaderwaitForpromise htmlId Used with a promise to automatically show and hide spinner It will add a loader when invoked and hide it when promise resolves or errors out param Promise the promise whose pendingresolved state will control the loader param stringundefined the html id of the element you want to show the loading icon over if left off it will show over full page Toy example paste this code into the console of the portal page to see the loader for 1 second javascript var myPromise new Promise resolve setTimeout resolvedone 1000 CBPORTALLoaderwaitFor myPromise Real world example javascript CBPORTALLoaderwaitFor datasourcesAddBooksendData title a new book createbookbtn \"},{\"title\":\"Flyout Pane\",\"href\":\"/5-portal/v2/Features/flyoutPane\",\"content\":\" Flyout Pane A customizable flyouthamburger menu that behaves much like a pane In this document we will cover the following 1 How to open the flyout menuopentheflyoutmenu 2 How to customize the menu titlecustomizethemenutitle 3 How to add widgets to the menuaddmenuwidgets 4 How to edit widgets in the menueditmenuwidgets Open the flyout menu 1 Click on the hamburger icon on the lefthand side of the header bar Open flyoutstaticimgportalv2flyoutpaneclickopenflyoutpng Customize the menu title 1 Hover over the menu title and click the wrench icon Edit titlestaticimgportalv2flyoutpaneclickedittitlepng The menu title defaults to the name of the portal but can be configured like any widget5portalv2featureswidgetsoverview Add menu widgets 1 Click the plus icon on the lefthand side of the header bar Add widgetstaticimgportalv2flyoutpaneclickaddwidgetpng Edit menu widgets Widgets can be edited in the same way that they are edited inside of a normal pane5portalv2featureswidgetsovervieweditawidget\"},{\"title\":\"Header Pane\",\"href\":\"/5-portal/v2/Features/headerPane\",\"content\":\" Header Pane A customizable header bar that behaves much like a pane Add widget to header 1 Click the plus button next to the toolbar and select New Header Widget Add header widgetstaticimgportalv2headerpaneclickaddwidgetpng Edit header widget 1 Hover over the widget you wish to edit and click the wrench icon Edit header widgetstaticimgportalv2headerpaneclickeditwidgetpng Reset header to default 1 Click the ellipsis icon in the toolbar and select Reset Header to Default Reset headerstaticimgportalv2headerpaneclickresetheaderpng\"},{\"title\":\"Keyboard shortcuts\",\"href\":\"/5-portal/v2/Features/keyboardShortcuts\",\"content\":\"commandMacOS shortcutWindowsLinux shortcut save portalcmdsctrls\"},{\"title\":\"Pages\",\"href\":\"/5-portal/v2/Features/pages\",\"content\":\" Page A container for panes A specific page can be referenced in a URL via the hash fragment In this document we will cover the following 1 How to create a pagecreateapage 2 How to navigate to a pagenavigatetopage 3 How to edit a pageeditpage 4 How to add children to a pageaddingchildrentopage 5 How to create parameterized pagesparameterizedpages 6 How to interact with pages programmaticallyprogrammaticinteraction 7 How to delete a pagedeletepage Create a page 1 Click the plus button next to the list of pages in the toolbar Add pagestaticimgportalv2pagesclickaddpagepng 2 Fill in the name of the page and hit Apply Create pagestaticimgportalv2pagescreatepagepng Navigate to page 1 Click on the name of the page you wish to navigate to Navigate to pagestaticimgportalv2pagesclicknavpagepng Edit page 1 Click on the pencil icon of the page you wish to edit Edit pagestaticimgportalv2pagesclickeditpagepng Adding children to page 1 Click on the plus button of the page you wish to add children to Add childstaticimgportalv2pagesclickaddchildpagepng 2 Save the children Save childstaticimgportalv2pagessavechildpagepng Parameterized pages 1 Edit the page youd like to make parameterized 2 Toggle the Parameter field to true and fill in the default value for the parameter Page Paramsstaticimgportalv2pagespageparameterpng 3 Hit Apply The default value for the parameter will be used when navigatingnavigatetopage to the page Programmatic interaction The portal provides an interface via the CBPORTAL object for interacting with pages from within a parser widget or datasource Selecting a page programmatically CBPORTALselectPagestatesTXcityAustin Example use case 1 User selects a state from a list of states so the portal should navigate to a new page Retrieving the current path parameters CBPORTALgetPathParams will return state TX city Austin if the current path is statesTXcityAustin Example use case 1 The current page changes so the portal should display data that is relevant to the URL parameters 2 The portal needs to load the correct state on initial startup when the URL is statesTXcityAustin Delete page 1 Click on the trash icon of the page you wish to delete Delete pagestaticimgportalv2pagesclickdeletepagepng 2 Confirm deletion when prompted\"},{\"title\":\"Panes\",\"href\":\"/5-portal/v2/Features/panes\",\"content\":\" Pane A responsive and resizable UI component that acts as a container for widgets Create a pane 1 Click the plus button in the lefthand toolbar Add panestaticimgportalv2panesaddpanepng Edit pane 1 Click the wrench icon of the pane you wish to edit Edit panestaticimgportalv2panespaneclickeditpng 2 Edit fields inside modal Edit pane modalstaticimgportalv2paneseditpanepng Pane fields Title Optional title for the pane Tabbed Pane Whether or not the pane will contain tabs Theme The type of theme for the pane Primary or Secondary Pane ID A unique ID for the pane Useful when switching tabs programmatically Resize pane 1 Click the resize handle on the bottom right corner or the pane and drag to desired shape Resize panestaticimgportalv2panespaneresizepng Delete pane 1 Click the trashcan button on the pane you wish to delete Delete panestaticimgportalv2panespaneclickdeletepng 2 Confirm deletion when prompted\"},{\"title\":\"Parsers\",\"href\":\"/5-portal/v2/Features/parsers\",\"content\":\" Parser A JavaScript function which supplies and optionally formats data coming from a datasource to a widget Table of Contents Parser Typesthreeparsertypes Create a Parsercreateaparser Debugging a Parserdebuggingaparser Retrieving Current Widget Valueretrievingcurrentwidgetvalue Setting Custom Widget Dimensionssettingcustomwidgetdimensions Retrieving Current Datasource Valueretrievingcurrentdatasourcevalue Accessing Any Datasource in Portalaccessinganydatasourceinportal Accessing Any Pane in Portalaccessinganypaneinportal Updating Current Tab of a Paneupdatingcurrenttabofapane Setting Custom Pane Dimensionssettingcustompanedimensions Three parser types Static Raw text that is not executed by a Javascript function Whatever is added to a static parser will show up in that widgets setting Calculated A JavaScript function that is not bound to a datasource Whatever is returned by the function will be used for that widgets setting Dynamic A Javascript function that is executed every time its corresponding datasource changes Create a parser In order to create a parser you must first have created a widget5portalv2featureswidgetsoverviewcreateawidget Note that if you want to create a dynamic parser you must have already created a datasource5portalv2featuressourcesoverviewcreateadatasource 1 Click the wrench icon for the widget youd like to create a parser for Edit widgetstaticimgportalv2widgetsoverviewwidgetclickeditpng 2 Change the content type to dynamic Edit widget 2staticimgportalv2widgetsovervieweditwidget3png 3 Open the parser window by clicking the Incoming parser button Incoming parserstaticimgportalv2parsersclickincomingparserpng 4 Modify the parser to include some more text Edit incoming parserstaticimgportalv2parserseditincomingparserpng 5 Click the Test button to view your changes Test incoming parserstaticimgportalv2parserstestincomingparserpng 6 Click Apply to save your changes Debugging a parser 1 Open the JavaScript console in your browser This can usually be accomplished by rightclicking on the page and selecting Inspect 2 Click the debug button next to the parser Click debugstaticimgportalv2parsersclickdebugpng 3 Your browsers JavaScript engine will now halt execution anytime this parser is executed and allow you to step through the code Retrieving current widget value Use the this keyword to access the current widget that uses the datasource The widgets current value can be accessed with thiswidget Setting custom widget dimensions Use the this keyword to set custom dimensions for the current widget based on datasource value changes The widgets thissetCustomDimensionsw h method accepts two arguments width and height both measured in grid units the number of rows or columns occupied by the widget One height unit for a widget is 150 pixels and each additional unit is about 160 pixels Width units for widgets are equivalent to the widthin pixels of the container pane divided by 42 with the first width unit being that amount by 10 Panes width units are determined by dimensions of the devices display See Setting Custom Pane Dimensionssettingcustompanedimensions for information on determining pane width For example in a pane with a width of 567 pixels thissetCustomDimensions3 3 a width unit would be equal to 135px567 42 with the first width unit equal to 125px135 10 and each height unit would be 160px with the first being 150 px This would render a widget with size 395px125 135 2 x 470px150 160 2 Retrieving current datasource value Use the this keyword to access the current datasource The current widgets datasource value can be accessed with thisdatasource Accessing any datasource in portal Use the datasources variable to access any datasource in the portal by name That datasources latest data can be accessed with datasourcesdatasourceNamelatestData Accessing any pane in portal Use the panes variable to access any pane in the portal by custom pane ID5portalv2featurespaneseditpane panescustomPaneId Updating current tab of a pane Use the updateCurrentTab method to update the tab displayed within any pane accessed by the panes variable and custom pane ID5portalv2featurespaneseditpane The methods argument is the pane number to be displayed panescustomPaneIdupdateCurrentTab2 Setting custom pane dimensions Use the setCustomDimensionsw h method to set custom dimensions for any pane accessed using the panes variable and custom pane ID5portalv2featurespaneseditpane The method accepts two arguments width and height both measured in grid units the number of rows or columns occupied by the widget One height unit for pane is 150 pixels and each additional height unit is about 160 pixels Width units for panes depends on the width of the portal on the current device For displays with a width greater than 1200 pixels a width unit is equal to display width 122 with the first width unit equal to that amount minus 10 For displays with a width greater than 996 pixels a width unit is equal to display width 102 with the first width unit equal to that amount minus 10 For devices with a display greater than 768 a width unit is equal to the display width 61 with the first width unit equal to that amount minus 10 For displays greater than 480 pixels a width unit is equal to the display width 42 with the first width unit equal to that amount minus 10 For smaller displays a width unit is equal to the display width 34 with the first width unit equal to that amount minus 10 displayWidth heightUnit firstHeightUnit widthUnit firstWidthUnit 1200px 160 150 displayWidth 122 widthUnit 10 996px 160 150 displayWidth 102 widthUnit 10 768 160 150 displayWidth 61 widthUnit 10 480 160 150 displayWidth 42 widthUnit 10 480 160 150 displayWidth 34 widthUnit 10 For example on a 1200px display panescustomPaneIDsetCustomDimensions6 3 a width unit would be 118px1200 102 with the first being 108px118 10 and a height unit would 160px with the first being 150px This would render a pane of 698px108 118 5 x 470px150 160 2\"},{\"title\":\"Screen size editor\",\"href\":\"/5-portal/v2/Features/screenSizeEditor\",\"content\":\" Screen size editor Allows for the portal to adjust the layout of panes and widgets at different screen sizes In this document we will cover 1 How to configure layouts for different screen sizesconfigurelayouts Configure layouts This guide assumes that panes and widgets have already been added to your portal 1 Select the screen size youd like to change the layout for by clicking the section in the toolbar at the top of the screen Select screen sizestaticimgportalv2screensizeeditorclickscreensizepng 2 Adjust the layout by resizing your panes5portalv2featurespanesresizepane andor resizing your widgets5portalv2featureswidgetsoverviewresizeawidget Adjust layoutstaticimgportalv2screensizeeditorchangelayoutpng Now your portal will have a unique layout for each screen size\"},{\"title\":\"Style Editor\",\"href\":\"/5-portal/v2/Features/styleEditor\",\"content\":\" Style Editor Allows for the entire portal to be themed in an efficient manner In this document we will cover 1 How to open the style editoropenthestyleeditor 2 How to change the portal theme on a macro levelmacrostyleadjustments 3 How to change the portal theme on a micro levelmicrostyleadjustments 4 How to make a specific widgets style uniqueuniquewidgetstyle 5 How to export a themeexporttheme 6 How to import a themeimporttheme 7 How to reset the themeresettheme back to the default Open the style editor 1 Click the paintbrush icon in the toolbar Open editorstaticimgportalv2styleeditorclickopeneditorpng Macro style adjustments The style editor allows for macro adjustments that affect the overall theme the themes palette and the colors used in graphs Changing the overall theme 1 Click on the theme youd like to use Select themestaticimgportalv2styleeditorclickselectthemepng Changing the themes palette 1 Open the Change Palette section Click Change Palettestaticimgportalv2styleeditorclickchangepalettepng 2 Adjust the desired palette settings Adjust palettestaticimgportalv2styleeditoradjustpalettepng Changing the graph colors 1 Open the Adjust graph colors section Click adjust graph colorsstaticimgportalv2styleeditorclickadjustgraphcolorspng 2 Adjust the desired graph colors Adjust graph colorsstaticimgportalv2styleeditoradjustgraphcolorspng Micro style adjustments For this example we will assume that two Text Widgets have been created5portalv2featureswidgetsoverviewcreateawidget 1 Click the More Options button in the footer of the editor Click More Optionsstaticimgportalv2styleeditorclickmoreoptionspng 2 Click the Widgets button Click Edit Widgetsstaticimgportalv2styleeditorclickeditwidgetspng 3 Select the widget you wish to edit well be using the Text widget in this example 4 Change the desired settings for the widget Change widget stylestaticimgportalv2styleeditorchangewidgetstylepng Now every text widget will use this new style unless we specify that a widget should have a unique styleuniquewidgetstyle Unique widget style A widget that has the unique style setting enabled will ignore the styles stated in the portal theme 1 Edit the widget5portalv2featureswidgetsovervieweditawidget that should have a unique style 2 Find the Unique Style setting and check the box next to it Click unique stylestaticimgportalv2styleeditorclickuniquestylepng Export theme A theme can be exported for reuse in other portals 1 Click the ellipsis button in the top right of the style editor and select Export theme Export themestaticimgportalv2styleeditorclickexportthemepng Import theme A theme can be imported into a portal in order to easily brand multiple portals with a consistent theme 1 Click the ellipsis button in the top right of the style editor and select Import theme Import themestaticimgportalv2styleeditorclickimportthemepng Reset theme A theme can be reset to the default if changes are deemed unsatisfactory 1 Click the ellipsis button in the top right of the style editor and select Reset Reset themestaticimgportalv2styleeditorclickresetthemepng\"},{\"title\":\"V2\",\"href\":\"/5-portal/v2/_default\",\"content\":\"\"},{\"title\":\"Getting Started\",\"href\":\"/5-portal/v2/getting_started\",\"content\":\"This guide will demonstrate how to create and access a V2 portal Creating A Portal 1 Login to the ClearBlade Platform and select portal in the system that you wish to link a portal CLick portal on desired systemstaticimgportalv2gettingstartedcreateportal5png 2 Create a new portal by clicking new on the lefthand side of the navigation bar Click to add new portalstaticimgportalv2gettingstartedcreateportal6png 3 Enter a name for your portal Create a new portalstaticimgportalv2gettingstartedcreateportal1png Assign portal to a role Click the wrench next to your new portal and select the security tab in order to give permission for our users to access and edit the portal Open portal security settingsstaticimgportalv2gettingstartedcreateportal2png This step assumes we have users in our system if not please add users in Auth Users Giving the authenticated role access to read will allow these users to sign in and operate a portal By giving administrator roles CRUD access they will be able to modify the portal that will reflect in the public view Give roles access to portalstaticimgportalgettingstartedcreateportal5png Access portal Now that we have access to open a portal click the portals link and sign in with an administrators credentials Click portal linkstaticimgportalgettingstartedcreateportal6png Login to portalstaticimgportalv2gettingstartedcreateportal3png Welcome to your portal Delete portal 1 Click the wrench next to your new portal Open portal settingsstaticimgportalv2gettingstartedcreateportal2png 2 Click the trash icon to delete Delete portalstaticimgportalv2gettingstartedcreateportal4png Confirm the deletion when prompted\"},{\"title\":\"IPM\",\"href\":\"/6-ipm/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/6-ipm/\",\"content\":\"IoT Package Manager ipm is a package management registry and tool for scaling up the development of IoT solutions ipm contains packages which points to GitHub repositories which must contain 1 packagejson in root of the repository see spec here for this document 2 The assets inside this repo must be within cblib spec herehttpsgithubcomclearbladecblib Note ipm packagejson spec is a superset of npms packagejson As a result any existing npm repo can be registered with ipm Example Package jstatstatisticstoolkit httpsgithubcomrreinoldjstatstatisticstoolkit This example repo contains packagejson packagejson required cblib spec system systemjson required codeservices optional codelibraries optional data optional devices optional edges optional portals optional roles optional users optional deployjson optional\"},{\"title\":\"package.json\",\"href\":\"/6-ipm/spec\",\"content\":\" Overview ipm packagejson spec is a superset of npms packagejson ipm spec adds metadata tailored for the Internet of Things such as gatewaysgateways cloudcloud protocolsprotocols thingsthings programminglangprogramminglang assettypesassettypes imageurlimageurl npm packagejson spec herehttpsdocsnpmjscomfilespackagejson Full Example javascript assettypes Code Libraries Code Services Portals Collections Triggers Adapters Roles Timers Plugins Users Edges Devices version100 homepagehttpsgooglecom license MIT keywords BLE edge adapter ML SalesForce Notifications Stepper Motor MQ Rules Engine Integration Building Management Blueprint admin administration monitoring anomaly aberration anomaly detection bayesian decision tree programminglangC cloudAWSGCloud thingsNXP MENPthunderboardallen bradley domains IIoTDevice ManagementBuilding ManagementFleet Management protocolsSMShttpRESTNFCBLECoAPSNMPbacnet gatewaysRaspberry Pi dependencies package1 package2 imageurlhttpsimagehostercomaHBV74b descriptionThis library accomplishes a goal authoremailrreinoldclearbladecom privatefalse Additions to npm spec The following keys belong to the superset of npms packagejson assettypes Types of assets contained in a package Ex A portal for 3D Map Rendering with some business logic will contain PortalCode Services Array of type string All available values javascript assettypes Code Libraries Code Services Portals Collections Triggers Adapters Roles Timers Plugins Users Edges Devices gateways Array of type string No restrictions on values some examples javascript gateways Raspberry Pi 3 cloud Array of type string No restrictions on values some examples javascript cloud AWS GCloud protocols Array of type string No restrictions on values some examples javascript protocols amqp zigbee things Array of type string No restrictions on values some examples javascript things watersensor pressuresensor programminglang Array of type string No restrictions on values some examples javascript programminglang python c imageurl String No restrictions on value an example imageurlhttpsiimgurcom9oluUP8png\"},{\"title\":\"Welcome to ClearBlade Platform Docs!\",\"href\":\"/\",\"content\":\" date 20160308T2107130100 title Welcome to ClearBlade Platform Docs type index weight 0 ClearBlade is the enterprise Internet of Things platform to rapidly engineer and run realtime scalable Industrial IoT applications ClearBlade enables companies to build IoT solutions that make streaming data actionable by combining business rules and machine learning with powerful visualizations and integrations to existing business systems Built from an enterprisefirst perspective the ClearBlade Platform runs securely in any vendor cloud onpremise or in hybrid environments Launch your project with one of our tutorials Integrate your applications with ClearBlade using our SDKs and Tools below \"}]\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 36.1137f43ad4908373e1c8.chunk.js","module.exports = [{\"title\":\"Adapters\",\"href\":\"/1-platform_concepts/Adapters\",\"content\":\"IoT solutions are comprised of many devices and sensors In many cases the devices and sensors will not be able to directly connect to the ClearBlade Platform via HTTP or MQTT due to their power consumption or connectivity limitations In these cases the IoT solution will need to utilize an Adapter An Adapter is a custom software component deployed on IoT Gateway devices executing the ClearBlade Edge whose purpose is to serve as a proxy between the ClearBlade platform and IoT devices that cannot directly communicate with the ClearBlade Platform Adapters can be written in any language ClearBlade provides a number of language specific SDKs that can be utilized when constructing adapters In the event that a SDK does not exist for a particular language the REST API can be utilized to communicate with the ClearBlade platform from an adapter The ClearBlade Platform developers console provides facilities to assist with 1 Defining new adapters to the ClearBlade Platform 2 Managing the files utilized with each adapter 3 Managing the commands utilized by the ClearBlade Platform to administer the adapters 4 Viewing the status of the adapter across all ClearBlade Edges 5 Administering the adapter on ClearBlade Edge 6 Navigating to each adapter \"},{\"title\":\"Architecture\",\"href\":\"/1-platform_concepts/Administration/Architecture\",\"content\":\"The ClearBlade Platform can be installed in a variety of configurations This allows for creating a range of implementations from Enterprise highly secure environment where all data is safely kept behind a firewall Hybrid some assets are connected to internal systems via VPN while others are publically available Public data is available publically to internet end users mobile devices Single support several smaller internal enterprise apps Cluster support many apps with broad public use Additionally these environments can include mixtures of the configurations to get the correct environment for the enterprise Overview The simplest installation is a single machine that is hosting all ClearBlade components via docker containers The architecture is represented below ClearBlade OverviewstaticimgconsoleoverviewoverviewSingleArchitecturepng NGinx In a simple environment NGinx represents a basic http router and SSL layer for encryption ClearBlade This is the primary process executing on the instance to handle all application logic security and routing Web Console A set of html5 and javascript that is served by NGinx for presenting a simple developer UI SuperVisor A recommended linux process for managing and ensuring the ClearBlade dependencies are appropriately started and running Postgres An open source database that stores all data related to the ClearBlade Platform and its systems The ClearBlade process makes data available via three primary protocols 1 REST over HTTP 80 or HTTPS 443 2 MQTT over TCP via ports 1883 and 1884 includes TLS 3 WebSockets on port 8906 Cluster Configurations The ClearBlade Platform can be easily scaled horizontally The following considerations are in effect 1 Database sharding techniques The Postgres database running the ClearBlade platform can be sharded to split and and expand the allowed disk across many machines 2 The ClearBlade REST endpoints The ClearBlade process serving REST endpoints is stateless as such requests routed through NGinx can be sent to the ClearBlade process that is running on multiple machines in a round robin fashion 3 The ClearBlade messaging Messaging connections are held open and devices must connect to dedicated endpoints ClearBlade provides a relay broker to allow for horizontal scaling of this connection process The basic steps are Client connects to a single relay broker Client sends credential information Relay broker sends a valid token and messaging url for broker Client disconnects from relay broker Client connects to broker with token Client performs all messaging against broker Integrations Many integrations are available via the ClearBlade Platform They include but are not limited to HTTP SOAP Sockets File IO Cloud based Java RPG DB2 SQL Server MySQL PostGres OPC Oracle Infobright For each of the integrations basic platform considerations must be made to ensure security and access Environment Requirements ClearBlade runs on linux AMD 64 bit Operating Systems ClearBlade recommends the following distrobutions Like much of the available cloud architectures the ClearBlade platform is built on a AMD64 linux architecture with a minimum supported kernal of 2623 Below are the available releases and their minimum version requirements Ubuntu 1010 26354 Red Hat 6 263271 CentOS 6 263271 Debian 6 ARCH Fedora 13 2633 Gentoo SLES 11 2627195\"},{\"title\":\"Installation\",\"href\":\"/1-platform_concepts/Administration/Installation\",\"content\":\" Overview ClearBlade manages deployments using Docker From a fresh linux box you can be up and running in 3 steps Step 1 Obtain Trial Key and Docker Key from ClearBlade 1 Trial keys and Docker Keys are issued by ClearBlade and can be requested via email supportclearbladecom Step 2 Install Docker 1 Request the installation shell curl sSL httpsgetdockercom sh 2 Add your user to the docker group shell sudo usermod aG docker 3 Switch to new user shell su 4 Log into Docker shell docker login e u jsonkey p cat pathtodockerjson httpsgcrio Step 3 Install and Launch ClearBlade 1 This is an example of our deployment script which pulls and launches five containers shell docker run d name cbdata gcriocbpostgres210 docker run d name cbpostgres gcriocbpostgres210 docker run d name clearblade gcrioclearblade33 pkeypathtotrialkey docker run d name cbconsole gcriocbconsole33 docker run d name cbnginx gcriocbnginx240 Begin developing\"},{\"title\":\"IoT\",\"href\":\"/1-platform_concepts/Administration/IoT\",\"content\":\" Introduction Summary The word platform is massively overloaded today and there now exists a platform for the most nuanced of websites ClearBlade lives at the other extreme that allows for a highly scalable backend that supports the broadest of solutions The following describes the technical usage model for ClearBlade as an IoT platform Purpose This section should be informative and factual guide for implementation of an IoT solution Background IoT networks contain the following possible physical elements Device network This is where devices all coexist together Those devices may all be together in a private cloud or exist together on a mesh environment in a house or industrial facility Cloud network This is the public internet space where devices laptops and servers can communicate with one another Enterprise network This represents the traditional protected networks where most enterprises execute their business processes It is often protected from the public internet via a firewall software and other rules Physical Devices Many devices can perform activities in the Internet of Things These devices can be advanced as laptops ubiquitous as mobile phones emerging as raspberry pis appealing as an iBeacon or as simple as a basic temperature sensor Device Firmware Software that runs on a device directly This software may be very advanced and perform operating system like activities or may be simple binaries running in a limited linux environment M2M communication A number of protocols that support the transfer of information between devices This includes bluetooth RFID iBeacon mqttsn zigbee and tcpip IP communication To directly participate in the internet a device must receive an IP address IoT OverviewstaticimgconsoleoverviewoverviewIoTArchitecturepng Terminology ClearBlade platform middleware server software that provides connectivity to end point devices SDK A library for a specific programming language that simplifies the communication from a client device to the ClearBlade platform Client An endpoint device that will access the clearblade platform for information Cloud Integration A bidirectional communication typically REST that supports sharing data or messages with a cloud based service provider often free or purchase via SaaS Enterprise Integration A bidirectional communication via industry protocols for that supports sharing data or executing transaction with an existing enterprise software package homegrown solution or legacy middleware Requirements Platform Concerns ClearBlade supports the creation of a secure highly scalable internet of things that connects to existing systems of record Below each one of these requirements is defined along with the recommend solution using the ClearBlade platform Connect devices with TCPIP Low and high powered devices that have TCPIP capabilities can directly connect to the ClearBlade platform Each device must authenticate with the platform even for anonymous access Authentication may be done via HTTP REST endpoint to v2userauthenticate MQTT Broker connect to ClearBlade auth broker Point of consideration MQTT provides significantly higher performance for much less battery and processing power For devices with limited capability consider a solution where devices only use MQTT and the ClearBlade platform handles the heavier workload activities Once connected these devices may choose to encrypt traffic between themselves and the ClearBlade server This decision is influenced by 1 The processing capability of the end device 2 The privacy concerns of the data in transit 3 The security of the network in use The devices may include Smartphones like Android iOS Windows Ubuntu FirefoxOS Miniprocessors like Raspberry Pi BeagleBone Arduino Intel Galileo These devices may use raw protocol libraries in any language or leverage ClearBlade SDKs for Objective C Android Java GoLang Python or NodeJS Connect devices without TCPIP Some of the most powerful participants in an IoT infrastructure are lower power minimal processing sensors that report small payloads These devices do not include network cards for IP based communication nor do they include the processing capability required for encryption For communication these devices may have wireless communication over standards like bluetooth RFID or 802154 and may use protocols like ZigBee or MQTTsn Each of these devices will connect to a gateway that is IP connected The gateway will have the capability to communicate with the ClearBlade platform using TCPIP over the HTTPs or MQTT protocols Gateways may have processing capability to rapidly implement encryption Gateways will execute software that receives non TCPIP communication and relays it to the ClearBlade platform see Gateway design Gateway Design Gateways provide a midpoint for gathering data from a primitive set of devices and routing that information to a server for analysis and collection Gateways have the ability to be as lightweight as a mobile phone or as heavy as a traditional server depending upon environment and computing needs Gateways implement local area networking communication via solutions like RFID BLE 802154 that talk directly to the sensors and non TCPIP enabled devices From those devices information is packaged into a format desired for traveling over the internet see followon sections for BLE zigbee iBeacon recommendations Gateways also connect to the ClearBlade platform securely using a ClearBlade SDK The ClearBlade SDK will allow for authentication from the device Data from gateway can be sent to the platform via a message publish or an HTTP REST call to a ClearBlade platform endpoint Data can be pushed directly from the ClearBlade platform to the Gateway using a message publish This message publish may be caused by other clients or executed from a service authored within the ClearBlade platform See services for more information Point of Consideration If a gateway has limited bandwidth processing limitations or battery concerns we recommend using mqtt as a primary or only point of interaction with the ClearBlade platform In some cases it is desirable to perform a workload or computation logic within the gateway when data needs raking or when the processing capabilities exist In this case a ClearBlade platform in cache mode may be installed on the gateway This environment will allow for bridging messages or sending data home via REST Finally this configuration will allow for gateways to perform significant business logic prior to arriving server side See recommend deployment architectures ClearBlade Cache only Recommended deployment architectures Infrastructure topology for IoT is massively ignored by cloud and software vendors today There are many variables and many concerns for which to account Below represent different deployment models available with the ClearBlade platform and their attributes value The simplest architecture for ClearBlade is an environment where all devices are IP address enabled Public IP Connected This architecture is for a public network where all IoT devices the ClearBlade platform and any integration exist in the public internet domain IoT OverviewstaticimgconsoleoverviewoverviewPublicIPIoTArchitecturepng Private IP Connected This architecture is for a set of IoT devices on a private network to communicate with ClearBlade server and enterprise integrations IoT OverviewstaticimgconsoleoverviewoverviewPrivateIPIoTArchitecturepng Private IoT to Public ClearBlade to Public enterprise This architecture diagram describes a private set of devices connecting to a publically available ClearBlade instance and publically available enterprise infrastructure IoT OverviewstaticimgconsoleoverviewoverviewPrivatePublicIPIoTpng Private IoT to Public ClearBlade to Private Enterprise This architecture describes a private network of devices communicating with a publically available ClearBlade instance that communicates with a private enterprise network IoT OverviewstaticimgconsoleoverviewoverviewMixIPIoTpng Private IoT to Private Virtualized Within many corporate networks there are layers of protection This means that IoT devices may participate on networks not directly accessible to legacy applications or employees IoT OverviewstaticimgconsoleoverviewoverviewVirtualizedIoTpng Advanced PERA Purdue Enterprise Reference Architecture The Purdue model gives us a rich network architecture that offers protection from malicious activities ClearBlade can participate in this architecture by behaving as a secure gateway between layers This means that its possible to filter and expose data from highlevel end users that can access information that is typically stored ClearBlade Processing This subarchitecture shows a nonpersistent ClearBlade instance supporting logic processing on the device network while communicating back to a master ClearBlade instance that will do persistent storage and IoT OverviewstaticimgconsoleoverviewoverviewProcessingIoTpng ClearBlade Cluster IoT OverviewstaticimgconsoleoverviewoverviewClusterIoTpng ClearBlade Cache only Realtime messaging Messaging information between clients in under 100ms is critical to achieving perceived real time behavior Removing physical network constraints ClearBlade messaging achieves this goal while also implementing authority and authentication Traditional REST endpoints cannot do this Point of Consideration traditional OSs do not achieve industry standard real time operating systems like linuxRT may achieve much faster behavior and can be considered for integration with ClearBlade Enforce authentication To protect rogue devices from participating in your network it is important to enforce authentication of each device Unlike typical users the preferred model of authenticating devices is to embed a list of valid authkeys in the device firmware This list of authkeys will then be used in a specific order for authenticating with the backend A backend will evaluate those keys for a valid device auth key to deviceid paring a valid date window of operation of validity Operators should have the ability to disable a devices access by simply disabling the authority of those keys Additionally a device should be able to update its valid keyset with an update to the locally running firmware ClearBlade supports this auth model with the use of a simple collection that contains the devicekey deviceid startdate enddate and finally an isValid override fields The creation of a key set is easily done during the firmware load with a call to a ClearBlade service named GenerateDeviceKeys This call will return a set of keys for loading into the firmware while also inputting them into the DeviceKeyCollection Once the keys are in place the device will make a call to a ClearBlade service named AuthenticateDevice As parameters this services accepts deviceId devicekey The service will evaluate the sent key with the DeviceKeyCollection If the key is found to be valid the service will auth into the platform with a device role and produce a token This token is then returned to the device Point of Consideration This authorization process is extremely flexible and can be used to support device authentication into a large number of third party user registries Finally ClearBlade uniquely allows the execution of this login process via either traditional heavy REST or it can be done in a lightweight manner over MQTT Enforce encryption When the processing power exist for your devices and security is desired encryption should be enforced There are multiple places where encryption may be desired 1 Device network If this network is physically accessible or can be scanned by other devices then the data should be encrypted as it travels across wireless protocols 2 Public cloud internet If you data has any potential for privacy then this is the most important domain to ensure all traffic is encrypted ClearBlade enforces this by having all communication between its APIs leverage the latest OpenSSL 3 Enterprise network Often traffic will move safely behind firewalls without encryption where environments are more trusted ClearBlade will use the standard associated with this environment and the integration available to work with ClearBlade will encrypt at this layer if desired Horizontal Scaling Many millions of devices has the ability to put a significant performance load on any backend infrastructure Your IoT platform should be capable of horizontal scaling For Request Response like HTTP this means the backend should be stateless and allow for many machines to be setup in parallel to handle millions of request per second For messaging protocols where sessions are held open more broker intelligence is required An architecture that supports devices connecting to many machines and then brokers being bridged together is the preferred solution ClearBlade provides both the stateless REST interactions that can scale horizontally along with the scaling of the message broker With each new node of ClearBlade a new message broker is made available for devices to connect to ClearBlade is defaulted to allow 50000 device connections per broker but this number can be changed in a setting for handling higher transaction rates Gateway vs Direct model When designing an Internet of THings solution a gateway can be a critical piece of the solution in order to control cost of devices A gateway can perform the most basic task of relaying information from an endpoint device to an internet based server or it can do advanced activities of compressing data and relaying data intelligently A gateway is critical to a solution when in a device ecosystem that contains non ip enabled devices ClearBlade supports all types of device ecosystems In the case of direct connections devices can connect to an internet based ClearBlade server In the case of a simple pass through gateway the ClearBlade SDK can be used to connect the M2M protocol to an internet based ClearBlade server In the most flexible scenario of an intelligent gateway its recommended to run a headless ClearBlade instance on the gateway device This instance will cache data in memory only and will execute business rules as desired Relaying the m2m protocol data into this instance gives the IoT network the ability to monitor alert respond to and provide intelligence at multiple points in the IoT solution Enterprise Integration Many IoT providers fail to see the true opportunity of IoT participating with existing infrastructures This means that while devices may be unaware of legacy architecture and systems of record those applications still have meaningful actions to perform to either optimize business process or enhance the value of the device network IoT devices may replace field data entry or be configured to gather new data depending on new business offerings ClearBlade provides a powerful and extremely flexibly Integration engine This real time code engine allows for logic that execute to talk directly to sockets protocols databases or other middleware and COTS applications Cloud Integrations Many cloud services are available that contain public or social data This data set can be valuable to IoT to both enrich with device information and to better target the use of IoT data Imagine a store being able to track employees through a store walk through and then matching that behavior to twitter reactions and sentiment Through ClearBlades integration libraries apps and systems can quickly gather information from these third party cloud services ClearBlade systems can positively impact those public solutions while also enhancing the apps opportunity to increase overall user value Realtime Data Synchronization A huge challenge and desire for many working in the internet of things is the ability to get data from and to devices in a real time manner Realtime information means your users and devices can get the latest information when they request it but also have the ability to get pushed the latest information when it happens Many solutions attempt to emulate the push process via a long pole This ultimately is a poor solution due to battery life and inconsistencies Instead we see a subscribe publish model replacing the request response model Today its possible for to use a number of protocols to accomplish including websockets amqp xmp and mqtt An IoT solution should most likely leverage one of these technologies to be considered capable of supporting real time considerations ClearBlade supports extremely rich real time requirements by allowing by HTTP websockets and MQTT to be used interchangeably with a single authority model and underlying logic and data structures This means devices can simply subscribe to information and automatically receives any updates A customizable trigger infrastructure allows for reacting and writing business logic that handles specific events like humidity warnings setting off business triggers and alerts Point of consideration It is not enough to simply reuse an existing endpoint available over HTTP for most devices This will result in performance and battery issues that are acceptable in most IoT environments Payload Optimization As data moves from one device to another there is very often a need to modify the structure and size of the payload to optimize for the device and network constraints We first saw this pain in the failure of many websites to adequately respond and send data to mobile devices Mobile devices were often on slower carrier networks and lacked the processing power to render the data into long lists when it arrived Overall the failure to optimize payload resulted in many poor mobile experiences Today we see this happening again with IoT Very often the urban carrier networks of today have far more capabilities than the small unstable connectivity environments of IoT For IoT we need the ability to optimize both sending and receiving payloads ClearBlade rapidly supports this requirements by allowing for systems of devices to all work together Those devices can share endpoints of have specific endpoints for their needs Those endpoints can work off of shared data sources that means a sensor may have a simply mqtt publish of data for sharing temperature while a rich web client will look at the same data with a heavy call to months of temperature data across multiple sensors Point of Consideration Paging of data has never been of more importance If your platform doesnt page conservatively by default then youre likely to encounter a number of issues when immediately rolling out on the IoT networks Big Data Integration Many people look to big data to better understand their customers or enhance their processes to better serve their audiences This opportunity is real and continuously growing The first challenge to achieve this understanding is to begin collecting data with consistency and concurrency All too often business are stymied for starting their big data initiatives with IoT because of the simply overwhelming amount of possible data ClearBlade eases this pain by providing a conduit to third party analytics and databases Whether sending analytics to generic cloud vendors or to domain specific processors this can easily be achieved within the platform The platform can directly route the request of can subscribe to the general activity in the system and send it along as business rules apply Creating Alarms Alarms are critical to making an IoT based network smarter and more productive An IoT platform should be able to allow for custom alarms when certain thresholds are realized of certain events occur ClearBlade allow for triggers and timers that allow for business process to be injected into normal data flow These triggers can watch data from sensors and store critical information Generating reports Reports are built from an understanding and summary of data gathered over a period of time This data should be accessible at all times via an API such that both visual representation and data exports can be gathered for an immediate review or high quality physical reports The data should include both generic information about usage but also information around the domain in question ClearBlade by default produces and analytics API that summarizes events transactions usage and users to easily be represented graphically These APIs are available live and up to date at all times Additionally ClearBlade allows for dynamic data structures and customizable report logic to build the preferred data set into a single aggregated view Finally Clearblade offers triggers allowing for traditional daily rollups and compression of data to simplifiy large data stores into summary information that can more easily be consumed M2M Protocols BLE Bluetooth integration BLE Bluetooth is a widely used protocol for having nonip connected devices communicate with more powerful devices that have an IP address Very often devices in close proximity will share streaming information via bluetooth Using open source drivers IoT networks can leverage bluetooth to get data from sensors and other devices to IP connected devices The IP connected devices can then packaged the data appropriately and send it back to the internet for IoT participation ClearBlade provides and SDK readily able to communicate data transferred via BLE or bluetooth to Ip enabled gateways or devices Additionally beacon assets can be inventoried and managed via collections in the ClearBlade platform The collections may contain custom information including geolocation brick and mortar information and mobile phone pairings all for the purpose of gathering future analytics iBeacon integration iBeacon represent a specific implementation and protocol on top of bluetooth To build an IoT solution that includes iBeacon support you will need to have iBeacon devices and then firmware or apps that can communicate of the iBeacon standards There are opensource and proprietary implementations of that specification depending on the device type Apps will then need to take the data gather in an M2M environment and convert it to an internet based protocol for interoperating in the internet of things ClearBlade provides and SDK readily able to communicate data transferred via iBeacons to Ip enabled gateways or devices Additionally beacon assets can be inventoried and managed via collections in the ClearBlade platform The collections may contain custom information including geolocation brick and mortar information and mobile phone pairings all for the purpose of gathering future analytics zigbee integration Zigbee represents a specific implementation and protocol on top of 802154 To build an IoT solution that includes zigbee support you will need to have zigbee enabled hardware devices and then firmware or apps that can communicate of the standards There are opensource and proprietary implementations of that specification depending on the device type Apps will then need to take the data gather in an M2M environment and convert it to an internet based protocol for interoperating in the internet of things ClearBlade provides and SDK readily able to communicate data transferred via zigbee to Ip enabled gateways or devices Additionally beacon assets can be inventoried and managed via collections in the ClearBlade platform The collections may contain custom information including geolocation brick and mortar information and mobile phone pairings all for the purpose of gathering future analytics MQTTsn MQTTsn and MQTT provides a similar application interface to developers but is used significantly different in implementation and use case for a different use case and leverage different underlying technologies MQTTsn does not run over TCPIP but instead uses wireless network protocols like zigbee In environment where devices do not have IP capabilities MQTTsn can be used to subscribe and publish Bridging MQTT specifications Messages from MQTTsn can easily be relayed from MQTTsn to MQTT A custom MQTT client can provide that needed capability Device Management Cycling device keys Unlike humans devices do not have the ability to reset passwords with traditional means with 2nd and 3rd party factor authentication This constraint removes many concerns with access associated with humans like spoofing or phishing but it requires a more programmatic way to ensure trust One such way is to assign a set of keys to a device which have an expiration associated with them and can be disabled by the server to force cycling onto the next key Depending on the desired model this solution can be built with the ClearBlade platform leverage the authentication token model End devices can be provided sets of tokens and then use them in the prescribed fashion The token may even represent no associate authority but simply act as password to be granted authorities The additional abstraction gives the IoT administrator the ability to rapidly have all devices immediately move to a non compromised token when a breach has occurred quickly deauthorize certain behaviors in the network or in a worst case scenario immediately disable the entire device network Devices participating in IoT network must be traceable and installed with default firmware or apps that handle IoT connectivity This application that runs on the devices needs the ability to securely connect to any IoT platform ClearBlade supports this default application by providing SDKs and open access to protocols used for internet communication ClearBlade simplifies and communicate a secure authentication model for those devices and can encourage encryption where network and cpu resources are available Update device software aka firmware updates That firmware or app must be updatable to ensure longevity and maturity of any project This update can be received through a third party like an Apple App Store or may be fetched from a file server that contains updated resources Installed firmware on the device should be aware of how to get the latest version and dynamic replace the executing app and appropriately recycle the executing process ClearBlade supports this activity by providing static file hosting that can be referenced via APIs Those APIs can send firmware update availability along with appropriate file downlocations The app or firmware may be downloaded and restarted by leveraging SDK in use API Device Provisioning Because devices must be assembled and provisioned in manufacturing scenarios it is important that no human intervention is required to generate device specific keys or SDKs ClearBlade exposes all application and administration activities via REST based endpoints ideal for integrating with manufacturer requirements Conclusion This document address the major concepts associated with implementing IoT based solutions Ultimately this It includes both generic descriptions of the challenges and how ClearBlade uniquely and powerfully solves those issues IoT represents the opportunity to make technology an invisible but indispensable part of peoples lives Technically it represents a significant challenge across the domains of hardware low level software communication protocols security internet and cloud based interactions and ultimately data science The ClearBlade platform provides the versatility required to achieve those goals\"},{\"title\":\"Security\",\"href\":\"/1-platform_concepts/Administration/Security\",\"content\":\"There are three attack surfaces the platform has outside of the security of the platform They are Linux Postgres and Nginx The platform design helps mitigate the exposure of Postgres to the outside world but best practices should still be followed Most importantly Linux and Nginx should be reviewed for latest security policies and best practices Current best practice thoughts are documented below Linux Configuration Since nginx handles the incoming requests our issues with Linux will mostly arise from the network stack and nonplatform operations like SSH ICMP To those ends most of the recommendations involve changing file permissions and updating the configuration files to mitigate DenialofService attacks DOSs limit the impact of reverse shells and improve performance 1 Monitor users 2 Enable linux firewall solution 3 Enable access via SSH only 4 Disable user based login 5 Use token based authentication only 6 Ensure maintence upgrades 7 Configure etcsysctrlconf netipv4icmpechoignorebroadcasts 1 netipv4icmpignoreboguserrorresponses 1 netipv4confallacceptsourceroute 0 netipv4confdefaultacceptsourceroute 0 netipv4confallacceptredirects 0 netipv4confdefaultacceptredirects 0 netipv4confallsecureredirects 0 netipv4confdefaultsecureredirects 0 Database Possible Postgres liability comes in two places Snooping on the communications link between Postgres nodes This is more likely to happen on a public network rather than an internal This can is mitigated by the use of SSL between Postgres nodes Someone injecting arbitrary SQL into the query This is mitigated by the use of Postgres userspace to silo information The platform does not allow for direct execution of statements as they are built from the REST API The platform does perform checks for SQL injection on all query parameters Web Server Nginx has been well hardened by its wide community support Serveral configurations do exist to mitigate DOSs and clean up connection handling Recommended configuration updates include Obfusicate the nginx server name This will prevent attackers from being able to identify the server type as nginx This is done by modifying and compiling file srchttpngxhttpheaderfiltermodulec with code like static char ngxhttpserverstring Server nginx CRLF static char ngxhttpserverfullstring Server NGINXVER CRLF becoming static char ngxhttpserverstring ClearBlade Platform CRLF static char ngxhttpserverfullstring ClearBlade Platform CRLF Cut down response times This will limit an external attacker from performing a syn flood type attack Modify etcnginxnginxconf with clientbodytimeout 20 clientheadertimeout 20 keepalivetimeout 5 5 sendtimeout 30 Additional tools Snort Utilizing an intrusion detection system to log all incoming packets provides additional support if an attack does occur Snort is an open source industry standard for monitoring and alerting when certain network events occur Snort will not to prevent an attack but will provide additional information if an attacker does occur to heighten security and react appropriately Fail2Ban External Networking All data currently runs across three ports from the platform These ports should be the only available platform interfaces for the SDKs and external devices 80 REST API Console access 443 Encypted REST API Console access 1883 MQTT based messaging 1884 Encrpyted MQTT based messaging 8904 Websocket messaging Intranet Additionally ClearBlade recommends implementation of corporate best practices for firewall installation and virtual private networks Use of Mobile Device Management or Mobile Application Management software is encouraged as an additional layer of security for data These solutions can easily be configured to allow for the platform to efficiently transmit data to end clients and devices Data Encryption All data from the public APIs and made available by the SDKs is designed to run over SSL This requires that the hosting server be correctly configured with a certificate issued by a valid certificate signing authority The platform does offer the ability to run without SSL or with selfsigned certificates but it requires specific override implementation and is not recommended by ClearBlade Platform Administration The platform allows for developers to signup and create systems The platform provides a Management console where these developers can be granted rights for Creating new systems Accessing other systems Monitoring usage by developer with metrics include number of systems and number of transactions Platform Auth Each System defined in a platform instance has security automatically The system may be implemented by providing a user registry or simply using anonymous users In both cases the API requires that a user first request a token and this token will be included for analytics monitoring Any user named or anonymous in a system has behaviors available for historical audit The user token is designed such that any man in the middle attacks will be mitigated When a user registry is included each asset within the system can be controlled via a defined role based on the activities create read write and delete Each user is assigned a role and has authorities managed This results in a developer of a System being able to control its users and their authorities via the web based console\"},{\"title\":\"Starting\",\"href\":\"/1-platform_concepts/Administration/Starting\",\"content\":\"Configuration of the ClearBlade platform is divided into three pieces The platform process itself The operating system boxes the platform runs on Database dependencies you might have Starting the Platform Process The Platform by default installs into the path optclearblade In there you will find three elements binary for clearblade all clearblade process happens inside of this binary console directory this contains the html to host the developer console javaharnessjar this allows connectivtiy from ClearBlade code services to java based integrations The process for administering the platform is fairly simple The platform has several command line options Option Type Description Has default addr string The address on which the platform will run Usually this is just a port specified as 9000 busconfig string The name of the bus config file cert string If you wish to use TLS to serve the platform this argument should be the location of the SSL certificate codecache int The maximum number of code services to hold in cache 1000 clusternodes string Overrides the value of the Nodes attribute in the bus config file db string The RDBMS implementation to use Valid options are postgres or sqlite postgres dbhost string The host location of the postgresql installed by ClearBlade 127001 dbpass string The password for the postgresql install dbport string The port of the db 5432 dbuser string The user used by the db disablepprof bool Disables pprof output file creation and pprof webserver creation false dumproutes bool For diagnostic purposes Will dump the endpoints being listened to by the platform false expire int The lifetime of keyvalue store nodes 10 expiretokens bool Invalidates user tokens issued more than the systems tokenTTL defaults to 5 days if set to true Dev tokens will not be removed true hostaddr string The ip address for other clustered nodes to contact this platform key string When using TLS use this to specify the location of the SSL key file leanmode bool For the edge should we store all the server side stuff analytics etc false local bool Mainly for development Will run the platform without data persistence false loglevel string Specifies the minimum loglevel Valid values are debug info warn error and fatal info logfile string The destination file for the CB structured logs Accepts a file location stderr or stdout maximumpublishsize int Sets the maximum allowed MQTT publish size in bytes Accepts INTmbkb If no modifier is present will assume bytes 5MB maxprocs int The number of system threads to use Note that this does not apply to duktape 1 messagingaddr string The address the mqtt broker will listen to 1883 messageauthaddr string The address the messaging auth server will listen on 8905 messageauthwebsocket string The port to listen on for webosocket mqtt authorization 8907 messageauthusetls bool Should SSL be used for messaging authorization false messagingurl string Configures the external messaging url for the platform pprofcpuinterval int The length of time in minutes to wait between creating successive pprof cpu profiles 20 pprofcputime int The length of time in minutes to gather pprof cpu profiling data 20 pprofmeminterval int the length of time in minutes to wait between creating successive pprof heap profiles 5 pprofmaxfiles int The maximum number of cpu heap and debug profiles to retain 0 indicates keep all of them 30 pprofmaxfileage int The maximum amount of time specified in minutes in which to retain cpu heap and debug profile data files 1440 rpcport bool Sets the rpc listening port 8950 rpctimeout int Sets the timeout for all rpc calls either within platform or platform to edge 15 score string The name of the scoring function to use sqlitepath string The path to the sqlite3 db for platform data clearbladedb sqlitepathusers string The name of the scoring function to use clearbladeusersdb store string The key value store to use Valid options are dummy and etcd dummy storeaddr string A comma seperated list of etcd addresses Only needed if etcd is specified as the value of the store argument storeanalytics bool Should we store analytics or just drop them true storelogs bool Should we store code service logs or just drop them true storemessagehistory bool Should we store mqtt message history true synctransport string Sets the type of transport to utilize between edge and platform when syncing Default is mqtt Other options are amqp tcp and stub mqtt tls bool Enables TLS false url string Configures the external url of the platform used by Code Services when supplying redirects and urls to call for more information websocketmessagingaddr string the port to use for messaging websockets 8903 The rest of the administration has been covered elsewhere in terms of manipulating users resources Configuring the Operating System We usually recommend using supervisorhttpsupervisordorg supervisord with the platform But you can run it however you like as long as the appropriate ports are open We recommend running on RHELCentos or Ubuntu Configuring your integrated data stores The platform should accommodate itself to any changes you make in your data stores as long as the information on where to find the stores ip database name login info has not changed\"},{\"title\":\"Subcommands\",\"href\":\"/1-platform_concepts/Administration/Subcommand\",\"content\":\"Clearblade provides easy to use subcommands for updating different aspects of its platform Subcommand and its use are documented in the table below Subcommand Description Example setadmin When a platform is installed for the first time there are no Platform Administrators So you need to promote a dev to admin so he can access the adminonly endpointsclearblade setadmin foobarcom setpkey This command is used to update or replace existing platform keyclearblade setpkey platformkey IMPORTANT Subcommands need to be run by the user that started the ClearBlade server or by root\"},{\"title\":\"Trial\",\"href\":\"/1-platform_concepts/Administration/Trial\",\"content\":\"This Trial guide will provide the instructions for setting an instance of the ClearBlade platform that runs on Amazon EC2 Before you will be able to use the trial you will need to get a trialKey and a registrationKey from your ClearBlade contact Email salesclearbladecom for more information We will complete the following steps 1 Provision a cloud instance 2 Install gcloud tools for accessing ClearBlade docker container registry 3 Install docker 4 Pull ClearBlade docker images 5 Set trial and input variables 6 Create Containers The total process should take about 30 minutes NOTE Commands that include ITALICTEXT are variables that will be custom to your installation Provision your Cloud instance Complete the below section based on your operating system or cloud vendor Using an Amazon EC2 instance 1 Define a new instance For trial ClearBlade recommends Ubuntu Server 1404 LTSHVM SSD Volume Type Free tier eligible Set the network group to include the following settings Port Protocol Source 443 tcp 00000 80 tcp 00000 8904 tcp 00000 1883 tcp 00000 22 tcp 00000 2 Shell into your newly created instance 3 Go to the section Install Container Tools Using a gCloud instance 1 Install the gcloud sdk cli tool locally curl httpssdkcloudgooglecom bash exec l SHELL gcloud auth login Now follow the link and copy paste the auth token into your terminal gcloud config set project apiproject320446546234 2 Create a new VM instance gcloud compute instances create image containervm zone uscentral1a machinetype n1standard1 tags httpserverhttpsserverplatform 3 SSH into VM instance gcloud gcloud compute ssh zone uscentral1a 4 Add your user to the docker group sudo usermod a G docker 5 Go to the section Install Container Tools Install Container tools Make the following shell commands 1 export CLOUDSDKCOREDISABLEPROMPTS1 2 curl httpssdkcloudgooglecom bash 3 exec l SHELL 4 nano cbAuthjson paste in the following json object privatekeyid 93c21159545a5eda0350badd1ac88d3e192ad24f privatekey BEGIN PRIVATE KEYnMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCxcEutj1K6vu1UnsZlETTLIGXVHnaG1xESLZozFb2NlJykZX2kdcxgyZNZ3EbKdvKsp9nvY48IETc5NnREFCLbrfSohzDzRV5VEuSLshkqb4CACB2ZTLVnXOHm4gKad0h3qXZ9G174bnLsCdPPNVKe7JjxLhZauLbfWidyyCM6OWjwXzESSO7B1Nz7Pvq0xVY6hgfaxySB3nyyvaD5TX8vYD1Pzt8YPOAdmM4xm4CqDWt2SvJxURiS0Wqe1hHliWGaTaYMb7X1C3nOO7UqTgTmOF6mPADd20X1MuzS0BH7i87zbfB39uS1PJsD7YlOZ2kzA9Ps9hn48fK8bCTAgMBAAECggEAMaITySy6G3qksHgtQynE9qwIXkv9maWpde9sMyDpRvbnJznFEXPMZOxIAW515CGOT2KfKgArmUCaYIqjJnvcNfGHVNCUgri41lsisT6vSALndcTPYr5OThLGres6UQ9jx8Gb6uewaGNPZIArO17TCZlu8Ctq1bhMVNEznkfd5nFGazFURTzVeuebiEVg10NYZ5fz209Qi45rBf1nB08U65KOpVJQ92K8ITGCQDEeVUnXFZtmbMKOmUpDXbCaZgOpnIcLpJeE8b3Ry9AAdnj3esbIHhYDxNFOEnVrVLVGCLFny3tJl05pwbsxAiJ4FpGtk47JAQAhZwOsG4UWsPqgQKBgQDmpldqOiL8qXHGDUtnFQuYI5I0nTlDIPVNEEoQ1GlV1GFzikWGIpD4N6kffafiAh3JJgD0Xsji2Krzy5np846vu0ZMyn0QqP9UaFFemMqdIV7Uun4pIyRTCbARntJupTtwlGQXvhotL9JqnrVb3qqifXIlM5JmqwViZzl2AwKBgQDE8Mis3mbAkuCrPSwuQ39DH8fPmNsbvPhniB2c7GqsoRWKh4kAWBk6WLPr5nTlrL0LbkyIkgSCgHXBcDkZ5tScodXC7lmd27nQODUMjzhbDnaqgiF7V2dwgDURw0Y5ak1QvW9RCorOeTdG1jkZs25liMAG2Y8EnnInCYd9eMQKBgBZobKA1N7byQ1JpcjmdYTnV8rwqVijWZ95yaJO8JzMoOftoHniCnTDwP2cGzyue5wPmxEr5dmzLffhHfILkqc6q37EYVggAwZRSC53i6MEDWwOnXjli56GFnGxp0KndNaQfVoYTvkO31Nr2bogA1fQJqqovuEkmAZSXvuAoGAaLmpn3NNEIAqe0jBraAaYidAZ5JfIXbxlh9dtDZb4SFUe8YYRwiSEcbNlmosS136ATnQcGpubLlJlTAIDO1TWRpyAcXIR0bHdI4PF6ipTTJ5w94DMXtkvflGOpkFyGEcn0AyMP0od2gH3dQHBx3r06UiiAH03XzofKdTAmECgYEAy2Uhi2PHIzfk1dUfsoKRnTPcfs2VTuln5eeF8NwwNtUxoHP0T2Xl3fNWGuez2mxJ8mniq8QXSGZ1Gk2TLYtnxh2ufKdZBooAv17JR1Fm9dSRlWl5sRNxg7OBR3g4EfwZyWdALlAug57sfyMGvnnd384DBt9JQ67KXyUBHEBz2Iu003dnEND PRIVATE KEYn clientemail 32044654623419ecrjc8uhbfus4vh4jh4sceo7m8iu7fdevelopergserviceaccountcom clientid 32044654623419ecrjc8uhbfus4vh4jh4sceo7m8iu7fappsgoogleusercontentcom type serviceaccount save and quit 5 gcloud auth activateserviceaccount keyfile cbAuthjson 6 gcloud config set project apiproject320446546234 Install Docker 1 Request the installation curl sSL httpsgetdockercom sh 2 Add your user to the docker group sudo usermod aG docker USER Exubuntu 3 Exit your shell session exit 4 Restart your shell session ssh i mykeypem ubuntu54111 Pull Docker ClearBlade Images 1 gcloud docker pull gcrioapiproject320446546234cbpostgres200 2 gcloud docker pull gcrioapiproject320446546234clearblade200 3 gcloud docker pull gcrioapiproject320446546234cbnginx200 4 gcloud docker pull gcrioapiproject320446546234cbconsole200 Set ClearBlade Trial Key 1 echo YOURTRIALKEY devkey Create Containers 1 docker run name cbdata v varclearbladedatavarlibpostgresqldata gcrioapiproject320446546234cbpostgres200 true 2 docker run d name cbpostgres volumesfrom cbdata restart always gcrioapiproject320446546234cbpostgres200 3 docker run d name clearblade v varclearbladelogvarlog e DEVKEYcat devkey p 18831883 p 89048904 link cbpostgrescbpostgres restart always gcrioapiproject320446546234clearblade200 4 docker run d name cbconsole restart always gcrioapiproject320446546234cbconsole200 5 docker run d name cbnginx p 8080 p 443443 restart always link cbconsolecbconsole link clearbladeclearblade gcrioapiproject320446546234cbnginx200 Browse your newly instantiated platform 1 Open a local web browser 2 Enter the IP address of your server 3 In the top right select Sign Up 4 Use the registration key you have been provided 5 Complete the new developer form You are now ready to complete your desired tutorial iOS4developerreferenceiosTutorial Android4developerreferenceandroidTutorial JavaScript4developerreferencejavascriptTutorial See the documentation for more information\"},{\"title\":\"Update\",\"href\":\"/1-platform_concepts/Administration/Update\",\"content\":\"Prior to upgrading ClearBlade always recommends doing a complete backup for restoration purposes The following backup processes are available depending on restoration needs 1 Use standard linux imaging snapshot tools Will ensure to protect both the machine configuration ClearBlade configuration and System information 2 Execute PostgresSQL database dump Will ensure to protect ClearBlade configuration and System information 3 Use the ClearBlade CLI to export systems individually Will ensure to protect System information The upgrade process will execute the following changes Potentially Modify the database schema Potentially Modify the configuration of nGinx Upgrade all platform based binaries and developer console html5 located on the local machine Restart the platform The upgrade process will not Remove the existing data Modify any clustering configuration that has been done Modify any port or networking configurations To run the upgrade complete the following commands from the linux command line 1 tar xvf platformtargz This will unpack the installation files 2 cd deployinstallScripts 3 sudo updatesh This will perform the update tasks\"},{\"title\":\"Administration\",\"href\":\"/1-platform_concepts/Administration/_default\",\"content\":\"\"},{\"title\":\"Analytics\",\"href\":\"/1-platform_concepts/Analytics\",\"content\":\"Analytics allows the platform developer to view a history of requests users have made to the platform The platform stores a small amount of metadata on each request the IP it came from the date what was requested and on what resources There are several types of calls that can be made Storage Size Count Event Totals Event List and User Events Storage size allows the developer to query the size in bytes of regular collection tables stored within the platform Count gets the count of rows Event Totals gets the total number of requests for each type of event This is intended to provide a summary of actions the users have requested from the platform over periods of time Event List allows the developer to drill down and returns a selection of discrete events that have been performed against the platform User Events is the previous Event List but queryable by user This is particularly useful for auditing Note that analytics calls are only available to developer users Scope A key concept to analytics is scope Scope is the breadth of the dataset There are several scopes The largest scope is Platform which allows the user to to see the totals for the entire platform including every system and its subcomponents ScopeDescription PlatformThe largest scope It aggregates data across every system on the platform OrganizationWhen a developer registers they provide an organization This allows the data to be aggregated across any developer and developers systems who belong to the specified organization DeveloperCovers the systems owned by a specific developer SystemOnly that system and its subcomponents Event Types Here is a listing of event types that the platform records Event TypeDescription CreateThe creation of some kind of resource in the platform a collection or an item within the collection Password ResetA user resets their password UpdateUpdating a resource within the platform Dev AlterA developer altering a resource in the platform Dev Password ResetA developer resets their password Dev DeleteA developer deletes a resource Dev ReadA dev reads a resource out of the platform Dev UpdateA dev updates a resource ReadA user reads Delete A user deletes a resource Dev CreateA dev creates a resource ExecuteA service is executed Dev SaveA developer saves a code service PublishA message is published via MQTT ConnectionA client connects to MQTT LoginA user logs in to the platform LogoutA user logs out of the platform SubscribeA client subscribes to an MQTT topic UnsubscribeA client unsubscribes to an MQTT topic DisconnectA client disconnects from MQTT\"},{\"title\":\"CLI Tool\",\"href\":\"/1-platform_concepts/CLI\",\"content\":\"The ClearBlade Platform includes a command line interface CLI that supports development on a developer PC Using the command line interface developers are able to accomplish the following tasks Author services with their preferred IDEs Test services locally Source control the systems Import and Export their systems between ClearBlade Platform Instances Promote code between dev test staging and production systems Generate SOAP client services Get the CLI from GithubstaticimggithubpngClearBladecbclihttpsgithubcomClearBladecbcli\"},{\"title\":\"Code\",\"href\":\"/1-platform_concepts/Code\",\"content\":\"Code provides developers the ability to implement a backend API necessary to make web mobile and IoT apps all perform and integrate in the desired way The ClearBlade Platform makes it easy to author JavaScript that will be securely protected and execute in a highly scalable manner This JavaScript follows the best practices associated with the microservice architectures of today ClearBlade OverviewstaticimgconsoleoverviewoverviewCodepng Within the Code section of a System you can device two types of Code that ultimately make up the application layer of your System Services are available externally and called by clients via HTTP or MQTT Libraries are lines of javascript that can be included into services to provide reusable logic Services A service in the ClearBlade Platform represents the creation of a custom API endpoint This service can be called by clients when specific business function needs to be executed In addition to implementing business logic services are capable of Accessing and modifying data Sending messages Integration with legacy enterprise systems cloudbased applications the local server IO Services take parameters that are simple string or complex JSON structures Responses from Services can be as complex as the developer desires Each Service is secured via the System authority model that allows only defined roles execution priviledges Libraries Libraries allow for creating reusable logic within a System Libraries contain JavaScript with all the same functional capabilities of Services but are not directly exposed to the clients A Service that requires a Library will have the library code injected into the Service at the beginning of the service execution Libraries are valuable for creating global style variables helper functions or just improving the readability of a service There are two types of libraries Native Libraries Native Libraries are not editable by developers and are available in all Systems They contain code written by ClearBlade that performs lowlevel highperformance interactions These libraries include clearblade crypto filewriter geo http jsutil log mailer netcb and oauth2lib Custom Libraries Developers may create their own reusable libraries that execute within the scope of a single System These libraries contain javascript that will be injected into the beginning of each service that requires them\"},{\"title\":\"Data\",\"href\":\"/1-platform_concepts/Data/_default\",\"content\":\"\"},{\"title\":\"Collections\",\"href\":\"/1-platform_concepts/Data/collection\",\"content\":\" Simple Abstraction The ClearBlade Platform allows for exposing database tables views and collections as simple structures available from REST based APIs Whether you want to create and store information in the ClearBlade Platform itself or map to existing databases the ClearBlade Platform makes it easy ClearBlade OverviewstaticimgconsoleoverviewdataOverviewpng Cloudbased The ClearBlade platform provides the ability to create new data structures and make them available via a REST API or MQTT This data is stored and secured within the ClearBlade platform The ClearBlade platform provides relational based queries while also storing document styled elements The cloud structures allow for creating custom columns with explicit type definitions ClearBlade OverviewstaticimgconsoleoverviewcloudDataOverviewpng\"},{\"title\":\"Connections\",\"href\":\"/1-platform_concepts/Data/connection\",\"content\":\" Connections The data integration piece of the ClearBlade Platform allows the developer to treat preexisting databases as a part of the Platform This means that 3rd party DBs like like DB2 Oracle or SQLServer for example would have the same REST api and interaction with code servicesmessaging as a Platform cloud collection At the same time all of the security measures provided to the platform would be applied when accessing the existing database Effectively one can map a table to a collection At the same time the Platform disallows manipulation of the datastores schema adding removing columns etc via the REST api so developers and a database administrator DBA would still maintain control over their database structure ClearBlade OverviewstaticimgconsoleoverviewconnectionDataOverviewpng\"},{\"title\":\"Query\",\"href\":\"/1-platform_concepts/Data/query\",\"content\":\" General Structure javascript this is the outer array in case of an OR this is an array that holds all of the individual filters this is an object that holds all of the keyvalue pairs for a particular Operator EQ this is the operator stringColumn stringValue the first value is the name of the column the second is the value you wish to match GT this is another operator intColumn 4 if we had an or it would start after this line This structure would represent a query for all items whose stringColumn equal stringValue and whose intColumn is greater than 4 This structure can be used to match when doing a GET PUT or DELETE but each have this structure wrapped in an object specific to that method Method Specific Structure GET A request that uses the GET method should have the following in a querystring with query as the key javascript SORT the sort key dictates what order the data is returned in ASCcolumnName the key for each entry in sort is either ASC or DESC if sorting by more than one column the next entry would get its own object following this line PAGESIZE 100 this is the amount of items that will be returned from a request default 100 PAGENUM 1 this is the page number based on the above pagesize given default 1 FILTERS EQ stringColumn stringValueGT intColumn 4 this is the same stucture as defined in General Structure above This is then URL encoded and transmitted like javascript platformIPapiv1dataquery7B22SORT223A5B7B22ASC223A22columnName227D5D2C22PAGESIZE223A201002C22PAGENUM223A2012C2022FILTERS223A205B5B7B22EQ223A207B22stringColumn223A2022stringValue227D7D2C7B22GT223A207B22intColumn223A2047D7D5D5D7D0A PUT A request that uses the PUT method should have the following in the body of the request javascript queryEQ stringColumn stringValueGT intColumn 4 this is the same structure as defined in General Structure above set column newValue DELETE A request that uses the DELETE method should have the following in a querystring with query as the key javascript EQ stringColumn stringValueGT intColumn 4 this is the same structure as defined in General Structure above This is then URL encoded and transmitted like javascript platformIPapiv1dataquery5B5B7B22EQ223A207B22stringColumn223A2022stringValue227D7D2C7B22GT223A207B22intColumn223A2047D7D5D5D Filtering Filtering is an aspect of querying Essentially it is the part of the query analogous to the where clause in a regular SQL query Lets refresh ourselves with the filtering structure javascript this is the outer array in case of an OR this is an array that holds all of the individual filters this is an object that holds all of the keyvalue pairs for a particular Operator EQ this is the operator stringColumn stringValue the first value is the name of the column the second is the value you wish to match GT this is another operator intColumn 4 if we had an or it would start after this line On the outermost level we have the OR queries Or queries hold multiple AND queries inside of them Like so javascript Foo is Equal To Quux one Or Branch Bar is Not Equal To Spam another Or Branch What this translates to is WHERE Foo Quux OR Bar Spam Now lets cover AND statements javascript Foo is Equal To Quux Bar is Equal To Spam This translates to WHERE Foo Quux AND Bar Spam Its important to note here that we still have the OR wrapper around the query but it only has one branch We can add arbitrarily many conditions like this together and well still be presenting the platform a valid filter As long as the filter matches an entry in your collection it will return something At present JOINs across collections is not allowed but may be added in the future\"},{\"title\":\"Types\",\"href\":\"/1-platform_concepts/Data/types\",\"content\":\"The standard platform collection can handle the following data types Type Name Representation StringA standard string of characters UTF8 encoded IntA 32 bit signed integer BigintA 64 bit signed integer FloatA 32 bit floating point number DoubleA 64 bit floating point number BlobA binary blob of arbitrary size UuidA standard Uuid sometimes called a GUID TimestampAn RFC 3339 timestamp BooleanA boolean value true or false In addition null values are allowed in all collection columns except the itemid column which is supplied by the platform When accessing data from a collection the platform returns values in JSON format Therefore numeric values will be returned with a data type of Double The platform returns Blobs as base64 encoded strings\"},{\"title\":\"Devices\",\"href\":\"/1-platform_concepts/Devices/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/1-platform_concepts/Devices/overview\",\"content\":\"The ClearBlade platform has the concept of devices physical entities that interact with your system Devices are similar to the users platform concept in that a device can authenticate itself with the system and perform various operations within the system The ability to perform such operations is governed by ClearBlades RoleBased Access Control RBAC in the exact same way that it is applied to users Just like users devices exist in a device table and by default a device is allowed to only modify its entry in the table Any device can have its own custom fields fields that may only apply to that device but could apply to any number of devices Thus the fieldscolumns in the device table are not homogeneous certain fields are available for some devices but not others For example you might want to define temperature sensor devices that have a temperature custom field You could also define torque wrench devices that have a current torque setting field Device Authentication While authentication for users is accomplished using passwords devices are authenticated using preshared keys These keys can either be manually set when creating devices or they can be generated by the system for you To set up keys during device creation CREATE admindevicessystemKeyname three device attributes need to be set 1 allowkeyauth Boolean Set this to true 2 activekey String This value will be the current active key and this must be shared with the device or device surrogate prior to device authentication This is what is passed in when authenticating the device 3 keys String This is a commaseparated list of keys that can be cycled through using key rotation Again these keys are generated by the caller during the create operation If you want the system to generate keys you use the CREATE admindeviceskeyssystemKeyname endpoint This will create a keyset set the activekey and set allowkeyauth to true It will return the newly generated info To rotate keys use UPDATE admindeviceskeyssystemKeyname All this does is set the new activekey It is returned in the response To turn off keybased authentication use DELETE admindeviceskeyssystemKeyname To read the current activekey and keys attributes use GET admindeviceskeyssystemKeyname Finally to authenticate a device use POST apiv2devicessystemKeyauth endpoint In the POST body you pass two keyvalue pairs deviceNamenameofdevice activeKey valueforactivekey Edge Synchronization Like users device state is automatically synchronized between ClearBlade and its Edges Enabled and Disabled Devices Unlike users devices can either be enabled or disabled This roughly corresponds to commissioningdecommissioning devices in a realworld environment and will be discussed in more detail later\"},{\"title\":\"Cloud\",\"href\":\"/1-platform_concepts/Integration/Cloud\",\"content\":\"\"},{\"title\":\"DB2 System I\",\"href\":\"/1-platform_concepts/Integration/Databases/DB2\",\"content\":\"DB2 System I integration is a fairly simple process for the platform developer In order to connect to a DB2 database first create a new collection and fill in the Connection radio button We will then require a few pieces of information Field NameDescription Database NameThe name of the database to connect to as on the server IP addressThe IP address of the server Be sure to use the IP relative to the platforms install location So if it is a subnet use the subnet address PortThe port for connecting UsernameThe database user PasswordThe database users password Table Name The table you wish to correspond to the collection SchemaIf there is a schema supply its name here LibraryThe same for the library CatelogThe same for the catelog Please note that as with all connect collections you will be able to perform CRUD operations on the table adding or removing columns or changing datatypes or dropping the table itself is disallowed by design\"},{\"title\":\"Microsoft SQL Server\",\"href\":\"/1-platform_concepts/Integration/Databases/MSSqlServer\",\"content\":\"Once intragrated you will be able to treat a MSSQL server instance like any other clearblade collection You will be able to use it for data calls triggersfrom services and other operations Field NameDescription Database NameThe name of the database to connect to as on the server IP addressThe IP address of the server Be sure to use the IP relative to the platforms install location So if it is a subnet use the subnet address PortThe port for connecting UsernameThe database user PasswordThe database users password Table Name The table you wish to correspond to the collection\"},{\"title\":\"Mongo\",\"href\":\"/1-platform_concepts/Integration/Databases/Mongo\",\"content\":\"\"},{\"title\":\"MySQL\",\"href\":\"/1-platform_concepts/Integration/Databases/MySQL\",\"content\":\"\"},{\"title\":\"Postgresql\",\"href\":\"/1-platform_concepts/Integration/Databases/Postgres\",\"content\":\"The ClearBlade platform runs off of a postgres instance internally that stores configuration and administration information and default collection information If you have external Postgresql instances you wish to integrate with the ClearBlade platform you can do so like any other Connection Collection Field NameDescription Database NameThe name of the database to connect to as on the server IP addressThe IP address of the server Be sure to use the IP relative to the platforms install location So if it is a subnet use the subnet address PortThe port for connecting UsernameThe database user PasswordThe database users password Table Name The table you wish to correspond to the collection Setting up Postgres for a local ClearBlade instance Mac OSX Installing Postgres Verify that you have Brew installed brew v If needed install brew usrbinruby e curl fsSL httpsrawgithubusercontentcomHomebrewinstallmasterinstall Next update brew to the latest build brew update Finally install postgres brew install postgresql94 If an installation error is recieved try brew install homebrewversionspostgresql94 Configure Postgres First start postgres brew services start postgresql94 Next open the postgres console psql d Add roles and create seed databases CREATE ROLE cbuser LOGIN PASSWORD CREATE DATABASE admin CREATE DATABASE userdata Close the console q\"},{\"title\":\"Databases\",\"href\":\"/1-platform_concepts/Integration/Databases/_default\",\"content\":\"\"},{\"title\":\"Java\",\"href\":\"/1-platform_concepts/Integration/Java\",\"content\":\"\"},{\"title\":\"Legacy\",\"href\":\"/1-platform_concepts/Integration/Legacy\",\"content\":\"\"},{\"title\":\"Libraries\",\"href\":\"/1-platform_concepts/Integration/Libraries\",\"content\":\"\"},{\"title\":\"REST\",\"href\":\"/1-platform_concepts/Integration/REST\",\"content\":\"\"},{\"title\":\"SOAP\",\"href\":\"/1-platform_concepts/Integration/SOAP\",\"content\":\"\"},{\"title\":\"Integration\",\"href\":\"/1-platform_concepts/Integration/_default\",\"content\":\"\"},{\"title\":\"Integration Overview\",\"href\":\"/1-platform_concepts/Integration/overview\",\"content\":\"The ClearBlade Platform provides deep integrations for exposing cloud and legacy system information to a ClearBlade System At the core it uses the following techniques for archieving this integration SQL and NoSQL Database drivers REST most cloud offerings SOAP legacy enterprise integrations Java binding for legacy jars Sockets for legacy protocols File IO for file system interactions MQTT connect or bridge with external MQTT brokers DataBases ClearBlade connect directly to the following databases Postgres MySQL MongoDB Cassandra DB2 i DB2 distributed Microsoft SQL Server Oracle Contact ClearBlade for additional available databases Cloud Services Almost all cloud service offerings are available via a ClearBlade service leveraging REST based APIs ClearBlade has validated support for the following offerings Google Drive Google Calendar Box Dropbox Twilio Kandy Zendesk Nest Amazon Cloud SendGrid Weathercom Spotify SalesForce SugarCRM WorkDay IFTT Facebook Twitter gCloud Slack Sharepoint Office365 Shopify Paypal LinkedIn Contact ClearBlade for additional Cloud integration requests Transmission Legacy supported protocols that have been validated are SOAP The ClearBlade CLI offers a client generation tool This tool generates Libraries that are capable of making the SOAP calls and transfering the responses into simple JSON objects RPG Calls RPG programs running on System i CICS Call CICS transactions OPC Open communication and sendreceive messages with OPC Contact ClearBlade for additional legacy integration requests Onpremise Enterprise Software ClearBlade provides specific connects for working with existing Enterprise Software This includes but is not limited to InfoBright SAP Magento Tessitura WebSphere Netsuite Rational MS Visual Studio Supported Clouds ClearBlade Platform supports the following Cloud architectures but is not limited to Google Cloud Azure Linode Digital Ocean RackSpace Amazon EC2 Softlayer MicroProcessors Micro Controllers ClearBlade Platform SDKs supports the following IoT compatible processors but is not limited to Raspberry Pi Arduino BeagleBone Pico SystemonModules Atmel\"},{\"title\":\"Messaging\",\"href\":\"/1-platform_concepts/Messaging/_default\",\"content\":\"\"},{\"title\":\"Connections\",\"href\":\"/1-platform_concepts/Messaging/connections\",\"content\":\" Connection Details There are a other capabilities that MQTT provides that allows one to tune the protocol a little Last will and testament The biggest of these features is the LastWillAndTestament LWAT message LWAT messages are publish messages that are packaged up with the connect packet and held by the server for the duration of the connection If the client loses the connection with the broker say by missing a ping or closing the connection without sending a disconnect packet then the LWAT will be sent by the broker on the topic specified in the connect packet A common use case would be for clients to have their LWAT message publish on a topic dedicated to these messages A subscriber on that topic could then restart the clients or forward the reports to a different service Note that the LWAT is completely optional Retain Another feature is the retain flag If the retain flag is set then the message will be retained for that topic and sent to any new subscribers Sending a message with the retain flag overwrites the currently the currently retained message a particular topic\"},{\"title\":\"Message Relay\",\"href\":\"/1-platform_concepts/Messaging/message_relay\",\"content\":\"The ClearBlade Message Relay is a way for edge MQTT clients to communicate with the Novi MQTT clients as well as other Edge MQTT clients In order to achieve this there are a few reserved MQTT topic paths that one needs to follow for the message relay to work The message relay uses the following 6 topic paths to route messages between edges and their parent platform Message relay applies to communication between edges and platform within one single system Edge to Platform message For sending a MQTT message from the edge to its parent platform use the following topic path platform For receiving a message on the platform you need to subscribe to the same topic Platform to Edge message For sending a MQTT message from the platform to an edge connected to it use the following topic path edge For receiving a message on the edge you need to subscribe to the same topic Edge to Edge message For sending a MQTT message from an edge to another edge use the following topic path edge Here the should be the ID of the other edge that will receive the message For receiving a message on the other edge you need to subscribe to the same topic Platform to All Broadcast message For sending a MQTT message from the platform to all edges use the following topic path broadcast For receiving a message on all the edges you need to subscribe to the same topic Edge to All Broadcast message For sending a MQTT message from an edge to all other edges and the platform use the following topic path broadcast For receiving a message on all the other edges and the platform you need to subscribe to the same topic Edge to Edge and Platform message For sending a MQTT message from an edge to another edge and to the platform use the following topic path edgeAndPlatform Here the should be the ID of the other edge that will receive the message For receiving a message you need to subscribe to the same topic on the platform as well as the other edge\"},{\"title\":\"Overview\",\"href\":\"/1-platform_concepts/Messaging/overview\",\"content\":\"With the ClearBlade platform developers can make their client applications behave in realtime using Messaging Using ClearBlade Messaging apps are able to publish and subscribe to events and data within the system using a simple topic Although ClearBlade uses an open standard for all message based communication the platform uniquely provides both scalability and security Learn more at ClearBlade MQTT Reference4developerreferenceMQTT Messaging simplifies and optimizes live group chat online gaming Messaging is critical to solutions for IoT device interactions Extremely fast communications ClearBlade OverviewstaticimgconsoleoverviewoverviewMessagingpng What makes the ClearBlade Messaging so powerful is its ability to integrate with the other elements of a System Messages can be sent by code services Messages can trigger events to execute Messages can synchronize data around a single source of truth Finally the Messaging architecture is completely integrated with the security model already in place meaning that Auth tokens used over HTTP and the associated role based priveledges are also valid and used in Messaging Open Standards ClearBlade leverages the MQTT protocol for its messaging and makes it available both in its raw form or through websockets for browser based apps The protocol is extremely lightweight simple to use and sits ontop of the widely available TCP network layer It uses a publishsubscribe model rather than the less efficient requestresponse model This means a message may be published to a topic and received instantly by many subscribers Finally the ClearBlade platform implements the full specification of MQTT to allow for multiple Quality of Service settings that best fit a developers use case If you wish to read the specification check it out at MQTT Oasis specificationhttpdocsoasisopenorgmqttmqttv311osmqttv311oshtml MQTT specification\"},{\"title\":\"QoS\",\"href\":\"/1-platform_concepts/Messaging/qos\",\"content\":\" Quality of Service MQTT was designed to be rugged The sensors or what have you publishing may not always be available They may go offline for whatever reason A bird picked up the sensor or the car drove through a tunnel The real world is pretty unpredictable by the standards of application design While we cant ever be 100 we can mitigate some of these problems MQTTs Quality of Service can help The quality of service defines the semantics of how the message published is delivered There are 3 qualities of service and a few options that are related that well cover here The ratings for quality of service are 01and 2 Otherwise known as At most once At least once Exactly once respectively QOS 0 or At Most once At most once means that when a message is sent from the publisher it is only relayed by the broker once If there is some reason that the subscriber doesnt receive it for example a netsplit or their incoming buffers are full then that is their fault and the message is lost While this seems pretty dire there are very many messages that dont need 100 accuracy Sometimes the costs of storing messages to be resent outweighs the cost of missing them QOS 1 or At least once With this setting the broker resends the message until it has been acknowledged by the subscriber That means that it is possible for the receiver to get the message more than once because of a gap between transmission and reception times for whatever reason For idempotent operations this is totally okay and is useful sometimes when you want to assure that a message has been received but dont want the heavier semantics of QOS 2 QOS 2 or Exactly once Quality of service 2 will communicate with the subscriber before publishing and ask them if theyre ready to receive the publish It will hold onto the publish until they assent to having it sent to them Useful in the case of chat programs and other highly important but perhaps not millisecondsensitive transactions\"},{\"title\":\"Topics\",\"href\":\"/1-platform_concepts/Messaging/topics\",\"content\":\" Understanding Topics We mentioned above that MQTT separates messages via topics These topics exist in a hierarchical tree For example SportsAmerican FootballNFLBearsScores and SportsAustrialian FootballAFLCrowsScores are two equally valid topic paths While it isnt a rule that topics go from large scopes all of sports to small scopes team scores it is a very common idiom to do so This is due to the semantics behind subscriptions There are three kinds of subscription The first is a regular subscription SportsGolfTournamentsWinners here is a good time to note that a topic consists of any UTF8 character excluding the and runes The last two subscriptions are wildcard subscriptions That means they are subscribed to multiple topics simultaneously The first wildcard well discuss is the single level wildcard otherwise known as the wildcard The single level wildcard allows a subscription to skip an entire level of the topics path In our experience this is the more difficult of the two types of wildcard to visualize so well use some examples Lets say we have a single level wildcard in our subscription SportsTennisWinners Publish NumberPublish Topic Receives 1SportsTennisWimbledonWinners 2SportsTennisFrench OpenWinners 3SportsTennisWinners 4SportsTennisUS OpenMixed DoublesWinners 5SportsProfessional EatingOystersWinners Okay lets break down what happened 1 2 matched because they had the same path preceding the wildcard and the same path after the wildcard The only difference between the two was the topic section that took place in the wildcard 3 matched preceding the wildcard but then didnt have anything after 4 matched the preceding but had too much going on after the single level wildcard to match The fifth while the wildcard position and the topic portions after the wildcard matched the preceding didnt match Pretty simple so far Here is where it gets crazy You can have an arbitrary number of single level wildcards in a subscription Here are some examples Subscription This one says Give me any publish whose topic is four sections deep So foobarbazquux and spameggspotatobiscut match but foobarbazquuxspam do not match Subscription SportsTexasScores This one says give me the scores of any sport in Texas So SportsFootballTexasCollegeScores matches As does SportsRivalriesTexasBaylorScores But SportsTexasUTexaseventstailgaiting does not I want to point out that there is no set way of structuring topics with regards to the information youre trying to model so when you decide upon your models keep the wildcard subscribes in mind The second kind of wildcard has immensely simpler semantics The multilevel wildcard The multilevel wildcard subscribes to every topic that is on the same level or deeper in the hierarchy than the hash The simplest case is simply subscribing to which will deliver every single message published on any topic Lets run through some examples Our subscription topic is SportsF1 Publish Number Publish TopicReceives 1SportsF1Circut of the Americas 2SportsTennisFrench OpenWinners 3SportsF1Hungarian Grand PrixAccidentsWheel DamageLeftFront 4SportsTennisUS OpenMixed DoublesWinners 1 most certainly matches Its only one deeper 2 does not match we veer off at the Tennis subsection 3 is incredibly specific and deep but still matches due to our multilevelwildcard 4 Does not match once again because of Tennis Its important to note that a subscription topic like FooBar is invalid Once a hash is in the subscription that hash is the last element in that subscription Keep wildcard hashes in mind while modeling your security for MQTT ClearBlade will have a solution to manage this in the coming future though by providing full Read and Write ACL on arbitrary topic trees\"},{\"title\":\"Systems\",\"href\":\"/1-platform_concepts/System\",\"content\":\"When a developer ready to begin using the ClearBlade Platform the first element that must be created is a System ClearBlade OverviewstaticimgconsoleoverviewoverviewSystempng This System represents a backend for the mobile apps web dashboard fat clients or IoT networks that need a common system of record The System contains an API for clients to consume data saved in well defined structures custom business logic messages being published a role based authority model for users and devices\"},{\"title\":\"Timers\",\"href\":\"/1-platform_concepts/Timers\",\"content\":\"Timers provide a mechanism where a ClearBlade code service can be scheduled to execute at certain time intervals Timers are similar to Unix cron jobs with a simpler scheduling mechanism The key pieces of a timer are its name description associated code service and schedule The schedule determines when the code service is executed The name of a timer must be unique within a systemapplication The description is optional Schedules A schedule consists of three parts 1 Start date This defines the date in which the timer should become effective 2 Start time This defines the time on the specified Start Date in which the timer should become effective 3 Repeats This specifies how many times the timer should repeat after the first execution 0 zero means run only once 1 means run forever 4 Frequency This specifies the time interval between runs of the associated code service Frequency can be expressed in terms of seconds minutes hours days or weeks With these simple schedule parameters You can specify schedules such as Run forever every five minutes starting now Run 26 times every two weeks starting Friday December 25th 2015 Run once at midnight Execution Context Unlike services that are called by clients and execute with the user privledges the default user context for the timer is the developer who initially created the timer Unless the associated code service specifies a Run as other than caller the timer will always run as the developer who created the timer Secondly other than the standard parameters that ClearBlade passes to code services no parameters are passed to timers\"},{\"title\":\"Triggers\",\"href\":\"/1-platform_concepts/Triggers/_default\",\"content\":\"\"},{\"title\":\"Event Types\",\"href\":\"/1-platform_concepts/Triggers/events\",\"content\":\" Available Events Data ItemCreated ItemUpdated ItemDeleted CollectionCreated CollectionUpdated CollectionDeleted User UserCreated UserUpdated UserDeleted Device DeviceCreated DeviceUpdated DeviceDeleted Messsaging Publish Subscribe Unsubscribe Attributes When you define a trigger you provide the following information 1 The event described above 2 The code service to be executed 3 Filters for the trigger The process for firing triggers is very simple When an event occurs in the system the system passes the event information to the trigger processor The trigger processor searches for triggers that match that event When it finds such a trigger its code service is invoked in the background The system uses trigger filters to perform the match We will now discuss this important matching process Filters and Trigger Matching Each event specifies a set of filters that when the event occurs are passed to the matching system for processing These are then compared to each userdefined trigger for that event Details of how this match occurs is given below An event payload is also passed to the system The payload contains other relevant information about the event The paylood is passed as a proporty or properties to the code service for the trigger For example for the DataItemCreated event there is a property items passed to the code service for the trigger The filters and payload passed for each event are as follows DataItemCreated Filters collectionId collectionName Payload itemsitemId DataItemUpdated Filters collectionId collectionName Payload querythe query used for the update operation DataItemDeleted Filters collectionId collectionName Payload query the query used for the update operation DataCollectionCreated Filters none Payload collectionId DataCollectionUpdated Filters collectionId collectionName Payload changes changeKeychangeVal DataCollectionDeleted Filters collectionId collectionName Payload collectionId UserUserCreated Filters none Payload userId UserUserUpdated Filters userId Payload changes changeKeychangeVal UserUserDeleted Filters userId Payload userId DeviceDeviceCreated Filters none Payload deviceName devicekey val DeviceDeviceUpdated Filters deviceName Payload deviceName changeskey val DeviceDeviceDeleted Filters deviceName Payload deviceName MessagingPublish Filters topic Payload topic body MessagingSubscribe Filters topic Payload userId topic MessagingUnsubscribe Filters topic Payload userId topic How the filtering process works can best described using a couple of examples First lets look at DataItemCreated When creating your trigger you can optionally specify a collection id or a collectionName to apply to that trigger This means that your trigger will only fire when an item is created in that collection If you do not specify a collectionId or collectionName your trigger will be executed whenever any item is created in your system regardless of collection The situation is a bit different when creating triggers for the messaging subsystem Here the system takes into account MQTTs wildcard capability When creating triggers for Publish Subscribe and Unsubscribe you can pass in the topic filter as a topic commands ie it can contain the and path elements See the MQTT documentation for a description of wildcards Of course if you dont use wildcards the match must be exact If for any of events Publish Subscribe and Unsubscribe you do not provide a topic all such events will match and fire your trigger\"},{\"title\":\"Messaging\",\"href\":\"/1-platform_concepts/Triggers/messaging\",\"content\":\"Messaging Events can also cause triggers to start Here the system takes into account MQTTs wildcard capability When creating triggers for Publish Subscribe and Unsubscribe you can pass in the topic filter as a topic commands ie it can contain the and path elements See the Topics documentation1platformconceptsmessagingtopics for a description of wildcards Of course if you dont use wildcards the match must be exact If for any of events Publish Subscribe and Unsubscribe you do not provide a topic all such events will match and fire your trigger\"},{\"title\":\"Overview\",\"href\":\"/1-platform_concepts/Triggers/overview\",\"content\":\"The ClearBlade platform provides a trigger mechanism that lets you respond to specific platform events by executing a code service whenever such an event occurs The events for which you can specify triggers are predefined by the platform and available through the API Terminology note 1 Trigger The platform defines and generates events You create a trigger for responding to each event 2 Events A platform defined internal action generates an event such as User Created Item Updated etc 3 Filter A set of criteria to narrow and refine when a trigger is actually executed For example you could define a trigger to handle all User Updated events or you could define a trigger to only handle User Updated events for user Joe Attributes When you define a trigger you provide the following information 1 The event described above 2 The code service to be executed 3 Filters for the trigger The process for firing triggers is very simple When an event occurs in the system the system passes the event information to the trigger processor The trigger processor searches for triggers that match that event When it finds such a trigger its code service is invoked in the background The system uses trigger filters to perform the match\"},{\"title\":\"Users\",\"href\":\"/1-platform_concepts/Users\",\"content\":\"The ClearBlade Platform allows for Systems to define and customize their own user registry The users that get created have special permissions allowing them to only view and edit properties related to them Users are granted roles see below which then describe and grant users specific authorities Following an oAuth model users are given tokens when successfully authenticated which then allow for all future API calls to be correctly permissioned and audited ClearBlade OverviewstaticimgconsoleoverviewoverviewUserpng Users Roles Permissions The ClearBlade platforms security design is based off of the idea of Role Based Access ControlhttpcsrcnistgovgroupsSNSrbac Some NIST information about RBAC otherwise known as RBAC The central idea is that permissions are applied to roles rather than directly to the user In ClearBlades implementation the users are then associated with those roles You can think of a user on the ClearBlade Platform as a tuple consisting of an identifier and a list of roles There is no root user exposed to the consumers of your applications written with the platform The only user with complete permissions over everything is the Developer user Which is as it says reserved for developers and should never be used from within applications built with the platform The user identifier is important for auditing purposes and general ease of use We use the users identifier to keep records of actions performed by that user in addition to using it for authentication purposes Roles are important because they define the actions that can be performed by the users those roles are associated with These permissions include CRUD on collections and executing code services In the near future they will also include publish and subscribing to certain MQTT topics The process for authenticating to the platform is fairly simple The user performs a POST request against the apiv1auth endpoint with their username password the System Key and System Secret If the login information is valid the user is returned a token The token is valid for a configurable number of days the default is 30 days That token is attached as a header to each subsequent API request The token is required for virtually all transactions within the platform except logging in Session Another simple but important concept is the Session When a user logs into the platform they are issued a token that they must use for every platform request That token will become invalid upon logout or token expiration Each token is associated with a session which is a record of who is logged in at any given moment The session does not correspond to the permissions applied to a role so if the permissions are changed on a role the changes will apply even to users who are currently in a session Creating users can be done via HTTP endpoint or via the GUI It requires an email for the user and a password Other information that the developer may require can be processed via that endpoint Once a user is created it has no default permissions to any resource on the platform Roles must be associated with users The developer must supply the registration sigil their first and last name their organization and an email and password to register Creating Roles This may be done via the GUI or via an endpoint Roles are created and permissions are assigned to them Those permissions correspond to operations on various resources Note that users may have multiple roles So if a user has a role that has certain permissions and has another role that doesnt the user will have the permissions even though one of their roles doesnt specify them Managing users User management may be performed via the API or the GUI Its possible to add and remove roles from users alter the permissions of roles and many other things Note that if you alter or delete a role that change will propagate to every user who has that role Its also possible to delete users from the platform This will immediately stop their session and log them out Rolebased Permissions Roles as we have mentioned in the About section are groups of permissions to be applied to various resources within the platform The permissions that can be applied to a resource vary depending on the resource We shall list the permissions below Resource Type Permission Semantic Meaning CollectionCreateAdd a new item to a collection CollectionReadPerform queries on the collection CollectionUpdateCan update items within a collection CollectionDeleteCan remove items from a collection UsersReadCan read information from the users table ServiceExecutableCan make a request to the code service Is synonymous with read but the end user never sees the Code Message HistoryReadCan read message history PushCan PushJust what it says on the tin can make a push if push is included with your installation Generally speaking permissions map to endpoints The CRUD permissions on a collection map to the POSTGETPUTDELETE HTTP verbs respectively The executable permission maps to calling POST to a code service etc etc\"},{\"title\":\"Concepts\",\"href\":\"/1-platform_concepts/_default\",\"content\":\"\"},{\"title\":\"Administering Adapters\",\"href\":\"/2-console_administration/Adapters/AdapterAdministration\",\"content\":\" Overview Once an adapter has been deployed to an Edge it can be started stopped restarted or undeployed using the ClearBlade Platform developers console The ClearBlade Platform developers console can also be used to view log files associated with the adapter Start Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the Start button If the start button is disabled that would indicate a Start Command has not been specified in the Config tab of the adapter settings See adapter managementAdapterManagement 5 A message will be displayed indicating the adapter was started or an appropriate error will be displayed if the adapter could not be started Stop Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the Stop button If the stop button is disabled that would indicate a Stop Command has not been specified in the Config tab of the adapter settings See adapter managementAdapterManagement 5 A message will be displayed indicating the adapter was stopped or an appropriate error will be displayed if the adapter could not be stopped ReloadRestart Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the ReloadRestart button If the stop button is disabled that would indicate a Stop Command has not been specified in the Config tab of the adapter settings See adapter managementAdapterManagement 5 A message will be displayed indicating the adapter was started or an appropriate error will be displayed if the adapter could not be started Undeploy Adapter 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the Undeploy button 5 A message will be displayed indicating the adapter was undeployed or an appropriate error will be displayed if the adapter could not be undeployed View Adapter Logs 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to administer 3 Click on the icon in the rightmost column of the Edge on which you wish to administer the adapter 4 Click the button 5 The logs will be displayed in the textbox \"},{\"title\":\"Configuring Adapters\",\"href\":\"/2-console_administration/Adapters/AdapterConfiguration\",\"content\":\" Overview Once an adapter has been created in the ClearBlade Platform shell commands or scripts need to be specified on the Config tab within adapter settings so that the adapter can be correctly administered The currently supported commands are Deploy Command A command or shell script that will be run after the files are installed on a ClearBlade Edge Startup Command A command or shell script that will be executed to start the adapter on a ClearBlade Edge Stop Command A command or shell script that will be run to stop the adapter on a ClearBlade Edge Status Command A command or shell script that will be run to determine the status of the adapter on a specific ClearBlade Edge Undeploy Command A command or shell script that will be run to uninstall the adapter from a ClearBlade Edge Logs Command A command or shell script that will be used to retrieve any logs printed out by the adapter while it is Commands specified in the Config tab of the adapter settings dialog are executed from the directory where the Edge was started Any adapter configuration commands and shell scripts need to account for this The commands contained on the Config tab of the adapter settings dialog are described in this document Deploy Command When an adapter is deployed any files specified in the Files tab of the adapter settings dialog will be copied to the directory where ClearBlade Edge was started The deploy command therefore is optional In order to prevent naming collisions resulting in overwritten files it is recommended that an adapters files be copied to an adapter specific directory The files can be copied using either a shell command or a shell script If using a shell script to accomplish tasks needed for deployment the shell script must be included as one of the adapter files in the Files tab of the adapter settings A best practice would be to provide an archivezip file containing all the files required to execute and manage an adapter The deploy command would the simply be a shell command to extract the contents of the archive for example tar xvzf MyAdaptertargz C MyAdapter A sample shell script named deploysh is as follows binbash mkdir ShowTimeAdapter mv startsh ShowTimeAdapter mv stopsh ShowTimeAdapter mv statussh ShowTimeAdapter mv deploysh ShowTimeAdapter mv undeploysh ShowTimeAdapter mv showTime ShowTimeAdapter echo ShowTimeAdapter Deployed In the Config tab of the adapter settings dialog the deploy command specified to execute the deploysh shell script would be deploysh Startup Command After an adapter has been deployed it must be started on the Edge where it was deployed The Startup Command provides the mechanism that allows the ClearBlade Platform to start an adapter on ClearBlade Edge The startup command is a required command If a startup command is not specified on the Config tab of the adapter settings dialog the adapter would need to be manually started by connecting to the gateway device via ssh and issuing an appropriate start command If using a shell script to accomplish tasks needed for starting the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named startsh is as follows binbash nohup ShowTimeAdaptershowTime ShowTimeAdaptershowTimelog 21 In the Config tab of the adapter settings the startup command specified to execute the startsh shell script would be ShowTimeAdapterstartsh Note that the command takes into account the fact that the deploy script copied the startsh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Startup Command as nohup ShowTimeAdaptershowTime ShowTimeAdaptershowTimelog 21 Stop Command After an adapter is started there may be a need to stop it occasionally The Stop Command provides the mechanism that allows the ClearBlade Platform to stop an adapter running on ClearBlade Edge The stop command is an optional command If the Stop Command is not specified on the Config tab of the adapter settings dialog the adapter would need to be manually stopped by connecting to the gateway device via ssh and issuing an appropriate stop command The stop command will most likely be a command that kills the adapter process such as ps ef grep showTime grep v grep awk print 2 xargs kill If a more sophisticated shutdown of the adapter is needed shutdown logic can be incorporated into a shell script If using a shell script to accomplish tasks needed for stopping the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named stopsh is as follows binbash ps ef grep showTime grep v grep awk print 2 xargs kill In the Config tab of the adapter settings the stop command specified to execute the stopsh shell script would be ShowTimeAdapterstopsh Note that the command takes into account the fact that the deploy script copied the stopsh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Stop Command as ps ef grep showTime grep v grep awk print 2 xargs kill Status Command Various views and dialogs within the ClearBlade developers console display the status of the adapters Unfortunately it is not a trivial process to determine the status of the adapter The Status Command provides the mechanism that allows the ClearBlade Platform to determine the status of an adapter running on ClearBlade Edge Therefore a shell script that echoes the status of an adapter should be supplied The shell script should account for and echo the following values Deployed Running Stopped If the Status Command is not specified on the Config tab of the adapter settings dialog the views in the developers console that display the status of an adapter will not be able to reliably display the status of an adapter In these cases the status will most likely be displayed as No Status Available If using a shell script to accomplish tasks needed for stopping the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named statussh is as follows binbash If this script is executed we know the adapter has been deployed No need to test for for the undeployed status STATUSDeployed if ps ef grep showTime grep v grep then STATUSRunning else STATUSStopped fi echo STATUS In the Config tab of the adapter settings the status command specified to execute the statussh shell script would be ShowTimeAdapterstatussh Note that the command takes into account the fact that the deploy script copied the statussh file to a directory named ShowTimeAdapter Undeploy Command If an adapter is no longer needed the Undeploy Command can be used to remove the adapter files from the ClearBlade Edge The undeploy command is an optional command If the Undeploy Command is not specified on the Config tab of the adapter settings dialog the default behavior of the ClearBlade platform is to remove the adapter files from the directory where Edge is running The default undeploy behavior therefore would not delete any log files that were created or remove any files that were moved to adapter specific directories The undeply command will most likely be a command that deletes an adapter specific directory and any files contained within it such as rm rf ShowTimeAdapter If a more sophisticated undeploymentdeletion of the adapter is needed undeploy logic can be incorporated into a shell script If using a shell script to accomplish tasks needed for deletingundeploying the adapter the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named undeploysh is as follows binbash rm rf ShowTimeAdapter In the Config tab of the adapter settings the undeploy command specified to execute the undeploysh shell script would be ShowTimeAdapterundeploysh Note that the command takes into account the fact that the deploy script copied the undeploysh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Undeploy Command as rm rf ShowTimeAdapter Logs Command While an adapter is running it would be advantageous to be able to view any execution logs written by the adapter The Logs Command provides the mechanism that allows the ClearBlade Platform to retrieve the contents of log files from an adapter running on ClearBlade Edge The logs command is an optional command If the Logs Command is not specified on the Config tab of the adapter settings dialog any log files written by the adapter would need to be viewed manually via ssh or sftp The log command will most likely be a cat or tail command that displays the contents of a file such as cat ShowTimeAdaptershowTimelog In many cases the Logs Command will be directly dependent on the Startup Command piping output to a file unless the adapter is written in such a manner that it creates its own log files If more sophistication is needed to read log files the logic can be incorporated into a shell script If using a shell script to accomplish tasks needed for displaying log files the shell script must be included as one of the adapter files in the Files tab of the adapter settings A sample shell script named logsh is as follows binbash cat ShowTimeAdaptershowTimelog In the Config tab of the adapter settings the logs command specified to execute the logssh shell script would be ShowTimeAdapterlogssh Note that the command takes into account the fact that the deploy script copied the logssh file to a directory named ShowTimeAdapter Since the shell script only contains one line we easily could have specified the value of Logs Command as cat ShowTimeAdaptershowTimelog \"},{\"title\":\"Managing Adapters\",\"href\":\"/2-console_administration/Adapters/AdapterManagement\",\"content\":\" Overview Working with adapters is a straightforward process You can create update and delete adapters like any other object in a ClearBlade system Each Adapter consists of a name a small number of administrative commands and a small number of files comprising the administrative and executable assets of an adapter Create Adapter While it is not required it is assumed that any executable code and dependant libraries comprising an adapter have been created 1 Navigate to the Adapters tab in the developers console 2 Click New 3 Enter the name architecture and description for the adapter and click Submit Adapter names must be unique within a system The new adapter will now be displayed in the list of adapters defined within the selected system Update Adapter Updating an existing adapter is very easy When updating an adapter you can change the adapter architecture and description add modify and delete adapter files and modify the commands associated with the adapter Edit Adapter Properties 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Properties tab 4 Make the necessary changes to the Architecture and Description fields and click Save Edit Adapter Files See Adapter File ManagementFileManagement Edit Adapter Configuration For a description of the commands that can be configured on the adapter see Adapter ConfigurationAdapterConfiguration 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Config tab 4 Enter shell commands that should be executed for each of the associated fields Deploy Command A command or shell script that will be run after the files are installed on a ClearBlade Edge Startup Command A command or shell script that will be executed to start the adapter on a ClearBlade Edge Stop Command A command or shell script that will be run to stop the adapter on a ClearBlade Edge Status Command A command or shell script that will be run to determine the status of the adapter on a specific ClearBlade Edge Undeploy Command A command or shell script that will be run to uninstall the adapter from a ClearBlade Edge Logs Command A command or shell script that will be used to retrieve any logs printed out by the adapter while it is executing 5 Select the updated file and click Open 6 Click Save Delete Adapter Deleting an adapter is also very simple Follow steps 12 above and then click on the Trash CanstaticimgTrashCanpng icon Tap Confirm in the dialog that appears You must UNDEPLOY the adapter from all Edges prior to deleting it Deploy Adapter In order to be able to manage and administrate adapters using the ClearBlade Platform developers console the adapter must be deployed to a gateway device running the ClearBlade Edge 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to deploy 3 Select the checkbox or select multiple checkboxes of the Edge you wish to deploy the adapter to 4 Click the Deploy to Selected Edges button 5 A message indicating whether or not the adapter was deployed will be displayed Once an adapter is deployed you will need to startAdapterAdministration the adapter It will not be automatically started Undeploy Adapter There are two methods that can be utilized to undeploy an adapter from an Edge To undeploy an adapter from a single Edge see startAdapterAdministration To undeploy an adapter from 1 or more Edges 1 Navigate to the Adapters tab in the developers console 2 Click on the name of the adapter you wish to undeploy 3 Select the checkbox or select multiple checkboxes of the Edge you wish to undeploy the adapter from 4 Click the Delete from Selected Edges button 5 A message indicating whether or not the adapter was undeployed will be displayed Start Adapter startAdapterAdministration Stop Adapter startAdapterAdministration ReloadRestart Adapter startAdapterAdministration\"},{\"title\":\"Adapter File Management\",\"href\":\"/2-console_administration/Adapters/FileManagement\",\"content\":\" Overview Adapters will typically consist of 1 or more files The files comprising an adapter will consist of executable code and supporting libraries as well as shell scripts used to administer adapters While the developers console provides the ability to add multiple files to an adapter a suggested best practice would be to include all files within a single archivezip file and add a single zip file to the adapter Add New Adapter Files 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Files tab 4 Click the Add File link 5 Select one or more files to add and click Open 6 Click Save Delete Adapter Files 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Files tab 4 Click the Trash CanstaticimgTrashCanpng icon to the right of one of the files There is no confirmation dialog displayed when a file is deleted 5 A message will be displayed indicating that the file was deleted Update Adapter Files 1 Navigate to the Adapters tab in the developers console 2 Click on the icon 3 Click the Files tab 4 Click the File UploadstaticimgadaptersAdaptersAdapterFileUploadpng icon to the right of one of the files 5 Select the updated file and click Open 6 Click Save \"},{\"title\":\"Adapters\",\"href\":\"/2-console_administration/Adapters/_default\",\"content\":\"\"},{\"title\":\"Analytics\",\"href\":\"/2-console_administration/Analytics\",\"content\":\"The Analytics tab on each system is used to display the actions of users on that particular system Scope The scope component is a part of every analytics query It has a special shape well outline here Platform scope is the largest scope It covers every resource contained by a platform instance regardless of the developer The section looks like platformadminEmailHere The second largest scope is the Organization Scope When a developer registers they provide an organization they work with This scope uses that information to find every developer and their resources associated with that organization organizationorgName The Developer scope is the next largest scope Using it focuses the analytics reporting to systems owned by that developer developerdeveloperID generally look something like aabfe1d20aeedaeae1cf9dc7a4a301 That ID can be acquired by calling adminuserinfo on a logged in developer The last is the system level which is the smallest scope A system is a grouping of collections roles users an MQTT namespace and code services systemSystemKey Storage This endpoint is somewhat unique amongst the endpoints in that it doesnt apply to all requests and isnt time series It allows the developer to request the size of existing collections Note that Connect collections are not included Endpoint apiv2analyticsstorage query scopeplatformplatform email Count The count endpoint returns a count of items in currently in collections Endpoint apiv2analyticscount query scopesystemd29bf3be0ac0d3faa1eebbedc6c401 filterloginlogout the query is composed of the actions listed in the About page Event Totals The totals of events for a given period of time Endpoint apiv2analyticseventtotals query scopeorganizationClearBlade filter modulemessaging the module being requested The choices are messaging codedatapush if available message history users id mycollection the name of the resource putting implies all resources actionconnection from the list of actions mentioned in about interval500 the interval you want the data to be grouped into in seconds limit20 the total number of event points you want to collect this keeps the queries from being too large range start1439574288 the start date in epoch time end1439575288 the end date in epoch time List of Events The list of events for the duration It uses the same filter object as event totals Endpoint apiv2analyticseventlist query scopedevelopere8c2eacb0a8ca68a8d859780b82c filter modulecode id actionexecute interval5000 limit2000 rangestart1439574288end1439584288 User Events A list of events delineated per user Endpoint apiv2analyticsuserevents query scopesystemd29bf3be0ac0d3faa1eebbedc6c401 filter userse8c2eacb0a8ca68a8d859780b82c an array of userids moduledataas with the events object idfe96a6c00ab8c8aef7e88cb2f051 here a collection id actiondelete as with events rangestart1439574288end1439584288as with events limit2345 see events \"},{\"title\":\"Override User Authentication\",\"href\":\"/2-console_administration/AuthOverride\",\"content\":\" Overview This feature allows a developer to override the default authentication mechanism for users with a custom one using a Code Service When a user uses the apiv1userauth endpoint for authentication his credentials will be sent to a admin defined Code Service for further processing and authentication Usage You must return a JSON with the following structure javascript authTokenAUTHTOKEN userid the value for can be left as empty string Setup Code Service for User Authentication Go to the Code tab and create a new Code Service This service will get executed when a user call the apiv1userauth endpoint over REST Go to the service settings and in the Requires tab enter clearblade as the dependency Then in the Security tab make sure the service is executable by an Anonymous user Enter the following code and hit Save javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret email reqparamsemail password reqparamspassword callback functionerr body iferr resperrorinitialization error JSONstringifybody else bodyoptions respsuccessbody This service will take the users credentials ie email and password and authenticate the user You can add password restrictions before the init call or give your own options in the bodyoptions JSON object which will be received by the user upon successful authentication Setting up Authentication Override Go into your System Settings and click the Access tab Enter the name of the authentication Code Service that you just created and hit Save Auth Overridestaticimgauthoverridepng User Authentication The user can then use any of our SDKs to authenticate with the ClearBlade Platform and the authentication Code Service will be executed instead of the default authentication logic\"},{\"title\":\"Code Services\",\"href\":\"/2-console_administration/Code/Creating\",\"content\":\" Creating a new Code Service Click New from the System nav bar to open the Create New Service modal New Code ServicestaticimgconsoleoverviewnewCodeServicepng Give the code service a one word name for the system to refer to Select Service from the Type dropdown Add Code ServicestaticimgconsoleoverviewaddCodeServicepng To execute the Code Service with the same permissions as the developer creating it leave in the Run As textbox To run with limited permissions create a new user or choose an existing user and associate that user with the appropriate roles See the Permissions section for more information To allow passing Request parameters to the executing function select Add Parameter and enter a name to refer to the parameter by The key will be associated with a value and passed in later when the service is called\"},{\"title\":\"Debugging\",\"href\":\"/2-console_administration/Code/Debugging\",\"content\":\"To debug your code service ClearBlade provides as simple but flexible logging facility There are three steps involved When you create your code service you can enable logging for that code service by selecting Yes to the Logging enabled option buttom in the lower left corner of the dialog box Turn On LoggingstaticimgTurnOnLoggingpng When you createedit your code service you can embed log calls in strategic places to monitor exection progress Added Code LogsstaticimgAddedLogspng You can then runtest the code service After the service executes click on the ListstaticimgListIconpng icon You should see this Empty LogstaticimgEmptyDebugLogpng Click in the box just below Debug Logs You will see a list of logs with a date Select the top most recent one This shows all of the logs for the last run of the service Debug LogstaticimgDebugLogpng Note For each service the platform keeps the most recent 20 execution logs Finally when you have finished you debugging and your service is working perfectly You can turn off logging by selecting the CogstaticimgCogpng icon and selecting No for Logging enabled Note that you do not have to remove the logs from the code They just become noop statements\"},{\"title\":\"Community\",\"href\":\"/2-console_administration/Code/Libraries/Community\",\"content\":\"\"},{\"title\":\"Creating Custom Libaries\",\"href\":\"/2-console_administration/Code/Libraries/Creating\",\"content\":\" Libraries Libraries are code that you wish to share between Code Services A library should be structured like a service in the sense that it is a function one calls Most likely something that returns an object with methods When a library is added to a service nothing from that library is instantiated You can treat it like regular JavaScript\"},{\"title\":\"Requires\",\"href\":\"/2-console_administration/Code/Libraries/Requires\",\"content\":\"\"},{\"title\":\"Libraries\",\"href\":\"/2-console_administration/Code/Libraries/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/2-console_administration/Code/Libraries/overview\",\"content\":\"Quickly create reusable logic using libraries Click here for more background To create a New Service 1 Navigate to the Code menu tab 2 Click the New code icon in the top left 3 Enter a name for your library 4 Select to create a Library 5 Click Finish ClearBlade OverviewstaticimgconsoleoverviewnewLibConsolepng Next steps Each library is required from a service itself Using the requires capability you can order the require loading process and bring in libraries only as you need them\"},{\"title\":\"LocalDev\",\"href\":\"/2-console_administration/Code/LocalDev\",\"content\":\"\"},{\"title\":\"Permissions\",\"href\":\"/2-console_administration/Code/Permissions\",\"content\":\"Code permissions are simple on the surface and complex internally At the most basic level one assigns the ability to execute a service to a role and then assigns that role to a user However there are situations where it is beneficial to allow a user to call a code service that executes as another user For example if one wants to have custom filtering done to data before it is added to a table but do not want to allow any old user access to that table it would be beneficial to create a role that has access to that table and then assign it to a single user It should be noted that the Collections user should also have a role with permissions to execute the code service Another thing to remember is that when a service is executed unless it is executed in another users context as noted above that the service mechanism is designed to have all calls made by that service to the platform made in the context of that user The developer is able to login manually as another user and perform calls but this adds unnecessary overhead to the service\"},{\"title\":\"Samples\",\"href\":\"/2-console_administration/Code/Samples\",\"content\":\"\"},{\"title\":\"Code\",\"href\":\"/2-console_administration/Code/_default\",\"content\":\"\"},{\"title\":\"Connections\",\"href\":\"/2-console_administration/Data/Connections\",\"content\":\" Connections Collections come in two flavors There is the standard collection which is backed by a Postgresql instance that comes with the ClearBlade platform These collections are able to be completely manipulated by the platform in terms of their schema and the data put into them The second flavor of collection is the Connect collection The Connect Collection allows the platform developer to integrate already existing data sets with their platform application Since this data already exists the platform disallows altering of the schema adding or deleting columns etc via the platform though you are totally free to update it via normal means the platform will adapt However the platform is able to perform all CRUD operations on the databases exposed As far as security is concerned they will be treated as any other collection Please see the Integrations section for more specific information Adding new data source From the developer landing page or the system navbar select the Data button Landing PagestaticimgconsoleoverviewDataButtonpng Connecting to existing data source Select the Connection radio button at the top of the Add Collection or Connection modal Enter the following information that corresponds to your existing database settings Ask your database administrator if you arent sure Connection Name string Database select option from dropdown menu Currently supported database types are MySQL PostgreSQL Oracle DB2 System i Microsoft SQL Server Database Name string IP Address string Port integer Username string Password string Table Name string After verifying the above information click Submit Creating a new cloud collection Select the Cloud radio button at the top of the Add Collection or Connection modal Enter a name that will be used to refer to the cloud collection and click Submit\"},{\"title\":\"Debugging\",\"href\":\"/2-console_administration/Data/Debugging\",\"content\":\"\"},{\"title\":\"Editing\",\"href\":\"/2-console_administration/Data/Editing\",\"content\":\" The following applies to Cloud Collections ONLY Select an existing Cloud Collection from the sliding side bar to manage Select Data CollectionstaticimgconsoleoverviewselectDataCollectionpng Adding a new column Select Column above the table display Add Data ColumnstaticimgconsoleoverviewaddDataColumnpng Enter a one word column name and select the corresponding data type from the dropdown Verify the information and click Submit Hiding an existing column Click the arrow to the right of the column name that is to be hidden Hide Data ColumnstaticimgconsoleoverviewhideDataColumnpng Hiding a column will not delete the data To restore the column to the view refresh the page Select Hide Column from the dropdown and then click Submit on the modal that appears Remove an existing column WARNING Data will be permanently deleted Click the arrow to the right of the column name that is to be deleted Remove Data ColumnstaticimgconsoleoverviewremoveDataColumnpng Select Delete Column from the dropdown and then click Submit on the modal that appears Add a new data row Select Row above the table display Add Data RowstaticimgconsoleoverviewaddDataRowpng A new row will be created with a unique itemid To enter data into the row click the cell corresponding to the row and column Remove an existing data row WARNING Data will be permanently deleted Click the checkmark icon to the left of the row that is to be deleted Select Row above the table display Remove Data RowstaticimgconsoleoverviewremoveDataRowpng\"},{\"title\":\"ImportExport\",\"href\":\"/2-console_administration/Data/ImportExport\",\"content\":\"\"},{\"title\":\"Permissions\",\"href\":\"/2-console_administration/Data/Permissions\",\"content\":\"Permissions for data are fairly straightforward They correspond to regular Create Read Update Delete operations on a table As with the rest of the platform the permissions themselves are applied to roles and the role is applied to the user Managing permissions Permissions are managed through the settings modal on the Collection Click the gear icon to open the settings modal Add Permissions to CollectionstaticimgconsoleoverviewaddNewDataPermissionpng Select the Security Tab on the modal The Security tab displays a list of the roles that are associated with the Collection and what actions each role is allowed By default roles are not allowed to perform any actions on a Collection To associate a new role click Role above the list of roles Begin typing to select the label of an existing role As an example we have typed Administrator and selected it from the list of options Allow the selected role to Create Read Update and Delete items from the Collection by checking the appropriate checkboxes\"},{\"title\":\"Data\",\"href\":\"/2-console_administration/Data/_default\",\"content\":\"\"},{\"title\":\"Messaging\",\"href\":\"/2-console_administration/Messaging\",\"content\":\" Message History Message history is stored by ClearBlade for analytical purposes It allows the platform developer to replay certain messaging transactions The endpoint is as follows GET apiv1messagesystemKey Arguments count a count of how many messages you want returned topic a specific topic you require last The time of the most recent message we are going backwards in epoch time \"},{\"title\":\"Console Overview\",\"href\":\"/2-console_administration/Overview\",\"content\":\"The console is the developers web interface into the ClearBlade platform From the console you can create and configure systems users code services data collections triggers and timers You can also perform various operations related to analytics and inspect MQTT messaging history This section is a brief reference showing you how to use the console For real world examples see our tutorials\"},{\"title\":\"Override User Registration\",\"href\":\"/2-console_administration/RegOverride\",\"content\":\" Overview This feature allows a developer to override the default registration mechanism for users with a custom one using a Code Service When a user uses the apiv1userreg endpoint for registration the registration data will be sent to a admin defined Code Service for further processing and registration Setup Code Service for User Registration Go to the Code tab and create a new Code Service This service will get executed when a user call the apiv1userreg endpoint over REST Go to the service settings and in the Requires tab enter clearblade as the dependency Then in the Security tab make sure the service is executable by an Anonymous user Enter the following code and hit Save javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret email reqparamsemail password reqparamspassword registerUser true callback functionerr body iferr resperrorinitialization error JSONstringifybody else bodyoptions respsuccessbody This service will take the users credentials ie email and password and register the user You can add password restrictions before the init call or give your own options in the bodyoptions JSON object which will be received by the user upon successful registration Setting up Authentication Override Go into your System Settings and click the Access tab Enter the name of the registration Code Service that you just created and hit Save Reg Overridestaticimgregoverridepng User Registration The user can then use any of our SDKs to register with the ClearBlade Platform and the registration Code Service will be executed instead of the default registration logic\"},{\"title\":\"Using Timers\",\"href\":\"/2-console_administration/Timers\",\"content\":\"Timers are very simple to create update and delete Lets give it a go For our example well deal with a common use case within the ClearBlade platform Polling an external internet site for information on a regular basis Specifically lets pretend were polling a weather service such as NOAA for the daily weather report in your area For the sake of this example we wont actually write the code to do that Just assume we have a ClearBlade code service called myWeatherForcast that can download weather forcasts for your area Creating a Timer The first thing you need to do is in the Code section of your application find and select the myWeatherForcast code service Once youve done that locate and click on the Cog IconstaticimgCogpng icon and select the Timers tab You should see a window like this Add TimerstaticimgAddTimerpng Now set Logging enabled to Yes This simplifies the debugging process Once youve finished debugging the timer you can disable logging Now click on Add Timer You should now see this Create TimerstaticimgCreateTimerpng Now follow the following steps 1 In the Name text box give the timer a name It must be unique within your system You can also optionally enter a description 2 Well run our timer for a year so enter 365 in the Repetitions text box 3 In the Frequency text box enter 1 In the Frequency pulldown menu select Days 4 Tap in the box next to Start Time and select tomorrows date In the time boxes below enter 12 00 AM Now your window should look something like this the date will obviously be different Almost Done TimerstaticimgReadyTimerpng Tap on Apply The timer is now ready to run Note Youll want to debug your code service first to make sure it works Otherwise you have to wait until the first scheduled time to know if your code is correct Updating a Timer Suppose we love this timer so much that we want to run it forever You can accomplish this by following these steps 1 Locate and select the myWeatherForcast code service in your application 2 Click on the CogstaticimgCogpng icon and select the Timers tab 3 Locate the timer you created above 4 Either make the Repetitions textbox blank or set it to 1 5 Table the Apply button and tap the Confirm button in the popup dialog Deleting a Timer Normally you dont have to delete a timer They delete themselves when they expire However if you have a timer that runs for a long time or forever you might want to get rid of it at some point To delete a timer follow steps 13 in the Updating a Timer section above Next find and tap the Trash CanstaticimgTrashCanpng icon Next tap the Confirm button in the pop up dialog\"},{\"title\":\"Using Triggers\",\"href\":\"/2-console_administration/Triggers\",\"content\":\" Overview Working with triggers is very simple You can create update and delete triggers just like any other object in the ClearBlade system Each trigger consists of a name an event to handle with or without filters and a code service to be executed when the trigger fires This section shows you how to triggers are created and manipulated from the ClearBlade console Create Trigger The first step in creating a trigger is to create your code service that will be executed In this example well create a trigger for the DataItemCreated event for items created in any collection To do this go to your systemapplication and click the Code tab Next enter the javascript for your service as explained in the Code section of the documentation Call the service myCodeService When you have finished entering the javascript click on this icon CogstaticimgCogpng in the upperright portion of the screen A dialog will pop up with a set of tabs on top Select Triggers Your screen should look something like this Trigger DialogstaticimgCreateTriggerpng Click on Add Trigger In the dialog that appears enter anyItemCreated in the Name field In the Source pulldown menu select Data When you do this and Action dropdown menu will appear Click on that and select ItemCreated One more dropdown will appear titled Collection Leave that blank At this point the dialog should look like this Ready To CreatestaticimgReadyToCreateTriggerpng Now go ahead and click the Apply button Your trigger has been created and is immediately active Any future items that are created will cause myCodeServce to be executed Update Trigger Updating an existing trigger is very easy The only thing you can update for an existing trigger are its filters the things specific to the actual triggerevent itself For example in the trigger we created above we can only update the collection associated with the trigger To do that do the following 1 Navigate to the myCodeService service 2 Click on the CogstaticimgCogpng icon and select the Triggers tab 3 Find the anyItemCreated trigger and select any collection assuming you have at least one collection in your application The anyItemCreated trigger will now only fire when an item is created in that collection Delete Trigger Deleting a trigger is also very simple Follow steps 13 above and then click on the Trash CanstaticimgTrashCanpng icon Tap Confirm in the dialog that appears Note that deleting a trigger does not delete the code service associated with that trigger\"},{\"title\":\"Managing System Users\",\"href\":\"/2-console_administration/Users\",\"content\":\" Creating Users Creating users for your system is a simple process First select the Auth tab for your system You should see something like the following Auth ScreenstaticimgAuthScreenpng click on User In the dialog that appears enter a valid email address eg myUsermyDomaincom a password and a password confirmation Tap on Register New User You should see a new row in the users table that looks something like this New UserstaticimgUserAddedpng Each newly created user is assigned one role by default Authenticated You can change the roles to which the user is assigned by clicking on ViewEdit for that user Doing so brings up a dialog that looks something like this ViewEdit UserstaticimgViewEditUserpng This dialog shows that myUser is assigned the Authenticated role To unassign that role click on the x To assign more roles click on the Add Roles popdown menu and choose from any of the existing roles and tap on Add Role You may do this repeatedly When you are finished Tap on the Close button Note that you cannot create roles from this dialog You can only assign andor unassign existing roles See Creating Roles below for instructions on creating roles Creating Developers The process for creating developers is different from creating regular users With the ClearBlade platform a new developer first receives a registration key and then signs up using that key Here is how it is done using the console 1 The developer goes to the main ClearBlade page for his or her installation The page should look something like this Main PagestaticimgMainPagepng Click on Sign Up on the upperright portion of the page You will be presented with the following form Sign UpstaticimgSignUppng Enter valid information for every field in the form and click on the Register button Youre now an official ClearBlade developer The first thing youll want to do is Link to creating a system Creating Roles ClearBlade uses a rollsbased permissions model Roles are created and permissions are assigned to them Those permissions correspond to operations on various resources Note that users may have multiple roles So if a user has a role that has certain permissions and has another role that doesnt the user will have the permissions even though one of their roles doesnt specify them Roles can be managed from many different places in the console but we will focus here on the roles management process under the Auth tab First we need to go to the appropriate screen First select the Auth tab on the system you are working on Next click on the Nav BarstaticimgNavBarpng icon in the upper left of the screen and select Roles in the navigation bar The following page will appear Roles PagestaticimgRolesPagepng The contents of this page deserve explanation Each row corresponds to a role in the system Each system has three predefined roles Authenticated Anonymous and Administrator When you click on Edit within a cell in the table the action is determined by the column in which the cell is contained as follows Collections You can select a specific collection and set create read update andor delete permissions for that role on that collection Services You can select a specific service and specify whether the role has execute permission Users Here you specify what permissions CRUD the role has on the entire users table Message History Here you specify the CRUD permissions the role has on the message history Push This specifies whether or not the role can use the push messaging system\"},{\"title\":\"Console\",\"href\":\"/2-console_administration/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/3-edge/Overview/_default\",\"content\":\"\"},{\"title\":\"Capabilities\",\"href\":\"/3-edge/Overview/capabilities\",\"content\":\"ClearBlade EDGE allows for easily connecting local wireless networks of many different protocols into a larger IoT solution The EDGE is capable of authenticating devices executing APIs communicating with all types of devices and then synchronizing that information back into the cloud or server based ClearBlade Platform Core Function Strong edge security Encryption authentication and authorization of API access including tokens and certificates Sync and state management Both user and device states are synced with IoT systems as devices go on and offline Offline Continuity Devices continue real time behaviors and 100 up time even when connection to the Internet is lost Strong integration capabilities Connectivity via MQTT REST and sockets along with prebuilt patterns for BLE Zigbee MQTTsn and more Data filtering and streaming Store modify analyze manage and route data at the edge Business rules and events Implement business rules trigger and react to events and analyze results via business logic locally Messaging Scalable secure brokering of messages between devices and users at the edge Deployment flexibility ClearBlade EDGE can be deployed onto any gateway device Features The Edge allows for running your IoT solution on gateway devices and keeping assets in sync The Edge supports offlinedisconnected states for ensuring local IoT environments maintain functionality The Edge provides multiple configurations for maintaining security of devices and data moving to the cloud The Edge provides cloud based authoring of IoT Solutions The Edge provides real time OTA updates of IoT Solution software configuration data The Edge provides real time syncing of device states to the ClearBlade cloud\"},{\"title\":\"Architecture\",\"href\":\"/3-edge/Overview/edgearchitecture\",\"content\":\"The Edge allows for gateway devices to perform full stack function include data storage logic execution message brokering and device and user management The Edge automatically handles the synchronzation of device and user information back to the ClearBlade Platform Each System is comprised of many assets including collections services libraries triggers timers edge roles users devices Central System is a subset of system assets that run and execute on ClearBlade typically in the cloud It behaves as the controllerbroker of system communications Edge System A defined set of assets that run on a gateway device Example system and how assets are deployed System Central Edge1 Edge2 Edge3 Settings YES YES YES YES Collection1 YES NO NO NO Collection2 NO YES NO NO Collection3 NO YES YES NO Service1 YES NO NO NO Service2 YES YES YES YES Service3 NO YES YES YES Trigger1 YES YES YES YES Trigger2 YES NO NO NO Trigger3 NO YES YES NO Edge1 YES YES NO NO Edge2 YES NO YES NO Edge3 YES NO NO YES Role1 YES YES YES YES Role2 YES YES YES YES Role3 YES YES YES YES User1 YES YES YES YES User2 YES YES YES YES User3 YES YES YES YES Device1 YES YES YES YES Device2 YES YES YES YES Device3 YES YES YES YES Relationships A system has only 1 central system and many edges System 1 1 Central 1 Edge An edge system can only be deployed on 1 gateway current limitation Edge 11 Gateways\"},{\"title\":\"Lifecycle\",\"href\":\"/3-edge/Overview/lifecycle\",\"content\":\" Provisioning The following steps are used to create a new edge instance Create a System within a ClearBlade Platform instance In the newly created System create an Edge Assign the Edge an access key Install the Edge Raspberry Pi image Use the help to start the edge that points to Instance url System key Edge key Edge Startup The following lifecycle occurs once the edge has successfully started and opened a connection to the base control system on a ClearBlade instance 1 Edge updates the base control system with connection details related to internal IP Addresses and ports 2 Edge requests all of the latest information regarding its system schema including Data structures Services libraries Roles User table schema Device table schema Edge requests users data and updates the edge user table Edge requests the device data and updates the edge device table 3 Edge attempts to maintain an open connection with the base control system to keep users and devices in sync Offline Events The edge offers a disconnected mode while running without an active IP connection but Edge must start with an IP connection While offline all Edge based services data collections users roles devices triggers and timers are able to interact with each other An online event results in the Edge triggering its online sync requirements to update to the latest system schema and user device information with the base control system Reconnect Conflict Resolution During offline events it is possible that the Edge will have a different state than the base control system Resolution of state conflicts fall under two types 1 System Schema Edges will always default to the instance definition of the schema 2 User and Devices Users and devices will be reconciled according to their last modified date on the base control system Edge Persistence Edges have the ability to persist across restarts or work in a cacheonly mode When starting with the local flag the edge will only keep a local cache of all collection information When the Edge is restarted any information in the edge that is not stored in the base control system instance is lost Edge Data Constraints By default the ClearBlade platform can grow infinitely to store analytics events logs and histories This poses a risk to gateway devices that have limited resources and run for long periods of time The Edge offers a lean mode which is ideal for long running Edge instances Running Edge in lean mode results in the following 1 Analytics information is not stored 2 Logs are not persisted 3 Histories are taken off of queues when they are read\"},{\"title\":\"Reference\",\"href\":\"/3-edge/Reference/_default\",\"content\":\"\"},{\"title\":\"Edge Flags\",\"href\":\"/3-edge/Reference/flags\",\"content\":\"Updated 315rc1 brokertcpport string brokers tcp port default 1883 brokertlsport string brokers tls port default 1884 brokerwsport string brokers websocket port default 8903 brokerwssport string brokers secure websocket port default 8904 codeexecutiontimeout int How many seconds to wait before stopping a long running code service default 600 db string postgressqlite default postgres dbhost string address of database default 127001 dbpass string password of the database role default dbport string port of db default 5432 dbuser string database role to use default cbuser disablepprof boolean Disables pprof output file creation and pprof webserver creation default false edgecookie string the cookie for the edges session serves as a shared secret will be replaced soon by better ingress edgeid string the edges id edgeip string the edges ip default localhost edgelistenport string the port the edge is to listen on default 9000 edgeprivateip string the edges ip default localhost expiration int The duration of time before the system should expire a token in seconds expiretokens set to invalidate user tokens issued more than the systems tokenTTL defaults to 5 days Dev tokens will not be removed default true insecureauth DEVELOPMENTONLY tells platform to skip encryption for passwords leanmode For the edge should we store all the server side stuff local run using corecaching or the db default is db log Specifies amount of logging loglevel string raise minimum loglevel debuginfowarnerrorfatal default info logfile string file we should point the logs at stderr means stderr stdout means stdout default stdout mqttauthport string mqtt auth port default 8905 mqttwsauthport string mqtt webosocket auth port default 8907 mysqlconnections int Max of connections to MySQL to open per collection default 5 parentsystem string the parent system of the edge platformip string the ip address of the platform without port platformport string port that platform message broker is listening on default 1883 pprofcpuinterval integer The length of time in minutes to wait between creating successive pprof cpu profiles default 20 pprofcputime integer The length of time in minutes to gather pprof cpu profiling data default 20 pprofmeminterval integer The length of time in minutes to wait between creating successive pprof heap profiles default 5 pprofmaxfiles integer The maximum number of cpu heap and debug profiles to retain 0 indicates keep all of them default 30 pprofmaxfileage integer The maximum amount of time specified in minutes in which to retain cpu heap and debug profile data files default 1440 registrationkey string key to require when creating a new developer account rpctimeout int timeout value for rpc calls to platform default 15 sqlitepath string sqlite3 db for platform data default clearbladedb sqlitepathusers string sqlite3 db for user data default clearbladeusersdb storeanalytics Should we store analytics or just drop them default true storelogs Should we store code service logs or just drop them default true storemessagehistory Should we store mqtt message history default true synctransport string Set the type of transport between edge and platform when syncing Default is mqtt Other options are amqp tcp and stub default mqtt timeprofile int Enables time profiling of HTTP requests in ms default 1\"},{\"title\":\"Raspberry Pi Installation\",\"href\":\"/3-edge/Reference/installation\",\"content\":\"The ClearBlade Edge can be installed on a Raspberry Pi 2 or 3 First download the ClearBlade Raspberry Pi image To install insert the Pis memory card into the computer and follow the instructions for your operating system MAC 1 Open Disk Utility 2 Determine which disk is your memory card and take note of its disk number diskn 3 Unmount partition so that you will be allowed to overwrite the disk 4 From terminal run the command sudo dd bs1m ifpathofyourimageimg ofdevrdiskn Replace n with the number you noted previously USE CAUTION SELECTING DISK This may take around 30 min 5 Once complete properly edge the memory card and insert into Raspberry Pi 6 The Clearblade Edge is now installed on your Raspberry Pi LINUX 1 Run df h to determine where your memory card is currently located Should appear along the lines of devmemcard1 2 Unmount the partition using the command unmount devmemcard1 Replace memcard1 with proper card name 3 From terminal run the command sudo dd bs1m ifpathofyourimageimg ofdevmemcard Replace memcard with proper card name without the last number USE CAUTION SELECTING MEMORY CARD LOCATION This may take around 30 min 4 Once complete properly edge the memory card and insert into Raspberry Pi 5 The Clearblade Edge is now installed on your Raspberry Pi WINDOWS 1 Determine the drive letter assigned to the memory card when inserted 2 Download Win32DiskImagerhttpsourceforgenetprojectswin32diskimager extract rightclick and Run as administrator 3 Select the image file you downloaded earlier and select memory cards drive 4 Click Write and wait for write to complete This may take a while 5 Once complete properly edge the memory card and insert into Raspberry Pi 6 The Clearblade Edge is now installed on your Raspberry Pi\"},{\"title\":\"Lean Mode\",\"href\":\"/3-edge/Reference/lean\",\"content\":\" Description Lean mode is a mode of running the ClearBlade edge on an edge device with minimal disk storage It eliminates a lot of heavy server side stuff like analytics Specifically it disables the following ClearBlade platform features 1 Analytics no analytics info is written to the database 2 Code Logs There are no saved code logs 3 Message History There is no saved messages history Lean mode is independent of local you can be in lean mode writing to the cache or the database Instructions When running the edge use the leanmodetrue flag The default is false\"},{\"title\":\"Raspberry Pi Setup\",\"href\":\"/3-edge/Reference/setup\",\"content\":\" EDGE Settings By default the edge will be launched when the Raspberry Pi is powered up To change the edges startup flags run the command on the Pi sudo nano etcsupervisorsupervisordconf Proceed to change the flags at the bottom on the configuration file Exit save and run sudo shutdown r now to complete setup Raspberry Pi Network Settings A network connection can be setup by simply connecting an ethernet cord or running the following commands to connect to a wireless network sudo nano etcwpasupplicantwpasupplicantconf Set SSID and PASSWORD to your desired network settings Exit and save the changes Restart the Raspberry sudo shutdown r now\"},{\"title\":\"Edge Tutorial\",\"href\":\"/3-edge/Reference/tutorials\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform STEP 1 Create an Edge 1 On your ClearBlade Platform Click on the New button which is highlighted below 2 Give a name to your edge with a suitable description and click on Generate button to generate a token 3 Finally click on the Create button to create the edge 4 Once you click on the Create button Show Edges button will appear on your System 5 You can click on the Show Edges button to view the list of Edges that you have created 6 Once you click on the Show Edges button you will see the Edges that you have created on your system 7 You can view the settings for an edge by clicking on the Settings icon button to the right of a particular Edge 8 You can view these important settings for your Edge 9 This concludes STEP 1 of Creating a new Edge and viewing important settings about the newly created Edge This information will be used in subsequent steps STEP 2 Install an Edge 1 If your Edges are not currently displayed click on the Show Edges button 2 Click on the Settings icon button for the Edge that was created in the previous step 3 Click on the Config tab within the settings dialog 4 Select the operating system the Edge will be installed on from the Target dropdown If the target operating system you wish to install the edge on is not listed we recommend you install VirtualBoxhttpswwwvirtualboxorgwikiDownloads or any other virtualizer and create a virtual machine with one of the target operating systems listed in the dropdown 5 Once the operating system has been selected commands will be displayed that can be used to download unzip install and modify permissions for an edge installation 6 Open a terminal prompt on the target operating system and download the Edge executable using the Download command listed ex curl sSL O L httpsgithubcomClearBladeEdgereleasesdownload320edgelinuxamd64targz For your convenience you can also click the Copy icon to have the command copied to your clipboard 7 From the terminal prompt on the target operating system unzip the Edge executable using the Unzip command listed ex tar xzvf edgelinuxamd64targz For your convenience you can also click the Copy icon to have the command copied to your clipboard 8 From the terminal prompt on the target operating system install the Edge executable using the Install command listed ex sudo ln f edge320 usrlocalbinedge For your convenience you can also click the Copy icon to have the command copied to your clipboard 9 From the terminal prompt on the target operating system modify the permissions of the Edge executable using the Permission command listed ex sudo chmod x usrlocalbinedge For your convenience you can also click the Copy icon to have the command copied to your clipboard STEP 3 Connect an Edge 1 If your Edges are not currently displayed click on the Show Edges button 2 Click on the Settings icon button for the Edge that was created in the previous step 3 Click on the Config tab within the settings dialog 4 Scroll to the bottom of the Config tab within the settings dialog until the Generate Startup Command section is displayed 5 Enter the IP address of the machine the Edge was installed on into the Edge IP field 6 Click the Copy icon to the far right of the Start script field to have the Edge startup command copied to the clipboard 7 From the terminal prompt cd into the directory where Edge was installed typically usrlocalbin on Mac OS and Linux cd usrlocalbin 7 Paste the startup command into the terminal window and run it javascript user edge parentsystem noviip edgeip edgeid edgecookie local Flags A complete listing of the flags that can be used when starting the Edge can be found hereflags 1 parentsystem The System Key for parent system on which Edge is created 2 noviip The IP addressHostname of your ClearBlade Platform Without Http or Https 3 edgeip The IP addressHostname of your Edge Without Http or Https 4 edgecookie Click on the Show Edges button for the appropriate System and view the settings for an edge by clicking on the Settings icon button The edgecookie is the Token represented in the Settings window below 5 edgeid Click on the Show Edges button for the appropriate System and view the settings for an edge by clicking on the Settings icon button The edgeid is the System Name represented in the Settings window below STEP 4 Add Customize Devices Add Devices 1 Click on the Auth button to navigate to the Auth section of your System 2 Click on the highlighted Menu button to view the different Auth tables 3 Once you click on the Menu button you can see that you can create 4 types of Auth tables Users Devices Edges Roles 4 Click on the Devices item from the Menu as highlighted above 5 You can add a new Device by clicking on the Device button as highlighted below 6 Select your preferences and click on the Create button Name TemperatureSensor Type Home Temperature Sensor State Blank EnabledYES Allow Key AuthorizationYES Allow Certificate AuthorizationYES 7 You will see a newly created device as above Additional Functionality Update Device State 8 Device state is an important column of the newly created device It represents the current state of the device and it accepts String values 9 In the case of the Temperature Sensor device you can change the state by doubleclicking the state column in this row 10 Lets assume the temperature state be in units of Fahrenheit You can set the Temperature Sensor state to be 100 Fahrenheit as highlighted above Add columns to Devices 11 You can add some additional properties to your device by clicking on the Column button as highlighted above 12 This will add some properties as Columns to your Device table 13 Suppose you want value of the temperature sensor to be in different units of measure You can add additional columns to represent the different units of measure NOTE Additional columns can accept only String type values 14 In the above example we also want the value of temperature sensor to be in degrees celsius along with original value of degrees Fahrenheit We have added a column named Celsius which accepts data of type String and it shows us the degrees Celsius value of the Temperature Sensor device 15 You can see that the additional column has been added at the end of the columns list Delete Device 16 You can also delete the device by selecting the checkbox in front of the device that you want to delete and clicking on the Device button 17 Once you delete a device you will see a success notification on top right corner of your screen STEP 5 Message at Edge Messaging at the Edge is similar to Messaging using the ClearBlade platform This minimizes developer rampup time by sharing a familiar design If you are new to Messaging via the ClearBlade Platform please see the Messaging Docs1platformconceptsMessagingoverview A key difference will be that we need to acquire the IP Address of our Edge beforehand Follow these steps to acquire the IP Address Linux or Mac OS ifconfig Windows ipconfig Raspberry PI Find the address of pi httpswwwraspberrypiorgdocumentationremoteaccessipaddressmd With ClearBlade you can use popular languages such as Java C JavaScript C Python iOS Android and many more to utilize messaging with the ClearBlade Edge Just choose your language and follow the tutorials for your ClearBlade SDKs In this tutorial we are going to use JavaScript to create a simple web application that can be used to Publish a message on the Edge Perform the following installation procedures and use the code snippet to Publish a message on the Edge Installation 1 Create a project directoryfolder with name webapp 2 Go to webapp folder and Create a indexhtml file 3 Open the indexhtml file in any text based editor of your choice and Copy Paste the following code snippet HTML Sample Publish App Messaging Sample Publish App Message to Publish Publish 4 Download the ClearBladejshttpsrawgithubusercontentcomClearBladeJavaScriptAPImasterClearBladejs file and place inside your project directory 5 Download the mqttws31jshttpsrawgithubusercontentcomClearBladeJavaScriptAPImastermqttws31js file and place it inside your project directory Usage 1 Initialize ClearBladeinit from the below JavaScript code snippet pointing to your Edge correctly Edit the initOptions to appropriate values 2 You need to copy and paste the following Javascript snippet into the section of the indexhtml file that you just created Javascript var cb new ClearBlade var topic mytopic Example Var initOptions URI http192168092 messagingURI 192168092 messagingPort 8904 useMQTT true cleanSession true systemKey f887dxxxxxxxxxxxxxxxxxxxxxxx01 systemSecret F887DCxxxxxxxxxxxxxxxxxxxxxx01 Email fancbcom password password var initOptions URI messagingURI messagingPort useMQTT true cleanSession true systemKey systemSecret email password var startup function var initCallback functionerr data iferr consoleloginit failed else connectToMessaging initOptionscallback initCallback cbinitinitOptions var connectToMessaging function var connectCallback functiondata consolelogconnected to messaging Write your code here Set useSSltrue if your platform url starts with https or else false messaging cbMessaginguseSSLfalse connectCallback consolelogconnecting to messaging var publishMsg functionevent var msg documentgetElementByIdmsgPubvalue consolelogpublishing to topic with message msg messagingpublishtopic JSONstringifymsg The javascript code will publish a message to a topic called mytopic on your edge 3 Open indexhtml in your web browser 4 You can verify the messages getting published on your Edge by following below steps 1 Go to your System on ClearBlade platform 2 Login to your Edge by clicking on the Edge and enter the correct credentials 3 You will see an Edge platform similar to following 4 Go to Messaging to tab by clicking on the Message button 5 Click on the Subscribe button this will subscribe you to mytopic on the Edge 6 Open the indexhtml file that you just created in a web browser 7 Input your message in the Message to Publish text box and click on the Publish button 8 You will see a message getting published on your Edge under the topic mytopic 9 You have successfully completed the Messaging at Edge tutorial\"},{\"title\":\"Tasks\",\"href\":\"/3-edge/Tasks/_default\",\"content\":\"\"},{\"title\":\"Add Devices\",\"href\":\"/3-edge/Tasks/addDevice\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade Platform 3 You have created User accounts on the ClearBlade Platform Add Customize Devices 1 Go to Auth section of your ClearBlade Platform and from the Menu select Devices 2 Click on the Device button to create a new device 3 To add a column to the device click on Column 4 To delete a device click on Device\"},{\"title\":\"App Connecting to an Edge\",\"href\":\"/3-edge/Tasks/appEdge\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade Platform 3 You have created User accounts on the ClearBlade Platform Connect a Web application to an Edge 1 Connecting a web application to an Edge is similar to using our JavaScript SDK You need to just change the initOptions according to your Edge Settings 2 Refer to the JavaScript SDK 4developerreferenceJavaScriptQuickStart Javascript var cb new ClearBlade Example Var initOptions URI http192168092 messagingURI 192168092 messagingPort 8904 useMQTT true cleanSession true systemKey f887dxxxxxxxxxxxxxxxxxxxxxxx01 systemSecret F887DCxxxxxxxxxxxxxxxxxxxxxx01 Email fancbcom password password var initOptions URI messagingURI messagingPort useMQTT true cleanSession true systemKey systemSecret email password \"},{\"title\":\"Connect an Edge\",\"href\":\"/3-edge/Tasks/connectEdge\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform Connect an Edge 1 Setup the Raspberry Pi according to this link 2 Run the following command with appropriate flag information from your Edge directory Edge will be successfully running on the pi javascript user edge parentsystem noviip edgeip edgeid edgecookie local \"},{\"title\":\"Create an Edge\",\"href\":\"/3-edge/Tasks/createEdge\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform Create an Edge 1 Edge can be created on the ClearBlade platform httpsplatformclearbladecom on a system 2 When you login to the ClearBlade platform you will see an option to create an Edge under a System 3 Click on the New button and fill in the information 4 You have successfully created an Edge\"},{\"title\":\"Messaging at Edge\",\"href\":\"/3-edge/Tasks/message\",\"content\":\" Prerequisites 1 You have created a developer account with ClearBlade httpsplatformclearbladecom 2 You have logged in with the developer account and created a System on the ClearBlade platform 3 You have created User accounts on the ClearBlade platform Message at Edge 1 Create a project directoryfolder with name webapp 2 Go to the webapp folder and Create a indexhtml file 3 Open the indexhtml file in any text based editor of your choice and Copy Paste the following code snippet HTML Sample Publish App Messaging Sample Publish App Message to Publish Publish 4 Download and place httpsrawgithubusercontentcomClearBladeJavaScriptAPImasterClearBladejs inside your project directory 5 Download and place httpsrawgithubusercontentcomClearBladeJavaScriptAPImastermqttws31js inside your project directory Usage 1 Initialize ClearBladeinit from the below JavaScript code snippet pointing to your Edge correctly Edit the initOptions to appropriate values 2 You need to copy and paste the following Javascript snippet into section of the indexhtml file that you just created Javascript var cb new ClearBlade var topic mytopic Example Var initOptions URI http192168092 messagingURI 192168092 messagingPort 8904 useMQTT true cleanSession true systemKey f887dxxxxxxxxxxxxxxxxxxxxxxx01 systemSecret F887DCxxxxxxxxxxxxxxxxxxxxxx01 Email fancbcom password password var initOptions URI messagingURI messagingPort useMQTT true cleanSession true systemKey systemSecret email password var startup function var initCallback functionerr data iferr consoleloginit failed else connectToMessaging initOptionscallback initCallback cbinitinitOptions var connectToMessaging function var connectCallback functiondata consolelogconnected to messaging Write your code here Set useSSltrue if your platform url starts with https or else false messaging cbMessaginguseSSLfalse connectCallback consolelogconnecting to messaging var publishMsg functionevent var msg documentgetElementByIdmsgPubvalue consolelogpublishing to topic with message msg messagingpublishtopic JSONstringifymsg It will publish a message to a topic called mytopic on your edge 3 You can verify the messages getting published on your Edge by following below steps 1 Go to your System on the ClearBlade platform 2 Login to your Edge by clicking on the Edge and enter the correct credentials 3 You will see an Edge platform similar to following 4 Go to Messaging to tab by clicking on the Message button 5 Click on the Subscribe button this will subscribe you to mytopic on the Edge 6 Open the indexhtml file that you just created in a web browser 7 Input your message in the Message to Input text box and click on the Publish button 8 You will see a message getting published on your Edge under the topic mytopic 9 You have successfully completed Messaging at Edge Using the ClearBlade Message Relay Information on how to use the ClearBlade Message Relay can be found here\"},{\"title\":\"Edge\",\"href\":\"/3-edge/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/Android/API_Reference\",\"content\":\" Setup The ClearBlade Android API requires three JAR files that should be copied to your projects libs folder ClearBladeAndroidAPIjar orgeclipsepahoclientmqttv3102jar orgeclipsepahoandroidservice103jar gson224jar Download these jars from httpsgithubcomClearBladeAndroidAPI They are located in the jars folder AndroidManifestxml Configuration The AndroidManifestxml files needs to be modified in order to start the Messaging service in the background Add the following within the tags java Add the following within the tags java Authenticating Authentication is the very first and crucial step in using the ClearBlade Android API for your application You will not be able to access any features of the ClearBlade platform without Authentication You will need to import the following packages in your java file import comclearbladeplatformapiClearBlade import comclearbladeplatformapiInitCallback There are two ways to authenticate to the ClearBlade platform Without Options Anonymous Authentication java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initCallback With Options java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret HashMap initOptions new HashMap Available init options email String to register or login as specific user required if password is given Default null password password String for given user required if email is given Default null platformURL Custom URL for the platform Default httpsplatformclearbladecom messagingURL Custom Messaging URL Default tcpmessagingclearbladecom1883 registerUser Boolean to tell if youd like to attempt registering the given user Default false logging Boolean to enable ClearBlade Internal API logging Default false callTimeout Int number of milliseconds for call timeouts Default 30000 30 seconds allowUntrusted Boolean to connect to a platform server without a signed SSL certificate Default false InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage initOptionsputplatformURL httpsyourURLcom initOptionsputmessagingURL tcpyourURL1883 ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initOptions initCallback Code The ClearBlade Android API allows executing a Code Service on the platform from your Android device Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Code API You need to import the following packages to use the Code API import comclearbladeplatformapiCode import comclearbladeplatformapiCodeCallback Code Service Without Parameters A code service which does not take any parameters can be executed as follows java String serviceName yourServiceName CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName codeServiceexecuteWithoutParamscodeCallback Code Service With Parameters A Json Object of parameters needs to be passed to the Code class constructor along with the service name java String serviceName yourServiceName String parameters param1value1 JsonObject parameterJsonObject new JsonParserparseparametersgetAsJsonObject CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName parameterJsonObject codeServiceexecuteWithParamscodeCallback Data With the ClearBlade Android API a developer can use the Query Item and Collection objects to manipulate data on the ClearBlade platform Import the following packages import comclearbladeplatformapiCollection import comclearbladeplatformapiQuery import comclearbladeplatformapiItem import comclearbladeplatformapiDataCallback Query Create a new Query object java String collectionID yourCollectionID Query query new QuerycollectionID queryEqualToString field Object value java Creates an equality clause in the query object queryequalToname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is equal to John querynotEqualString field Object value java Creates a nonequality clause in the query object querynotEqualname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is not equal to John querygreaterThanString field Object value java Creates a greater than clause in the query object querygreaterThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than age 18 if present querygreaterThanEqualToString field Object value java Creates a greater than or equal to clause in the query object querygreaterThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than equal to age 18 if present querylessThanString field Object value java Creates a less than clause in the query object querylessThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than age 18 if present querylessThanEqualToString field Object value java Creates a less than equal to clause in the query object querylessThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than equal to age 18 if present queryupdatefinal DataCallback callback java Call an update on all items matching the query criteria to conform to the changes that have been added via the addChange method queryequalToname John queryaddChangename Johan queryupdate new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful queryremovefinal DataCallback callback java Removes on all items matching the query criteria within a Collection queryequalToname John queryremove new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful The page size and page number of the results to be returned can be set by using querysetPageSizeint pageSize and querysetPageNumint pageNum Collections The Collection class contains functions to fetch GET update PUT create POST and remove DELETE a collection using the REST API A collection object needs to be created first java String collectionID yourCollectionID Collection collection new CollectioncollectionID collectionfetchQuery query final DataCallback callback java Gets all Items that match Query criteria from the platform in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty Query query new Query queryequalToheight 105 collectionfetchquery new DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionfetchAllfinal DataCallback callback java Gets all Items that are saved in the collection in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty collectionfetchAllnew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionupdatefinal DataCallback callback java Query query new QuerycollectionID queryequalToname John queryaddChangename Johan collectionupdatenew DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectioncreateString columns final DataCallback callback java String column columnNamenewColumn collectioncreatecolumn new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectionremoveDataCallback callback java Deletes all Items that are saved in the collection in the Cloud synchronously Deleted Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in the callback error function collectionremovenew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure Messaging The Messaging API is used initialize connect and communicate with the ClearBlade MQTT Broker for publishing messages subscribing unsubscribing to and from topics and disconnect The API uses the Paho MQTT Asynchronous Client Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Messaging API This is important because the ClearBlade MQTT Broker requires the authentication token to establish a successful connection This authentication token can only be obtained by initializing and authenticaing with the ClearBlade platform You will need to import the following packages for using the Messaging API import comclearbladeplatformapiMessage import comclearbladeplatformapiMessageCallback Initialize and Connect The first step is to create a new Message object by passing the application context and messaging QoS optional The Message constructor will then initialize and connect with the MQTT Broker java Context context this context this iff your main class extends Activity If your main class extends Application context getApplicationContext Message message new Messagecontext QoS 0 Default OR java int qos 1 QoS can be 01 or 2 Context context this context this iff your main class extends Activity If your main class extends Application context getApplicationContext Message message new Messagecontext qos After the connection is successful you can publish subscribe unsubscribe or disconnect using the Message object Publish The publish function takes a topic and message of type String and publishes to the MQTT Broker java String topic yourTopic String message yourMessage messagepublishtopic message Subscribe The subscribe function takes a topic of type String and a callback to handle the arrived messages java String topic topicToSubscribe MessageCallback messageCallback new MessageCallback Override public void doneString topic String messageString Message arrived on subscribed topic messagesubscribetopic messageCallback Unsubscribe The unsubscribe function takes a topic of type String java String topic topicToUnsubscribe messageunsubscribetopic Disconnect The disconnect function is used to disconnect from the MQTT Broker Note that this does not disconnect the user from the ClearBlade platform User logout needs to be called separately java messagedisconnect \"},{\"title\":\"Javadoc\",\"href\":\"/4-developer_reference/Android/Javadoc\",\"content\":\"The Javadoc for the Android API can be found at Android APIstaticandroidapiindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Android/QuickStart\",\"content\":\" Installing Android Studio Download and install Android Studio from httpsdeveloperandroidcomsdkindexhtml and configure the SDKs from the instructions given at httpsdeveloperandroidcomsdkinstallingindexhtml Configuration After you open your project in Android Studio download the required jars and edit the AndroidManifestxml file specified in the API Reference After that you can initialize with the platform and use its features\"},{\"title\":\"Tutorial\",\"href\":\"/4-developer_reference/Android/Tutorial\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device ready to be part of the internet of things Concepts include data management API creation messaging triggering of events timers for scheduled work all done in a secure coherent manner Lets get started Setup Before starting we need to make sure you have access to a ClearBlade platform instance Many organizations have their own private hybrid or public instances which can made available to you If your not sure or dont have access yet you can always use a free trial account at the public SaaS ClearBlade platform instance at httpsplatformclearbladecom Now Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the wrench icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the Android tutorial source files from Github httpsgithubcomClearBladeTutorialAndroid 1 Clone the repository with the command git clone httpsgithubcomClearBladeTutorialAndroidgit 2 Start up Android Studio and on the welcome screen select Open an existing Android Studio Project OR go to File Open and browse to the TutorialAndroid directory and hit open 3 In Android Studio navigate to TutorialAndroid app src main java tutorialclearbladecomclearbladetutorial 4 Open the PlatformConstantsjava file and add your systemkey systemsecret platformURL messagingURL and email address and save public final static String SYSTEMKEY YOURSYSTEMKEY public final static String SYSTEMSECRET YOURSYSTEMSECRET public final static String PLATFORMURL YOURPLATFORMURL ex http1921681689000 public final static String MESSAGINGURL YOURMESSAGINGURLMESSAGINGPORT ex 1921681681883 public static String USEREMAIL YOUREMAILADDRESS 7 Launch your client by hitting the RUN button 8 The final step of Part 1 is to initialize to the ClearBlade Platform anonymously Follow the instructions in your client UI to complete that task In some cases this tutorial will show examples of the client in Javascript Expect comparable user interface exists in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased Although you have already created a developer account to login on the platform each system you create will have its own user registry For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation1platformconceptsUsers 6 Go back to you client app and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 This data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature int d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin Tx USA 102 Sunny 9 Insert a row for New York Ny USA 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 You now have defined populated and authorized a new data structure 12 Finally you need to add the newly created collection id to the PlatformConstantsjava You get this id from the top right of the collection screen Simply click on it to copy to the clipboard public final static String COLLECTIONID dc80b68e0bf8bcaaa3baebd8f19501 NOTE For more information on the client app you can checkout the readme available on the Tutorial GitHub page Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service Best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input parameter named city to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the parentheses around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess send back the payload to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by Click the service settings icon Select Logging enabled to YES Click the Requires tab and add the log library Choose Apply Now add update your service to write the request object to the log javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the logs icon in the top right d Choose the service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update permissions for the service to execute for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Execute permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 and add parameters city state and country 2 Copy and insert the following code into the newly created service javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry ClearBladeinitrequestreq var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccesstemperature 70 weather Sunny collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetch callback NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Create Query object to go and search for existing data in the collection that matched the information passed over parameters c Update logic to add the new city if it didnt exist in the collection javascript var updateCollection function var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country var updateRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifyupdateRow queryupdateupdateRow callback 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Developers always need to make reusable logic that can be leveraged across their applications In step 5 you used the built in library called ClearBlade You may also create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and confirm the collectionName is the same as the collection you created earlier javascript var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperialAPPID4b7403db83c14490daa37a57b722743f strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectionNameWeather qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the setting for the updateCityLibrary by clicking the wrench icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 11 Add these 3 params city state and country 12 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also include calls to your custom library javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp Mathrounddatamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city ClearBladeinitrequestreq var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 13 In your new servicePart6 open the setting and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 14 You can now complete Part 6 validation in your app 15 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices on in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 2 Click the subscribe button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking publish That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensuring the message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients be the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library notifyLib 4 Select the Code type to Library 5 Use the standard process for updating the service required libraries to include clearblade 6 Copy and paste the following code javascript var notify functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 7 Next create a new service ServicePart8 and copy and paste the following code javascript function ServicePart8req resp var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather notifyJSONstringifymessage respsuccessDone var query ClearBladeQuerycollectionNameWeather queryequalTocity Austin queryfetchqueryCallback ClearBladeinitrequestreq getWeather 8 In the newly create servicePart8 open the settings and update the requires to include the libraries clearblade and notifyLib 9 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 10 Click the button Save and Test 11 Look in your client app and validate the message from Part 8 now appears in your message box 12 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic of building your own API that includes data live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by create a new service called ServicePart9Trigger and copy and paste the following code javascript function ServicePart9Triggerreq resp ClearBladeinitrequestreq notifyJSONstringifypartpart9 reqJSONstringifyreq respsuccessdone 2 Update the settings of the new service by clicking the wrench icon and require the notifyLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers Tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description ClearBladeinitrequestreq getWeathercity getWeatherCallback 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute the ServicePart9Caller from the console When this service runs it should create in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a time that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp ClearBladeinitrequestreq var message partpart10 ts Date message Service executing every 10 seconds notifyJSONstringifymessage respsuccessdone 4 Add administrator to your test users roles 5 Set the service security to administrator 6 Leave Run as blank 7 Use the standard process for updating the service required libraries to include clearblade and notifyLib 8 Test the service in the console by clicking the Save and Test button 9 Click on the wrench icon and go to the Timers tab 10 Set the timer to run the service every 10 seconds 11 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Part 11 View Analytics With each action you have been completing during this tutorial the ClearBlade platform has been building up a store of event and history This information makes up vital information that can be fed into analytics tools provided by ClearBlade partners These partners can identify usage trends penetration attempts and any number of device patterns Most important a REST API exist for access all the analytics stored in the ClearBlade Platform Explore the visualization of this data from the analytics tab Whats Next 1 Create a Portal5portalportalgettingstarted and begin to visualize the data within your ClearBlade Platform instance 2 Familiarize yourself with the raw APIs at the swagger SwaggerAnalyticsstaticrestapiindexhtmlanalytics 3 Familiarize yourself with samples tank chats 4 Learn about the integrations available Sockets Files 5 Review the CLI and development best practices 6 Install about the system patterns for IoT Social SalesForce AS400 and others 7 Communicate on the forums\"},{\"title\":\"Tutorial OLD\",\"href\":\"/4-developer_reference/Android/TutorialOLD\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device ready to be part of the internet of things Concepts include data management API creation messaging triggering of events timers for scheduled work all done in a secure coherent manner Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the gear icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the Android tutorial source files from Github httpsgithubcomClearBladeTutorialAndroid 7 In the client package of your choice follow the README instructions to set the key secret and platform urls 8 The final step of Part 1 is to initialize to the ClearBlade Platform anonymously Follow the instructions in your client UI to complete that task In some cases this tutorial will show examples of the client in Javascript Expect comparable user interface exists in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased and extremely rich Although you have already created a developer account to login on the platform each system you create will have its own user registry Th For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation at httpdocsclearbladecom 6 Go back to you client app and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 This data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature int d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin TX US 102 Sunny 9 Insert a row for New York NY US 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 Before you leave your collection find the collectionid This value will be used later to access this collection 12 You now have defined populated and authorized a new data structure Continue in your client app to now complete and validate your work NOTE Be sure to review your readme on adding your collectionid to your client app Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service Best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the parentheses around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess send back the payload to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by a Click the service settings icon b Select Logging enabled to Yes 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the logs icon in the top right d Choose the service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update permissions for the service to execute for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Execute permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 2 Copy and insert the following code into the newly created service and dont forget to replace the collection ID with the collection you created earlier javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var collectionID YOURCOLLECTIONID ClearBladesetUserrequserEmail requserToken var updateCollection function var collection ClearBladeCollectioncollectionID var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccesstemperature 70 weather Sunny collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather var q ClearBladeQuerycollectioncollectionID qequalTocity city qequalTostate state qequalTocountry country qfetchcallback 3 NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Add a call to ClearBladesetUser that will make all calls to the clearblade platform use testclearbladecom authorities c Create Query object to go and search for existing data in the collection that matched the information passed over parameters d Update logic to add the new city if it didnt exist in the collection 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Almost always developers need to make reusable logic that can be leveraged in multiple endpoints While the ClearBlade library is built into the Platform you may create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and replace the collection ID with the collection ID of the collection you created earlier javascript function updateCityLibreq resp var collectionID YOURCOLLECTIONID var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperial strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectioncollectionID qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the setting for the updateCityLibrary by clicking the gear icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 11 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also include calls to your custom library Dont forget Be sure var collectionID YOURCOLLECTIONID with your collection ID javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var collectionID YOURCOLLECTIONID var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp datamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback ClearBladesetUserrequserEmail requserToken var updateCollection function var collection ClearBladeCollectioncollectionID var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city var q ClearBladeQuerycollectioncollectionID qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 12 In your new servicePart6 open the setting and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 13 You can now complete Part 6 validation in your app 14 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices on in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 Javascript Tutorial shown below 2 Click the subscribe button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking publish That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensure that message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients be the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library AlertLib 4 Copy and paste the following code javascript var alert functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 5 Next create a new service ServicePart8 and copy and paste the following code and add the collectionID email and password javascript function ServicePart8req resp var collectionID YOURCOLLECTIONID var userEmail USEREMAIL var userPassword USERPASSWORD var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather alertPart 8 dataDATA0city is dataDATA0temperature degrees and dataDATA0weather alertJSONstringifymessage respsuccessDone var query ClearBladeQuerycollection collectionID queryequalTocity Austin queryfetchqueryCallback var initClearBlade function var initCallback functionerr data if err resperrordata else getWeather var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 6 In the newly create servicePart8 open the settings and update the requires to include the libraries clearblade and alertLib 7 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 8 Click the button Save and Test 9 Look in your client app and validate the message from Part 8 now appears in your message box 10 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic of building your own API that includes data live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by create a new service called ServicePart9Trigger and copy and paste the following code and add the email and password most likely your user is testclearbladecom with clearblade as the password javascript function ServicePart9Triggerreq resp var userEmail YOUREMAIL var userPassword YOURPASSWORD var initClearBlade function var initCallback functionerr data if err resperrordata else alertJSONstringifyreq respsuccessdone var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 2 Update the settings of the new service by clicking the gear icon and require the alertLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers Tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code and add the collectionId email and password javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var collectionID YOURCOLLECTIONID var userEmail YOUREMAIL var userPassword YOURPASSWORD var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionID var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description var initClearBlade function var initCallback functionerr data if err resperrordata else getWeathercity getWeatherCallback var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute the ServicePart9Caller from the console When this service runs it should create in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a time that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp var userEmail testclearbladecom var userPassword clearblade var initClearBlade function var initCallback functionerr data if err resperrordata else var message partpart10 ts Date message Service executing every 10 seconds alertJSONstringifymessage respsuccessdone var options systemKey reqsystemKey systemSecret reqsystemSecret email userEmail password userPassword callback initCallback ClearBladeinitoptions initCallback initClearBlade 4 Set the service to run as an administrator 6 Use the standard process for updating the service required libraries to include clearblade and AlertLib 7 Test the service in the console by clicking the Save and Test button 8 Click on the gear icon and go to the Timers tab 9 Set the timer to run the service every 10 seconds 10 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Part 11 View Analytics With each action you have been completing during this tutorial the ClearBlade platform has been building up a store of event and history This information makes up vital information that can be fed into analytics tools provided by ClearBlade partners These partners can identify usage trends penetration attempts and any number of device patterns Most important a REST API exist for access all the analytics stored in the ClearBlade Platform Explore the visualization of this data from the analytics tab Whats Next 1 Familiarize yourself with the raw APIs at the swagger 2 Familiarize yourself with samples tank chats 3 Learn about the integrations available Sockets Files 4 Review the CLI and development best practices 5 Install about the system patterns for IoT Social SalesForce AS400 and others 6 Communicate on the forums\"},{\"title\":\"Android\",\"href\":\"/4-developer_reference/Android/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/C/API_Reference\",\"content\":\" Initialize and Authenticate You must initialize and authenticate with the ClearBlade Platform first before you perform any other functions If you have not installed the prerequisites please follow the tutorial PrerequisitesQuickstartprerequisites After you have installed all the prerequisites and the C SDK include the clearbladeh header in your code include Call the initializeClearBlade function to initialize and authenticate your user with ClearBlade C void cbInitCallbackbool error char result iferror printfClearBlade init failed sn result exit1 else printfClearBlade Init SucceedednAuth token sn result initializeClearBladeSYSTEMKEY SYSTEMSECRET PLATFORMURL MESSAGINGURL USEREMAIL USERPASSWORD cbInitCallback You will need to pass the function your SYSTEMKEY SYSTEMSECRET PLATFORMURL httpsplatformclearbladecom or similar MESSAGINGURL tcpplatformclearbladecom1883 or similar USEREMAIL USERPASSWORD and a function as a callback After successful authentication you will receive an authentication token in the callback You can choose to store it in a variable but the SDK stores a copy of it for itself MQTT Functions Connect to the MQTT Broker Before you connect to the MQTT Broker make sure you include the include MQTTAsynch header in your code and link the lpahomqtt3as library when you compile your code There are two functions to choose from when connecting to the MQTT Broker with the following signatures C connectToMQTTchar clientId int qualityOfService void mqttOnConnectvoid context MQTTAsyncsuccessData response int messageArrivedCallbackvoid context char topicName int topicLen MQTTAsyncmessage message OR C connectToMQTTAdvancedchar clientId int qualityOfService void mqttOnConnectvoid context MQTTAsyncsuccessData response int messageArrivedCallbackvoid context char topicName int topicLen MQTTAsyncmessage message void onConnLostCallbackvoid context char cause The difference between the two is that the first one does not take an onConnectionLost callback whereas the second one does What this means is that if for some reason the connection to the MQTT Broker was lost and you choose the first function the code will notify you and try to reconnect once and then leave everything to the Gods of MQTT But if you used the second function you will be able to handle the connection lost event and take a decision accordingly We recommend you use the second function Heres an example of how you would connect to the MQTT Broker using the connectToMQTT function C char clientID testclient int qos 0 int messageArrivedvoid context char topicName int topicLen MQTTAsyncmessage message printfMessage arrivedn printfTopic sn topicName char messagePayload mallocmessagepayloadlen 1 strncpymessagePayload messagepayload messagepayloadlen messagePayloadmessagepayloadlen 0 printfMessage sn messagePayload MQTTAsyncfreeMessagemessage MQTTAsyncfreetopicName freemessagePayload return 1 void onConnectvoid context MQTTAsyncsuccessData response printfSuccessful connection to MQTT Brokern extern int finished Get the finished variable from the CB SDK and set it to 1 to stop the connect loop finished 1 connectToMQTTclientID qos onConnect messageArrived To the connectToMQTT function you need to pass the clientID string quality of service int a callback to notify you of a successful connection and a callback to notify you when a message arrives on a subscription In the onConnect callback be sure to grab the finished variable from the C SDK using the extern keyword and set it to 1 This tells the SDK that the connect call was completed successfully and the C SDK can stop its internal loop that was waiting for the connection to complete Now to use the connectToMQTTAdvanced function use the following code as a template C char clientID testclient int qos 0 int messageArrivedvoid context char topicName int topicLen MQTTAsyncmessage message printfMessage arrivedn printfTopic sn topicName char messagePayload mallocmessagepayloadlen 1 strncpymessagePayload messagepayload messagepayloadlen messagePayloadmessagepayloadlen 0 printfMessage sn messagePayload MQTTAsyncfreeMessagemessage MQTTAsyncfreetopicName freemessagePayload return 1 void onConnectvoid context MQTTAsyncsuccessData response printfSuccessful connection to MQTT Brokern extern int finished Get the finished variable from the CB SDK and set it to 1 to stop the connect loop finished 1 void onConnectionLostvoid context char cause printfnConnection lostn printfCause sn cause printfReconnectingn Your Code Goes Here connectToMQTTAdvancedclientID qos onConnect messageArrived onConnLostCallback In this case the extra argument is the OnConnectionLost callback In the onConnect callback be sure to grab the finished variable from the C SDK using the extern keyword and set it to 1 This tells the SDK that the connect call was completed successfully and the C SDK can stop its internal loop that was waiting for the connection to complete Publish a message To publish a message once a successful connection has been established to the MQTT Broker use the publishMessage function C char message Hello World chat topic AwesomeTopic int qos 0 int retained 0 publishMessagemessage topic qos retained Subscribe to a topic To subscribe to a topic use the subscribeToTopic function C char topic AwesomeTopic int qos 0 subscribeToTopictopic qos Unsubscribe from a topic To unsubscribe from a topic use the unsubscribeFromTopic function C char topic AwesomeTopic unsubscribeFromTopictopic Disconnect from MQTT Broker To disconnect your client from the MQTT Broker call the disconnectMQTTClient function Code Service Functions You can execute a Code Service using the C SDK There are two ways to do it one with parameters that you want to pass to a Code Service and one without Execute a Code Service without parameters To execute a Code Service without passing any parameters use the executeCodeServiceWithoutParams function C char serviceName TestService void codeServiceCallbackbool error char result iferror printfCannot execute Code Service sn result else printfExecution successful sn result executeCodeServiceWithoutParamsserviceName codeServiceCallback Execute a Code Service with parameters To execute a Code Service by passing parameters use the executeCodeServiceWithParams function C char serviceName TestService char params name Bubba void codeServiceCallbackbool error char result iferror printfCannot execute Code Service sn result else printfExecution successful sn result executeCodeServiceWithParamsserviceName params codeServiceCallback \"},{\"title\":\"Quickstart\",\"href\":\"/4-developer_reference/C/Quickstart\",\"content\":\" Prerequisites To install the C SDK you will need the following dependencies libcurl openssl Paho MQTT library Jansson JSON library The Paho MQTT Library contains a Makefile that only supports Linux systems You can try to install it on other operating systems but there is a chance that it might not work So you may need to edit the Makefile for your operating system or install the C SDK on a Linux system Installing libcurl and openssl You can download and install libcurl library from httpscurlhaxxselibcurl Depending on your operating system you may download the compiled libraries or build from source You can also download and install the openssl library from httpswwwopensslorg Installing the Paho MQTT Library To install the Paho MQTT Library execute the following commands bash git clone httpsgithubcomeclipsepahomqttcgit cd pahomqttc make sudo make install Install the Jansson JSON Library You can follow the instructions given httpjanssonreadthedocsioen210gettingstartedhtmlcompilingandinstallingjansson to install the Jansson JSON Library Install the C SDK Execute the following commands to install the C SDK on your system bash git clone httpsgithubcomClearBladeClearBladeCSDKgit cd ClearBladeCSDK make sudo make install \"},{\"title\":\"C\",\"href\":\"/4-developer_reference/C/_default\",\"content\":\"\"},{\"title\":\"target\",\"href\":\"/4-developer_reference/CLI/10_target\",\"content\":\" Name cbcli target Retargets an existing local system to a different ClearBlade platform The target action is executed within an existing local system that has already been previously initd Synopsis cbcli target url systemkey email password Description The target action allows for changing the target of a local system This local system should have been exported already This action is importing for supporting the promotion of systems between environments\"},{\"title\":\"Example\",\"href\":\"/4-developer_reference/CLI/11_Example\",\"content\":\" Step 1 Developer uses init to create initial directory structure Command cbcli init Platform URL System Key Developer Email Password Result A new directory will be created named your System Name Inside there will be a single file called cbmeta cbmeta Step 2 Developer exports their system locally This process will bring all the schema and asset definitions to your local environment Command cd cbcli export Result Your folder should now be filled with a structure that looks like cbmeta systemjson services helloworldjs libraries data roles users triggers timers Step 3 Developer modifies a local service This step represents a typical developer activity of making a modification to a service For this task modify a service of your choice function helloworldreq resp COMMENT CHANGED respsuccesshello world Step 4 Developer views the differences Action cbcli diff servicehelloworld Result the differences in your file will be listed Step 5 Developer tests the new service This is an optional step but often developers want to ensure that their changes work Action cbcli test servicehelloworld paramsnameBill Result The latest service source code is uploaded to the system and then execute with the parameters passed in The response will be similar to NOTE Testing a service will push your service to your system This actvity should be done against a Test System Step 6 Developer pushes their changes back to the ClearBlade system Next if the developer has diffs that have not been tested and already sent the server they can now push those changes NOTE Now is a good time to commit your code to a source control repository Action cbcli push servicehelloworld Results Upon completion you will receive a list of all the files successully pushed up to the ClearBlade System Step 7 Pulling the latest code In a team environment you may want to pull latest changes that others have running on the system You can accomplish this using a source control branch the asset running in the system To get the asset running in the system locally use the pull command Action cbcli pull serviceanotherworld Result Your file system is now updated with the latest javascript in the anotherworldjs file Summary The process for developing a local system continues with these above steps Done correctly you should include a source control repository tool and best practice for backup and change history purposes To learn more about the devops lifecycle the CLI also supports see the DevOps Example\"},{\"title\":\"DevOps\",\"href\":\"/4-developer_reference/CLI/12_ExampleOps\",\"content\":\"In addition to supporting local development on services and systems the CLI also provides critical capability to integrate your current DevOps processes with the ClearBlade platform The below describes a typical agile development team working within the ClearBlade Platform Multiple Developers working with their own Systems A ClearBlade platform System for a shared Development instance A ClearBlade platform System for Test and QA A ClearBlade platform System for Production To support this environment ClearBlade expects a mature use of a source control environment where developers are able to work in shared isolation git svn cvs and others are supported with the same pattern Task Developer works in local branch During this period the developer will use their own ClearBlade platform System and use the standard local development process When ready to move forward with a feature the developer will commit their work to a source control development branch within the source control environment Task Promotion of feature branch to Development With the development source control branch updated current devops build system can take control This involves the following steps 1 A build system checks out the latest version of the development branch git pull origin development 2 The build system ensures they are initd into the correct development system cbcli init 3 The build system promotes any code that is now in the stream cbcli push At this point the development system is now running the latest code running as captured in source control Summary This process can be leveraged by DevOps tools to continue the promotion and roll back of any environment\"},{\"title\":\"Github Project\",\"href\":\"/4-developer_reference/CLI/13_GithubProject\",\"content\":\" Github Project For more help about using the tool refer to github project on httpsgithubcomClearBladecbcli\"},{\"title\":\"Overview\",\"href\":\"/4-developer_reference/CLI/1_GettingStarted\",\"content\":\" Clearblade CLI tool The clearblade CLI tool provides easy to use commands for interacting with ClearBlade platform You can easily export pull push import diff Services can be written in editor of your choice after exporting Push command allows to reflect these changes on the platform Creating a mirror image of your system is easily achieved with the use of import command File Structure Before we start making changes and pushing to platform we need to export the system The directory structure after export will look as cbmeta code libraries services TestPull TestPulljs TestPulljson data roles Administratorjson Anonymousjson Authenticatedjson systemjson timers triggers users schemajson MetaData After exporting the system cbmeta is created in the exported folder as shown above This file contains devEmail platformURL assetRefreshDates and an auth token for developer access to the system\"},{\"title\":\"Installation\",\"href\":\"/4-developer_reference/CLI/2_Installation\",\"content\":\" Source Installation For source installation GO should be installed If its not install go from goLanghttpsgolangorgdocinstall After go is installed run go get githubcomclearbladecbcli Either add path to cbcli executable to PATH in bashrc or execute using full path Add pathThese commands work if your are using bash echo export PATHPATHGOPATHbin bashrc source bashrc or execute using full path GOPATHbincbcli Binary Installation Go to cbcli releaseshttpsgithubcomClearBladecbclireleases and download latest release for your platform OSXLinux Unpack the archive to a location of your choise Add path of your unpacked archive to PATH\"},{\"title\":\"init\",\"href\":\"/4-developer_reference/CLI/3_Init\",\"content\":\" Name cbcli init Initializes a ClearBlade system locally Synopsis cbcli init url systemkey email password Options The init command is the first command to be run when wanting to work on a ClearBlade system locally It has four options which can be specified on the command line or entered at prompts given by the command These options are url The full url of the ClearBlade platform eg httpsplatformclearbladecom systemkey The system key for the system being brought local messagingurl The messaging url for the system being brought local email The email address of the developer working on the system you password Your password for the ClearBlade platform system You can specify all some or none of these options on the command line itself For those that you didnt specify The system will prompt you for the values Description On successful completion of this command a skeleton tree structure is created under your current working directory with the root of the tree named after the ClearBlade system you just inited Note that if the system name had spaces they are converted to underscores Inside the root directory of the system two special files are created cbmeta This holds information specific to the developer It is used to streamline authentication so that you dont have to enter emails passwords and tokens for all future commands systemjson This contains information specific to the system youre working on system name system key etc The directory structure for a system looks like this for a system named Outstanding System OutstandingSystem cbmeta systemjson code libraries services data roles timers triggers users Once youve successfully executed the init command you should cd into and live in the repo when running all future commands The behavior is similar to the git command in that you can run any of the other cbcli commands from anywhere in the repo Integration with SCM An example of using the init command from inside an existing repo is as follows Suppose multiple developers are working on the same system and youre using git as a repository for the repo In this case you would do a git clone go grab the repo Youd then cd into the repo and run cbcli init This would set up the cbmeta file to contain your credentials If youre using cbcli in concert with git in the gitignore file for the repo add cbmeta This way when anybody clonespulls the repo from git theyll have to use the init command to associate their credentials with the associated platform \"},{\"title\":\"export\",\"href\":\"/4-developer_reference/CLI/4_Export\",\"content\":\" Name cbcli export Brings a ClearBlade platform System to the local development environment Synopsis cbcli export exportrows exportusers Options Once you have run the init command one next step is to cd into the newly created repo and run cbcli export or cbcli pull see below This will download all useful clearblade objects into the repo it completely populates the repodirectory structure shown above The options specific to the export command are url The full url of the ClearBlade platform eg httpsplatformclearbladecom systemkey The system key for the system being brought local messagingurl The messaging url for the system being brought local email The email address of the developer working on the system you cleanup Clears all directories prior to performing the export exportrows This not only exports the collection objects but also export all rows or items in each collection Be very careful when using this option as it may be unfeasable to export very large collections exportusers This exports the data minus passwords from the systems users table If not present on the command line only the users table schema is exported exportitemid When exporting data collections this option indicates that the itemid column should also be exported with each row sortcollections This option when specified will sort the rows of an exported data collection by itemid This is useful when using a version control system and you wish to view the differences between two versions of a data collection datapagesize When exporting the rows of a data collection and there are a large number of rows 100k it is adviseable to increase the number of rows constituting a page This will improve the performance of the export by decreasing the number of queries against the database Once completed all of the services collections timers triggers etc will reside in current repo Meta data for all objects is in prettyprinted json format In addition the actual code for services and libraries is in javascript js format You can shortcut the cbcli initcbcli export steps by just calling cbcli export outside of a repo This will do a combination of init and export You can either provide the init options on the command line or you will be prompted for them This is a common way to begin working on a system locally EXAMPLES cbcli export cbcli export exportrows exportusers\"},{\"title\":\"import\",\"href\":\"/4-developer_reference/CLI/5_Import\",\"content\":\" Name cbcli import Takes the assets stored locally and creates a new ClearBlade platform System with the same structure and assets Synopsis cbcli import url email password importrows importusers Description The import command is run from inside an existing repo for a system It creates an entirely new system perhaps on a different clearblade platform instance Think of it as cloning the system somewhere else A common use would be as follows Suppose youre developing and testing a ClearBlade system inside your private development sandbox When the system is ready to be deployed to production you would use the import command to effectively push it into production Note Only assets that a currently local are imported into the new system Options url The URL of the destination system ie where the new system should be If you dont specify this option on the command line you will be prompted for it email The developers email on the destination system If you dont specify this option on the command line you will be prompted for it password The developers password If you dont specify this option we recommend you dont you will be prompted for it importrows By default collection rows items are not imported Pass this option to import all items importusers By default the users are not imported into the new system If you set this option the users will imported but their passwords will all be set to password since we dont transfer passwords back and forth between systems Once this command is completed the newly imported system is fullyfunctional except for the importusers caveat mentioned above Examples cbcli import urlhttpsplatformclearbladecom cbcli import emailfooclearbladecom passwordfoo cbcli import emailfooclearbladecom passwordfoo importrows\"},{\"title\":\"push\",\"href\":\"/4-developer_reference/CLI/6_Push\",\"content\":\" Name cbcli push Send the local development versions of assets back to the ClearBlade platform system Synopsis cbcli push allservices alllibraries alledges alldevices allportals allplugins alladapters userschema edgeschema deviceschema service library collection user role trigger timer edge device portal plugin adapter Description The push command allows you upload changes to local copies of ClearBlade objects back out the the remote ClearBlade system Obviously it is the opposite of the pull command Again it has the same options as the diff and pull commands You can combine these options on a single command line just like with diff and pull Options allservices Pushes all the services stored in a local repo alllibraries Pushes all of the libraries stored in a local repo alledges Pushes all of the edges stored in a local repo alldevices Pushes all of the devices stored in a local repo allportals Pushes all of the portals stored in a local repo allplugins Pushes all of the plugins stored in a local repo alladapters Pushes all of the adapters stored in a local repo Includes adapter metadata as well as all files associated with each adapter userschema Pushes the local version of the users table schema to a remote ClearBlade system edgeschema Pushes the local version of the edge table schema to a remote ClearBlade system deviceschema Pushes the local version of the device table schema to a remote ClearBlade system service Pushes the local version of a specific service to a remote ClearBlade system library Pushes the local version of a specific library to a remote ClearBlade system collection Pushes the local version of a specific collections metadata to a remote ClearBlade system user Pushes the local version of the user record to a remote ClearBlade system Also Pushes the roles assigned to a user role Pushes all the capability details of the specific role to a remote ClearBlade system trigger Pushes the local version of a specific trigger to a remote ClearBlade system timer Pushes the local version of a specific timer to a remote ClearBlade system edge Pushes the local version of a specific edge to a remote ClearBlade system device Pushes the local version of a specific device to a remote ClearBlade system portal Pushes the local version of a specific portal to a remote ClearBlade system plugin Pushes the local version of a specific plugin to a remote ClearBlade system adapter Pushes the local version of a specific adapter to a remote ClearBlade system Includes the adapter metadata as well as the files associated with the adapter Examples cbcli push cbcli push allservices cbcli push collectionMyCollection\"},{\"title\":\"pull\",\"href\":\"/4-developer_reference/CLI/7_Pull\",\"content\":\" Name cbcli pull Brings the latest versions of assets from the ClearBlade platform System to the local development environment Synopsis cbcli pull allservices alllibraries alledges alldevices allportals allplugins alladapters userschema service library collection user role trigger timer edge device portal plugin adapter Description The pull command allows you to selectively grab a specific object eg a specific code service or library from the associated ClearBlade system and pull it down to your local repo This is useful when for example multiple developers are working on the same code service When one developer modifies the code service you can pull it down and make modifications to the latest version Options allservices Pulls all of the services stored in the repo alllibraries Pulls all of the libraries stored in the repo alledges Pulls all of the edges stored in the repo alldevices Pulls all of the devices stored in the repo allportals Pulls all of the portals stored in the repo allplugins Pulls all of the plugins stored in the repo alladapters Pulls all of the adapters stored in the repo Includes adapter metadata as well as all files associated with each adapter userschema Pulls the remote version of the users table schema to a local repository service Pulls the remote version of a specific service to a local repository library Pulls the remote version of a specific library to a local repository collection Pulls the remote version of a specific collections metadata to a local repository user Pulls the remote version of a specific user record to a local repository Also Pulls the roles assigned to a user role Pulls all the capability details of the specific role to a local repository trigger Pulls the remote version of a specific trigger to a local repository timer Pulls the remote version of a specific timer to a local repository edge Pulls the remote version of a specific edge to a local repository device Pulls the remote version of a specific device to a local repository portal Pulls the remote version of a specific portal to a local repository plugin Pulls the remote version of a specific plugin to a local repository adapter Pulls the remote version of a specific adapter to a local repository Includes the adapter metadata as well as the files associated with the adapter Example cbcli pull cbcli pull allservices cbcli pull collectionMyCollection\"},{\"title\":\"test\",\"href\":\"/4-developer_reference/CLI/8_Test\",\"content\":\" Name cbcli test Execute a code service update code service from your local file system and send MQTT message Synopsis cbcli test service params topic payload push Description The test command allows you execute your code services from your local machine along with update the code itself and send MQTT Messages You can combine these options on a single command line just like with diff and pull Options service Executes the selected service If your local version has newer changes than the cloud platform we recommend using push flag to push new changes params The payload is the parameters for the code service request This must be valid JSON topic Sends an MQTT Message with the provided topic The payload contains the MQTT message payload payload Payload for the respective service or MQTT message If service flag is used then If topic is used then the payload is the MQTT payload push push flag pushes the local version of the respective code service prior to executing Examples cbcli test serviceMyService\"},{\"title\":\"diff\",\"href\":\"/4-developer_reference/CLI/9_Diff\",\"content\":\" Name cbcli diff Compares the local files with the versions stored on the ClearBlade platform System Synopsis cbcli diff allservices alllibraries service userschema collection user role trigger timer Description This command allows you to do a diff between an object in your current repo and the corresponding object residing in the associated remote ClearBlade system This involves diffing the meta data for the object and if the object is a code service or library also performing a traditional diff on the code For example consider a code service If you locally changed the actual code for the service and also locally changed the library dependencies for the service the diff command will report both changes Options The following options are available allservices Diffs all the services stored in the repo alllibraries Diffs all of the libraries stored in the repo service Diffs the local and remote versions of library Diffs the local and remote versions of userschema Diffs the local and remote versions of the users table schema collection Diffs the local and remote versions of the collections metadata Does not diff the items of the collection user Diffs the local and remote versions of the user record Also diffs the users roles role Diffs all the capability details of the specific role trigger Diffs triggers timer Diffs timers Example cbcli diff collectionfgbfgb Output hostmtpgmailcom cbcli diff collectionsamplecollection \"},{\"title\":\"CLI\",\"href\":\"/4-developer_reference/CLI/_default\",\"content\":\"\"},{\"title\":\"Authenticating\",\"href\":\"/4-developer_reference/CSharp/API_Reference/Authenticating\",\"content\":\"Authentication is the very first and crucial step in using the ClearBlade C API for your application You will not be able to access any features of the ClearBlade platform without Authentication You will need to clone the following C repository for using the ClearBlade services httpsgithubcomClearBladeCSharpSDK There are two ways to authenticate to the ClearBlade platform Without Options C String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret public static void InitCallbackbool success string data if success initialization successful else initialization failed given a ClearBladeException with the cause ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initCallback With Options C String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret Dictionary initOptions new Dictionary Available init options email String to register or login as specific user required if password is given Default null password password String for given user required if email is given Default null platformURL Custom URL for the platform Default httpsplatformclearbladecom messagingURL Custom Messaging URL Default tcpmessagingclearbladecom1883 registerUser Boolean to tell if youd like to attempt registering the given user Default false logging Boolean to enable ClearBlade Internal API logging Default false callTimeout Int number of milliseconds for call timeouts Default 30000 30 seconds allowUntrusted Boolean to connect to a platform server without a signed SSL certificate Default false public static void InitCallbackbool success string data if success initialization successful else initialization failed given a ClearBladeException with the cause initOptionsAddplatfromURL httpsstagingclearbladecom initOptionsAddmessageURL stagingclearbladecom initOptionsAddemail initOptionsAddpassword initOptionsAddregisterUser false initOptionsAddlogging false initOptionsAddcallTimeout30000 initOptionsAddallowUntrusted false ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initOptions initCallback \"},{\"title\":\"Code\",\"href\":\"/4-developer_reference/CSharp/API_Reference/Code\",\"content\":\"The ClearBlade Java API allows executing a Code Service on the platform from your Java application Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Code API You will need to clone the following C repository for using the Code API httpsgithubcomClearBladeCSharpSDK Code Service Without Parameters A code service which does not take any parameters can be executed as follows C string serviceName yourServiceName ClearBladeCodeService codeService new ClearBladeCodeServiceserviceName codeServiceexecuteWithoutParamsserviceName Code Service With Parameters A string object of parameters needs to be passed to the ClearBladeCodeService class constructor along with the service name C string serviceName yourServiceName string parameters param1value1 ClearBladeCodeService codeService new ClearBladeCodeServiceserviceName parameters codeServiceexecuteWithParamsserviceName parameters \"},{\"title\":\"Messaging\",\"href\":\"/4-developer_reference/CSharp/API_Reference/Messaging\",\"content\":\"The Messaging API is used to initialize connect and communicate with the ClearBlade MQTT Broker for publishing messages subscribing unsubscribing to and from topics and disconnect Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Messaging API This is important because the ClearBlade MQTT Broker requires the authentication token to establish a successful connection This authentication token can only be obtained by initializing and authenticaing with the ClearBlade platform You will need to clone the following C repository for using the Messaging API httpsgithubcomClearBladeCSharpSDK Initialize and Connect The first step is to create a new ClearBladeMessageService object by passing the client ID and messaging QoS optional The ClearBladeMessageService constructor will then initialize and connect with the MQTT Broker C string clientID ClearBladeJavaTest ClearBladeMessageService message new ClearBladeMessageServiceclientID QoS 0 Default OR C int qos 1 QoS can be 01 or 2 string clientID ClearBladeCTest ClearBladeMessageService message new ClearBladeMessageServiceclientID qos OR C int qos 1 QoS can be 01 or 2 string clientID ClearBladeCTest bool cleanSession true or false ClearBladeMessageService message new ClearBladeMessageServiceclientID qos After the connection is successful you can publish subscribe unsubscribe or disconnect using the ClearBladeMessageService object Publish The publish function takes a topic and message of type string and publishes to the MQTT Broker C string topic yourTopic string message yourMessage messagepublishtopic message OR C string topic yourTopic string message yourMessage int qos bool retain true or false messagepublishtopic message qos retain Subscribe The subscribe function takes a topic of type string and a callback to handle the arrived messages C string topic topicToSubscribe messagesubscribetopic Unsubscribe The unsubscribe function takes a topic of type string C string topic topicToUnsubscribe messageunsubscribetopic Disconnect The disconnect function is used to disconnect from the MQTT Broker Note that this does not disconnect the user from the ClearBlade platform User logout needs to be called separately C messagedisconnect \"},{\"title\":\"API_Reference\",\"href\":\"/4-developer_reference/CSharp/API_Reference/_default\",\"content\":\"\"},{\"title\":\"CSharp\",\"href\":\"/4-developer_reference/CSharp/_default\",\"content\":\"\"},{\"title\":\"Example\",\"href\":\"/4-developer_reference/CSharp/examples\",\"content\":\"Heres an example of a ClearBlade C Client that initializes with the ClearBlade platform connects to the MQTT broker and publishes and subscribes to messages Then it disconnects from the MQTT Broker and logs out the user c using System using SystemCollectionsGeneric using SystemLinq using SystemText using SystemThreadingTasks namespace CSharpSDK class Program static void Mainstring args string Systemkey YOUR SYSTEM KEY string SystemSecret YOUR SYSTEM SECRET Dictionary initOptions new Dictionary initOptionsAddplatfromURL httpsstagingclearbladecom initOptionsAddmessageURL stagingclearbladecom initOptionsAddemail initOptionsAddpassword initOptionsAddregisterUser false initOptionsAddlogging false initOptionsAddcallTimeout30000 initOptionsAddallowUntrusted false ClearBlade clearblade new ClearBlade clearbladeinitializeSystemkey SystemSecret InitCallbackinitOptions string parameters nameAmeya ClearBladeCodeService code new ClearBladeCodeServicetempServ parameters bool codeResult codeexecuteCodetempServ parameters ConsoleWriteLineCode result codeResult SystemThreadingThreadSleep1000 ClearBladeMessageService message new ClearBladeMessageServiceTest Client1true SystemThreadingThreadSleep1000 messagepublishTopicName Hello from C client 2 true SystemThreadingThreadSleep1000 messagesubscribeTopicName messagepublishTopicName Received Nicely by C subscriber 2 true SystemThreadingThreadSleep1000 messageunsubscribeweave messagepublishTopicName Received Nicely by C subscriber 2 true SystemThreadingThreadSleep1000 bool disconnect messagedisconnect ConsoleWriteLineDisconnected disconnect public static void InitCallbackbool success string data if success ConsoleWriteLineResult is success else ConsoleWriteLine \"},{\"title\":\"Errors\",\"href\":\"/4-developer_reference/Errors\",\"content\":\"Errors returned by the ClearBlade platform are formatted in a structured way to allow for developers to debug applications more easily as well as react programmatically Error object shape javascript error id ed8df83b9d494287adb4f1a0c7948311 id for the request made to the platform code 1421 code specific to this error level 1 criticality level category Admin the module that returned the error message Internal Server Error brief description of the error detail Invalid Password lowLevelError Message Invalid Password List of errors CodeMessageLevel 101Invalid method1 102Internal Server Error1 103Route not found1 104Unable to marshal JSON1 106Poorly formatted json object1 107Internal Server Error1 108Endpoint is not yet implemented1 109Unreachable Code Reached Incredible1 110Body Required1 111Internal Server Error3 112Bad request1 113Internal Server Error1 114Internal Server Error1 115Internal Server Error1 116Internal Server Error1 117Internal Server Error1 118Internal Server Error1 119Internal Server Error1 200Invalid Permissions1 201User does not have access to system1 202Bad request1 203Internal Server Error1 204Bad request1 205Internal Server Error1 206Internal Server Error1 207Internal Server Error1 208Internal Server Error1 210Internal Server Error1 211Internal Server Error1 213Internal Server Error1 214Unable to validate arguments for user roles1 215Unable to fetch all users1 216Bad request1 217Bad request1 218Bad request1 219Internal Server Error1 220Internal Server Error1 221Internal Server Error1 223Internal Server Error1 300Internal Server Error1 301Bad request1 3021 303Internal Server Error1 304Internal Server Error1 305Bad request1 306Internal Server Error1 307Internal Server Error1 308Internal Server Error1 309Bad request1 310Bad request1 311Bad request1 312Bad request1 313Bad request1 314Internal Server Error1 315Internal Server Error1 316Bad request1 317Internal Server Error1 400Internal Server Error1 401Internal Server Error1 402Internal Server Error1 403Internal Server Error1 404Bad request1 405Internal Server Error1 406Internal Server Error1 407Name too short1 408Bad request1 409Internal Server Error1 410Internal Server Error1 411Internal Server Error1 412Bad request1 413Internal Server Error1 414Internal Server Error1 415Internal Server Error1 416Internal Server Error1 417Bad request1 418Internal Server Error1 419No service with that name1 420Internal Server Error1 421Bad request1 500Internal Server Error1 501Internal Server Error1 502Bad request1 503Internal Server Error1 504Bad request1 505Internal Server Error1 506Bad request1 507Internal Server Error1 600Unable to fetch event definitions2 601Unable to fetch event handlers2 602Unable to create event handler2 603Unable to fetch event handler2 604Unable to update event handler2 605Unable to remove event handler2 606Unable to fetch all timers2 607Unable to create timer2 608Unable to fetch timer2 609Unable to update timer2 610Unable to delete timer2 611No name specified for trigger1 900Bad request1 9012 902Internal Server Error2 903Internal Server Error2 904Internal Server Error2 905Internal Server Error2 906Internal Server Error1 907Bad request1 908Internal Server Error1 909Internal Server Error1 910Bad request1 911Internal Server Error1 912Bad request1 913Internal Server Error1 914Internal Server Error1 915Internal Server Error1 916Internal Server Error1 917Internal Server Error1 918Internal Server Error1 919Bad request1 920Internal Server Error1 921Internal Server Error1 922Internal Server Error1 923Bad request1 924Bad request1 925Internal Server Error1 926Internal Server Error1 1000Internal Server Error1 1001Internal Server Error1 1002Bad request1 1003Internal Server Error1 1004Internal Server Error1 1005Internal Server Error1 1100Bad request1 1101Internal Server Error1 1102Internal Server Error1 1103Internal Server Error1 1104Internal Server Error1 1105Internal Server Error1 1106Unable to validate arguments for device1 1107Internal Server Error1 1108Internal Server Error1 1109Internal Server Error1 1110Internal Server Error1 1111Unable to validate arguments for device roles1 1200Bad request1 1201Internal Server Error1 1202Bad request1 1203Internal Server Error1 1300Internal Server Error1 1401Internal Server Error1 1402Bad request1 1403Bad request1 1404Internal Server Error1 1405Internal Server Error1 1406Internal Server Error1 1407Bad request1 1408Internal Server Error1 1409Internal Server Error1 1410Bad request1 1411Internal Server Error1 1412Bad request1 1413Internal Server Error1 1414Internal Server Error1 1415Internal Server Error1 1416Internal Server Error1 1417Bad request1 1418Internal Server Error1 1419Internal Server Error1 1420Bad request1 1421Internal Server Error1 1422Internal Server Error1 1423Bad request1 1424Internal Server Error1 1425Internal Server Error1 1426Bad request1 1427Internal Server Error1 1428Bad request1 1429Internal Server Error1 1430Bad request1 1431Internal Server Error1 1432Bad request1 1433Internal Server Error1 1500Internal Server Error1 1501Bad request1 1502Internal Server Error1 1503Internal Server Error1 1504Internal Server Error1 1505Internal Server Error1 1600Bad request1 1601Internal Server Error1 1602Internal Server Error1 1603Internal Server Error1 1604Internal Server Error1 1605Internal Server Error1 1606Bad request1 1607Internal Server Error1 1608Internal Server Error1 1609Internal Server Error1 1610Internal Server Error1 1611Bad request1\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/Go/API_Reference\",\"content\":\" Setup newUserClientsystemkey systemsecret email password string UserClient systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings email string Email of nondev user to connect to system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles password string Password of nondev user to connect to system as Authentication userClientAuthenticate error Authenticates credentials set on userClient and sets session token userClientRegisterusername password string error Register a new user with the platform username string Email of the new user password string Password of the new user userClientRegisterUserusername password string mapstringinterface error Register a new user with the platform and return response with token username string Email of the new user password string Password of the new user userClientLogout error End session for current user Data userClientInsertDatacollectionid string data interface error Insert new item in the collection collectionid string ID assigned to the collection by the system data interface Representatation of data object to be inserted userClientCreateDatacollectionid string data interface interface error Insert new item in the collection and return the response collectionid string ID assigned to the collection by the system data interface Representation of data object to be inserted userClientGetDatacollectionId string query GoSDKQuery mapstringinterface error Retrieve array of items from the collection using the collection ID collectionId string ID assigned to the collection by the system query GoSDKQuery Custom query created using this SDK userClientGetDataByNamecollectionName string query GoSDKQuery mapstringinterface error Retrieve array of items from the collection using the collection name collectionName string Name assigned to the collection by the developer query GoSDKQuery Custom query created using this SDK userClientUpdateDatacollectionid string query GoSDKQuery changes mapstringinterface error Updates existing items in the collection that match the provided query collectionId string ID assigned to the collection by the system query GoSDKQuery Custom query created using this SDK changes mapstringinterface Keyvalue pairs representing column names to be updated and new values userClientDeleteDatacollectionid string query GoSDKQuery error Removes every item in the collection that match the provided query collectionId string ID assigned to the collection by the system query GoSDKQuery Custom query created using this SDK userClientGetColumnscollectionid string interface error Retrieves column names types and primary keys for a collection collectionId string ID assigned to the collection by the system Queries query NewQuery GoSDKQuery Returns new Query to be used in Data operations queryEqualTofield string value interface Select where field is equal to value field string Field column name in collection value interface Data to match in field queryGreaterThanfield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryGreaterThanEqualTofield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryLessThanfield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryLessThanEqualTofield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryNotEqualTofield string value interface Select where field is to value field string Field column name in collection value interface Data to match in field queryMatchesfield string value interface Query where field is than value using regex field string Field column name in collection value interface Data to match in field queryOrorQuery GoSDKQuery Join two queries together with OR condition orQuery GoSDKQuery Second GoSDkQuery Code Services userClientCallServicesystemKey name string params mapstringinterface mapstringinterface error Run a named code service that exists on the system with options and returns the response object or an error systemKey string Key to system that contains desired code service name string Name of code service to be executed params mapstringinterface Request object to be passed to code service function on execution Messaging userClientInitializeMQTTclientid string ignore string timeout int error Set required MQTT options on user client clientid string MQTT client id ignore string Not used default to timeout int Timeout value for MQTT client in Seconds userClientConnectMQTTssl tlsConfig lastWill GoSDKLastWillPacket error Establish MQTT connection for set user clientid tlsConfig lastWill GoSDKLastWillPacket userClientPublishtopic string message byte qos int error Publish message on MQTT topic topic string MQTT topic to publish on message byte Byteseralized message qos int QOS priority for message userClientSubscribetopic string qos int chan mqttPublish error Asynchronoulsy subscribe to MQTT topic and push messages onto channel as they arrive topic string MQTT topic to subscribe qos int QOS priority for message userClientUnsubscribetopic string error Stop subscription to MQTT topic topic string MQTT topic to unsusbcribe userClientDisconnect error End MQTT connection for set user\"},{\"title\":\"GoDoc\",\"href\":\"/4-developer_reference/Go/GoDoc\",\"content\":\"The GoDoc for the Go API can be found at Go SDKstaticgoapipkggithubcomclearbladeGoSDKindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Go/QuickStart\",\"content\":\" Download and Install Go Follow the instructions for downloading and installing Go from httpsgolangorgdocinstall Clone the ClearBlade GoSDK repository Do a git clone httpsgithubcomClearBladeGoSDKgit to clone the GoSDK for the ClearBlade Platform Import the GoSDK package in your project In order to use the GoSDK in your project you will need to import the GoSDK package that you cloned from github in your project\"},{\"title\":\"Go\",\"href\":\"/4-developer_reference/Go/_default\",\"content\":\"\"},{\"title\":\"ClearBlade on Raspberry Pi\",\"href\":\"/4-developer_reference/IoT_Gateways/ClearBladePlatform_Standalone\",\"content\":\" Setting up the ClearBlade platform on Raspberry Pi Login to your Raspberry Pi and download the ClearBlade Platform binary novibinarytargz from httpsdrivegooglecomfolderviewid0B1WqgabOjCgCNEZJMGRhQld5MXcuspsharing Unzip to a directory of your choice and go to that directory Contact ClearBlade support to get you key needed to start the platform Start the ClearBlade platform using the following commands clearblade tkey yourkey local Setting up the ClearBlade Console on your local machine On your computer download the ClearBlade Console from noviconsoletargz httpsdrivegooglecomfolderviewid0B1WqgabOjCgCNEZJMGRhQld5MXcuspsharing Unzip to a directory of your choice and go to that directory Execute the following commands to start the Console npm install grunt local goplatform platformURLhttpraspberrypiIPaddress9000 Open a web browser and go to httplocalhost3000 and you should see the console Create a new account by clicking Sign Up and you are good to go\"},{\"title\":\"Eclipse Kura\",\"href\":\"/4-developer_reference/IoT_Gateways/Kura\",\"content\":\" Overview and Setup The Raspberry Pi can be used as an IoT Gateway to communicate with the ClearBlade Platform We make use of Eclipse Kura to achieve this Eclipse Kura is an Eclipse IoT project that provides a platform for building IoT gateways It is a smart application container that enables remote management of such gateways and provides a wide range of APIs for allowing you to write and deploy your own IoT application Kura runs on top of the Java Virtual Machine JVM and leverages OSGi a dynamic component system for Java to simplify the process of writing reusable software building blocks Kura APIs offer easy access to the underlying hardware including serial ports GPS watchdog USB GPIOs I2C etc It also offer OSGI bundle to simplify the management of network configurations the communication with IoT servers and the remote management of the gateway Setting up Kura on Eclipse First of all you will need to download Eclipse and set up your workspace for Kura Please follow the instructions given at httpeclipsegithubiokuradockurasetuphtml Setup Kura on the Raspberry Pi Download the Kura image for the Raspberry Pi from httpswwweclipseorgkuradownloadsphp Select the Raspbian Model 2 No Net with Web UI Stable in the Kura Extended Downloads section Copy the downloaded file to your Raspberry Pi Check whether Java is installed on your Raspberry Pi by executing the following command java version If Java is not installed please install it with the following command sudo aptget install java Now cd to the directory where you copied the Kura image and install Kura with the following commands sudo aptget update sudo dpkg i yourkuraimagefilenamedeb sudo aptget install f After successful installation of Kura reboot your Raspberry Pi sudo reboot After reboot you can check whether Kura is running by going to httpyourraspberrypiIP in your browser and the Kura console should show up The default username is admin and the default password is admin Developing a Kura Plugin for the Raspberry Pi Now we will create a Kura plugin in Eclipse bundle it as a JAR and deploy it to the Raspberry Pi This plugin will use the ClearBlade Java SDK to communicate with the platform The plugin will initialize with the ClearBlade Platform and send a message over MQTT This plugin contains the source code of the ClearBlade Java API Eclipse Paho MQTT and and Activate class which runs when the plugin is deployed on the Raspberry Pi The ClearBlade Java API depends on the Google Gson library so we will create a separate dependency plugin for it and deploy it separately to the Raspberry Pi Deploy the Google GSON Bundle Dependency for the Plugin and ClearBlade Java SDK to the Raspberry Pi First of all clone the ClearBlade Java SDK repo git clone httpsgithubcomClearBladeClearBladeJavaSDKgit and import this repo into Eclipse Open Eclipse and expand the targetdefinition folder and double click the kuraequinoxXXXtarget file Click the Set as Target Platform link Now click File New Other and select Plugins from Existing JAR Archives Click Next Click Add and expand the ClearBlade Java SDK that you imported and expand the libs folder within that SDK Select the gson23jar and hit Ok Give your project a name and uncheck the Unzip the JAR archives into the project option and click Finish Next we will create a Deployment Bundle of the google gson library rightclick your newly created project comgooglegson from the screenshot above and Export Plugin Development Deployable plugins and fragments Note If you get an error regarding Java SE 18 during Export go to your MANIFESTMF and delete the line BundleRequiredExecutionEnvironment JavaSE18 save and try again Click Next and choose the directory to save and click Finish Next step is to transfer the Google GSON Deployment Bundle to the Raspberry Pi For deploying bundles to the Raspberry Pi you will need the mToolkit in Eclipse If you have followed the Eclipse Kura setup instructions you will have installed it already If you have not installed it please follow the instructions at httpeclipsegithubiokuradockurasetuphtml Select the Eclipse menu Window Show View Other Select mToolkit Frameworks entry to open the mToolkit Frameworks view Enter a name for the framework definition and the IP address of the target device Close the dialog by clicking the OK button Rightclick the framework icon name and select Connect Framework The list of installed bundles and deployment packages should be retrieved shortly Rightclick the Framework name and select Install Bundle and select the JAR Deployment bundle that you just created for the google gson library If everything goes well if you expand the Bundles folder in your framework you should see your newly deployed bundle running If its not running you can rightclick the bundle and choose to start or stop it You can see any errors related to the bundle in the Console Deploy the Plugin to the Raspberry Pi Now we will create a new Plugin project and copy the ClearBlade Java SDK and Eclipse Paho source files to it and create an activator class containing the code to make the hardware communicate with the ClearBlade Java API Clone the Eclipse Paho Java repo git clone httpsgithubcomeclipsepahomqttjavagit In Eclipse click File New Other and select Plugin Project Click Next Give your project a name and select the Standard OSGI framework as shown in the screen capture below Click Next and make sure that the Generate an activator is unchecked and click Finish Now copy and paste the ClearBlade Java SDK and Paho MQTT packages in your plugins src folder The end result should look like this First you will use the Manifest Editor in Eclipse to add some dependencies Click the Dependencies tab at the bottom of the editor screen and then click the Automated Management of Dependencies heading to expand it and make sure that ImportPackage radio button is selected Click Add and make sure you add the dependencies as seen in the screen capture below Now you are ready to start writing a simple Java class Rightclick your plugin project Select New Class The New Java Class window appears Give your class a name and click Finish Copy and paste the following code in you newly created class and replace YOURCLASSNAME with the class name you just created and replace the system key system secret email and password with yours java private static final Logger slogger LoggerFactorygetLoggerYOURCLASSNAMEclass private static final String APPID ClearBlade Test protected void activateComponentContext componentContext sloggerinfoBundle APPID has started sloggerdebugAPPID This is a debug message initCB protected void deactivateComponentContext componentContext sloggerinfoBundle APPID has stopped private void initCB InitCallback initCallback new InitCallback Override public void doneboolean results SystemoutprintlnClearBlade platform initialized Message message new MessageclientIDtest 1 try Threadsleep2000 catchInterruptedException ex exgetMessage messagepublishhellothere yes kura works Override public void errorClearBladeException error String message errorgetMessage Systemoutprintlnmessage String systemKey YOURSYSTEMKEY String systemSecret YOURSYSTEMSECRET String userEmail YOUREMAIL String userPassword YOU String platformURL httpsrtpclearbladecom String messagingURL tcprtpclearbladecom1883 HashMap options new HashMap optionsputemail userEmail optionsputpassword userPassword optionsputplatformURL platformURL optionsputmessagingURL messagingURL ClearBladeinitializesystemKey systemSecret options initCallback Switch back to the Manifest Editor Under Automated Management of Dependencies ensure the ImportPackage option button is selected Click the add dependencies link to automatically add packages to the dependencies list based on the import statements in your example code Save changes to the Manifest again The end result should look like this Next go to your MANIFESTMF and delete the line BundleRequiredExecutionEnvironment JavaSE18 and save Now we need to create a component class Rightclick the plugin project and select New Other From the wizard select Plugin Development Component Definition and click Next In the Class field of the New Component Definition window shown below click Browse Search for your class and select it and hit Ok In the Enter or select the parent folder field of the New Component Definition window add OSGIINF to the existing entry eg orgeclipsekuratestclearbladeTestCBOSGIINF Then click Finish After the Component class has been created it will open in the Workspace In the Overview tab the Name and Class point to our Java class Set the Activate field to activate and set the Deactivate field to deactivate Doing so tells the component where these OSGi activation methods are located Then save the Component class definition file Next we will create a Deployment Bundle of the plugin rightclick your newly created plugin project and Export Plugin Development Deployable plugins and fragments Click Next and choose the directory to save and click Finish Now we need to deploy the exported plugin to the Raspberry Pi Rightclick on the framework that you use to connect to your Pi and select Install Bundle Choose the newly created plugin bundle and hit install This should deploy the plugin to the Raspberry Pi and start it Any errors or logs can be seen in the Console If all goes well you will see a message published on the ClearBlade Console \"},{\"title\":\"IoTGateways\",\"href\":\"/4-developer_reference/IoT_Gateways/_default\",\"content\":\"\"},{\"title\":\"Authenticating\",\"href\":\"/4-developer_reference/Java/API_Reference/Authenticating\",\"content\":\"Authentication is the very first and crucial step in using the ClearBlade Java API for your application You will not be able to access any features of the ClearBlade platform without Authentication You will need to import the following packages in your java file import comclearbladejavaapiClearBlade import comclearbladejavaapiInitCallback There are two ways to authenticate to the ClearBlade platform Without Options java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initCallback With Options java String SYSTEMKEY yoursystemkey String SYSTEMSECRET yoursystemsecret HashMap initOptions new HashMap Available init options email String to register or login as specific user required if password is given Default null password password String for given user required if email is given Default null platformURL Custom URL for the platform Default httpsplatformclearbladecom messagingURL Custom Messaging URL Default tcpmessagingclearbladecom1883 registerUser Boolean to tell if youd like to attempt registering the given user Default false logging Boolean to enable ClearBlade Internal API logging Default false callTimeout Int number of milliseconds for call timeouts Default 30000 30 seconds allowUntrusted Boolean to connect to a platform server without a signed SSL certificate Default false InitCallback initCallback new InitCallback Override public void doneboolean results initialization successful Override public void errorClearBladeException exception initialization failed given a ClearBladeException with the cause LogiFailed init holy cow exceptiongetLocalizedMessage initOptionsputplatformURL httpsyourURLcom initOptionsputmessagingURL tcpyourURL1883 ClearBlade clearBlade new ClearBlade clearBladeinitializeSYSTEMKEY SYSTEMSECRET initOptions initCallback \"},{\"title\":\"Code\",\"href\":\"/4-developer_reference/Java/API_Reference/Code\",\"content\":\"The ClearBlade Java API allows executing a Code Service on the platform from your Java application Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Code API You need to import the following packages to use the Code API import comclearbladejavaapiCode import comclearbladejavaapiCodeCallback Code Service Without Parameters A code service which does not take any parameters can be executed as follows java String serviceName yourServiceName CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName codeServiceexecuteWithoutParamscodeCallback Code Service With Parameters A Json Object of parameters needs to be passes to the Code class constructor along with the service name java String serviceName yourServiceName String parameters param1value1 JsonObject parameterJsonObject new JsonParserparseparametersgetAsJsonObject CodeCallback codeCallback new CodeCallback Override public void doneJsonObject response Code Service executed successfully LogicodeResponse responsetoString Override public void errorClearBladeException exception Code Service execution failed LogicodeResponse exceptiongetMessage Code codeService new CodeserviceName parameterJsonObject codeServiceexecuteWithParamscodeCallback \"},{\"title\":\"Data\",\"href\":\"/4-developer_reference/Java/API_Reference/Data\",\"content\":\"With the ClearBlade Java API a developer can use the Query Item and Collection objects to manipulate data on the ClearBlade platform Import the following packages import comclearbladejavaapiCollection import comclearbladejavaapiQuery import comclearbladejavaapiItem import comclearbladejavaapiDataCallback Query Create a new Query object java String collectionID yourCollectionID Query query new QuerycollectionID queryEqualToString field Object value java Creates an equality clause in the query object queryequalToname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is equal to John querynotEqualString field Object value java Creates a nonequality clause in the query object querynotEqualname John queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will only match if an item has an attribute name that is not equal to John querygreaterThanString field Object value java Creates a greater than clause in the query object querygreaterThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than age 18 if present querygreaterThanEqualToString field Object value java Creates a greater than or equal to clause in the query object querygreaterThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are greater than equal to age 18 if present querylessThanString field Object value java Creates a less than clause in the query object querylessThanage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than age 18 if present querylessThanEqualToString field Object value java Creates a less than equal to clause in the query object querylessThanEqualToage 18 queryfetchnew DataCallback public void doneQueryResponse resp your logic here Will return all the items that are less than equal to age 18 if present queryupdatefinal DataCallback callback java Call an update on all items matching the query criteria to conform to the changes that have been added via the addChange method queryequalToname John queryaddChangename Johan queryupdate new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful queryremovefinal DataCallback callback java Removes on all items matching the query criteria within a Collection queryequalToname John queryremove new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful The page size and page number of the results to be returned can be set by using querysetPageSizeint pageSize and querysetPageNumint pageNum Collections The Collection class contains functions to fetch GET update PUT create POST and remove DELETE a collection using the REST API A collection object needs to be created first java String collectionID yourCollectionID Collection collection new CollectioncollectionID collectionfetchQuery query final DataCallback callback java Gets all Items that match Query criteria from the platform in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty Query query new Query queryequalToheight 105 collectionfetchquery new DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionfetchAllfinal DataCallback callback java Gets all Items that are saved in the collection in the Cloud Retrieved Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in callbackerror if the collection was empty collectionfetchAllnew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure collectionupdatefinal DataCallback callback java Query query new QuerycollectionID queryequalToname John queryaddChangename Johan collectionupdatenew DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectioncreateString columns final DataCallback callback java String column columnNamenewColumn collectioncreatecolumn new DataCallback Override public void doneItem response Query successful Override public void errorClearBladeException exception Query unsuccessful collectionremoveDataCallback callback java Deletes all Items that are saved in the collection in the Cloud synchronously Deleted Items will be stored locally in the Collection Overrides previously stored Items Runs in its own asynchronous task throws ClearBladeException will be returned in the callback error function collectionremovenew DataCallback Override public void doneQueryResponse response Success Override public void errorClearBladeException exception Failure \"},{\"title\":\"Messaging\",\"href\":\"/4-developer_reference/Java/API_Reference/Messaging\",\"content\":\"The Messaging API is used initialize connect and communicate with the ClearBlade MQTT Broker for publishing messages subscribing unsubscribing to and from topics and disconnect Please make sure that you have initialized and authenticated with the ClearBlade platform prior to using the Messaging API This is important because the ClearBlade MQTT Broker requires the authentication token to establish a successful connection This authentication token can only be obtained by initializing and authenticaing with the ClearBlade platform You will need to import the following packages for using the Messaging API import comclearbladejavaapiMessage import comclearbladejavaapiMessageCallback Initialize and Connect The first step is to create a new Message object by passing the client ID and messaging QoS optional The Message constructor will then initialize and connect with the MQTT Broker java String clientID ClearBladeJavaTest Message message new MessageclientID QoS 0 Default OR java int qos 1 QoS can be 01 or 2 String clientID ClearBladeJavaTest Message message new MessageclientID qos After the connection is successful you can publish subscribe unsubscribe or disconnect using the Message object Publish The publish function takes a topic and message of type String and publishes to the MQTT Broker java String topic yourTopic String message yourMessage messagepublishtopic message Subscribe The subscribe function takes a topic of type String and a callback to handle the arrived messages java String topic topicToSubscribe MessageCallback messageCallback new MessageCallback Override public void doneString topic String messageString Message arrived on subscribed topic messagesubscribetopic messageCallback Unsubscribe The unsubscribe function takes a topic of type String java String topic topicToUnsubscribe messageunsubscribetopic Disconnect The disconnect function is used to disconnect from the MQTT Broker Note that this does not disconnect the user from the ClearBlade platform User logout needs to be called separately java messagedisconnect \"},{\"title\":\"Setup\",\"href\":\"/4-developer_reference/Java/API_Reference/Setup\",\"content\":\" Dependencies The ClearBlade Java API requires three JAR files that should be copied to your projects libs folder ClearBladeJavaAPIjar orgeclipsepahoclientmqttv3102jar gson23jar\"},{\"title\":\"API_Reference\",\"href\":\"/4-developer_reference/Java/API_Reference/_default\",\"content\":\"\"},{\"title\":\"Example\",\"href\":\"/4-developer_reference/Java/Example\",\"content\":\"Heres an example of a ClearBlade Java Client that initializes with the ClearBlade platform connects to the MQTT broker and publishes and subscribes to messages Then it disconnects from the MQTT Broker and logs out the user java package comexampleclient import javautilHashMap import comclearbladejavaapi import comclearbladejavaapiinternal public class MQTTClientJava private static Message message private static boolean isInit false public static void mainString args initClearBlade if isInit connectToMQTT try Threadsleep2000 catchInterruptedException ex exgetMessage subscribehello try Threadsleep5000 catchInterruptedException ex exgetMessage publishhello this is a test try Threadsleep5000 catchInterruptedException ex exgetMessage messagedisconnect logoutUser private static void initClearBlade InitCallback initCallback new InitCallback Override public void doneboolean results SystemoutprintlnClearBlade platform initialized isInit true Override public void errorClearBladeException error isInit false String message errorgetMessage Systemoutprintlnmessage String systemKey yourSystemKey String systemSecret yourSystemSecret String userEmail exampleclearbladecom String userPassword password String platformURL httpsexampleclearbladecom String messagingURL tcpexampleclearbladecom1883 HashMap options new HashMap optionsputemail userEmail optionsputpassword userPassword optionsputplatformURL platformURL optionsputmessagingURL messagingURL ClearBladeinitializesystemKey systemSecret options initCallback private static void connectToMQTT message new MessageclientIDtest 1 private static void subscribeString topic MessageCallback messageCallback new MessageCallback Override public void doneString topic String message SystemoutprintlnTopic topic Message received message Override public void errorClearBladeException exception String message exceptiongetLocalizedMessage SystemoutprintlnCB Subscribe Exception message messagesubscribetopic messageCallback private static void publishString topic String payload messagepublishtopic payload private static void logoutUser User currentUser ClearBladegetCurrentUser currentUserlogoutnew InitCallback Override public void doneboolean results SystemoutprintlnUser logged out Override public void errorClearBladeException exception SystemoutprintlnLogout failed exceptiongetMessage \"},{\"title\":\"Javadoc\",\"href\":\"/4-developer_reference/Java/Javadoc\",\"content\":\"The Javadoc for the Java API can be found at Java APIstaticjavaapiindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Java/Quickstart\",\"content\":\" Installation Java clients using the ClearBlade java SDK can be written in any idea of your choice Popular recommended IDEs include Eclipse IntelliJ NetBeans Dependencies The ClearBlade Java API requires three JAR files that should be copied to your projects libs folder ClearBladeJavaAPIjar orgeclipsepahoclientmqttv3102jar gson23jar The assets can be downloaded from ClearBlade Java SDKhttpsgithubcomClearBladeClearBladeJavaSDK\"},{\"title\":\"Java\",\"href\":\"/4-developer_reference/Java/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/JavaScript/API_Reference\",\"content\":\" Setup var cb new ClearBlade cbinitOptions Options object systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings logging boolean Enable logging by setting logging key to true email string Email of nondev user to connect to system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles password string Password of nondev user to connect to system as registerUser boolean If registerUser key is present and set to true a new user will be created in the system using the values set to email and password callback function Callback to be asynchronously fired when the connection to the system is established callTimeout integer Seconds to wait before timing out requests URI Platform instance to connect to Defaults to httpsplatformclearbladecom if not provided messagingURI Platform instance to connect to for messaging Defaults to platformclearbladecom if not provided messagingPort Port to use when connecting to messaging server Authentication cbsetUseremail authToken Set which user will make requests to the platform email string Required The email of the user authToken string Required The authToken returned by the platform as an argument to the init callback cbregisterUseremail password callback Register a new user with the platform email string Required The email of the new user password string Required The password of the new user callback function Asynchronously fired after user is registered with the platform cbisCurrentUserAuthenticatedcallback Check if currently set user has an active session in the platform callback functionerr response Asynchronously fired after response is received cblogoutUsercallback End session for currently set user callback functionerr response Asynchronously fired after platform returns repsonse cbloginAnoncallback Authenticate with platform as anonymous user callback functionerr response Asynchronously fired after platform creates new anonymous session cbloginUseremail password callback Authenticate with platform as provided user email string Required The email for an existing user password string Required The password for an existing user callback functionerr response Asynchronously fired after platform creates new session for provided user Collections var collection cbCollectionOptions Options object or serialized string Required Provide either collectionName Name of the collection on current system to connect to collectionID ID of the collection on current system to connect to Available on data tab of console collectionfetchquery callback Retrieve array of items from the collection query object keyvalue pairs representing column names and desired values callback functionerr dataArray Asynchronously fired after platform returns response collectioncreatenewItem callback Create new item in the collection newItem object Required An object with keyvalue pairs representing column names and desired values callback functionerr newItem Asynchronously fired after platform returns response collectionupdatequery changes callback Updates existing item in the collection query ClearBladeQuery changes object Required An object with keyvalue pairs representing column names to be updated and new values callback functionerr updatedItem Asynchronously fired after platform returns response collectionremovequery callback Removes every item in the collection matching query query ClearBladeQuery callback functionerr removedItem Asynchronously fired after platform returns response collectioncolumnscallback Retrieve column names data types and whether the column is a primary key callback functionerr columnsArray Asynchronously fired after platform returns response collectioncountquery callback Count items in collection matching query query ClearBladeQuery callback functionerr count Asynchronously fired after platform returns response Query var query cbQueryOptions Creates new ClearBladeQuery to be used in Collection operations Options object or serialized string Required Provide either collectionName Name of the collection on current system to connect to collectionID ID of the collection on current system to connect to Available on data tab of console queryaddSortToQueryqueryObj direction fieldName Sort results according to direction by fieldName queryObj object direction string Required Choose from ASC or DESC fieldName name of column to sort by queryaddFilterToQueryqueryObject condition key value Filter results accord to queryObject queryObj object condition string choose from key string value string integer float queryascendingfieldName Sort results ascending by fieldName fieldName string querydescendingfieldName Sort results descending by fieldName fieldName string queryequalTofieldName value Query where field is equal to value fieldName string value string integer float querygreaterThanfieldName value Query where field is greater than value fieldName string value string integer float querygreaterThanEqualTofield value Query where field is greater than value fieldName string value string integer float querylessThanfieldName value fieldName string value string integer float querylessThanEqualTofieldName value fieldName string value string integer float querynotEqualTofieldName value fieldName string value string integer float querymatchesfieldName regexPattern fieldName string value string queryorotherQuery otherQuery ClearBladeQuery querysetPagepageSize pageNum pageSize int pageNum int queryfetchcallback Execute built query and retrieve matching items callback functionerr itemsArray queryupdatechanges callback Execute built query and update matching items callback functionerr itemsArray queryremovecallback Execute built query and remove matching items callback functionerr itemsArray Item var item cbItemdata collectionID data object contains structure of collection item collectionID string data collection ID in current system itemsavecallback callback functionerr result itemrefreshcallback callback functionerr result itemdestroycallback callback functionerr result Code Services var code cbCode codeexecutename options callback Run a named code service that exists on the system with options name string Required The name of code service to be executed options object The request object to be passed to the code service function on execution callback functionerr response codegetCompletedServicescallback callback functionerr response codegetFailedServicescallback callback functionerr response User Management var user cbUser ClearBlade User Object usergetUsercallback Retrieve info on the current set user callback functionerr userInfo usersetUseruserInfo callback Set info on the current active user userInfo object contains keyvalue pairs representing the user info to be updated callback functionerr userInfo userallUsersquery callback Return all users that match the specified query query ClearBladequery callback functionerr usersArray usersetPasswordold new callback Change current set users password old string old password of user new string new password of user callback functionerr response usercountquery callback Return a count of all users that match the specified query query ClearBladequery callback functionerr count Messaging var messaging cbMessagingoptions callback ClearBlade Messaging object callback functionerr data asynchronously fired upon error or successful connection to messaging server messaginggetMessageHistorytopic last count callback topic string that signifies which topic to search count int that signifies how many messages to return 0 returns all messages last int Epoch timestamp in seconds that will retrieve count number of messages before that timestamp callback Function that handles the response from the server messaginggetMessageHistoryWithTimeFrametopic count last start stop callback topic string that signifies which topic to search count int that signifies how many messages to return 0 returns all messages last int Epoch timestamp in seconds that will retrieve count number of messages before that timestamp start int Epoch timestamp in seconds that will retrieve count number of messages within timeframe stop int Epoch timestamp in seconds that will retrieve count number of messages within timeframe callback Function that handles the response from the server messaginggetAndDeleteMessageHistorytopic count last start stop callback topic string that signifies which topic to search count int that signifies how many messages to return and delete 0 returns and deletes all messages last int Epoch timestamp in seconds that will retrieve and delete count number of messages before that timestamp start int Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe stop int Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe callback Function that handles the response from the server messagingcurrentTopicscallback Retrieve all active messaging topics on current system callback functionerr topicsArray messagingpublishtopic payload Publish payload on messaging topic via MQTT topic string Required Messaging topic publish on payload object messagingpublishRESTtopic payload callback Publish payload on messaging topic via HTTP topic string Required Messaging topic publish on payload object Message payload callback functionerr data messagingsubscribetopic options callback Subscribe to MQTT topic topic string messaging topic to subscribe to via MQTT options object onSuccess functionpayload Fired on successful subscription Defaults to null onFailure functionerr Fired on error with subscription Defaults to null callback functionerr payload messagingunsubscribetopic options Unsubcribe from MQTT topic topic string name of MQTT topic to unsubscribe from options object onSuccess function Fired on successful subscription Defaults to null onSuccess functionresponse onFailure function Fired on error with subscription Defaults to null onFailure functionerr messagingdisconnect Close connection to messaging server MessagingStats var messagingStats cbMessagingStats ClearBlade Messaging Statistics object messagingStatsgetAveragePayloadSizetopic start stop callback topic string that signifies which topic to search start int Epoch timestamp in seconds that will retrieve count number of messages within timeframe stop int Epoch timestamp in seconds that will retrieve count number of messages within timeframe callback Function that handles the response from the server messagingStatsgetOpenConnectionscallback callback Function that handles the response from the server messagingStatsgetCurrentSubscriberstopic callback topic string that signifies which topic to search callback Function that handles the response from the server Analytics var analytics cbAnalytics ClearBlade Analytics Object Example filter object scope system filter module users action create range start 1493010000 end 1493137098 analyticsgetStoragefilter callback filter filter object see above callback Function that handles the response from the server analyticsgetCountfilter callback filter filter object see above callback Function that handles the response from the server analyticsgetEventListfilter callback filter filter object see above callback Function that handles the response from the server analyticsgetEventTotalsfilter callback filter filter object see above callback Function that handles the response from the server analyticsgetUserEventsfilter callback filter filter object see above callback Function that handles the response from the server\"},{\"title\":\"JSDoc\",\"href\":\"/4-developer_reference/JavaScript/JSDoc\",\"content\":\"The Javadoc for the JavaScript API can be found at JS APIstaticjsapiindexhtml\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/JavaScript/QuickStart\",\"content\":\" Installation Download and place httpsrawgithubusercontentcomClearBladeJavaScriptAPImasterClearBladejs inside your project directory and include it in your HTML files header Usage The ClearBlade object attaches to window after being included Calling ClearBladeinitconfigObject will initialize ClearBlade settings and functions and pass it as an argument to a callback javascript ClearBladeinit URI platform address eg httpsplatformclearbladecom systemKey theSystemKey systemSecret theSystemSecret email userEmail use registerEmail instead if you wish to create a new user password userPassword callback initCallback function initCallbackerr cb err is a boolean cb has APIs and constructors attached if err throw new Errorcb else var collection cbcollection collectionfetchsomeQuery collectionFetchCallbackerr rows if err throw new Errorrows else do something with the collection rows var messaging cbmessaging messagingsubscribesomeTopic timeout 120 subscribeCallbackerr message if err throw new Errormessage else do something with response See SDK Reference for a full list of APIs\"},{\"title\":\"Tutorial\",\"href\":\"/4-developer_reference/JavaScript/Tutorial\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device to be part of the internet of things Concepts include data management API creation messaging triggering of events and timers for scheduled work all done in a secure coherent manner Setup Before starting we need to make sure you have access to a ClearBlade instance Many organizations have their own private hybrid or public instances which can made available to you If your not sure or dont have access yet you can always use a free trial account at the public SaaS ClearBlade instance at httpsplatformclearbladecom Now Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the gear icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the JavaScript tutorial source files from Github httpsgithubcomClearBladeTutorialJavaScript 1 Clone the repository with the command git clone httpsgithubcomClearBladeTutorialJavaScriptgit 2 Edit the file TutorialJavaScriptjspart1js and save javascript var initOptions URI httpsclearbladeYOURDOMAINcom messagingURI clearbladeYOURDOMAINcom messagingPort 8904 useMQTT true cleanSession true systemKey YOURSYSTEMKEY systemSecret YOURSYSTEMSECRET If you are using the public platform use URI httpsplatformclearbladecom messagingURI platformclearbladecom 7 Open the file indexhtml in your local browser 8 The final step of Part 1 is to initialize the ClearBlade Platform anonymously Follow the instructions in your client UI to complete that task In some cases this tutorial will show examples of the client in Javascript Expect comparable user interfaces to exist in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased Although you have already created a developer account to login to the platform each system you create will have its own user registry For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab to Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation1platformconceptsUsers 6 Go back to you client app and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 The data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature float d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin Tx USA 102 Sunny 9 Insert a row for New York Ny USA 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 You now have defined populated and authorized a new data structure NOTE For more information on the client app you can checkout the readme available on the Tutorial GitHub page Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service Best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input parameter named city to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the parentheses around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess sends the payload back to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by Clicking the service settings icon Set Logging enabled to YES Click the Requires tab and add the log library Choose Apply Now update your service to write the request object to the log javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the history icon in the top right d Choose the appropriate service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update the permissions of the service to allow execution for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Executable permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 and add parameters city state and country 2 Copy and insert the following code into the newly created service javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry ClearBladeinitrequestreq updateCollection goes here var createCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifynewRow collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 createCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather updateCollection var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetch callback NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Create Query object to go and search for existing data in the collection that matched the information passed over parameters c Update logic to add the new city if it didnt exist in the collection javascript var updateCollection function var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country var updateRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifyupdateRow queryupdateupdateRow callback 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Developers always need to make reusable logic that can be leveraged across their applications In step 5 you used the built in library called ClearBlade You may also create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and confirm the collectionName is the same as the collection you created earlier javascript var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperialAPPID4b7403db83c14490daa37a57b722743f strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectionNameWeather qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the setting for the updateCityLibrary by clicking the wrench icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 and add parameters city state and country 11 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also include calls to your custom library javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp datamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city ClearBladeinitrequestreq var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 12 In your new servicePart6 open the setting and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 13 You can now complete Part 6 validation in your app 14 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices or in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 Javascript Tutorial shown below 2 Click the subscribe button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking publish That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensuring the message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients be the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library notifyLib 4 Select the Code type to Library 5 Use the standard process for updating the service required libraries to include clearblade 6 Copy and paste the following code javascript var notify functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 7 Next create a new service ServicePart8 and copy and paste the following code javascript function ServicePart8req resp var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather notifyJSONstringifymessage respsuccessDone var query ClearBladeQuerycollectionNameWeather queryequalTocity Austin queryfetchqueryCallback ClearBladeinitrequestreq getWeather 8 In the newly create servicePart8 open the settings and update the requires to include the libraries clearblade and notifyLib 9 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 10 Click the button Save and Test 11 Look in your client app and validate the message from Part 8 now appears in your message box 12 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic of building your own API that includes data live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by create a new service called ServicePart9Trigger and copy and paste the following code javascript function ServicePart9Triggerreq resp ClearBladeinitrequestreq notifyJSONstringifypartpart9 reqJSONstringifyreq respsuccessdone 2 Update the settings of the new service by clicking the wrench icon and require the notifyLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers Tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description ClearBladeinitrequestreq getWeathercity getWeatherCallback 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute the ServicePart9Caller from the console When this service runs it should create in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a time that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp ClearBladeinitrequestreq var message partpart10 ts Date message Service executing every 10 seconds notifyJSONstringifymessage respsuccessdone 4 Add administrator to your test users roles 5 Set the service security to administrator 6 Leave Run as blank 7 Use the standard process for updating the service required libraries to include clearblade and notifyLib 8 Test the service in the console by clicking the Save and Test button 9 Click on the wrench icon and go to the Timers tab 10 Set the timer to run the service every 10 seconds 11 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Whats Next 1 Create a Portal5portalportalgettingstarted and begin to visualize the data within your ClearBlade Platform instance 2 Familiarize yourself with the raw APIs at swagger SwaggerAnalyticsstaticrestapiindexhtmlanalytics 3 Familiarize yourself with samples tank chats 4 Learn about the integrations available Sockets Files 5 Review the CLI and development best practices 6 Practice using the system integration patterns for IoT Social SalesForce AS400 and others found on githubhttpsgithubcomClearBladeClearBladePatterns 7 Communicate on the forums\"},{\"title\":\"JavaScript\",\"href\":\"/4-developer_reference/JavaScript/_default\",\"content\":\"\"},{\"title\":\"MQTT\",\"href\":\"/4-developer_reference/MQTT\",\"content\":\"The ClearBlade Platform contains a fully compliant MQTT broker including backlevel support to 30 for supporting high speed and large scale IoT solutions In addition to honoring the core specification ClearBlade has added enhanced capability to secure assets in cotenanted environments and to provide horizontal scalability To connect standard MQTT clients you will need to use the following pattern Before Begining 1 Ensure you have an existing developer account on a ClearBlade platform instance 2 Create a System that will be your isolated messaging topic 3 Create a user in your System here2consoleadministrationUsers for how to create a new user Authentication Before a client can communicate with a broker it must first obtain a ClearBlade Token This token grants the user access and control to the System assets A token can be obtained via a REST endpoint call or via MQTT Using REST Authentication In each language specific SDK the init or login functions are provided They all use the common REST endpoint found herestaticrestapiindexhtmluserAuthenticationpost1 Using MQTT Authentication Alternatively ClearBlade provides an authentication broker for obtaining a user token The auth broker ensures the integrity and security of the transaction to prevent other clients from subscribing to client specific auth topics TCP URL Port 8905 Username Password ClientId The broker will reply back with Work broker IP address ClearBlade Auth Token Establish a Connection The MQTT protocol allows for the connect action to provide a username and password We will modify the use of those fields to accomodate our oAuth styled token model URL Username Password ClientID If you subscribe with same client ID as another subscriber your subscribe will fail With that configuration clients will now be able to connect to the broker as normal for publishing and subscribing to topics\"},{\"title\":\"SDK\",\"href\":\"/4-developer_reference/NodeJS/API_Reference\",\"content\":\"You can interact with the ClearBlade Platform using the NodeJS SDK Check it out herehttpsgithubcomClearBladeNodeSDK\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/NodeJS/QuickStart\",\"content\":\" ClearBlade Node SDK SDK for Nodejs applications to have a simple interface into ClearBladepowered servers Build StatushttpstravisciorgClearBladeNodeSDKsvgbranchmasterhttpstravisciorgClearBladeNodeSDK Installation npm install clearblade Usage To use in Nodejs javascript var ClearBlade requireclearblade ClearBladeinit \"},{\"title\":\"NodeJS\",\"href\":\"/4-developer_reference/NodeJS/_default\",\"content\":\"\"},{\"title\":\"npm\",\"href\":\"/4-developer_reference/NodeJS/npm\",\"content\":\"ClearBlade provides an npm package for simplifying the usage of the ClearBlade platform ClearBlade npmhttpswwwnpmjscompackageclearblade\"},{\"title\":\"ClearBlade.js\",\"href\":\"/4-developer_reference/PlatformSDK/ClearBlade.js\",\"content\":\"The ClearBlade library provides all the methods necessary for interacting with the ClearBlade Platform and its resources from within a code service Usage 1 Initializationinit 1 Devicesdevice 1 Queryquery 1 Collectioncollection 1 Messagingmessaging 1 Triggerstrigger 1 Edgeedge Overview ClearBladejs Library enables users to 1 Query a local or remote data collection 2 Listen to an MQTT topic and process the payload 3 Store data into a collection 3 Modify devices attributes 4 Create a timer or trigger 5 Register new users 6 Log users in or out ClearBlade The available methods for the ClearBlade class and examples of how to use them are listed below init This method sets up the ClearBlade object with a few configuration values necessary for subsequent operations against the ClearBlade Platform You must init before accessing any ClearBlade resources within your system Passing the request into the init function is the simplest and most performant way to establish an authorized instance of the ClearBlade object The ClearBlade object will inherit the permissions associated with the calling user This is the recommended way to initialize ClearBladejs Request Example javascript In this example the passed in information on the request object is used to init the ClearBlade object ClearBladeinitrequestreq Invalid credentials bad username or password leads to the init methods to throw an error You must catch this error using a try catch block To establish a new session for the ClearBlade object the options object contains all the parameters passed into the init method It can contain the following keys value pairs Mandatory Parameters systemKey the system key of the system you would like to access available in req object systemSecret the system secret of the system you would like to access available in req object Optional Parameters email the email of the user you would like to loginregister for subsequent operations password the password of the user you would like to loginregister for subsequent operations registerUser boolean that signifies that the email and password params should be used to register a new user with the platform The newly registered user will be logged in useUser an object in the form of authToken userToken used to set the user for any ensuing operations callback a function that takes a boolean for error checking and a JSON object Must be supplied if any of the following options are supplied email password registerUser If none of the mentioned options are supplied an anonymous token will be used for following operations Basic Example javascript this example simply initializes the ClearBlade object with the desired system ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret Authorization Example javascript this example uses a users email and password to log in ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret email password callback functionerr body iferr resperrorinitialization error JSONstringifybody else respsuccessbody Registration Example javascript this example uses an email and password to register a new user with the platform ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret registerUser true email password callback functionerr body iferr resperrorRegistration Error JSONstringifybody else respsuccessbody Returns a user token Preauthed example javascript Uses an email and auth token of a preauthorized user no need for a callback ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret useUser email requserid authToken requserToken ClearBladesetUseremail authToken This method sets the user to be used for all operations against the ClearBlade Platform Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladesetUseruserEmail ClearBladeloginAnoncallback This method will log into the ClearBlade platform anonymously and use the token for subsequent requests Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeloginAnonfunctionerr body iferr resperrorAnonymous login failure JSONstringifybody else respsuccessbody body object contains Auth Token ClearBladeregisterUseremail password callback This method will register a user against the ClearBlade Platform with the supplied email and password and then log them in Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeregisterUser functionerr body iferr resperrorRegister user failure JSONstringifybody else respsuccessbody body object contains Auth Token ClearBladeisCurrentUserAuthenticatedcallback This method is used to check and see if current users authentication token is still valid Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeisCurrentUserAuthenticatedfunctionerr body iferr resperrorAuth check fail JSONstringifybody else respsuccessbody body contains a boolean value ClearBladeloginUseremail password callback This method is used to log a user into the ClearBlade Platform before making requests Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeloginUser functionerr body iferr resperrorUser login failure JSONstringifybody else respsuccessbody Return an auth token ClearBladelogoutUsercallback This method is used to log the current user out from the platform Example javascript ClearBladeinit systemKey reqsystemKey systemSecret reqsystemSecret ClearBladeloginUser functionerr body iferr resperroruser login fail JSONstringifybody else ClearBladelogoutUserfunctione res ife resperroruser logout fail JSONstringifybody else respsuccessres Returns authTokennullemailnull Device ClearBladegetAllDevicesForSystemcallback This method is used to retrieve all devices from the Devices Auth table If successful the response will contain an array of every device defined within a System Each element in the array will be a JSON object whose attributes correspond to the columns in the Devices table including any custom columns json HostId 20b6b82639f34a23955962099d08c42a activekey 1234567890 allowcertificateauth true allowkeyauth true certificate createddate 20170404T1439320500 customcolumn1 customcolumn2 description devicekey b0889f8e0b86df81dff589e6840d BLE Gateway RPi enabled true keys lastactivedate 20170406T1043530500 name BLE Gateway RPi state systemkey b0889f8e0b86df81dff589e6840d type BLE Gateway Example javascript ClearBladeinitrequest req ClearBladegetAllDevicesForSystemfunctionerr data iferr resperrorUnable to get all devices JSONstringifydata respsuccessdata ClearBladegetDeviceByNamename callback This method is used to retrieve a device from the Devices Auth table If successful the response will contain a JSON object representing the requested device The attributes in the JSON object correspond to the columns in the Devices table including any custom columns json HostId 20b6b82639f34a23955962099d08c42a activekey 1234567890 allowcertificateauth true allowkeyauth true certificate createddate 20170404T1439320500 customcolumn1 customcolumn2 description devicekey b0889f8e0b86df81dff589e6840d BLE Gateway RPi enabled true keys lastactivedate 20170406T1043530500 name BLE Gateway RPi state systemkey b0889f8e0b86df81dff589e6840d type BLE Gateway If unsuccessful an error will be returned in the data parameter passed to the callback function json error id 00000000000000000000000000000000 code 1102 level 1 category Devices message Internal Server Error detail Device test does not exist lowLevelError Example javascript ClearBladeinitrequest req ClearBladegetDeviceByNameTest Device functionerr data iferr resperrorUnable to get device JSONstringifydata else respsuccessdata ClearBladecreateDevicename object causeTrigger callback This method is used to create a new device in the Devices Auth table The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column If successful the data parameter passed to the callback will contain a json object representing the created device json HostId 172d7a09c8c4449c87b6958d6dc04941 allowcertificateauth true allowkeyauth true causeTrigger true createddate 20170406T1134310500 devicekey b0889f8e0b86df81dff589e6840d Test Device enabled true lastactivedate 20170406T1134310500 name Test Device state systemkey b0889f8e0b86df81dff589e6840d type If unsuccessful an error will be returned in the data parameter passed to the callback function json error id00000000000000000000000000000000 code1103 level1 categoryDevices messageInternal Server Error detailDevice Test Device already exists in system b0889f8e0b86df81dff589e6840d lowLevelError Example javascript ClearBladeinitrequest req Default is true so device table changes can trigger code services var DEVICETRIGGERENABLED true var device name activekey exampleactivekey type state enabled true allowkeyauth true allowcertificateauth true ClearBladecreateDevicedevicename device DEVICETRIGGERENABLED functionerr data iferr resperrorUnable to create device JSONstringifydata respsuccessdata ClearBladeupdateDevicename object causeTrigger callback This method is used to update a device in the Devices Auth table The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column If successful the data parameter passed to the callback will contain a success attribute Once a device has been created you CANNOT change its name Do not specify the name attribute when updating a device json success true If unsuccessful an error will be returned in the data parameter passed to the callback function json error id00000000000000000000000000000000 code1106 level1 categoryDevices messageUnable to validate arguments for device detailNot allowed to update field name lowLevelError Example javascript ClearBladeinitrequest req var deviceNameToUpdate Default is true so device table changes can trigger code services var DEVICETRIGGERENABLED true var deviceUpdates activekey exampleactivekey type state enabled true allowkeyauth false allowcertificateauth false ClearBladeupdateDevicedeviceNameToUpdate deviceUpdates DEVICETRIGGERENABLED functionerr data iferr resperrorUnable to update device JSONstringifydata respsuccessdata ClearBladedeleteDevicename causeTrigger callback This method is used to create a device in the Devices Auth table The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column If successful the data parameter passed to the callback will contain a success attribute json success true If unsuccessful an error will be returned in the data parameter passed to the callback function json error id00000000000000000000000000000000 code1104 level1 categoryDevices messageInternal Server Error detailCannot delete Device Test Device does not exist lowLevelError Example javascript ClearBladeinitrequest req Default is true so device table changes can trigger code services var DEVICETRIGGERENABLED true ClearBladedeleteDevice DEVICETRIGGERENABLED functionerr data iferr resperrorUnable to update device JSONstringifydata respsuccessdata Query Class ClearBladeQueryoptions Queries make it possible to retrieve and update data in collections based on criteria The ClearBladeQuery object is used to rapidly create the query and ultimately perform possible fetch update create and delete actions Dive into the Query concept Query Learn More1platformconceptsdataquery To instantiate a query object you have three options Here are the mutually exclusive values for the object collectionName string the name of the collection you want to access collectionID string the ID of the collection you want to access collection string the ID of the collection you want to access 1 Supply an object containing the javascript var query ClearBladeQuerycollectionName Alternatively the collectionID key can be used with the value javascript var query ClearBladeQuerycollectionID Additionally the can be used javascript var query ClearBladeQuery 3 Supply nothing this only applies when using the methods on the ClearBladeCollection or ClearBladeUser classes to make requests against data javascript var query ClearBladeQuery Querycolumnsstring This method is used to limit the columns returned by the query to the specified array of strings javascript var query ClearBladeQuerycollectionName querycolumns Queryascendingfield This method is used to sort the response from the query by a particular field in ascending order javascript var query ClearBladeQuerycollectionName queryascending if applicable apply second sort for entries with same value for column colName queryascending Querydescendingfield This method is used to sort the response from the query by a particular field in descending order javascript var query ClearBladeQuerycollectionName querydescending if applicable apply second sort for entries with same value for column colName querydescending ClearBlade timestamp types are in ms milliseconds not ns nanoseconds If you use the JavaScript Date Object you will need to 1000 QueryequalTofield value This method is used to filter the data by using an equality operator on a given column javascript var query ClearBladeQuerycollectionName Column Type String queryequalTo mustEqualThis Column Type Boolean queryequalTo true this is valid queryequalTo true this is valid Column Types Int BigInt Float Double queryequalTo 100 this is valid queryequalTo 100 this is NOT valid QuerygreaterThanfield value This method is used to filter the data by using a greater than operator on a given column javascript var query ClearBladeQuerycollectionName querygreaterThanYOURCOLUMNOFTYPEINT 4 QuerygreaterThanEqualTofield value This method is used to filter the data by using a greater than equal to operator on a given column javascript var query ClearBladeQuerycollectionName querygreaterThanEqualToYOURCOLUMNOFTYPEINT 4 QuerylessThanfield value This method is used to filter the data by using a less than operator on a given column javascript var query ClearBladeQuerycollectionName querylessThanYOURCOLUMNOFTYPEINT 4 QuerylessThanEqualTofield value This method is used to filter the data by using a less than equal to operator on a given column javascript var query ClearBladeQuerycollectionName querylessThanEqualToYOURCOLUMNOFTYPEINT 4 QuerynotEqualTofield value This method is used to filter the data by using a not equal to operator on a given column javascript var query ClearBladeQuerycollectionName querynotEqualToYOURCOLUMNOFTYPESTRING hello Querylikefield value This method is used to filter the data by using a SQL LIKE clause Like comparisons are NOT case sensitive javascript var query ClearBladeQuerycollectionName querymatchesYOURCOLUMNOFTYPESTRING mustContainThis Wildcards The value string can contain any number of the standard SQL wildcard characters and Wildcard Definition Example Represents zero or more characters Start will match any any character string that begins with Start start or any other uppercaselowercase combinations the letters s t a r t StaRT me up Represents a single character ail will match any 4 character string that ends with ail AIL or any other uppercaselowercase combinations the letters a i l tail sail mail etc will all match The character has special meaning in the context of URLs and HTTP payloads In order utilize the wildcard you will need to URL encode the string representing your value javascript querylikemycollection encodeURIComponentyour matching text javascript Lets assume we have a collection named PokmonCollection This collection has two columns column1 of type string column2 of type string There is a single row column1charizard column2holographic var query ClearBladeQuerycollectionName PokmonCollection the first parameter is the column name in this case column1 the second parameter is a string literal querylikecolumn1 encodeURIComponentzard queryfetchfunctionerr data the second parameter encodeURIComponentzard will match any column value that ends with zard The single row column1charizard column2holographic will match and be returned Querymatchesfield value This method is used to filter the data by using a regular expression against a given column javascript var query ClearBladeQuerycollectionName querymatchesYOURCOLUMNOFTYPESTRING mustContainThis If regex flags are needed the regular expression should be preceded by flags For example a regular expression for a case insenstive match would resemble iThis is a case insensitive match The second parameter is a string literal not a JavaScript Regex object You do not need to surround your regex with Example passing in zard as a second parameter will be executed as zard Many characters used in regular expressions have special meanings in the context of URLs and HTTP payloads If you receive a fetch error unexpected end of JSON input error you will need to URL encode your regular expression javascript querymatchesblahcol lowercase javascript Lets assume we have a collection named PokmonCollection This collection has two columns column1 of type string column2 of type string There is a single row column1charizard column2holographic var query ClearBladeQuerycollectionName PokmonCollection the first parameter is the column name in this case column1 the second parameter is a string literal querymatchescolumn1 izard queryfetchfunctionerr data the second parameter izard will be executed as izard and will match any column value that ends with zard ignoring case The single row column1charizard column2holographic will match and be returned QuerysetPagepageSize pageNum This method is used to set the desired page and page size for the request javascript var query ClearBladeQuerycollectionName querysetPage25 3 You can set the page number to 0 to retrieve all results javascript var query ClearBladeQuerycollectionName querysetPage0 0 Queryorquery chains an existing query object to the Query object with or on the same column title javascript Assume your collections name is Activity var query1 ClearBladeQuerycollectionName Activity var query2 ClearBladeQuerycollectionName Activity query1equalTotitleEngineer query2equalTotitleManager If an entry has Engineer or Manager in title column they will be fetched with finalQuery var finalQuery query1orquery2 chains an existing query object to the Query object with or on different columns title city javascript Assume your collections name is Activity var query1 ClearBladeQuerycollectionName Activity var query2 ClearBladeQuerycollectionName Activity query1equalTotitleEngineer query2equalTocityAustin If an entry has Engineer in title column or Austin in the city column they will be fetched with finalQuery var finalQuery query1orquery2 Queryfetchcallback Reqests an item or a set of items from the query Requires that the Query object was initialized with a collection javascript param function callback Supplies processing for what to do with the data that is returned from the collection var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var query ClearBladeQuerycollectionName queryfetchcallback Queryupdatechanges callback Updates an existing item or set of items Requires that a collection was set when the Query was initialized Example javascript param Object changes Object representing the attributes that you want changed param function callback Function that handles the response of the server This example assumes a collection of items that have the columns name and age var query ClearBladeQuerycollectionName queryequalToname John var changes age 23 var callback function err data if err resperrorupdate error JSONstringifydata else respsuccessdata queryupdatechanges callback sets Johns age to 23 Queryremovecallback Removes an existing item or set of items Requires that a collection was set when the Query was initialized Example javascript param function callback Function that handles the response from the server var query ClearBladeQuerycollectionName This example contains the item with name column entry is John queryequalToname John var callback function err data if err resperrorremoval error JSONstringifydata else respsuccessdata queryremovecallback removes every item whose name attribute is equal to John Collection Class ClearBladeCollectionoptions To instantiate a collection object you can either supply an object containing or a string for the collectionID Here are the mutually exclusive values for the object collectionName string the name of the collection you want to access collectionID string the ID of the collection you want to access collection string the ID of the collection you want to access javascript With collectionName key and value var collection ClearBladeCollectioncollectionName javascript With collectionID key and value var collection ClearBladeCollectioncollectionID javascript With collectionID value var collection ClearBladeCollection The available methods for the Collection class and examples of how to use them are listed below Collectionfetchquery callback Reqests an item or a set of items from the collection param Query query Used to request a specific item or subset of items from the collection on the server Optional param function callback Supplies processing for what to do with the data that is returned from the collection Basic Example javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colfetchcallback Example with Query javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName var query ClearBladeQuery queryequalToYOURCOLUMNOFTYPESTRING hello colfetchquery callback CollectioncreatenewItem callback Creates a new item in the collection and returns the created item to the callback param Object newItem An object that represents an item that you want to add to the collection param function callback Supplies processing for what to do with the data that is returned from the collection Example javascript This example assumes a collection of items that have the columns name height and age var newPerson name Jim height 70 age 32 var callback function err data if err resperrorcreation error JSONstringifydata else respsuccessdata var col ClearBladeCollection collectionName colcreatenewPerson callback this inserts the the newPerson item into the collection that col represents Collectionupdatequery changes callback Updates an existing item or set of items param Query query Query object to denote which items or set of Items will be changed param Object changes Object representing the attributes that you want changed param function callback Function that handles the response of the server Example javascript This example assumes a collection of items that have the columns name and age var query ClearBladeQuery queryequalToname John var changes age 23 var callback function err data if err resperrorupdate error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colupdatequery changes callback sets Johns age to 23 Collectionremovequery callback Removes an item or set of items from the specified collection param Query query Query object that used to define what item or set of items to remove param function callback Function that handles the response from the server Example javascript This example assumes that you have a collection with the item whose name attribute is John var query ClearBladeQuery queryequalToname John var callback function err data if err resperrorupdate error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colremovequery callback removes every item whose name attribute is equal to John Collectioncountquery callback Retrieves the count of items in a collection that match the supplied query param Query query Query object that used to define what item or set of items to remove Optional param function callback Function that handles the response from the server Basic Example javascript var callback function err data if err resperrorcount error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName colcountcallback this returns an object in the form of count 5 Example with Query var callback function err data if err resperrorcount error JSONstringifydata else respsuccessdata var col ClearBladeCollectioncollectionName var query ClearBladeQuery queryequalToname John colcountquery callback this returns an object in the form of count 2 Class ClearBladeDeviceoptions To instantiate a Device object all you need to do is call javascript var dev ClearBladeDevice The available methods for the Device class and examples of how to use them are listed below Devicefetchquery callback Reqests a device or a set of devices from the devices collection param Query query Used to request a specific device or subset of devices from the devices collection on the server Optional If a query is not specified ALL devices will be returned param function callback Supplies processing for what to do with the data that is returned from the collection Basic Example javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var dev ClearBladeDevice devfetchcallback Example with Query javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var query ClearBladeQuery querycolumnsname type state queryequalTotype Weight Sensor devfetchquery callback Devicecreatedevice callback Creates a new device in the devices collection param object device A json object representing the device to be created The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to initialize the contents of the respective column param function callback Supplies processing for what to do with any returned data when the invocation is completed Example javascript var callback function err data if err resperrorcreate error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var newDevice name MyNewDevice allowkeyauth false allowcertificateauth true enabled false state type activekey devcreatenewDevice callback Deviceupdatequery changes callback Updates a device or a set of devices from the devices collection param Query query Used to request a specific device or subset of devices from the devices collection on the server Optional param object changes A json object representing the device columns to be updated The attributes specified in the JSON object correspond to the columns in the Devices table including any custom columns and will be used to update the contents of the respective column param function callback Supplies processing for what to do with any returned data when the invocation has been completed Example javascript var callback function err data if err resperrorfetch error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var query ClearBladeQuery querycolumnsname type state queryequalTotype Weight Sensor devfetchquery callback Devicedeletequery callback Deletes a device or a set of devices from the devices collection param Query query Used to delete a specific device or subset of devices from the devices collection on the server REQUIRED If a query is not specified an error will be returned preventing the inadvertent situation where all devices are deleted param function callback Supplies processing for what to do with the any returned data when the invocation is completed Example javascript var callback function err data if err resperrordelete error JSONstringifydata else respsuccessdata var dev ClearBladeDevice var thequery ClearBladeQuery thequeryequalToname Device 2 devdeletethequery callback Messaging Class ClearBladeMessaging To instantiate a Messaging object all you need to do is call javascript var msg ClearBladeMessaging The available methods for the Messaging class and examples of how to use them are listed below MessaginggetMessageHistorytopic last count callback Retrieves the message history for a topic within the specified parameters param string topic String that signifies which topic to search param int count Number that signifies how many messages to return 0 returns all messages param int last Epoch timestamp in seconds that will retrieve count number of messages before that timestamp param function callback Function that handles the response from the server Example javascript var msg ClearBladeMessaging var unixTimeNano new DategetTime var unixTimeMilli unixTimeNano 1000 msggetMessageHistorycoolTopic unixTimeMilli 25 functionerr body iferr resperrormessage history error JSONstringifydata else respsuccessbody MessaginggetMessageHistoryWithTimeFrametopic count last start stop callback Retrieves the message history for a topic within the specified parameters param string topic String that signifies which topic to search param int count Number that signifies how many messages to return 0 returns all messages param int last Epoch timestamp in seconds that will retrieve count number of messages before that timestamp param int start Epoch timestamp in seconds that will retrieve count number of messages within timeframe param int stop Epoch timestamp in seconds that will retrieve count number of messages within timeframe param function callback Function that handles the response from the server Example javascript var msg ClearBladeMessaging var unixTimeNano new DategetTime var unixTimeMilli unixTimeNano 1000 msggetMessageHistoryWithTimeFramecoolTopic 25 unixTimeMilli null null functionerr body iferr resperrormessage history error JSONstringifydata else respsuccessbody Messagepublishtopic payload Publishes to a topic param string topic Is the topic path of the message to be published This will be sent to all listeners on the topic No default param string payload The payload to be sent Also no default A topic is comprised one or more topic levels ex factory1device3 is a single topic with four topic levels The is a reserved character to separate topic levels and thus a topic level cannot contain in its name However spaces and punctuation are allowed Example javascript var msg ClearBladeMessaging msgpublishClearBladeis awesome TopicClearBlade totally rules MessagegetCurrentTopicscallback Returns the current topics for a system param function callback Function that handles the response from the server Example javascript var callback function err data iferr resperrorUnable to retrieve current topics JSONstringifydata else respsuccessdata var msg ClearBladeMessaging msggetCurrentTopicscallback MessagegetAndDeleteMessageHistorytopic count last start stop callback This call deletes all of the message history for mqtt topic topic It has 4 options that you can set when you delete the message history count is the number of messages you wish to delete For count 0 all messages for that topic are deleted You can also use either the last or the start and stop options to widen you search The last options which is an epoch timestamp in seconds will retrieve and delete count number of messages before that timestamp The start and stop options which are also an epoch timestamp will retrieve and delete count number of messages within that timeframe For each of these cases you can either set count to zero or a non zero value depending on how many messages you wish to delete The return value is a list of js objects one for each returned item in the message history param string topic String that signifies which topic to search param int count Number that signifies how many messages to return and delete 0 returns and deletes all messages param int last Epoch timestamp in seconds that will retrieve and delete count number of messages before that timestamp param int start Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe param int stop Epoch timestamp in seconds that will retrieve and delete count number of messages within timeframe param function callback Function that handles the response from the server Example javascript var callback function err data iferr resperrorgetcurrenttopics error JSONstringifydata else respsuccessdata var msg ClearBladeMessaging msggetAndDeleteMessageHistoryTestTopic 0 null null null callback get and delete all messages for TestTopic Class ClearBladeCode The code class is used to call other code services from within a service To instantiate the code class just call javascript var code ClearBladeCode Codeexecutename params loggingEnabled callback Executes another code service javascript param string name String representing the name of the code service that should be executed param Object params Object that contains all the parameters that will be used for the code service Optional param Boolean loggingEnabled Boolean that represents whether or not the code service should use logging param callback To handle response from code service function MyServicereq resp ClearBladeinitrequestreq var codeEngine ClearBladeCode var serviceToCall RegisterWizards var loggingEnabled true var params firstnameHarry lastnamePotter codeEngineexecuteserviceToCall params loggingEnabled functionerr data iferr resperrorFailed to complete my service JSONstringifydata respsuccessYay Here is my response JSONstringifydata Class ClearBlade User javascript var user ClearBladeUser usergetUserfunctionerr data respsuccessJSONstringifydata This class allows for interacting with user information UsergetUsercallback Returns the user table row for the user that the service is running as UserallUsersquerycallback Accepts a ClearBladeQuery object and a callback It will return all users that match on the query excepting attempting to match on the password field UsersetUsersquerychangescallback operates on the users table in much the same way update works on a collection UsersetUserchangescallback updates just the user the service is running as Usercountquerycallback returns a count of users who have matched the query Events ClearBlade Timer ClearBladeTimerCreatename options callback Create a new Timer runs a function at a set interval javascript ClearBladeTimerCreaterunValidatorEveryHour frequency 3600 servicename validator functionerr response if err resperrorresponse respsuccessTimer successfully created ClearBladeTimerFetchname callback Fetch an existing Timer timerUpdateoptions callback javascript ClearBladeTimerFetchrunValidatorEveryHour function err timer if err resperrorresponse else timerUpdatedefmoduledefnamebar function err response if err resperrorresponse respsuccessTimer successfully updated timerDeletename callback javascript ClearBladeTimerFetchrunValidatorEveryHour function err timer if err resperrortimer timerDeletefunction err response if err resperrorresponse respsuccessTimer deleted Trigger Events ClearBlade Trigger ClearBladeTriggerCreatename options callback Create a new Trigger runs a service after a defined action is detected javascript ClearBladeTriggerCreaterunTestAfterPublishOnTopicFoo defmodule Messaging defname Publish keyvaluepairs topicfoo servicename test function cberr t respsuccessOK ClearBladeTriggerFetchname callback Fetch an existing Trigger triggerUpdateoptions callback javascript ClearBladeTriggerFetchrunTestAfterPublishOnTopicFoo function err trigger if err resperrortrigger triggerUpdate defmoduleCOLLECTIONID defnamebar functionerr response if err resperrorresponse respsuccessTrigger updated triggerDeleteoptions callback javascript ClearBladeTriggerFetchunTestAfterPublishOnTopicFoo functionerr trigger if err resperrortrigger triggerDeletefunctionerr response if err resperrorresponse respsuccessTrigger deleted Edge ClearBladeisEdge Returns true if code service is executing on an Edge Otherwise false javascript function myServicereq resp ClearBladeinitrequestreq if ClearBladeisEdge respsuccessI am an Edge resperrorThis is not an Edge this is running on a platform ClearBladeedgeId Returns the name of Edge if running on an Edge else returns empty string javascript function myServicereq resp ClearBladeinitrequestreq var edgeId ClearBladeedgeId respsuccessEdge Id edgeId \"},{\"title\":\"Crypto.js\",\"href\":\"/4-developer_reference/PlatformSDK/Crypto.js\",\"content\":\" cryptcrypto The crypto module offers a way of encapsulating secure credentials cryptocreateHash cryptoupdate cryptodigest cryptocreateHashhashName Creates and returns a hash object which can be used to generate hash digests Supported hash types for sha1md5sha256sha512 Example javascript var sha1 cryptocreateHashsha1 cryptoupdatedata Updates the hash content with the given data Example javascript var sha1 cryptocreateHashsha1 sha1updateHello World cryptodigestencodingType Calculates the digest of all of the passed data to be hashed The encoding can be binarybase64 or hex Example javascript var sha1 cryptocreateHashsha1 sha1updateHello World var hash sha1digesthex \"},{\"title\":\"FileWriter.js\",\"href\":\"/4-developer_reference/PlatformSDK/FileWriter.js\",\"content\":\"The file library helps to create files on server and remove when needed Writer Initialization This method creates an object for the file library javascript var fileWriter new Writer fileWriterwriteToFile This method writes the specified data to a file in txtdoc format On successful write a url is returned which points to the location of file on server host the server on which platform is running data string that is to be written to file filename name of file as string Example javascript var fileWriter new Writer var text This is a test string var fileName Testdoc fileWriterwriteToFilesfoperacom text fileName functionerrurl if err resperrorWrite failed else respsuccessurl filewriterremoveFile This method removes the file from server on which it is stored Cannot be retrieved again filename name of file to be removed as string Example javascript var fileWriter new Writer var fileName testsyskeyTestdoc fileWriterremoveFilefileName functionerrurl if err resperrorWrite failed else respsuccessurl \"},{\"title\":\"HTTP.js\",\"href\":\"/4-developer_reference/PlatformSDK/HTTP.js\",\"content\":\"The HTTP library is a library for making HTTP calls to external services It supports four HTTP verbs GETPOSTDELETEPUT Class Requests The Requests class is invoked to get an HTTP requesting object Note that it depends on the ClearBlade object so the ClearBlade object must also be included in your service HTTP Request Options Options passed into each request uri The url to be requested qs Query string parameters body Request Payload in the form of a JSON Object Not valid on verbs that do not have bodies such as DELETE or GET form only applicable on the POST method headers Header properties to be passed of the request maxFollows a number the maximum number of redirects to follow timeout The amount of seconds to wait for a response auth Support for HTTP basic auth the object must have the user and pass keys all others will be ignored strictSSL Fails the request if the identity on the SSL certificate cannot be verified set to false to use with selfsigned certs getProxyUrl If you are using a proxy to call the outside world and need to get the proxy URL from an environment variable set this to true isSoap Force an XML based response full Gets back all the HTTP response headers javascript get a Requests object var requestObject Requests options are fed into each object var options urihttpsgooglecom qs qclearblade platform body hello world formtrue headers ContentType applicationjsondateThu 13 Aug 2015 212453 GMTServernginx121 maxFollows12 timeout30 authusermepasssecret strictSSLfalse getProxyUrlfalse isXMLtrue isSoaptrue full true requestget Execute GET on the http request object javascript perform a GET request requestObjectgetoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response requestpost Execute POST on the http request object javascript performs a POST request requestObjectpostoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response requestdelete Execute DELETE on the request object javascript performs a delete requestObjectdeleteoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response requestput Execute PUT on the request object javascript performs a put requestObjectputoptionsfunctionerrbody iferr the error is a JSON value of the error in question shaped like errormessage else body is JSON of the response \"},{\"title\":\"Introduction to Code Services\",\"href\":\"/4-developer_reference/PlatformSDK/Introduction\",\"content\":\"Each code service receives a req object and a resp object req object javascript function myServicereq resp logreq Below is the value of req The email of the user that invokes this code service userEmail rreinoldclearbladecom Any parameters passed into this service You can also pass in parameter using Test Parameters in the Developer Console in browser params key1value1 key2value2 System Key of this system systemKey e095a19d0b94e48dee9bff87e5fd01 System Secret of this system systemSecret E095A19D0B9ACD9EFA86AEEDFCC001 The active user token used to invoke this service userToken U1hNf7o4bEXpiE4aGhb79MQv4jH0v2U8nH5OqanGEjQh5kfAozv6CbDhDHA4xPwlRSkh2XeD1KhdQg6Q is logging enabled see logLogjs library isLogging true User UUID of user who invoked this service userid fc8cfcea0a96ebebc7f5d4edd414 resp Object When you make a call with the resp object the code service completes and ends its lifecycle Your code service will call respsuccess by default if you fail to call respsuccess or resperror To complete a code service one of the two methods must be called respsuccess When you use this method a success true key will be included to your response Example 1 We return a success message string javascript function myServicereq resp var message Successfully updated position respsuccessmessage Code Service terminates Example 2 We return a JSON Object with our success javascript function myServicereq resp var winning messageWe succeeded contextWe tried it with the included query query firstnameJulian respsuccesswinning Code Service terminates When you use this method a successfalse will be included to your response Example 1 An error message is returned javascript function myServicereq resp var errorMessage Unable to process due to missing data resperrorerrorMessage Code Service terminates Example 2 An error JSON object is returned javascript function myServicereq resp var error message Unable to process due to missing data query firstnameHarry lastnamePotter resperrorerror Code Service terminates If your code service throws an uncaught error the code service defaults to the aforementioned behavior for unterminated code service respsuccess is called by default \"},{\"title\":\"JSUtil.js\",\"href\":\"/4-developer_reference/PlatformSDK/JSUtil.js\",\"content\":\"The JSUtil library is a utility library for converting javascript objects to strings and formatting numbers and JSON objects for print output utilinspectvar Returns the variable converted to a string javascript perform a GET request logThe response from the server was utilinspectmyVar utilformatargs Returns a formatted string using a variable array s String d Number both integer and float j JSON javascript perform a GET request utilformatHello s welcome to s Steve Austin \"},{\"title\":\"Log.js\",\"href\":\"/4-developer_reference/PlatformSDK/Log.js\",\"content\":\"The Log library is a library for issueing log statements during the execution of a service These logs can be reviewed later from the console or the returning payload logSTRING Issue a statement to log a message to the service logs javascript perform a GET request logThe response from the server was JSONstringifymyVar \"},{\"title\":\"Net.js\",\"href\":\"/4-developer_reference/PlatformSDK/Net.js\",\"content\":\"The socket library is used for communicating with servers using raw TCPUDP sockets Methods new netcbSocket socketconnect socketreadWithSize socketread socketwrite socketlookup socketbytesRead socketdestroy Class netcbSocket Initialization This method creates an object needed to interact with the socket library Example javascript var socket new netcbSocket socketconnect Opens a new socket and connects to the specified server Parameters connectionurl can be of the form ipaddressport type is the type of socket tcpudp Example javascript var callback function err if err resperrorCould not connect else respsuccessConnected socketconnect1270019999tcpcallback socketreadWithSize Read a specified number of bytes from the server This method blocks until the buffer is filled with the specified number of bytes and returns data to the user If no data is received for 10 seconds a timeout occurs and control is given back to the user Parameters size is size in bytes Example javascript var callback functionerrdata if err resperrorerror else respsuccessdata socketreadWithSize100callback socketread This function should be used to read a stream of bytes from a server Example javascript var readCallback functiondata respDatadata ifrespDatasearchn respsuccesssuccess socketreadcallback socketwrite This function is used to send a request to a server The response can be read using read or readWithSize methods Parameters request can be of any type that server can read bytesstring Example javascript var writeCallback functionerrinfo iferr resperrorfailureinfo else Ideally you would be calling read from here socketwriteHello I am a testncallback socketlookup This function is used to provide name resolution using the IP address Parameters ip the IP address Example javascript socketlookup127001functionerrhost if err resperrorerror err else respsuccesshost socketbytesRead This function returns the number of bytes read from the server This can be used to verify that no data loss has occurred Parameters message is the data that is returned from read or readWithSize methods Example javascript socketbytesReadThis is a message of random lengthfunctionerrval if err resperrorerror val else respsuccessval socketdestroy This function closes the connection to server Example javascript socketObjectdestroyfunctionerrsucc if err resperrorerror err else respsuccesssucc \"},{\"title\":\"OAuth2.js\",\"href\":\"/4-developer_reference/PlatformSDK/OAuth2.js\",\"content\":\"This library is used to connect to different OAuth 2 servers and get an authorization token back Google OAuth is the only OAuth 2 provider supported at the moment Class OAuth2 Initialize This method creates an oauth2 object instance Example javascript var oauth2 new OAuth2 oauth2googleAuth Connects to the Google OAuth endpoint and retrieves an authorization token Parameters options is a json object with the following keys email authScope privateKey Example javascript var oauth2 new OAuth2 var options email yourgoogleserviceaccount authScope httpswwwgoogleapiscomauthbigquery httpswwwgoogleapiscomauthcompute Auth scopes seperated by spaces privateKey BEGIN PRIVATE KEYnyourprivatekeynEND PRIVATE KEYn var callback functionerr data iferr resperrorError data else respsuccessSuccess data oauth2googleAuthoptions callback \"},{\"title\":\"Platform SDK\",\"href\":\"/4-developer_reference/PlatformSDK/_default\",\"content\":\"\"},{\"title\":\"Geo.js\",\"href\":\"/4-developer_reference/PlatformSDK/geo.js\",\"content\":\"The geo library provides core functionality used to calculate geometric spacial relationships geo geoCircle geoPolygon geoLineSegment geoPoint geoWithinCircle geoWithin geoNearest geoFarthest geoDistance geooptions Creates a geo object to perform necessary geometric calculations Parameters options polarcartesian Example javascript var geoObj new geopolar javascript var geoObj new geocartesian geoObjPoint Lat Long Define a point on a coordinate system Parameters LAT number representing a latitude LONG number representing a longitude Example javascript var geoObj new geopolar var myPoint geoObjPoint 3026675 97742439 geoObjPoint x y Define a point on a coordinate system Parameters x number representing x position x number representing y position Example javascript var myPoint geoObjPoint 44 764 geoObjCircleLat Long Radius Defines a shape of type circle on a coordinate system Parameters LAT number representing a latitude LONG number representing a longitude RADIUS number in meters Example javascript var geoObj new geopolar var myCircle geoObjCircle 3026675 97742439 1000 geoObjCirclex y Radius Defines a shape of type circle on a coordinate system Parameters x number representing x position of circle center y number representing y position in circle center Radius number in meters Example javascript var geoObj new geocartesian var myCircle geoObjCircle 50 414 1000 geoObjWithinCircleCircle Point Test for whether a point is within the bounds of a circle Parameters Circle Circle Shape Point a point Object at a location Example javascript var myPoint geoObjPoint 3426675 91742439 var myCircle geoObjCircle 3026675 97742439 4000 var isInside geoObjWithinCirclemyCircle myPoint geoObjPolygonPoint1 Point2 Point3 Define a polygon object made up of at least three point objects All shapes will be closed Parameters Points array of point objects that when connected according their order forms a closed shape Example javascript var geoObj new geopolar var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA var southwest geoObjPolygon pointAustin pointLincoln pointVegas geoObjWithinPolygon Point Check if a point exists within the bounds of a polygon Parameters Polygon a defined polygon object Point a defined point object Example javascript var geoObj new geopolar var southwest geoObjPolygon point1 point2 point3 var tulsa geoObjPoint 36153982 95992775 var isSouthwest geoObjWithinsouthwestwest tulsa geoObjLineSegmentPoint1 Point2 Width Creates a line segment of a certain width Returns a polygon shape Parameters Point1 the start Point object of a line segment Point2 the end Point object of a line segment Width a number in meters for the width of the line Example javascript var geoObj new geopolar var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA geoObjLineSegmentpointAustin pointVegas 1000 geoObjNearestPoint Point1 Point2 Point3 Size Returns the nearest points from a list in relation to a source point The size parameter will limit the number of responses returned Parameters Point A source point to compare distances from Points A set point to search for distance from the source Size A number representing the return size of nearest points Example javascript var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA retun closestToAustin geoObjNearestpointAustin pointVegas pointLincoln 1 geoObjFarthestPoint Point1 Point2 Point3 Size Returns the farthest points from a list in relation to a source point The size parameter will limit the number of responses returned Parameters Point A source point to compare distances from Points A set point to search for distance from the source Size A number representing the return size of farthest points Example javascript var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var pointVegas geoObjPoint 36169941 11513983 Las Vegas Nevada USA retun farthestFromAustin geoObjNearestpointAustin pointVegas pointLincoln 1 geoObjDistancePoint1 Point2 Calculates the distance in meters between two points Parameters Point1 Point object for distance start calculation Point2 Point object for distance end calculation Example javascript var geoObj new geopolar var pointAustin geoObjPoint 3426675 91742439 Austin Texas USA var pointLincoln geoObjPoint 40825763 96685198 Lincoln Nebraska USA var distance geoObjDistancepointAustin pointLincoln Example javascript var geoObj new geocartesian You can use any unit in Cartesian var point1 geoObjPoint 44 19 Point on 2D cartesian graph var point2 geoObjPoint 23 7 Point on 2D cartesian graph var distance geoObjDistancepoint1 point2 Distance in designated units \"},{\"title\":\"Mailer.js\",\"href\":\"/4-developer_reference/PlatformSDK/mailer.js\",\"content\":\"The module offers a way to send SMTP based emails from a ClearBlade service mailercreateTransportoptions transportsendMailoptions transportclose mailercreateTransportoptions options host HOSTNAME port PORT Creates and returns a transport object used for sending mail to an appropriate SMTP server Example javascript function sendMailGmailreq resp var transport mailercreateTransport host port587 transportsendMailmailoptions callback Sends a mail object to the SMTP server for delivery mailoptions from FROMADDRESS password ACCOUNTPASSWORD to TOADDRESS subject MAILSUBJECTTEXT text EMAILBODY callback functionerror response Example javascript transportsendMail from mailid passwordyourpassword to receiveremail subject Test subject text Hi How are you doing today functionerror response transportclose iferror resperrorerror else respsuccessSuccess transportclose Closes the connection to the transport object Gmail Example Below is a complete example that will use a gmail based address NOTE Google protects unauthorized uses of gmail accounts uses multifactor verification In order to make this send work you will need to ensure that the privacy and permissions on your gmail account allow for third party sending Example javascript function sendMailGmailreq resp var transport mailercreateTransport hostsmtpgmailcom port587 function sendEmailrequestObj transportsendMail from yourgmailid passwordyourpassword to receiveremail subject Test subject text Hi How are you doing today functionerror response transportclose iferror resperrorerror else respsuccessThank you reqparamsfirstName reqparamslastName Your request has been submitted ClearBladeinitrequestreq sendEmail \"},{\"title\":\"Python\",\"href\":\"/4-developer_reference/Python/_default\",\"content\":\"\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/Python/v1/API Reference\",\"content\":\" Setup ClientUserClientsystemkey systemsecret email password platformURL systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings email string Email of nondev user to connect to system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles password string Password of nondev user to connect to system as platformURL string URL for platform eg httpsplatformclearbladecom ClientDevClientsystemkey systemsecret deviceName deviceActiveKey platformURL systemKey string Required The systemKey of the system to connect to Retrievable from the Consoles System Settings systemSecret string Required The systemSecret of the system to connect to Retrievable from the Consoles System Settings deviceName string Required The name of the device to connect to the system as If registerUser key is not provided the user must be registered through the Auth tab of the console and given appropriate roles deviceActiveKey string Required The current active key specified in the Devices collection for the device platformURL string URL for platform eg httpsplatformclearbladecom Authentication authAuthenticateUserClientDevClient object Authenticates credentials set on userClientdevClient and sets session token authRegisterUserusername password userClient Register a new user with the platform username string Email of the new user password string Password of the new user authRegisterDevUserusername password userClient Register a new user with the platform username string Email of the new user password string Password of the new user Code Services userClientCallServicesystemKey name string params Run a named code service that exists on the system with options and returns the response object or an error systemKey string Key to system that contains desired code service name string Name of code service to be executed params dict Request object to be passed to code service function on execution Messaging Create Messaging object message MessagingMessaginguserClient messageInitializeMQTT messagepublishMessagetopic message qos Publish message on MQTT topic topic string MQTT topic to publish on message string String message qos int QOS priority for message messageSubscribetopic qos Asynchronously subscribe to MQTT topic and push messages onto channel as they arrive Topics with leading forward slashes are stripped Ex Topic abc becomes abc topic string MQTT topic to subscribe qos int QOS priority for message messageUnsubscribetopic Stop subscription to MQTT topic topic string MQTT topic to unsusbcribe messageDisconnect error End MQTT connection for set user\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Python/v1/QuickStart\",\"content\":\" Download and Install Python dependencies To install pip follow instruction on httpspippypaioenstableinstalling If you get any error install that dependency using pip install dependencyname Clone the ClearBlade PythonSDK repository Do a git clone httpsgithubcomClearBladePythonAPI to clone the PythonSDK for the ClearBlade Platform\"},{\"title\":\"v1\",\"href\":\"/4-developer_reference/Python/v1/_default\",\"content\":\"\"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/Python/v2/QuickStart\",\"content\":\"Click to view our Python SDK Documentation and Installation Guidehttpsgithubcomclearbladeclearbladepythonsdk\"},{\"title\":\"v2\",\"href\":\"/4-developer_reference/Python/v2/_default\",\"content\":\"\"},{\"title\":\"REST\",\"href\":\"/4-developer_reference/REST\",\"content\":\" You can interact with the ClearBlade Platform using our REST API Check it out herestaticrestapiindexhtml \"},{\"title\":\"Dev Console\",\"href\":\"/4-developer_reference/ReleaseNotes/Console/_default\",\"content\":\" 320 November 13 2017 1 Added support for MongoDB connected collections\"},{\"title\":\"Platform\",\"href\":\"/4-developer_reference/ReleaseNotes/Platform/_default\",\"content\":\" 318 November 13 2017 1 General Bug Fixes 2 v1 of MongoDB connector 38 May 8 2017 1 General bug fixes 2 Performance enhancements 37 May 1 2017 1 Message Relay1platformconceptsmessagingmessagerelay 2 Adapter Manager1platformconceptsAdapters 3 General bug fixes 4 Performance enhancements 36 April 26 2017 1 General bug fixes 2 Performance enhancements 35 April 18 2017 1 Message history fixplatformsdkClearBladejsmessaginggetmessagehistorywithtimeframetopiccountlaststartstopcallback 2 New analytics functionality 3 General bug fixes\"},{\"title\":\"Portal\",\"href\":\"/4-developer_reference/ReleaseNotes/Portal/_default\",\"content\":\" 320 November 13 2017 1 General bug fixes 2 exposed ClearBlade object to CBPORTAL interface More info here5portalv2featurescbPortalInterfacecbportalclearblade 3 Toggle widget can now be uncontrolled in the sense that a dynamic datasource is not required for the input value 4 Widgets can now be shorter 5 added HTTP datasource 6 added edge list datasource 7 added edge metrics datasource\"},{\"title\":\"Release Notes\",\"href\":\"/4-developer_reference/ReleaseNotes/_default\",\"content\":\"\"},{\"title\":\"Reference\",\"href\":\"/4-developer_reference/_default\",\"content\":\"\"},{\"title\":\"AngularJS\",\"href\":\"/4-developer_reference/angularjs/_default\",\"content\":\"\"},{\"title\":\"AngularJS SDK\",\"href\":\"/4-developer_reference/angularjs/sdkreference\",\"content\":\"You can interact with the ClearBlade Platform using the AngularJS SDK Check it out herehttpsgithubcomClearBladeAngularSDK\"},{\"title\":\"API Reference\",\"href\":\"/4-developer_reference/iOS/API_Reference\",\"content\":\" Authenticating There are multiple ways to authenticate with the platform With the ClearBlade object The most common way of authentication is to do so at initialization of the ClearBlade static object objectivec ClearBlade initSettingsWithSystemKeySYSKEY withSystemSecretSYSSECRET withOptions CBSettingsOptionServerAddressplatformclearbladecom CBSettingsOptionEmailyourUserEmail CBSettingsOptionPasswordyourPassword withSuccessCallbackClearBlade cb NSLogYay we did it Or you could create a object manually objectivec CBUser authenticateUserWithSettingscb ClearBlade object withEmail MYEMAIL withPassword PASSWORD withSuccessCallback CBUserNSLogwhoo withErrorCallback NSErroroh no or CBUser authenticateUserWithEmail MYEMAIL withPassword PASSWORD withSuccessCallback CBUserNSLogwhoo withErrorCallback NSErroroh no Or you can create an anonymous user objectivec CBUser anonymousUserWithSettingscb ClearBlade object WithErrorerr Calling Code Services We provide a function for calling code services asynchronously objectivec CBCode executeFunction myServiceName withParamsmyAwesomeParamNamedictionary value withSuccessCallback NSString result NSLogdid it withErrorCallbackNSError err oh no Getting Data There is an interrelationship between the concepts of Collections Items and Queries in the iOS SDK It is possible to access data via any of these mechanisms well go through each of them and what they mean Item An item roughly represents a row within a collection The iOS api allows the developer to create delete an item or items directly objectivec Init the item with a dictionary CBItem itm CBItem itemWithDatarownamerowvalue withCollectionIDMYCOLID Save the item Remember that the items data must correspond to the columns in the collection An item can even correspond to a row in a collection stored in an integrated database itm saveWithSuccessCallbackCBItemNSLogWhoo CBItem itemNSError err id JSONlots to do here the JSON can be helpful if the json failed to parse for some reason refresh the item perhaps other users are mutating the same row itm refreshWithSuccessCallbackCBitemNSLogWhoo withErrorCallbackCBItem itemNSError err id JSONstuff the items contents have changed delete the item This only applies if youve refreshed the item or have somehow populated the itemid somehow itm removeWithSuccessCallbackCBitemNSLogWhoo withErrorCallbackCBItem itemNSError err id JSONstuff Query If you want to make a direct query to the data you can just use a query object objectivec CBQuery cbq CBQuery initWithCollectionID MYCOLLECTION however we can apply filters to this object much like we can with the other platform SDKs lets say we want to find all hair color with value brown cbq equalTobrown forhair color whose age is also 23 cbq equalToNSNumber numberWithInt23 forage now if we want an OR on that query then we apply another query to it so we want hair color brown AND age 23 OR name jim CBQuery otherQuery CBQuery initWithCollectionID MYCOLLECTION otherQuery equalTojim forname and we apply the query to the first query cbq addQueryAsOrClauseUsingQuery otherQuery you can think of adding queries as creating an abstract syntax tree of your query no confusion on operator precedence now were ready to execute the query the first thing well do with it is a fetch to get items cbq fetchWithSuccessCallbackCBQueryResponse srstuff withErrorCallbackNSError err strong id JSONstuff alternatively we can update a row or rows depending on what the query matches cbq updateWithChangeshair colorgreen withSuccessCallbackCBQueryResponse srstuff withErrorCallbackNSError err strong id JSONstuff or even remove items cbq removeWithSuccessCallbackCBQueryResponse srstuff withErrorCallbackNSError err strong id JSONstuff Collections One can operate on collections but they are very intertwined with queries However sometimes it is valuable to use collections themselves objectivec CBCollection col CBCollection collectionWithIdMYCOLLECTION we can fetch the entire collection if we wish col fetchWithSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or we can fetch with a query CBQuery qry CBQuery initWithCollectionID MYCOLLECTION cbq equalTobrown forhair color col fetchWithQueryqry withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or we can update with that query col updateWithQueryqry withChanges hair color Puce withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or we can remove with a query col removeWithQueryqry withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON or finally we can create with info assuming the columns and types match with the collection in the platform col createWithDatahair colorbrown namejohn doe withSuccessCallbackCBQueryResponse sr withErrorCallbackNSError err strong id JSON Messaging The iOS SDK uses the mosquitto MQTT messaging client We expose a callbackbased interface objectivec were going to assume you already have a setup ClearBlade client object creating the object is quite easy CBMessageClient msgcli CBMessageClient client here one can supply a varying number of delegates to fire when messaging actions occur messageClientDidConnectCBMessageClient fires when the messaging client connects with the broker messageClientDidDisconnectCBMessageClient fires when the disconnection occurs whether it is purposeful or not messageClientCBMessageClient didPublishToTopicNSString withMessageCBMessage fires whena publish is sent to the broker messageClientCBMessageClient didReceiveMessageCBMessage fires whenever a message arrives This applies to all topics messageClientCBMessageClient didSubscribeNSStringtopic fires when a subscription succeeds messageClientCBMessageClient didUnsubscribeNSStringtopic fires when an unsubscribe succeedes messageClientCBMessageClient didFailToConnectCBMessageClientConnectStatus fires whenever the client fails to connect even on a reconnect attempt then connecting to the default host is fairly simple msgcli connect if you have a custom host msgcli connectToHost NSURL URLWithString MYIPADDR NSString top agoodtopic subscribe to a topic msgcli subscribeToTopictop publish to a topic msgcli publishMessageGreetz toTopictop note that if we assigned a function to didReceiveMessage it would fire when this message was received unsubscribe now that weve gotten our message msgcli unsubscribeFromTopictop disconnect msgcli disconnect Message history If you wish to obtain the message history and have the permissions to do so objectivec This is a static method NSError err NSArray res CBMessageClient getMessageHistoryOfTopictop fromTime NSDate initWithTimeIntervalSinceNow0 withCountNSNumber initWithInt30 withErrorerr \"},{\"title\":\"QuickStart\",\"href\":\"/4-developer_reference/iOS/QuickStart\",\"content\":\" New xCode Project Use xCode to create a new iOS project This project can target any desired set of iOS devices Install Cocoapods 1 Within your Xcode project directory open a terminal window and enter in the following commands sudo gem install cocoapods pod setup 2 Add ClearBladeAPI pod Create a podfile for your project Edit vim emaces nano etc Podfile Insert the following pod ClearBladeiOSAPI Install the pod pod install Open the xcworkspace file From now you will open the file with the extension xcworkspace instead of the project file Open this from Finder or Xcode to start working on your app Sample Calls To initialize the app call the class method ClearBlade initSettingsWithAppKeyltapp keygt withAppSecretltapp secretgt To fetch all from a collection Initialize a collection col CBCollection collectionWithIDltcollection IDgt Call the instance method col fetchWithSuccessCallbackCBQueryResponse successfulResponse NSLog CBItem successfulResponsedataItems objectAtIndex0 objectForKeyname NSMutableString str NSMutableString alloc init for int i 0 i lt successfulResponsedataItems count i str appendFormati n i CBItem successfulResponsedataItems objectAtIndexi data description NSLogStr str withErrorCallbackNSError err id stuff NSLog err description Learn More Try the iOS tutorial to learn more about the ClearBlade backend with examples for Objective C\"},{\"title\":\"Tutorial\",\"href\":\"/4-developer_reference/iOS/Tutorial\",\"content\":\" Overview Welcome the ClearBlade Tutorial The goal of this tutorial is not to bore you with tedious details of client side languages but instead quickly walk you through the basics of creating a highly scalable and flexible backend When you are done with this tutorial youll be ready to get started building your own mobile app or connected device which will be ready to be part of the internet of things Concepts include data management API creation messaging triggering of events and timers for scheduled work all done in a secure coherent manner Lets get started Setup Before starting we need to make sure you have access to a ClearBlade instance Many organizations have their own private hybrid or public instances which can made available to you If your not sure or dont have access yet you can always use a free trial account at the public SaaS ClearBlade instance at httpsplatformclearbladecom Now Lets get started Part 1 Create a System In this first part we are going to build our first system A system represents the backend components of application server database message broker and user registry all brought together to be easily utilized and managed 1 Click the New button located in the top left part of the menu bar 2 Provide a name Tutorial and description My First System 3 Click Create 4 View your system settings by clicking the wrench icon located in the top right of your new system 5 Capture your systemKey and systemSecret we will use those values in our clients NOTE User Session Token TTL provides you the ability to customize how long the user tokens are operational 6 Before we continue you need to download the iOS tutorial source files from Github httpsgithubcomClearBladeTutorialiOS 1 Clone the repository with the command git clone httpsgithubcomClearBladeTutorialiOSgit 2 Open the iOS Tutorial xcode project located within the cloned repository in xcode 3 Edit the file ViewControllerm and save NSString SystemKey YOURSYSTEMKEY NSString SystemSec YOURSYSTEMSECRET NSString collectionId COLLECTIONID NSString platformURL httpsclearbladeYOURDOMAINcom NSString messagingURL clearbladeYOURDOMAINcom NSString userEmail testclearbladecom NSString userPassword clearblade 7 Launch the iOS simulator using an iPhone 8 The final step of Part 1 is to initialize to the ClearBlade Platform anonymously Follow the instructions in the iOS Simulator to complete that task In some cases this tutorial will show examples of the client in Javascript Comparable user interfaces exist in the Android and iOS clients Lesson learned How to create a new system in the ClearBlade platform How to find the basic properties of a system How to log in anonymously so that all activities are tracked Part 2 Create a user The attribute that should be first in the minds of all enterprise platform developers is security Before anything meaningful happens with ClearBlade we must start to define the permissions model The permissions model in the ClearBlade platform is rolebased Although you have already created a developer account to login on the platform each system you create will have its own user registry For Part 2 we will create our first user and then connect to our system as that user To get the basic understanding of users 1 Click the Auth tab Add a new user email and password 2 Add a new user by Clicking the User icon 3 Set the user email to testclearbladecom 4 Set the user password to clearblade 5 Your user is now created and has been given the role of Authenticated To learn more about users and roles see the documentation1platformconceptsUsers 6 Go back to your iOS simulator and execute the Part 2 login action Lessons Learned How to navigate to users and roles Create new users Demonstrate connection to the ClearBlade Platform Part 3 Create a collection Now its time to create and work with data In this part we will define a new custom collection that is similar to a table found in a SQL database 1 Navigate to the system data section by clicking on Data from the menubar 2 In the upper left click the New button to create a new collection 3 This data for this collection will be stored inside the ClearBlade Platform so select Cloud and give the new collection a Name of Weather 4 Create new columns for the collection by clicking on the Column button 5 Name the new column city and set the type to String 6 Repeat the process to add the following additional columns a state String b country String c temperature int d weather String 7 Add a row of data by clicking on 8 Insert a row for Austin Tx USA 102 Sunny 9 Insert a row for New York Ny USA 77 Cloudy 10 By default security is turned off for all assets you create in the platform The next few steps enable your users to access this new data structure via simple REST based calls a Click the collections settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role CRUD permissions 11 You now have defined populated and authorized a new data structure 12 Go back to your iOS simulator and execute the Part 3 Fetch Your Data action NOTE For more information on the client app you can checkout the readme available on the Tutorial GitHub page Lessons Learned How to create data structure Applying authorities to those data structures Fetching those data structures in your client application Part 4 Create a service A best practice for building many apps includes creating an application layer of services In these services you have the ability to implement your API and build highly scalable business logic In this part we will create a simple service in the ClearBlade platform 1 Navigate to the system code section by clicking on Code from the menubar 2 Click the New button to open the new service dialog 3 Enter the name of ServicePart4 4 Click Add Parameter to add an input parameter named city to the service 5 Click Create to add the new service to your system 6 In your newly created service add the following lines of code javascript function ServicePart4req resp respsuccessWelcome requserEmail from reqparamscity 7 Add data to test with by clicking Test Parameters located in the bottom right 8 In the parameters dialog add Austin as your city value Note These values can be of different types In this case its important to include the quotes around your string value 9 Click Close when finished 10 To test your code click the button labeled Save and Test 11 The response should now be presented to you The code you added performed a basic Hello world operation There were several objects used that allowed for this interaction a req The request object contains a number of helpful attributes Including information about the user parameters passed to the user and core system attributes b resp The response object is how services are exited Calling respsuccess send back the payload to your calling endpoint 12 As services get complex its helpful to view logs of your service execution Turn on logging in your service by Clicking the wrench icon Select Logging enabled to YES Click the Requires tab and add the log library Choose Apply Now add the following logic to your service to write the request object to the log javascript function ServicePart4req resp logOur request object is JSONstringifyreq respsuccessWelcome requserEmail from reqparamscity 13 View your service logs by completing the following steps a Once again call the Save and Test operation b Close the Success dialog c Click the history icon in the top right d Choose the appropriate service execution run from the dropdown e The results of the log statement we wrote should now be visible In this case we have printed the req object for inspection Review the results 14 The last step is now to make this service available for your end users Update permissions for the service to execute for authenticated users a Click the service settings icon found in the upper right b Choose the Security tab in settings window c Click Role icon d Type Authenticated to select the role associated with our test user e Then give the Authenticated role Execute permissions 15 Now youre ready to test in your client app Go and complete Part 4 validation Lessons Learned How to create a new service How to pass and return data from a new service endpoint How to debug the service via logging How to securely expose the service to outside users Part 5 Create business logic Services can provide much more than just helloworld capability They have the power to implement your complete API In this next module we will do some basic data access and implement some simple business rules 1 Using the steps from part 4 Create a new service named ServicePart5 and add parameters city state and country 2 Copy and insert the following code into the newly created service javascript function ServicePart5req resp var city reqparamscity var state reqparamsstate var country reqparamscountry ClearBladeinitrequestreq var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccesstemperature 70 weather Sunny collectioncreatenewRow callback var callback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else respsuccesstemperature dataDATA0temperature weather dataDATA0weather var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetch callback NOTE This code represents some typical business logic This logic includes the following tasks a Take data from request parameters and store them locally b Create a Query object to go and search for existing data in the collection that matched the information passed over parameters c Update logic to add the new city if it didnt exist in the collection javascript var updateCollection function var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country var updateRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else respsuccessJSONstringifyupdateRow queryupdateupdateRow callback 4 Before this service can run you must add the ClearBlade library to your new services require list a First click on your services settings icon b Choose the Requires tab c In the add input field type clearblade and press enter d Before leaving the settings dialog Click the Security tab e Add the Authenticated role and ensure it can execute the service 5 Now youre ready to test in your client app Go and complete Part 5 validation in the iOS Simulator Lessons Learned How to connect to collections in a service Basic javascript syntax Leveraging the builtin ClearBlade library Part 6 Create a Library Developers always need to make reusable logic that can be leveraged across their applications In step 5 you used the built in library called ClearBlade You may also create new libraries that are available to all services in your system 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library updateCityLibrary 4 Change the Type of service to Library using the dropdown 5 Click Create 6 In the newly created library copy and paste the following code in the new library and confirm the collectionName is the same as the collection you created earlier javascript var getWeather functioncity callback var requestObject ClearBladehttpRequest var options uri httpapiopenweathermaporgdata25weatherqcityunitsimperialAPPID4b7403db83c14490daa37a57b722743f strictSSL false headers Accept applicationjson requestObjectgetoptions functionerr response callbackerr JSONparseresponse var saveWeather functionitemid temp description callback var cityWeather temperaturetempweatherdescription var q ClearBladeQuerycollectionNameWeather qequalToitemid itemid var callCallback function err data callbackerr data qupdatecityWeather callCallback This code contains two new functions getWeather which looks up the weather for a city using a third party http library saveWeather saves the results of the weather lookup to the collection 7 Open the settings for the updateCityLibrary by clicking the wrench icon 8 On the Requires tab add the http library and Apply 9 Continue by creating a new service to test your library Click the New button 10 Name the service ServicePart6 11 Create a new service ServicePart6 and copy and paste the following code into your new service This code will build off of the service defined in part 5 but now also includes calls to your custom library javascript function ServicePart6req resp var city reqparamscity var state reqparamsstate var country reqparamscountry var setWeather functionitemid city var temp 30 var descriptionunset var saveWeatherCallback functionerr data if err resperrordata else respsuccesscity weather is description and temp F var getWeatherCallback functionerr data temp datamaintemp description dataweather0description saveWeatheritemid temp description saveWeatherCallback getWeathercity getWeatherCallback var updateCollection function var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature 70 weather Sunny var callback functionerr data if err resperrordata else setWeatherdataDATA0itemid dataDATA0city collectioncreatenewRow callback var cityCallback functionerr data if err resperrordata else if dataDATAlength 0 updateCollection else setWeatherdataDATA0itemid dataDATA0city ClearBladeinitrequestreq var q ClearBladeQuerycollectionNameWeather qequalTocity city qequalTostate state qequalTocountry country qfetchcityCallback 12 In your new servicePart6 open the settings and be sure to require your new library along with the ClearBlade library and give the service Authenticated user permissions 13 You can now complete Part 6 validation in your app 14 After completing the validation you can check whether the data has been saved to the collection Lessons Learned How to create libraries Make raw http calls Part 7 Introduction to messaging Many apps want to accomplish more than just getting and showing data but provide a richer experience by having data pushed to them The data that get sents to these apps can come from a variety of places like IoT devices To accomplish this richer experience the ClearBlade Platform provides a messaging protocol that can be used on devices or in web browsers Part 7 will explore whats possible with ClearBlade secure scalable messaging 1 In your client app navigate to part 7 2 Click the Subscribe to Weather button to have your client began to listen on the topic called weather 3 Below the message box test sending data across the messaging protocol by entering something in the message box and clicking Publish to Weather That payload has now been sent securely through the ClearBlade Platform instance and received back by the client you are working with 4 Validate result in app window by ensuring the message appears in your message box 5 We can also see the results of the message using the developer console Begin by clicking on the Message item on the menu bar 6 In the lists of topics find and click on weather 7 Check the messages published under the weather topic Lessons Learned The availability of messaging for publish subscribe activities Message history is available for all topics within a system Customization of payloads across the message protocol Messaging support for browser and native device experiences Part 8 Messaging from Service To expand on messaging its not always desired that your clients are the ones issuing messages Broadcasted information coming from your server can provide tremendous value in keeping all clients notified of changes and in sync In Part 8 we will create a service that sends messages You will be able to see the result in the client you already have running 1 Ensure you are on the code tab by clicking on the menu bar 2 Click the New button to open the new service dialog 3 Name your library notifyLib 4 Select the Code type to Library 5 Use the standard process for updating the service required libraries to include clearblade 6 Copy and paste the following code javascript var notify functionmessage var messaging ClearBladeMessaging function messagingpublishweather message This code will send a basic message over the messaging protocol on the topic called weather 7 Next create a new service named ServicePart8 and copy and paste the following code javascript function ServicePart8req resp var getWeather function var queryCallback functionerr data if err resperrordata else var message partpart8 ts Date valuedataDATA0city is dataDATA0temperature degrees and dataDATA0weather notifyJSONstringifymessage respsuccessDone var query ClearBladeQuerycollectionNameWeather queryequalTocity Austin queryfetchqueryCallback ClearBladeinitrequestreq getWeather 8 In the newly created ServicePart8 open the settings and update the requires to include the libraries clearblade and notifyLib 9 This service does its own initialization so that it doesnt need a caller user token to run calls against the data It can be tested directly from the console 10 Click the button Save and Test 11 Look in your client app and validate the message from Part 8 now appears in your message box 12 Validate in the console in the message history tab Lessons Learned Messaging can be sent via a service Part 9 Create a Trigger Now that you have brought together the basic ideas of building your own API that includes data and live interactions with business logic you can explore the richness that occurs when these attributes are unified ClearBlade Platform triggers allow for you as a developer to identify certain events and automatically trigger an action This capability can be used to keep large numbers of clients in sync when a single data source changes or to invoke asynchronous data analysis 1 Begin by creating a new service called ServicePart9Trigger and copy and paste the following code javascript function ServicePart9Triggerreq resp ClearBladeinitrequestreq notifyJSONstringifypartpart9 reqJSONstringifyreq respsuccessdone 2 Update the settings of the new service by clicking the wrench icon and require the notifyLib and clearblade libraries 3 Before leaving the settings dialog go to the Triggers tab 4 Using the trigger UI create a new trigger that causes the service to run each time the weather collection has a create event called 5 We need the ability to test this new trigger so create another service named ServicePart9Caller and copy and paste the following code javascript function ServicePart9Callerreq resp var city Seattle var state WA var country USA var updateCollection functionTemp desc var collection ClearBladeCollectioncollectionNameWeather var newRow city city state state country country temperature parseIntTemp weather desc var callback functionerr data if err resperrordata else respsuccessdone collectioncreatenewRow callback var getWeatherCallback functionerr data var temp datamaintemp var description dataweather0description updateCollectiontemp description ClearBladeinitrequestreq getWeathercity getWeatherCallback 6 Using the settings on this new service update the requires to include updateCityLibrary and clearblade 7 Now click the Save and Test button to execute ServicePart9Caller from the console When this service runs it should create an entry in the Weather collection and consequently trigger your trigger event If everything has gone to correctly you should now see a part 9 entry in your app 8 Dont forget to verify that your console also tracked the event by using the Messaging tab Lessons Learned Triggers are applied to services When a trigger is called it passed data into the service describing the event that called it Triggers provide a unifying capability across all activities in your system Part 10 Create a Timer Now that we are reacting to events within the ClearBlade platform it becomes equally important to start scheduling activities ClearBlade provides the ability to set Timers on services that can run with both varying frequency and repition This capability mirrors what enterprises do today with batch jobs but also looks familiar to users of cloud services that monitor uptime and availability of infrastructure In Part 10 we will create a timer that causes a service to run every 10 seconds 30 times 1 From the Code tab click the New button to launch the new service dialog 2 Name the service ServicePart10 3 Copy and insert the following code into the newly created service javascript function ServicePart10req resp ClearBladeinitrequestreq var message partpart10 ts Date message Service executing every 10 seconds notifyJSONstringifymessage respsuccessdone 4 Add Administrator to your test users roles 5 Add the Administrator role to the service security 6 Leave Run as blank 7 Use the standard process for updating the services required libraries to include clearblade and notifyLib 8 Test the service in the console by clicking the Save and Test button 9 Click on the wrench icon and go to the Timers tab 10 Set the timer to run the service every 10 seconds 11 Click Apply 12 In your client you should now see 10 entries showing the execution of the timer Lessons Learned Timers are applied to services When a timer is called it passed data into the service describing the event that called it Timers provide a more traditional unifying capability across the capabilities of your system Part 11 View Analytics With each action you have been completing during this tutorial the ClearBlade platform has been building up a store of events and history This information makes up vital information that can be fed into analytics tools provided by ClearBlade partners These partners can identify usage trends penetration attempts and any number of device patterns Most important a REST API exists for access to all of the analytics stored in the ClearBlade Platform Explore the visualization of this data from the analytics tab Whats Next 1 Create a Portal5portalportalgettingstarted and begin to visualize the data within your ClearBlade Platform instance 2 Familiarize yourself with the raw APIs at the swagger SwaggerAnalyticsstaticrestapiindexhtmlanalytics 3 Familiarize yourself with samples tank chats 4 Learn about the integrations available Sockets Files 5 Review the CLI and development best practices 6 Practice using the system integration patterns for IoT social networks SalesForce AS400 and others found on githubhttpsgithubcomClearBladeClearBladePatterns 7 Communicate on the forums\"},{\"title\":\"iOS\",\"href\":\"/4-developer_reference/iOS/_default\",\"content\":\"\"},{\"title\":\"Portal\",\"href\":\"/5-portal/_default\",\"content\":\"\"},{\"title\":\"Sources\",\"href\":\"/5-portal/v1/Sources/_default\",\"content\":\"\"},{\"title\":\"Utility: Aggregator\",\"href\":\"/5-portal/v1/Sources/aggregator_source\",\"content\":\" Description A source that allows for the combination of other sources This aggregator source will be updated each time its child sources are updated This source type is useful when creating widgets that need data from multiple sources Return format childSourceName1 childSource1Value childSourceName2 childSource2Value \"},{\"title\":\"Analytics: Count\",\"href\":\"/5-portal/v1/Sources/analytics_count_source\",\"content\":\" Description Source to pull a count of entities within the platform OPTIONS Name String Local reference in portal Query String commaseparated list of modules to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Analytics: Event List\",\"href\":\"/5-portal/v1/Sources/analytics_eventList_source\",\"content\":\" Description Source to pull a list of events for specified modules OPTIONS Name String Local reference in portal Module String user collection messaging service push ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform Security This datasource requires that the user role has permission to access the relevant module\"},{\"title\":\"Analytics: Event Totals\",\"href\":\"/5-portal/v1/Sources/analytics_eventTotals_source\",\"content\":\" Description Source to pull count totals for specified modules OPTIONS Name String Local reference in portal Module String user collection messaging service push ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform Security This datasource requires that the user role has permission to access the relevant module\"},{\"title\":\"Analytics: Storage\",\"href\":\"/5-portal/v1/Sources/analytics_storage_source\",\"content\":\" Description Source to pull the storage used for a system or a specific collection OPTIONS Name String Local reference in portal Collection ID String If omitted will retrieve storage for all collections in a system Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Analytics: Top Entities\",\"href\":\"/5-portal/v1/Sources/analytics_topEntities_source\",\"content\":\" Description A wrapper around the Event List source which sums the count of requests for a unique ID or user ID OPTIONS Name String Local reference in portal Module String user collection messaging service push ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Analytics: User or Device Events\",\"href\":\"/5-portal/v1/Sources/analytics_userOrDeviceEvents\",\"content\":\" Description A wrapper around the Event List source which sums the count of requests for a unique ID or user ID OPTIONS Name String Local reference in portal Entity String Search events for users or devices User or Device IDs Array of user or device IDs Module String Module to filter for ID String The relevant module id If push leave blank Action String Specified action to return count createpassword resetupdatedev alterdev password resetdev deletedev readdev updatereaddeletedev createexecutedev savepublishrecieveiosandroidconnectionloginlogoutdisconnectsent Limit Int Number of results to return Time Interval Int Loop duration in seconds before reloading source Range Start Beginning of time window to query for Range End End of time window to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"Average Message Payload Size\",\"href\":\"/5-portal/v1/Sources/avg_payload_size\",\"content\":\" Description A source that retrieves the average payload size for a specified topic OPTIONS Name String Local reference in portal Topic Name String Name of the topic to query for Start Time Beginning of time window to query for Stop Time End of time window to query for Refresh Interval How often in seconds to query the platform\"},{\"title\":\"ClearBlade Device\",\"href\":\"/5-portal/v1/Sources/cb_device_source\",\"content\":\" Description Link to a ClearBlade platform systems device OPTIONS Name String Local reference in portal Device Name String Name of ClearBlade platform device Refresh Time Int Loop duration in seconds before reloading source Security This datasource requires that the user role has permission to access the ClearBlade platform device\"},{\"title\":\"Clock\",\"href\":\"/5-portal/v1/Sources/clock_source\",\"content\":\" Description Display the current time or provide a shared time reference to synchronize widgets OPTIONS Name String Local reference in portal Refresh Every Int Loop in seconds to update time\"},{\"title\":\"Code\",\"href\":\"/5-portal/v1/Sources/code_source\",\"content\":\" Description Link to a ClearBlade platform code service OPTIONS Name String Local reference in portal Code Name String Name of ClearBlade platform code service Refresh Interval Int Loop duration in seconds before reloading source Set to 0 for no refresh interval Default Payload obj If a refresh interval is set this is the payload attached to the service request Must be valid JSON Security This datasource requires that the user role has permission to execute the ClearBlade platform code service\"},{\"title\":\"Collection\",\"href\":\"/5-portal/v1/Sources/collection_source\",\"content\":\" Description Fetch an entire ClearBlade platform collection OPTIONS Name String Local reference in portal Collection Name String Name of ClearBlade platform collection Columns Array The columns to fetch from collection Defaults to all if left blank Refresh Time Duration of update loop Format Returns an array of collection items data specificToCollection destroy fn refresh fn save fn Security This datasource requires that the user role has permission to read the systems target collection\"},{\"title\":\"Current User\",\"href\":\"/5-portal/v1/Sources/current_user_source\",\"content\":\" Description Gather an object describing the current portal user OPTIONS Name String Local reference in portal Refresh Time Int Loop duration in seconds before reloading source Format Returns an object of the current user account creationdate Stringtimestamp email Stringemail userid Stringvarchar\"},{\"title\":\"Edge List\",\"href\":\"/5-portal/v1/Sources/edge_list_source\",\"content\":\" Description Gather a list of system edges OPTIONS Name String Local portal reference Refresh Time Int Loop to update in milliseconds\"},{\"title\":\"Item\",\"href\":\"/5-portal/v1/Sources/item_source\",\"content\":\" Description A Source linked to a particular item in a system collection OPTIONS Name String Portal local reference Collection Name String Name of collection in the ClearBlade platform System Field Name String Column name Field Value The matching value to return Format Returns an array of matching items data specificToCollection destroy fn refresh fn save fn Security This datasource requires that the user role has permission to read the systems target collection\"},{\"title\":\"JSON\",\"href\":\"/5-portal/v1/Sources/json_source\",\"content\":\" Description A JSON data source generated from a desired request OPTIONS Name String Portal local reference URL String Address to send the request Try Thingproxy Bool A direct JSON connection will be tried first if that fails a JSONP connection will be tried If that fails you can use thingproxy which can solve many connection problems to APIs See httpsgithubcomFreeboardthingproxy Refresh Every Int Loop in seconds to resend request Method Option Body Payload delivered with request usually POST Headers Request headers to send with request\"},{\"title\":\"Utility: Local Variable\",\"href\":\"/5-portal/v1/Sources/local_var_source\",\"content\":\" Description A source that allows for widgets to communicate locally throughout the portal For example a on list item click a local variable source can be assigned the value of that clicked element Other widgets in the portal could then react and display relevant information about that element OPTIONS Name String Local reference in portal\"},{\"title\":\"Message History\",\"href\":\"/5-portal/v1/Sources/message_history_source\",\"content\":\" Description Retrieve the message history of a systems messaging topic OPTIONS Name String Portal local reference name Message Topic String The topic in ClearBlade platform messaging Message Count Int Maximum number of messages to fetch Start Time Int Epoch timestamp in milliseconds to start searching from Refresh Time Int Refresh loop in seconds Format Returns an array of topics messages similar to message Stringany senddate Inttimestamp userid Stringvarchar Security This datasource requires that the user role has permission to read the systems message history\"},{\"title\":\"Message Topic\",\"href\":\"/5-portal/v1/Sources/message_topic_source\",\"content\":\" Description Link to a systems message topic OPTIONS Name String Portals local reference name Message Topic The topic in ClearBlade platform messaging If one does not exist it will be created on first publish Format Returns the most recent message as a string Expects a message payload as a string Security This datasource requires that the user role has permission to create and read the systems message history\"},{\"title\":\"Open DB Connections\",\"href\":\"/5-portal/v1/Sources/open_db_connections\",\"content\":\" Description A source to retrieve the open number of database connections made by the platform OPTIONS Name String Local reference in portal\"},{\"title\":\"Open MQTT Connections\",\"href\":\"/5-portal/v1/Sources/open_mqtt_connections\",\"content\":\" Description A source to retrieve a count of the open number of MQTT connections made by the platform OPTIONS Name String Local reference in portal\"},{\"title\":\"Users\",\"href\":\"/5-portal/v1/Sources/users_source\",\"content\":\" Description Provides a list of the users in the current system OPTIONS Name String The local name of the source in your portal Format Data creationdate timstampString email emailString userid varCharString Total Int Security This datasource requires that the user role has permission to read the user list\"},{\"title\":\"Widgets\",\"href\":\"/5-portal/v1/Widgets/_default\",\"content\":\"\"},{\"title\":\"Bar Graph - Basic\",\"href\":\"/5-portal/v1/Widgets/barGraph_basic_widget\",\"content\":\"PicstaticimgportalbarChartbasicpng Description A bar graph generated from input data OPTIONS Orientation Option Vertical or horizontal Graph Title String Title displayed in widget container Data An array of coordinate objects where x represents domain and y represents range x 0 y 1 x 1 y 2 x 2 y 4 x 3 y 8 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Bar Color CSS Qualified Color Fill color of the bars CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Bar Graph - Dual Y Axis\",\"href\":\"/5-portal/v1/Widgets/barGraph_dualYAxis_widget\",\"content\":\"PicstaticimgportalbarChartdualYAxispng Description A bar graph with two y axes generated from input data OPTIONS Orientation Option Vertical or horizontal Graph Title String Title displayed in widget container Data An array of coordinate objects where x represents domain y represents the first range and y2 represents the second range x label1 y 5000 y2 100 x label2 y 65000 y2 200 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Range Title 2 String Y2Axis Label for vertical orientation X2Axis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Bar Color CSS Qualified Color Fill color of the bars CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Bar Graph - Grouped\",\"href\":\"/5-portal/v1/Widgets/barGraph_grouped_widget\",\"content\":\"PicstaticimgportalbarChartgroupedpng Description A bar graph generated from input data OPTIONS Orientation Option Vertical or horizontal Graph Title String Title displayed in widget container Data An array of groups where name equals the group name and values is an array of coordinate objects Note that each x value must be unique for its containing group Label is used for the graph legend groups name CA values x 0 y 5000 label Under 40 x 1 y 500 label 40 name TX values x 0 y 6500 label Under 40 x 1 y 500 label 40 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Bar Color CSS Qualified Color Fill color of the bars CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Button\",\"href\":\"/5-portal/v1/Widgets/button_widget\",\"content\":\" Description The button widget allows a user to perform some action when the button is clicked OPTIONS Button Label String The text inserted in this fielded will appear on the button Event Target The relevant source and outgoing parser Size Option Size of the button\"},{\"title\":\"CRUD Grid\",\"href\":\"/5-portal/v1/Widgets/crudGrid_widget\",\"content\":\" Description An interactive grid for working with a sources data OPTIONS Grid Title String Title displayed in widget container Data The data displayed in the appropriate grid column Expected format columnname anyvalue anothercolumnname anyvale Columns The columns in the grid should correlate to datas keys and data type Optionally include a disabled attribute to prevent value updates Expected format name columnname type string name anothercolumnname type int disabled boolean Size In Blocks Int See Portal Overview for info on block size Example This example configuration uses ClearBlade Collection and Collection Columns datasources and all users with access to the portal have been given CRUD permissions Note that any datasource may be used but parsers need to be adjusted for expected format andor the relevant query Incoming parser for Data javascript ifthisdatasource undefinedreturn var fmtData forvar i 0 len thisdatasourcelength i len i fmtDatapushthisdatasourceidata return fmtData Here we extract the data from the collection datasource results data itemid 0001 col1 4321 data itemid 0002 col1 1234 and format it to the grids expected data itemid 0001 col1 4321 itemid 0002 col1 1234 Outgoing parser for Data javascript var query cbQuery queryequalToitemid thiswidgetdataitemid thiswidgetquery query return thiswidget For this outbound parser the widget is assigned a ClearBlade Query to updatedelete items with matching unique keys itemid Note that this logic may need to be adapted if you are working with a datasource other than a collection Incoming Parser for Columns javascript ifthisdatasource undefinedreturn var fmtColumns forvar c 0 len thisdatasourcelength c len c var col name thisdatasourcecColumnName type thisdatasourcecColumnType disabled thisdatasourcecColumnName itemid true false fmtColumnspushcol return fmtColumns Finally we take the collection columns datasource ColumnName itemid ColumnType uuid ColumnName col1 ColumnType int and format it to the grids expected column data name itemid type uuid disabled true name col1 int disabled false Since itemid is disabled a user will not be able to edit its value\"},{\"title\":\"Custom Widgets\",\"href\":\"/5-portal/v1/Widgets/custom_widgets\",\"content\":\" Walkthrough To understand widget source structure we will walk through the creation of a basic button widget First create a javascript file myCustomWidgetjs Widget Schema The first component of your widget is the schema delivered to the portal interface Loaded at runtime it contains meta information along with user editable settings relating to the widgets function js freeboardloadWidgetPlugin typename mycustomwidget displayname My Custom Widget description A custom button widget settings name containerwidth displayname Container width type integer description Width of your widgets container as a percentage Useful when juxtaposing widgets defaultvalue 100 required true newInstance functionsettings newInstanceCallback updateCallback newInstanceCallbacknew myCustomWidgetsettings updateCallback typename A unique reference that will be used locally in the portal displayname The name that appears in the list of available widgets description A text description of the widgets function settings The user editable settings Included is the required containerwidth attribute more details below newInstance An initialization function that generates an instance of myCustomWidget For this example we will add user settings that allow for customization of a button and link to an existing datasource Lets add the following so that our settings include js name buttonLabel displayname Button Label type text name eventTarget displayname Event Target type data outgoingparser true multiinput true forcedata dynamic name heightAdjust displayname height in blocks type number defaultvalue 4 name containerwidth displayname Container width type number description Width of your widgets container as a percentage Useful when juxtaposing widgets defaultvalue 100 required true Every setting has a name that is used within scope of the portal a displayname shown to users in the widgets settings panel type for relevant value handling a defaultvalue for initial states and a required flag to force user entry Setting types with relevant optionals text varchar number integer double float data Links the widget to a portals datasource outgoingparser Flag to signify the widget should have an outbound parser incomingparser Flag to signify the widget should have an inbound parser multiinput Flag specifying if multiple datasources can be triggered forcedata Do not allow a user to choose between data types Options dynamic static Widget Model Now that we have a schema in place a user can select and modify attributes of the widget We will add a model that will be used to run the widgets interaction within the portal Below is the model scaffolding with required methods js var myCustomWidget functionsettings updateCallback var self this var currentSettings settings selfrender functioncontainerElement Outputs element to the DOM selfgetHeight function Returns the block height of the widget A block is 60px return selfcurrentSettingsheightAdjust selfonSettingsChanged functionnewSettings User has opened and saved settings selfcurrentSettings newSettings selfonCalculatedValueChanged functionsettingName newValue Called when a linked datasource updates If multiple sources are linked using different setting objects handling can be filtered by checking settingName selfonDispose function Removal from portal methods selfgetValue function Used in parser to fetch value using thiswidget For the purpose of this example we will render a basic html form button When clicked a linked datasource will be sent whatever a user specifies in the outbound parser One possible implementation is given below js var myCustomWidget functionsettings updateCallback var self this var currentSettings settings Create a JQuery element refrence var myButtonElement attr typebutton value settingsbuttonLabel addClasswidgetbutton wrap Create a placeholder payload Will be modified by datasource var submitPayload selfrender functioncontainerElement Add the button element to the DOM container containerElementappendmyButtonElement Add an event listner to fire the datasource event myButtonElementon click selfonEvent selfgetHeight function Validated block value using utilswidgetcalculateHeightint Validates value type and range return utilswidgetcalculateHeightcurrentSettingsheightAdjust selfonSettingsChanged functionnewSettings Update settings currentSettings newSettings Update possible UI changes myButtonElementvalnewSettingsbuttonLabel selfonCalculatedValueChanged functionsettingName newValue Called when a linked datasource updates If multiple sources are linked using diffrent setting objects handling can be filtered by checking settingName Update the payload with the last known DS value submitPayload newValue selfonDispose function selfgetValue function return submitPayload selfonEvent function updateCallbacksubmitPayload Now that you have a functioning widget upload your source to GitHub or file hosting server Link custom widget to portals Within the portals tab of your ClearBlade platform system click New and select plugin In the name field enter a ClearBlade platform reference name Note that the name of the widget declared within your source will still be the name within your portal In the URL field include the raw link to your hosted source code If hosted on GitHub you may need to change rawgithubusercontentcom to rawgitcom nonproduction or cdnrawgitcom production\"},{\"title\":\"D3\",\"href\":\"/5-portal/v1/Widgets/d3_widget\",\"content\":\" Description The D3 widget allows users to display D3 graphics OPTIONS Source Data used for graph Expected data dynamic based on d3 implementation CSS D3 css style code Will affect global stylesheet Use CSS best practice graphId style path HTML HTML object of D3 object EX D3 Code Where the D3 script should be written thisdatasource is accessible through data\"},{\"title\":\"Dial\",\"href\":\"/5-portal/v1/Widgets/dial_widget\",\"content\":\" Description The dial widget allows the user to have a dial input OPTIONS Dial Name String Title displayed in widget Dial Value Expected incoming data format int\"},{\"title\":\"Message Feed\",\"href\":\"/5-portal/v1/Widgets/feed_widget\",\"content\":\" Description The message feed widget will display a live feed of the latest messages for a given topic OPTIONS Feed Name String Name of message feed widget Feed Source Select a message history source Size Option Predetermined block sizes\"},{\"title\":\"Flip Switch\",\"href\":\"/5-portal/v1/Widgets/flipSwitch_widget\",\"content\":\" Description A switch widget to control binary states OPTIONS Title String Title displayed in widget True Label String Text indicating the true state False Label String Text indicating the false state Switch Value Expected incoming format Bool\"},{\"title\":\"Gauge\",\"href\":\"/5-portal/v1/Widgets/gauge_widget\",\"content\":\" Description Displays a gauge indicating the current source value OPTIONS Title String Title of gauge Varient Option Indicator a gauge with a background that fills as a value changes Segmented a gauge with multiple segments of background Commonly used to distinguish thresholds Gauge Value Incoming data format Int Units String Units to be displayed Minimum Int Minimum gauge value Maximum Int Maximum gauge value Title Color CSS Qualified Color Gauge Background Indicator Gauge The background of the nonfilled gaugeCSS Qualified Color Segmented Gauge An array of gauge percent shares with respective colors Total of all shares must equal 1 Default if left blank share 040 color 569922 share 025 color FFF131 share 025 color CC5C2F share 010 color AA3224 Filled Gauge Color CSS Qualified Color Filled portion of gauge when an indicator variant Needle Color CSS Qualified color Color of indicator needle Label Color CSS Qualified Color Colors of current value display and minmax labels CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"HTML\",\"href\":\"/5-portal/v1/Widgets/html_widget\",\"content\":\" Description A widget composed of custom HTML OPTIONS Content The HTML to render for display Expected incoming data String Example parser Where chosen sources data is text return thisdatasource Height Blocks Int See Portal Overview for info on block size\"},{\"title\":\"Indicator Light\",\"href\":\"/5-portal/v1/Widgets/indicatorLight_widget\",\"content\":\" Description The indicator light widget display a small light that can be turned on and off OPTIONS Title String Title of widget Indicator Text Off Displayed when status is false Expected incoming data format String Indicator Text On Displayed when status is true Expected incoming data format String Light Status Current status of the light Expected incoming data format Bool\"},{\"title\":\"HTML Input\",\"href\":\"/5-portal/v1/Widgets/input_widget\",\"content\":\" Description An HTML input for user interaction OPTIONS Title String The title displayed within widget container Input Type Option Available types listed below Value Incoming parser specified the value of input Update datasource with value on input submission See expected value type for relevant input below Relevant Attributes Expected object See expected attributes for relevant input below Size Options Predefined block sizes Available Inputs Below are all of the available widgets along with expected value inputs attributesif supported and the type of data each returns It is recommended that validation for inputs is included in the outgoing parser Note that a return of value is the value from your optionsvalue datasource Button Expected Value string Attributes none Returns value Checkbox Expected Value any Attributes javascript checked stringboolean Example checked true Returns value Color Expected Value stringHEX Attributes none Returns stringHEX Date Expected Value stringyyyymmdd Attributes none Returns stringyyyymmdd Datetimelocal Expected Value stringyyyymmddT0000 Attributes none Returns stringyyyymmddT0000 Email Expected Value string Attributes none Returns string Month Expected Value stringyyyymm Attributes none Returns stringyyyymm Number Expected Value number Attributes javascript min number max number Example min 10 max 300 Returns number Password Expected Value string Recommend returning with incoming parser Attributes none Returns string Range Expected Value number Attributes javascript min number max number step number Example min 10 max 300 step 5 Returns number Search Expected Value string Attributes none Returns string Select Expected Value number Attributes javascript options String Expected options as strings options String selected String Optionally set a static default choice options red green blue selected blue Example Returns string of selected value Telephone Expected Value number string Attributes none Returns number string Text Expected Value string Attributes none Returns string Textarea Expected Value string Attributes none Returns string Time Expected Value stringHHMM Attributes none Returns stringHHMM Url Expected Value string Attributes none Returns string Week Expected Value stringYYYYW Attributes none Returns stringYYYYW\"},{\"title\":\"Line Graph - Basic\",\"href\":\"/5-portal/v1/Widgets/lineGraph_basic_widget\",\"content\":\" Description A line graph generated from input data OPTIONS Graph Title String Title displayed in widget container Data An array of coordinate objects where x represents domain and y represents range x 0 y 1 x 1 y 2 x 2 y 4 x 3 y 8 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Line Color CSS Qualified Color Stroke color of the line CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Line Graph - Multiline\",\"href\":\"/5-portal/v1/Widgets/lineGraph_multiline_widget\",\"content\":\"PicstaticimgportallineChartmultilinepng Description A line graph generated from input data OPTIONS Graph Title String Title displayed in widget container Data An array of groups where name equals the group name and values is an array of coordinate objects Note that each x value must be unique for its containing group groups name Bar sales values x 20160101T060000000Z y 44 x 20160102T060000000Z y 19 name Foo sales values x 20160101T060000000Z y 43 x 20160102T060000000Z y 98 Size In Blocks Int See Portal Overview for info on block size Domain Title String XAxis Label for vertical orientation YAxis Label for horizontal orientation Range Title String YAxis Label for vertical orientation XAxis Label for horizontal orientation Title Color CSS Qualified Color Color of graph title and axis labels Axis Color CSS Qualified Color Color of axis lines and increment labels Line Color CSS Qualified Color Stroke color of the line CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Map\",\"href\":\"/5-portal/v1/Widgets/map_widget\",\"content\":\" Description The map widget allows users to interact with google maps Users may send markets set markers and create a heat map OPTIONS Map Name String Name of map Map Type Option Simple Map Basic map functionality Heat Map Will render a heat map on top of map corresponding to placed markers Location source Select data source input and return location JSON in input parser Expected incoming data format zoom 16 markers lat 30266856 lng 97742322 lat 3027020 lng 97746638 Note Map will scale to show all markers if zoom attribute is ommited For outgoing parser return thiswidget to send created markers to datasource API Key Google API developer key\"},{\"title\":\"Picture\",\"href\":\"/5-portal/v1/Widgets/picture_widget\",\"content\":\" Description The picture widget allows the user to display a picture OPTIONS Image URL Qualified url to an image source Expected incoming data type String Format View Option How the image should be positioned within the container Refresh Every Number of seconds interval to refresh the image\"},{\"title\":\"Pie Chart\",\"href\":\"/5-portal/v1/Widgets/pieChart_widget\",\"content\":\" Description A pie chart generated from input data OPTIONS Graph Title String Title displayed in widget container Data An array of objects where x represents a slice and y represents the relevant value x0 y1 x1 y2 x2 y4 x3 y8 Include Legend Include a legend Size In Blocks Int See Portal Overview for info on block size Slice Colors CSSQualifiedColor Array of colors to be used to fill slices If more slices than color colors will be repeated FFFFFF rgb255255255 CCCCCCrgba200200200 Label Color CSS Qualified Color Color of axis lines and increment labels CSS Qualified Color Hex CCCCCC RGB rgb255255255 RGBA rgba2552552551\"},{\"title\":\"Rule Builder\",\"href\":\"/5-portal/v1/Widgets/ruleBuilder_widget\",\"content\":\" Description An If This Then That widget which will allow users to create simple conditional statements called IFs which will trigger other services such as SMS Email etc OPTIONS Name String The title displayed within widget container Allow Create Boolean Specifies whether or not users are allowed to define new rules within the widget If set to NO the Add New Rule link will NOT be displayed in the widget Allow Delete Boolean Specifies whether or not users are allowed to create delete rules defined within the widget Allow Edit Boolean Specifies whether or not users are allowed to modify rules defined within the widget Allow OnOff Boolean Specifies whether or not users are allowed to enabledisable rules defined within the widget Block Height Integer Predefined block sizes See Portal Overview for info on block size Container Width Integer The width of the widget container expressed as a percentage from 0 to 100 PreConditions In order to create modify and delete rules the user must belong to a role which was granted systemlevel access permissions in the ClearBlade Platform to create update and delete services and triggers USAGE Upon creating a new RuleBuilder widget the Rule Builder widget will be displayed without any rules since none have been created as of yet Clicking the Add New Rule link will allow you to create new rules In order to Create rules the Allow Create option for the RuleBuilder widget must be specified as YES When rules are created they will be listed within the rule builder widget Clicking the button showing the rule name will allow you to modify the configuration of that rule In order to Edit rules the Allow Edit option for the RuleBuilder widget must be specified as YES Clicking the trash can icon to the left of the rule name will allow you to delete a rule In order to Delete rules the Allow Delete option for the RuleBuilder widget must be specified as YES Clicking the ONOFF toggle will allow you to enabledisable a particular rule In order to EnableDisable rules the Allow ONOFF option for the RuleBuilder widget must be specified as YES Creating Rules 1 In the RuleBuilderWidget click the Add New Rule link A dialog will be displayed allowing you to provide a name for the rule and select the data source for the rule 2 Enter a descriptive name for the new rule 3 Select the datasource for the rule message is the only datasource currently supported In the context of the RuleBuilder widget a datasource refers to a ClearBlade Platform asset Future datasources that may be supported include data collections code services users devices etc 4 Upon selecting the message datasource you will be given the opportunity to specify the IF conditions under which the rule will be triggered To specify the triggering conditions for the rule specify values for the following fields 1 Topic The messaging topic associated with the rule Messages published to the specified topic will result in the rule being triggered 2 Variable The name of a variable within the message payload For Example color where the message payload is alertLevel Error color red 3 Operator The comparison operator to use when comparing the Variable to a Value 4 Value The value of the Variable used with the comparison operator to determine whether or not the rule should be triggered 5 Multiple conditions can be joined together with AND and OR operators to produce sophisticated rule triggering conditions Join conditions can be added to a rule by clicking the Add Condition button 6 When all rule triggering conditions have been specified click the Next button 7 Upon clicking the Next button you will be able to define the actions Then section that will be triggered when the conditions entered in steps 35 are met The alert types currently supported are SMS Send an SMS message to one or more mobile devices Twilio is currently the only supported SMS provider Email Send an email to one or more recipients SendGrid is currently the only supported Email provider Service Invoke a ClearBlade Platform code service 8 Select an alert type provide the appropriate values for the required fields and click the Next button 9 Upon clicking the Next button an overview of the rule configuration will be displayed If you are satisfied with the rule and wish to save it click the DONE button Otherwise you can click the Edit buttons within the IF and THEN sections to go back and make changes to the respective conditions and alerts 10 Upon clicking Done the rule will be displayed within the RuleBuilder widget Modifying Rules Clicking the button showing the rule name will allow you to modify the configuration of that rule In order to Edit rules the Allow Edit option for the RuleBuilder widget must be specified as YES Deleting Rules Clicking the icon to the left of the rule name will allow you to delete a rule In order to Delete rules the Allow Delete option for the RuleBuilder widget must be specified as YES Adding conditions to rules While editing the IF section of a rule you can add additional conditions joined by logical AND and OR operators by clicking the Add Condition button Deleting conditions from rules Conditions can be deleted from rules by clicking the icon located in the bottom left corner of a condition Turning rules ONOFF Clicking the ONOFF toggle will allow you to enabledisable a particular rule In order to EnableDisable rules the Allow ONOFF option for the RuleBuilder widget must be specified as YES \"},{\"title\":\"Sparkline\",\"href\":\"/5-portal/v1/Widgets/sparkline_widget\",\"content\":\" Description The sparkline widget displays numeric data in a graph OPTIONS Title String Title of sparkline Sources The source to display current value changes Expected incoming data format Int Include Legend Bool Should a legend be displayed Legend Key displayed to distinguish sources\"},{\"title\":\"Speedometer\",\"href\":\"/5-portal/v1/Widgets/speedometer_widget\",\"content\":\" Description The speedometer widget allows the user to display a speedometer OPTIONS Speedometer Name String Name of speedometer Maximum Value Int Max speed the speedometer can display Unit String Unit of speed to display Speed Source Expected incoming data format Int\"},{\"title\":\"Text Editor\",\"href\":\"/5-portal/v1/Widgets/textEditor_widget\",\"content\":\" Description The text editor widget with formatting capabilities OPTIONS Title String The title displayed within widget container Content The text to render for display Expected incoming data String Example parser Where chosen sources data is text return thisdatasource Size Options Predefined block sizes See Portal Overview for info on block size\"},{\"title\":\"Text\",\"href\":\"/5-portal/v1/Widgets/text_widget\",\"content\":\" Description The text widget allows the user to display text in addition to a corresponding sparkline graphic OPTIONS Title String Title of text Size Option Size of text widget Font Option Display font of text Italic Bool Display text in italics Bold Bool Display text in bold Content Expected incoming data format Text Include Sparkline Bool Display corresponding sparkline graphic Animate Value Changes Bool Animation when values change to new value Units String Units of sparkline display\"},{\"title\":\"Speech Recognition\",\"href\":\"/5-portal/v1/Widgets/voice_recognition\",\"content\":\" Description The speech recognition widget allows a user to convert speech to text Note this widget only works in supported browsers check browser support herehttpcaniusecomfeatspeechrecognition OPTIONS Event Target The relevant source and outgoing parser Size Option Size of the widget\"},{\"title\":\"V1\",\"href\":\"/5-portal/v1/_default\",\"content\":\"\"},{\"title\":\"Data Parsing\",\"href\":\"/5-portal/v1/portal_data_parsing\",\"content\":\" Source A datasource available to all widgets in portal Accessors datasourcessourceKey Available methods latestData Any Return the latest value associated with the source Parser A function that filters data and has access to portals scope variables Widget Scope Variables thisdatasource The current data of the widgets linked source Equivalent to calling datasourcessourceKeylatestData thiswidget The value of the current widget Incoming Filters from source to widget most commonly used to format data into widgets expected format Outgoing Filters from widget to source most commonly used to format payload for source\"},{\"title\":\"Getting Started\",\"href\":\"/5-portal/v1/portal_getting_started\",\"content\":\"This guide will help you get familiar with ClearBlade Portal and demonstrate the usefulness of a growing collection of plugins Creating A Portal First Login to the ClearBlade Platform and select portal in the system that you wish to link a portal CLick portal on desired systemstaticimgportalgettingstartedcreateportal1png You will be directed to the portal management screen where you will see a table of your portals and plugins Since we do not have any portals lets create a new one by clicking new on the left of the top navigation bar Click to add new portalstaticimgportalgettingstartedcreateportal2png Here lets select Portal and give it a name Leave the template selection as empty This is where you could clone existing portals or select from prebuilt templates Create a new portalstaticimgportalgettingstartedcreateportal3png Before we jump into building our portal we need to give permission for our users to access and edit the portal Click the wrench next to your new portal and select the security tab Open portal security settingsstaticimgportalgettingstartedcreateportal4png This step assumes we have users in our system if not please add users in Auth Users Giving the authenticated role access to read will allow these users to sign in and operate a portal By giving administrator roles CRUD access they will be able to modify the portal that will reflect in the public view Give roles access to portalstaticimgportalgettingstartedcreateportal5png Now that we have access to open a portal click the portals link and sign in with an administrators credentials Click portal linkstaticimgportalgettingstartedcreateportal6png Login to portalstaticimgportalgettingstartedcreateportal7png Welcome to your portal Login to portalstaticimgportalgettingstartedcreateportal8png Adding Datasources Before we start adding widgets to our portal lets add a few sources to interact with our ClearBlade system We will provide an overview of how sources work by setting up a Code Collection and Message Topic source Refer to docs for information regarding all sources Code Source For this example lets make a code service in the ClearBlade Platform called helloPortal that responds with Hello plus a random number 0100 Sample code servicestaticimgportalgettingstartedcreatesourcecode1png Similar to giving access to our portal we need to give access to our code service Open the code settings and under security lets add Authenticated and Administrator Note that all users are given the Authenticated so we could have stopped there and the Administrators would have access but in a situation where access may be spread amongst many roles it is important that every role with access to a portal using this service is granted access Give role accessstaticimgportalgettingstartedcreatesourcecode2png Now that our service is set up lets navigate back to our portal and click add under datasources and select code Add Sourcestaticimgportalgettingstartedcreatesourcecode3png Here we enter a local name for our datasource and the name of our service in our ClearBlade system We will set a 10 second interval and since our service does not require parameters we will leave our payload as an empty object Refresh interval and default payload are available if you want your source to update periodically In some cases you will only want to update your source when triggered by a plugin rather than loop Create Code DSstaticimgportalgettingstartedcreatesourcecode4png You will notice that the HelloPortalService updates every 10 seconds We will use that source in a few minutes but first lets set up a message topic and collection datasource Collection Source Lets start by adding a collection to our ClearBlade Platform system First create a json file or saveAs json with weeklyStatsjsonstaticsamplejsonweeklyStatsjson then import this sample collection into ClearBlade Platform system Create Code DSstaticimgportalgettingstartedcreatesourcecollection2png Again we will need to add our roles to access the collection Collection settings Security Give roles access to portalstaticimgportalgettingstartedcreateportal5png Now lets navigate back to our portal and add the collection source Add Collection Sourcestaticimgportalgettingstartedcreatesourcecollection1png Again the name is a local name to refer to our source in the portal and the collection name is what name we gave to our ClearBlade system data collection We will leave columns blank so we can have access to all the data in the collection Since we are not expecting this collection to update frequently we are going to set the refresh interval for every minute Configure Collection Sourcestaticimgportalgettingstartedcreatesourcecollection3png You will notice that the WeeklyUseCollectionSource updates every 60 seconds We will use that source in a few minutes but first lets set up our message topic source Message Topic Source Because we can create new topics by publishing there is no need to already have a topic in our ClearBlade system Although in most scenarios you will already have a message topic set up Lets give our roles permission to publish read and update topics In your ClearBlade Platform system navigate to Auth Roles For our Authenticated and Administrator roles under Message History add publish read and update Give roles access to messagingstaticimgportalgettingstartedcreatesourcemessage1png Now we can add our message topic datasource Navigate back to your portal and click add under datasources Select Message Topic Again the name will be a local reference within your portal and the topic corresponds to a ClearBlade platform message topic Add message data sourcestaticimgportalgettingstartedcreatesourcemessage2png Using Plugins Widgets You have set up three datasources now lets create dynamic widgets that interact with your ClearBlade Platform system Using Our Code Source Well start with a basic text widget that displays the most recent HelloPortalService response First lets delete the default pane and add our own Create and delete a panestaticimgportalgettingstartedcreatewidget1png Now lets add a widget Add widget to panestaticimgportalgettingstartedcreatewidget2png Select Text To understand the options of each widget view our resources in docs We will give the widget a title and select a Dynamic content type This is where we link our HelloPortalService Because a code source responds with an object results success bool we need to format the response to the expected format of our widget Within incoming parser replace with return thisdatasourceresults Close the parser and click save Once your source updates you should see the response from the code service and proceeding updates will update the widgets content Text Widgetstaticimgportalgettingstartedcreatewidget3png Before moving on to using our next datasource lets explore the use of a parser by using the same response to update a gauge widget In the same pane lets add another widget and select Gauge Add Widgetstaticimgportalgettingstartedcreatewidget4png Lets leave all the defaults and just change the gauge value to dynamic and select HelloPortalService Since the gauge expects an integer we need to edit the parser to return the random number after hello Gauge Widget Optionsstaticimgportalgettingstartedcreatewidget5png Gauge incoming parserstaticimgportalgettingstartedcreatewidget6png After modifying your parser click close and save Youll see your gauge adjust as the source updates Note parsers are where you should provide error handling for instance if the response was null or its success attribute was false Youve now used a datasource in two different widgets by utilizing parsers As your source updates the status and gauge will update Working with data sourcesstaticimgportalgettingstartedcreatewidget7png Using Our Collection Source Since our WeeklyStatsSource is a collection of bandwidth use for the last week lets use it to build a bar graph Start by adding a new pane then add a Bar Graph widget to that pane Add a bar graph widgetstaticimgportalgettingstartedcreatewidget8png We need to modify the sources data to the widgets expected format so lets set up our parser Collection format data bandwidth 50 day Mon itemid uniqueid destroy fn refresh fn save fn so lets parse through the data and format to expected xdomain y 00 Setup Graph Parserstaticimgportalgettingstartedcreatewidget9png Once setup click close and save You should now see your bar graph populated with the data in WeeklyStatsSource Example bar graphstaticimgportalgettingstartedcreatewidget10png Using Our Messaging Source Lets build a simple interface to publish messages to our topic First create a new pane and add an input widget By selecting a dynamic value we are able to trigger the messaging data source when we leave our input This will cause the value of out input field to be published to examplePortalTopic Because we just want basic text well leave the outgoing parser to the default returning the widgets value Input widgetstaticimgportalgettingstartedcreatewidget11png Before trying out our input widget lets setup a text widget to display the most recent message In the same pane add a text widget Since our message source is already returning data as text we can leave our incoming parser to return the sources data Text widgetstaticimgportalgettingstartedcreatewidget12png Now we can try out our widgets Type a message into the input field and click off You will see the text field pupulate with the most recent message Using the input widgetstaticimgportalgettingstartedcreatewidget13png If you navigate to messaging in your ClearBlade Platform system you will see the messages sent by your portal along with the userid that published the message Messaging results in ClearBladestaticimgportalgettingstartedcreatewidget14png\"},{\"title\":\"Layout Overview\",\"href\":\"/5-portal/v1/portal_overview\",\"content\":\" Portal A portal is comprised of panes displayed on a responsive grid Layouts are determined based on the number of columns a screen can support Therefore a portal contains a layout relative to each column of support Portal Pane PaneTab Widget Pane A container for a grouping of widgets Title String Displayed in pane header Columns Int Number of columns a pane should occupy If larger than portal columns it will be reduced to portal columns Tabbed Pane Bool Supports multiple tabs within pane When false widgets are placed into initial tab Display Header Bool Whether to display header Header Theme Option Specified theme for header Pane Tab A page of widgets within a pane Tab Title String Displayed at the top of a pane container to identify a tab Widget A specialized element that can display source data andor allow for user interaction Type Option Specified widget type Title String Displayed in relevant widget header position Height Size Int Based on blocks of 60px Not available for widgets with fixed heights Specific Options See all widgets Specific Data A widget may serve as a data display user interface or both Some widgets allow for static sources such as textwidget Dynamic sources allow for the use of parsers to format data to the expected widget format Learn more Data Handling\"},{\"title\":\"Source types\",\"href\":\"/5-portal/v1/source_types\",\"content\":\" Static A static representation of data Useful for displaying text or other values that dont change Dynamic A value that responds to changes in sources Anytime a corresponding source updates a widget that listens on that source will execute its parser Calculated A value that should be dynamic but does not need to respond to source updates One example is for analytics sources that use timebased values to query Example return the yesterdays date at midnight var d new Date dsetDatedgetDate 1 dsetHours0000 return dgetTime1000 \"},{\"title\":\"User Registration\",\"href\":\"/5-portal/v1/user_registration\",\"content\":\"This document demonstrates how to set up the ability for users to register with your IoT system via portals 1 Create an empty Portalportalgettingstartedcreatingaportal 2 Grant create user permissions2consoleadministrationUserscreatingroles to the Anonymous role 3 Test via the portal 1 Open the portal that was created in step 1 2 Click on the Sign Up tab on the login dialog Sign Upstaticimgportaluserregistrationuserregistrationpng 3 Fill in the form and submit\"},{\"title\":\"Types\",\"href\":\"/5-portal/v2/Features/Plugins/Types/_default\",\"content\":\"\"},{\"title\":\"Datasource\",\"href\":\"/5-portal/v2/Features/Plugins/Types/datasource\",\"content\":\"A datasource plugin is made up of two parts 1 A definition5portalv2featurespluginsdefinition that is registered with the portal 2 A functiondatasourcefunction that is responsible for interacting with thirdparty APIs responding to various lifecycle methods and notifying the portal when new data is available In this document we will cover the following 1 Example Definitionexampledefinition 2 Datasource functiondatasourcefunction 3 Example Datasource functionexampledatasourcefunction Example Definition CBPORTALregisterDatasource this function must be called in order to register the datasource as a plugin typename CBPLUGINDATASOURCE displayname Datasource Plugin group ClearBlade Plugins description A datasource as a plugin class PluginDatasourceTest settings name query displayname Search Query type text required true name apiKey displayname Google Search API Key type text required true name searchEngineId displayname Search Engine ID type text required true name dessert displayname Favorite Dessert type text required true name booleanVal displayname Boolean Value type boolean defaultvalue true name numberVal displayname Number Value type number defaultvalue 42 name colorVal displayname Color Value type color defaultvalue fff name optionVal displayname Option Value type option defaultvalue option2 options name Option 1 value option1 name Option 2 value option2 Datasource function The datasource function takes a few parameters nametypedescription settingsobjectThe value for settings upon instantiation updateCallbackfunctionUsed to notify the portal that data has changed will cause widgets that are hooked up to the datasource to rerender errorCallbackfunctionUsed to display an error message inside the portal Takes two parameters title and message The datasource function can implement the following methods namerequireddescription onSettingsChangedfalseCalled when the datasources settings are changed can be used to store new values sendDatatrueUsed to interact with a thirdparty API updateNowfalseUsed to refresh the datasource with the current settings Called when the refresh button is pressed inside the portal onDisposefalseUsed to clean up any functions or objects that could cause memory leaks interval timers IndexedDB connections etc Example Datasource function function PluginDatasourceTestsettings updateCallback errorCallback let payload query settingsquery apiKey settingsapiKey searchEngineId settingssearchEngineId thisonSettingsChanged function settings payload query settingsquery apiKey settingsapiKey searchEngineId settingssearchEngineId thisupdateNow thisupdateNow function thissendDatapayload function handleErrorsresponse if responseok throw ErrorresponsestatusText return response thissendData function data fetchhttpswwwgoogleapiscomcustomsearchv1qdataquerykeydataapiKeycxdatasearchEngineId method GET thenhandleErrors thenresp respjsonthenjsonResp updateCallbackjsonResp catche errorCallbackFailed to search e thisonDispose function thisupdateNow \"},{\"title\":\"Widget\",\"href\":\"/5-portal/v2/Features/Plugins/Types/widget\",\"content\":\"A widget plugin is made up of two parts 1 A definition5portalv2featurespluginsdefinition that is registered with the portal 2 A functionwidgetfunction that is responsible for rendering the widget and responding to various lifecycle methods In this document we will cover the following 1 Example Definitionexampledefinition 2 Widget functionwidgetfunction 3 Example Widget functionexamplewidgetfunction Example Definition CBPORTALregisterWidget this function must be called in order to register the widget as a plugin typename MyTestWidget displayname My Test Widget plugin true class PluginTest settings name textVal displayname Text Value type text defaultvalue Plugin name booleanVal displayname Boolean Value type boolean defaultvalue true name numberVal displayname Number Value type number defaultvalue 42 name colorVal displayname Color Value type color defaultvalue fff name optionVal displayname Option Value type option defaultvalue option2 options name Option 1 value option1 name Option 2 value option2 name multiObjectVal displayname Multiple Objects Value type MULTIOBJECTSETTINGTYPE objectShape name label displayname Label type text name orientation displayname Orientation type option options name left value left name right value right defaultvalue right name paddingTop displayname Top Padding type number defaultvalue 0 name paddingBottom displayname Bottom Padding type number defaultvalue 0 defaultvalue name label displayname Label type text name orientation displayname Orientation type option options name left value left name right value right defaultvalue right name dataVal displayname Data Value type DATASETTINGTYPE group Data incomingparser true expectedformat name Page A uv 4000 pv 2400 av 1400 rv 3000 name Page B uv 3000 pv 1398 av 1400 rv 3000 defaultvalue dataType CALCULATEDDATATYPE value return name Page A uv 4000 pv 2400 av 1400 rv 3000 name Page B uv 3000 pv 1398 av 1400 rv 3000 required true Widget function namerequireddescription rendertrueThis method is responsible for either adding elements to the container element or returning a value to be rendered Called every time a setting or data is updated onSettingsChangedfalseCalled when the widgets settings are changed can be used to store new values onCalculatedValueChangedfalseCalled when a DATASETTINGTYPE setting updates with new data onDisposefalseUsed to clean up any functions or objects that could cause memory leaks interval timers IndexedDB connections etc Example Widget function function PluginTestsettings updateCallback thisallInfo settings settings thisrender function element return Stringified Info Text Value thisallInfosettingstextVal Boolean Value thisallInfosettingsbooleanVal Number Value thisallInfosettingsnumberVal Color Value thisallInfosettingscolorVal Option Value thisallInfosettingsoptionVal Multi Object Value JSONstringifythisallInfosettingsmultiObjectVal Data Value thisallInfodata JSONstringifythisallInfodatadataVal thisonSettingsChanged function settings consolelogsettings thisallInfosettings settings thisonCalculatedValueChanged function data consolelogdata thisallInfodata data thisonDispose function consolelogdisposed \"},{\"title\":\"Plugins\",\"href\":\"/5-portal/v2/Features/Plugins/_default\",\"content\":\"\"},{\"title\":\"Definition Object\",\"href\":\"/5-portal/v2/Features/Plugins/definition\",\"content\":\" Definition keytyperequireddescription typenamestringtrueUnique ID for this plugin pluginbooleantrue displaynamestringtrueThe name of the plugin as it will show up in the list of widgets settingssettingsettingtrueList of configurable settings classfunctiontrueReference to a function that is responsible for rendering the widget groupstringfalseAdd this plugin to a specific group of widgets defaults to Other Setting A setting is an object with the following fields keytyperequireddescription namestringtrueUnique name for the setting displaynamestringtrueUsed in the widget settings modal typestringtrueRefer to setting typesettingtypes for possible values defaultvaluesetting typesettingtypesfalse groupstringfalseAllows for grouping settings into sections descriptionstringfalseDescription for the setting requiredbooleanfalseIf true this setting must be given a value in order to save the widgets settings Advanced Settings Advanced settings are settingssetting that contain additional fields that allow for more customization DATASETTINGTYPE This field is generally used to hook a widget setting up to a datasource5portalv2featuressourcesoverview keytyperequireddescription expectedformatstringfalseUsed to remind users of the format that this setting expects incomingparserbooleanfalseIf true this widget setting will respond to changes in a datasource outgoingparserbooleanfalseIf true this widget setting will be able to send values to a datasource A DATASETTINGTYPE can be one of the following 1 STATICDATATYPE 2 CALCULATEDDATATYPE 3 DYNAMICDATATYPE MULTIOBJECTSETTINGTYPE keytyperequireddescription objectShapesettingsettingtrueDescribes the fields available and their types option keytyperequireddescription optionstrueUsed by the option setting type to give the user a list of possible choices Setting Types nametypeexample textstringHello numbernumber42 booleanbooleantrue colorstringfff optionbottom DATASETTINGTYPEdataType DYNAMICDATATYPE value return thisdatasource MULTIOBJECTSETTINGTYPEorientation left value 42 color red\"},{\"title\":\"Overview\",\"href\":\"/5-portal/v2/Features/Plugins/overview\",\"content\":\" Plugin A JavaScript file that can be loaded by a portal to extend the default list of widgets and datasources Types 1 Widget5portalv2featurespluginstypeswidget 2 Datasource5portalv2featurespluginstypesdatasource Use cases 1 When a custom datasource5portalv2featuressourcesoverview is necessary 2 When a custom widget5portalv2featureswidgetsoverview is called for in a separate portal a plugin can be used to reuse the same widget across multiple portals Note the HTML widget5portalv2featureswidgetstypesHTMLWIDGETCOMPONENT is a custom widget but it is not automatically available in portals other than the original Hosting a plugin A plugin must be hosted on a website that will return the correct ContentType headers when the resource is requested eg RawGithttpsrawgitcom\"},{\"title\":\"Avg. Message Payload Size\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_AVG_MESSAGE_PAYLOAD_SIZE\",\"content\":\" Description Fetch the average payload size for a given topic Settings NameTypeGroupRequiredDescriptionDefault Topic nametextfalse Start timenumberfalse Stop timenumberfalse Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Code Service\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_CODE_SERVICE\",\"content\":\" Description Call a ClearBlade service with parameters Settings NameTypeGroupRequiredDescriptionDefault Code NametexttrueName of the code service which you wish to execute on your system Payloadtextfalsepayload must be a valid JSON object ex parameter value Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Collection\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_COLLECTION\",\"content\":\" Description Perform operations against a collection in your ClearBlade system Settings NameTypeGroupRequiredDescriptionDefault Collection Nametexttrue Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Device\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_DEVICE\",\"content\":\" Description Access a ClearBlade device Settings NameTypeGroupRequiredDescriptionDefault Device NametexttrueName of ClearBlade Device you would like to access Refresh Timenumberfalse Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Edge List\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_EDGE_LIST\",\"content\":\" Description Retrieve all edges in your ClearBlade System Settings NameTypeGroupRequiredDescriptionDefault Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"ClearBlade Edge Metrics\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_EDGE_METRICS\",\"content\":\" Description Retrieve metrics for an edge Settings NameTypeGroupRequiredDescriptionDefault Edge Nametexttrue Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Message Topic\",\"href\":\"/5-portal/v2/Features/Sources/Types/CB_MESSAGE_TOPIC\",\"content\":\" Description A topic streaming payloads over a websocket Settings NameTypeGroupRequiredDescriptionDefault Topic nametexttrue Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Aggregator\",\"href\":\"/5-portal/v2/Features/Sources/Types/DATASOURCE_AGGREGATOR\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault DatasourcesDATASETTINGTYPEtrueDatasources to aggregate\"},{\"title\":\"Local Variable\",\"href\":\"/5-portal/v2/Features/Sources/Types/LOCAL_DATASOURCE_PLUGIN\",\"content\":\" Description A variable stored in the local portal scope\"},{\"title\":\"HTTP\",\"href\":\"/5-portal/v2/Features/Sources/Types/UtilityHttp\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault URLtexttrue Methodoptionfalseget BodyjsonBuilderfalse HeadersKEYVALUEBUILDERTYPEfalse Refresh Interval snumberfalseUpdate datasource every X seconds 0 for no interval Call on loadbooleanfalseIf set to true this datasource will be automatically invoked on portal startuptrue Suppress ErrorsbooleanfalseIf set to true any network errors caused by this datasource wont be shown to the user\"},{\"title\":\"Types\",\"href\":\"/5-portal/v2/Features/Sources/Types/_default\",\"content\":\"\"},{\"title\":\"Sources\",\"href\":\"/5-portal/v2/Features/Sources/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/5-portal/v2/Features/Sources/overview\",\"content\":\" Datasource An instance of a Datasource Model that interacts with a thirdparty API via HTTP websockets etc Create a datasource 1 Click the plus button next to the datasource list Add datasourcestaticimgportalv2sourcesoverviewaddpng 2 Enter values for all required fields Modify datasourcestaticimgportalv2sourcesoverviewdatasourceinfopng Edit a datasource 1 Click the name of the datasource you wish to edit Edit datasourcestaticimgportalv2sourcesovervieweditpng View latest data for datasource 1 Click the timestamp in the Last Updated column of the datasource you wish to view View latest data for datasourcestaticimgportalv2sourcesoverviewlatestdatapng 2 View data View datastaticimgportalv2sourcesoverviewlatestdataviewpng Refresh a datasource 1 Click the refresh button of the datasource you wish to refresh Refresh datasourcestaticimgportalv2sourcesoverviewrefreshpng Delete a datasource 1 Click the trashcan button of the datasource you wish to delete Delete datasourcestaticimgportalv2sourcesoverviewdeletepng 2 Confirm deletion when prompted\"},{\"title\":\"Bar Chart\",\"href\":\"/5-portal/v2/Features/Widgets/Types/BAR_CHART_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Chart DataDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn name Page A uv 4000 pv 2400 av 1400 rv 3000 name Page B uv 3000 pv 1398 av 1400 rv 3000 name Page C uv 2000 pv 9800 av 1400 rv 3000 name Page D uv 2780 pv 3908 av 1400 rv 3000 Bars per groupMULTIOBJECTSETTINGTYPEBarsfalsedataKeyuvdataKeypvdataKeyavdataKeyrv Bar ColorsMULTIOBJECTSETTINGTYPEColorsfalse Data KeydataKeyX Axistruename LabeltextX Axisfalse OrientationoptionX Axisfalsebottom Left PaddingnumberX Axisfalse Right PaddingnumberX Axisfalse Y AxesMULTIOBJECTSETTINGTYPEY Axesfalseorientationleft Reference LinesMULTIOBJECTSETTINGTYPERef Linesfalse Margin TopnumberChartfalse Margin RightnumberChartfalse Margin BottomnumberChartfalse Margin LeftnumberChartfalse BrushbooleanBrushfalse Data KeydataKeyBrushfalse HeightnumberBrushfalse StrokecolorBrushfalse ShowHidebooleanGridfalsetrue Horizontal GridbooleanGridfalsetrue Vertical GridbooleanGridfalsetrue ShowHidebooleanLegendfalsetrue Font ColorbooleanLegendfalse LayoutoptionLegendfalsehorizontal Horizontal AlignoptionLegendfalsecenter Vertical AlignoptionLegendfalsebottom Icon typeoptionLegendfalse TooltipbooleanMiscellaneousfalsetrue Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style\"},{\"title\":\"Button\",\"href\":\"/5-portal/v2/Features/Widgets/Types/BUTTON_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault TargetDATASETTINGTYPETargetfalse Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style Background colorcolorStylefalse Background hover colorcolorStylefalse Font colorcolorStylefalse Border colorcolorStylefalse LabeltextfalseClick me\"},{\"title\":\"Color Picker\",\"href\":\"/5-portal/v2/Features/Widgets/Types/COLOR_PICKER_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ColorDATASETTINGTYPEDatatruedataTypeSTATICDATATYPEvalueffffff Event TargetDATASETTINGTYPEDatatrue\"},{\"title\":\"Google Map\",\"href\":\"/5-portal/v2/Features/Widgets/Types/GOOGLE_MAP_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault API Keytexttrue MarkersDATASETTINGTYPEfalsedataTypeCALCULATEDDATATYPEvaluereturn lng 64404945 lat 32202924 lng 17470493 lat 47867077 lng 145141754 lat 37766372 lng 30785408 lat 46639301 lng 84693432 lat 10479372 lng 12900009 lat 47409968 lng 11272659 lat 59637472 lng 13189259 lat 47483221 lng 61013432 lat 14493688 lng 0490866 lat 40903783 lng 12852459 lat 47609519 lng 111407890 lat 36894037 lng 8838158 lat 46257746 lng 2933736 lat 43269159 lng 17815200 lat 43337255 lng 151750000 lat 16500000 lng 6108742 lat 62226676 lng 11616282 lat 43064389 lng 59070311 lat 52430295 lng 1314712 lat 45922199 lng 18239279 lat 47535341 lng 67549438 lat 20552438 Map ThemetextfalseVisit httpsmapstylewithgooglecom to generate your style Default Zoomnumberfalse3 Default Centertextfalselat 302667824 lng 977424987 Unique StylebooleanfalseSet to true if you dont want the theme to affect this widgets style\"},{\"title\":\"HTML\",\"href\":\"/5-portal/v2/Features/Widgets/Types/HTML_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault CodeDATASETTINGTYPEfalsedataTypeSTATICDATATYPEvalueHTMLn HTML WidgetnnCSSunderline n textdecoration underlinennJavaScriptJavaScriptn\"},{\"title\":\"Input\",\"href\":\"/5-portal/v2/Features/Widgets/Types/INPUT_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Input Typeoptionfalsetext ValueDATASETTINGTYPEfalse TargetDATASETTINGTYPEfalse Relevant AttributestextfalseProvide range options and other relevant input attributes\"},{\"title\":\"Line Chart\",\"href\":\"/5-portal/v2/Features/Widgets/Types/LINE_CHART_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Chart DataDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn temperature 61 humidity 50 wind 14 rainfall 5 timestamp 20160622T022614368Z temperature 52 humidity 60 wind 8 rainfall 6 timestamp 20160623T022741112Z temperature 73 humidity 70 wind 4 rainfall 0 timestamp 20160624T022751132Z Show DotsbooleanLinesfalsetrue LinesMULTIOBJECTSETTINGTYPELinesfalsedataKeytemperaturedataKeyhumiditydataKeywinddataKeyrainfall Line ColorsMULTIOBJECTSETTINGTYPEColorsfalse Data KeydataKeyX Axistruetimestamp LabeltextX Axisfalse OrientationoptionX Axisfalsebottom Left PaddingnumberX Axisfalse Right PaddingnumberX Axisfalse Y AxesMULTIOBJECTSETTINGTYPEY Axesfalseorientationleft Reference LinesMULTIOBJECTSETTINGTYPERef Linesfalse Margin TopnumberChartfalse Margin RightnumberChartfalse Margin BottomnumberChartfalse Margin LeftnumberChartfalse BrushbooleanBrushfalse Data KeydataKeyBrushfalse HeightnumberBrushfalse StrokecolorBrushfalse ShowHidebooleanGridfalsetrue Horizontal GridbooleanGridfalsetrue Vertical GridbooleanGridfalsetrue ShowHidebooleanLegendfalsetrue Font ColorcolorLegendfalse LayoutoptionLegendfalsehorizontal Horizontal AlignoptionLegendfalsecenter Vertical AlignoptionLegendfalsebottom Icon typeoptionLegendfalse Unique StylebooleanMiscellaneousfalseSet to true if you dont want the theme to affect this widgets style TooltipbooleanMiscellaneousfalsetrue\"},{\"title\":\"List\",\"href\":\"/5-portal/v2/Features/Widgets/Types/LIST_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault List SourceDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn label Item 1 valueitemid onelabel Item 2 valueitemid two Event TargetDATASETTINGTYPEDatafalse TitletextDatafalse Tracking Column NametextDatafalseName of column used to keep track of active list itemitemid Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style TitlecolorStylefalse List ItemcolorStylefalse Active ItemcolorStylefalse List Item FontcolorStylefalse\"},{\"title\":\"Pie Chart\",\"href\":\"/5-portal/v2/Features/Widgets/Types/PIE_CHART_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Chart DataDATASETTINGTYPEDatafalsedataTypeCALCULATEDDATATYPEvaluereturn name Page A data 300name Page B data 400name Page C data 500name Page D data 600 Margin TopnumberChartfalse Margin RightnumberChartfalse Margin BottomnumberChartfalse Margin LeftnumberChartfalse Unique StylebooleanMiscellaneousfalseSet to true if you dont want the theme to affect this widgets style Inner RadiusnumberMiscellaneousfalse LabelbooleanMiscellaneousfalsetrue TooltipbooleanMiscellaneousfalsetrue Customize Slice ColorsMULTIOBJECTSETTINGTYPEMiscellaneousfalse\"},{\"title\":\"Radial Gauge\",\"href\":\"/5-portal/v2/Features/Widgets/Types/RADIAL_GAUGE_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ValueDATASETTINGTYPEDatafalsedataTypeSTATICDATATYPEvalue90 Unique StylebooleanFormatfalseSet to true if you dont want the theme to affect this widgets style LabeltextFormatfalse Min ValuenumberFormatfalse Max ValuenumberFormatfalse100 Progress ColorcolorFormatfalse Background ColorcolorFormatfalse\"},{\"title\":\"Rule Builder\",\"href\":\"/5-portal/v2/Features/Widgets/Types/RULE_BUILDER_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault Nametexttrue Allow Createbooleanfalse Allow Deletebooleanfalse Allow Editbooleanfalse Allow OnOffbooleanfalse\"},{\"title\":\"Speedometer\",\"href\":\"/5-portal/v2/Features/Widgets/Types/SPEEDOMETER_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ValueDATASETTINGTYPEDatafalsedataTypeSTATICDATATYPEvalue90 SectionsMULTIOBJECTSETTINGTYPESectionsfalsepercentage25percentage25percentage25percentage25 ColorsMULTIOBJECTSETTINGTYPEColorsfalse Unique StylebooleanFormatfalseSet to true if you dont want the theme to affect this widgets style LabeltextFormatfalse Label ColorcolorFormatfalse999999 Min ValuenumberFormatfalse Max ValuenumberFormatfalse100 Arrow ColorcolorFormatfalseccc\"},{\"title\":\"Text\",\"href\":\"/5-portal/v2/Features/Widgets/Types/TEXT_WIDGET_COMPONENT\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ContentDATASETTINGTYPEDatafalsedataTypeSTATICDATATYPEvalueHello Unique StylebooleanStylefalseSet to true if you dont want the theme to affect this widgets style Font familytextStylefalse Font colorcolorStylefalse Font sizenumberStylefalse\"},{\"title\":\"Toggle\",\"href\":\"/5-portal/v2/Features/Widgets/Types/TOGGLE_WIDGET\",\"content\":\" Settings NameTypeGroupRequiredDescriptionDefault ValueDATASETTINGTYPEDatatruedataTypeCALCULATEDDATATYPEvaluereturn true Event TargetDATASETTINGTYPEDatatrue On LabeltextLabelsfalseOn Off LabeltextLabelsfalseOff Unique StylebooleanColorsfalseSet to true if you dont want the theme to affect this widgets style On ColorcolorColorsfalse Off ColorcolorColorsfalse Background ColorcolorColorsfalse\"},{\"title\":\"Types\",\"href\":\"/5-portal/v2/Features/Widgets/Types/_default\",\"content\":\"\"},{\"title\":\"Widgets\",\"href\":\"/5-portal/v2/Features/Widgets/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/5-portal/v2/Features/Widgets/overview\",\"content\":\" Widget A UI component that displays data from and sends data to a datasource Create a widget 1 Click the plus button on the pane you wish to add the widget to Add widgetstaticimgportalv2widgetsoverviewwidgetaddpng 2 Enter values for all required fields Modify widgetstaticimgportalv2widgetsovervieweditwidget1png 3 Click Apply to save your changes Edit a widget 1 Hover over the widget you wish to edit click the wrench icon when it appears Edit widgetstaticimgportalv2widgetsoverviewwidgetclickeditpng 2 Change the font color by clicking on the Style section and clicking the color palette Change font colorstaticimgportalv2widgetsovervieweditwidget2png 3 Change the Content type to Dynamic and select a datasource to hook up to Change datasourcestaticimgportalv2widgetsovervieweditwidget3png 4 Click Apply to save your changes Widget overviewstaticimgportalv2widgetsovervieweditwidget4png View in fullscreen mode 1 Click the fullscreen icon for the widget Full screen widgetstaticimgportalv2widgetsoverviewwidgetfullscreenpng Resize a widget A widget will fill the space of its pane if it doesnt have any siblings 1 Click the resize handle for the widget and drag to the desired shape Resize Widgetstaticimgportalv2widgetsoverviewwidgetresizepng 2 Click and hold any part of the widget and drag to the desired location Move Widgetstaticimgportalv2widgetsoverviewwidgetresize2png Delete a widget 1 Click the trashcan button of the widget you wish to delete Delete widgetstaticimgportalv2widgetsoverviewwidgetdeletepng 2 Confirm deletion when prompted\"},{\"title\":\"Features\",\"href\":\"/5-portal/v2/Features/_default\",\"content\":\"\"},{\"title\":\"CB_PORTAL Interface\",\"href\":\"/5-portal/v2/Features/cbPortalInterface\",\"content\":\"The CBPORTAL object hangs off of the window object and can be accessed in parsers CBPORTALselectPage Used in parsers to change the page programmatically CBPORTALgetPathParams Used in parsers to get information on URL path variables CBPORTALClearBlade Used in parsers to interact with the underlying ClearBlade JavaScriptAPI CBPORTALregisterDatasource Used by plugin files to register their definition with the portal framework CBPORTALregisterWidget Used by plugin files to register their definition with the portal framework CBPORTALportalModel Used internally by the portal framework to store datasource and widget instances CBPORTALLoadershowhtmlId Used to show loader programmatically param stringundefined the html id of the element you want to show the loading icon over if left off it will show over full page javascript targets or widget with setting HTML Id set to myBtn CBPORTALLoadershowmyBtn targets the entire portal CBPORTALLoadershow CBPORTALLoaderhidehtmlId Used to hide loader programmatically param stringundefined the html id of the element you want to show the loading icon over if left off it will show over full page javascript CBPORTALLoaderhidemyBtn CBPORTALLoaderwaitForpromise htmlId Used with a promise to automatically show and hide spinner It will add a loader when invoked and hide it when promise resolves or errors out param Promise the promise whose pendingresolved state will control the loader param stringundefined the html id of the element you want to show the loading icon over if left off it will show over full page Toy example paste this code into the console of the portal page to see the loader for 1 second javascript var myPromise new Promise resolve setTimeout resolvedone 1000 CBPORTALLoaderwaitFor myPromise Real world example javascript CBPORTALLoaderwaitFor datasourcesAddBooksendData title a new book createbookbtn \"},{\"title\":\"Flyout Pane\",\"href\":\"/5-portal/v2/Features/flyoutPane\",\"content\":\" Flyout Pane A customizable flyouthamburger menu that behaves much like a pane In this document we will cover the following 1 How to open the flyout menuopentheflyoutmenu 2 How to customize the menu titlecustomizethemenutitle 3 How to add widgets to the menuaddmenuwidgets 4 How to edit widgets in the menueditmenuwidgets Open the flyout menu 1 Click on the hamburger icon on the lefthand side of the header bar Open flyoutstaticimgportalv2flyoutpaneclickopenflyoutpng Customize the menu title 1 Hover over the menu title and click the wrench icon Edit titlestaticimgportalv2flyoutpaneclickedittitlepng The menu title defaults to the name of the portal but can be configured like any widget5portalv2featureswidgetsoverview Add menu widgets 1 Click the plus icon on the lefthand side of the header bar Add widgetstaticimgportalv2flyoutpaneclickaddwidgetpng Edit menu widgets Widgets can be edited in the same way that they are edited inside of a normal pane5portalv2featureswidgetsovervieweditawidget\"},{\"title\":\"Header Pane\",\"href\":\"/5-portal/v2/Features/headerPane\",\"content\":\" Header Pane A customizable header bar that behaves much like a pane Add widget to header 1 Click the plus button next to the toolbar and select New Header Widget Add header widgetstaticimgportalv2headerpaneclickaddwidgetpng Edit header widget 1 Hover over the widget you wish to edit and click the wrench icon Edit header widgetstaticimgportalv2headerpaneclickeditwidgetpng Reset header to default 1 Click the ellipsis icon in the toolbar and select Reset Header to Default Reset headerstaticimgportalv2headerpaneclickresetheaderpng\"},{\"title\":\"Keyboard shortcuts\",\"href\":\"/5-portal/v2/Features/keyboardShortcuts\",\"content\":\"commandMacOS shortcutWindowsLinux shortcut save portalcmdsctrls\"},{\"title\":\"Pages\",\"href\":\"/5-portal/v2/Features/pages\",\"content\":\" Page A container for panes A specific page can be referenced in a URL via the hash fragment In this document we will cover the following 1 How to create a pagecreateapage 2 How to navigate to a pagenavigatetopage 3 How to edit a pageeditpage 4 How to add children to a pageaddingchildrentopage 5 How to create parameterized pagesparameterizedpages 6 How to interact with pages programmaticallyprogrammaticinteraction 7 How to delete a pagedeletepage Create a page 1 Click the plus button next to the list of pages in the toolbar Add pagestaticimgportalv2pagesclickaddpagepng 2 Fill in the name of the page and hit Apply Create pagestaticimgportalv2pagescreatepagepng Navigate to page 1 Click on the name of the page you wish to navigate to Navigate to pagestaticimgportalv2pagesclicknavpagepng Edit page 1 Click on the pencil icon of the page you wish to edit Edit pagestaticimgportalv2pagesclickeditpagepng Adding children to page 1 Click on the plus button of the page you wish to add children to Add childstaticimgportalv2pagesclickaddchildpagepng 2 Save the children Save childstaticimgportalv2pagessavechildpagepng Parameterized pages 1 Edit the page youd like to make parameterized 2 Toggle the Parameter field to true and fill in the default value for the parameter Page Paramsstaticimgportalv2pagespageparameterpng 3 Hit Apply The default value for the parameter will be used when navigatingnavigatetopage to the page Programmatic interaction The portal provides an interface via the CBPORTAL object for interacting with pages from within a parser widget or datasource Selecting a page programmatically CBPORTALselectPagestatesTXcityAustin Example use case 1 User selects a state from a list of states so the portal should navigate to a new page Retrieving the current path parameters CBPORTALgetPathParams will return state TX city Austin if the current path is statesTXcityAustin Example use case 1 The current page changes so the portal should display data that is relevant to the URL parameters 2 The portal needs to load the correct state on initial startup when the URL is statesTXcityAustin Delete page 1 Click on the trash icon of the page you wish to delete Delete pagestaticimgportalv2pagesclickdeletepagepng 2 Confirm deletion when prompted\"},{\"title\":\"Panes\",\"href\":\"/5-portal/v2/Features/panes\",\"content\":\" Pane A responsive and resizable UI component that acts as a container for widgets Create a pane 1 Click the plus button in the lefthand toolbar Add panestaticimgportalv2panesaddpanepng Edit pane 1 Click the wrench icon of the pane you wish to edit Edit panestaticimgportalv2panespaneclickeditpng 2 Edit fields inside modal Edit pane modalstaticimgportalv2paneseditpanepng Pane fields Title Optional title for the pane Tabbed Pane Whether or not the pane will contain tabs Theme The type of theme for the pane Primary or Secondary Pane ID A unique ID for the pane Useful when switching tabs programmatically Resize pane 1 Click the resize handle on the bottom right corner or the pane and drag to desired shape Resize panestaticimgportalv2panespaneresizepng Delete pane 1 Click the trashcan button on the pane you wish to delete Delete panestaticimgportalv2panespaneclickdeletepng 2 Confirm deletion when prompted\"},{\"title\":\"Parsers\",\"href\":\"/5-portal/v2/Features/parsers\",\"content\":\" Parser A JavaScript function which supplies and optionally formats data coming from a datasource to a widget Table of Contents Parser Typesthreeparsertypes Create a Parsercreateaparser Debugging a Parserdebuggingaparser Retrieving Current Widget Valueretrievingcurrentwidgetvalue Setting Custom Widget Dimensionssettingcustomwidgetdimensions Retrieving Current Datasource Valueretrievingcurrentdatasourcevalue Accessing Any Datasource in Portalaccessinganydatasourceinportal Accessing Any Pane in Portalaccessinganypaneinportal Updating Current Tab of a Paneupdatingcurrenttabofapane Setting Custom Pane Dimensionssettingcustompanedimensions Three parser types Static Raw text that is not executed by a Javascript function Whatever is added to a static parser will show up in that widgets setting Calculated A JavaScript function that is not bound to a datasource Whatever is returned by the function will be used for that widgets setting Dynamic A Javascript function that is executed every time its corresponding datasource changes Create a parser In order to create a parser you must first have created a widget5portalv2featureswidgetsoverviewcreateawidget Note that if you want to create a dynamic parser you must have already created a datasource5portalv2featuressourcesoverviewcreateadatasource 1 Click the wrench icon for the widget youd like to create a parser for Edit widgetstaticimgportalv2widgetsoverviewwidgetclickeditpng 2 Change the content type to dynamic Edit widget 2staticimgportalv2widgetsovervieweditwidget3png 3 Open the parser window by clicking the Incoming parser button Incoming parserstaticimgportalv2parsersclickincomingparserpng 4 Modify the parser to include some more text Edit incoming parserstaticimgportalv2parserseditincomingparserpng 5 Click the Test button to view your changes Test incoming parserstaticimgportalv2parserstestincomingparserpng 6 Click Apply to save your changes Debugging a parser 1 Open the JavaScript console in your browser This can usually be accomplished by rightclicking on the page and selecting Inspect 2 Click the debug button next to the parser Click debugstaticimgportalv2parsersclickdebugpng 3 Your browsers JavaScript engine will now halt execution anytime this parser is executed and allow you to step through the code Retrieving current widget value Use the this keyword to access the current widget that uses the datasource The widgets current value can be accessed with thiswidget Setting custom widget dimensions Use the this keyword to set custom dimensions for the current widget based on datasource value changes The widgets thissetCustomDimensionsw h method accepts two arguments width and height both measured in grid units the number of rows or columns occupied by the widget One height unit for a widget is 150 pixels and each additional unit is about 160 pixels Width units for widgets are equivalent to the widthin pixels of the container pane divided by 42 with the first width unit being that amount by 10 Panes width units are determined by dimensions of the devices display See Setting Custom Pane Dimensionssettingcustompanedimensions for information on determining pane width For example in a pane with a width of 567 pixels thissetCustomDimensions3 3 a width unit would be equal to 135px567 42 with the first width unit equal to 125px135 10 and each height unit would be 160px with the first being 150 px This would render a widget with size 395px125 135 2 x 470px150 160 2 Retrieving current datasource value Use the this keyword to access the current datasource The current widgets datasource value can be accessed with thisdatasource Accessing any datasource in portal Use the datasources variable to access any datasource in the portal by name That datasources latest data can be accessed with datasourcesdatasourceNamelatestData Accessing any pane in portal Use the panes variable to access any pane in the portal by custom pane ID5portalv2featurespaneseditpane panescustomPaneId Updating current tab of a pane Use the updateCurrentTab method to update the tab displayed within any pane accessed by the panes variable and custom pane ID5portalv2featurespaneseditpane The methods argument is the pane number to be displayed panescustomPaneIdupdateCurrentTab2 Setting custom pane dimensions Use the setCustomDimensionsw h method to set custom dimensions for any pane accessed using the panes variable and custom pane ID5portalv2featurespaneseditpane The method accepts two arguments width and height both measured in grid units the number of rows or columns occupied by the widget One height unit for pane is 150 pixels and each additional height unit is about 160 pixels Width units for panes depends on the width of the portal on the current device For displays with a width greater than 1200 pixels a width unit is equal to display width 122 with the first width unit equal to that amount minus 10 For displays with a width greater than 996 pixels a width unit is equal to display width 102 with the first width unit equal to that amount minus 10 For devices with a display greater than 768 a width unit is equal to the display width 61 with the first width unit equal to that amount minus 10 For displays greater than 480 pixels a width unit is equal to the display width 42 with the first width unit equal to that amount minus 10 For smaller displays a width unit is equal to the display width 34 with the first width unit equal to that amount minus 10 displayWidth heightUnit firstHeightUnit widthUnit firstWidthUnit 1200px 160 150 displayWidth 122 widthUnit 10 996px 160 150 displayWidth 102 widthUnit 10 768 160 150 displayWidth 61 widthUnit 10 480 160 150 displayWidth 42 widthUnit 10 480 160 150 displayWidth 34 widthUnit 10 For example on a 1200px display panescustomPaneIDsetCustomDimensions6 3 a width unit would be 118px1200 102 with the first being 108px118 10 and a height unit would 160px with the first being 150px This would render a pane of 698px108 118 5 x 470px150 160 2\"},{\"title\":\"Screen size editor\",\"href\":\"/5-portal/v2/Features/screenSizeEditor\",\"content\":\" Screen size editor Allows for the portal to adjust the layout of panes and widgets at different screen sizes In this document we will cover 1 How to configure layouts for different screen sizesconfigurelayouts Configure layouts This guide assumes that panes and widgets have already been added to your portal 1 Select the screen size youd like to change the layout for by clicking the section in the toolbar at the top of the screen Select screen sizestaticimgportalv2screensizeeditorclickscreensizepng 2 Adjust the layout by resizing your panes5portalv2featurespanesresizepane andor resizing your widgets5portalv2featureswidgetsoverviewresizeawidget Adjust layoutstaticimgportalv2screensizeeditorchangelayoutpng Now your portal will have a unique layout for each screen size\"},{\"title\":\"Style Editor\",\"href\":\"/5-portal/v2/Features/styleEditor\",\"content\":\" Style Editor Allows for the entire portal to be themed in an efficient manner In this document we will cover 1 How to open the style editoropenthestyleeditor 2 How to change the portal theme on a macro levelmacrostyleadjustments 3 How to change the portal theme on a micro levelmicrostyleadjustments 4 How to make a specific widgets style uniqueuniquewidgetstyle 5 How to export a themeexporttheme 6 How to import a themeimporttheme 7 How to reset the themeresettheme back to the default Open the style editor 1 Click the paintbrush icon in the toolbar Open editorstaticimgportalv2styleeditorclickopeneditorpng Macro style adjustments The style editor allows for macro adjustments that affect the overall theme the themes palette and the colors used in graphs Changing the overall theme 1 Click on the theme youd like to use Select themestaticimgportalv2styleeditorclickselectthemepng Changing the themes palette 1 Open the Change Palette section Click Change Palettestaticimgportalv2styleeditorclickchangepalettepng 2 Adjust the desired palette settings Adjust palettestaticimgportalv2styleeditoradjustpalettepng Changing the graph colors 1 Open the Adjust graph colors section Click adjust graph colorsstaticimgportalv2styleeditorclickadjustgraphcolorspng 2 Adjust the desired graph colors Adjust graph colorsstaticimgportalv2styleeditoradjustgraphcolorspng Micro style adjustments For this example we will assume that two Text Widgets have been created5portalv2featureswidgetsoverviewcreateawidget 1 Click the More Options button in the footer of the editor Click More Optionsstaticimgportalv2styleeditorclickmoreoptionspng 2 Click the Widgets button Click Edit Widgetsstaticimgportalv2styleeditorclickeditwidgetspng 3 Select the widget you wish to edit well be using the Text widget in this example 4 Change the desired settings for the widget Change widget stylestaticimgportalv2styleeditorchangewidgetstylepng Now every text widget will use this new style unless we specify that a widget should have a unique styleuniquewidgetstyle Unique widget style A widget that has the unique style setting enabled will ignore the styles stated in the portal theme 1 Edit the widget5portalv2featureswidgetsovervieweditawidget that should have a unique style 2 Find the Unique Style setting and check the box next to it Click unique stylestaticimgportalv2styleeditorclickuniquestylepng Export theme A theme can be exported for reuse in other portals 1 Click the ellipsis button in the top right of the style editor and select Export theme Export themestaticimgportalv2styleeditorclickexportthemepng Import theme A theme can be imported into a portal in order to easily brand multiple portals with a consistent theme 1 Click the ellipsis button in the top right of the style editor and select Import theme Import themestaticimgportalv2styleeditorclickimportthemepng Reset theme A theme can be reset to the default if changes are deemed unsatisfactory 1 Click the ellipsis button in the top right of the style editor and select Reset Reset themestaticimgportalv2styleeditorclickresetthemepng\"},{\"title\":\"V2\",\"href\":\"/5-portal/v2/_default\",\"content\":\"\"},{\"title\":\"Getting Started\",\"href\":\"/5-portal/v2/getting_started\",\"content\":\"This guide will demonstrate how to create and access a V2 portal Creating A Portal 1 Login to the ClearBlade Platform and select portal in the system that you wish to link a portal CLick portal on desired systemstaticimgportalv2gettingstartedcreateportal5png 2 Create a new portal by clicking new on the lefthand side of the navigation bar Click to add new portalstaticimgportalv2gettingstartedcreateportal6png 3 Enter a name for your portal Create a new portalstaticimgportalv2gettingstartedcreateportal1png Assign portal to a role Click the wrench next to your new portal and select the security tab in order to give permission for our users to access and edit the portal Open portal security settingsstaticimgportalv2gettingstartedcreateportal2png This step assumes we have users in our system if not please add users in Auth Users Giving the authenticated role access to read will allow these users to sign in and operate a portal By giving administrator roles CRUD access they will be able to modify the portal that will reflect in the public view Give roles access to portalstaticimgportalgettingstartedcreateportal5png Access portal Now that we have access to open a portal click the portals link and sign in with an administrators credentials Click portal linkstaticimgportalgettingstartedcreateportal6png Login to portalstaticimgportalv2gettingstartedcreateportal3png Welcome to your portal Delete portal 1 Click the wrench next to your new portal Open portal settingsstaticimgportalv2gettingstartedcreateportal2png 2 Click the trash icon to delete Delete portalstaticimgportalv2gettingstartedcreateportal4png Confirm the deletion when prompted\"},{\"title\":\"IPM\",\"href\":\"/6-ipm/_default\",\"content\":\"\"},{\"title\":\"Overview\",\"href\":\"/6-ipm/\",\"content\":\"IoT Package Manager ipm is a package management registry and tool for scaling up the development of IoT solutions ipm contains packages which points to GitHub repositories which must contain 1 packagejson in root of the repository see spec here for this document 2 The assets inside this repo must be within cblib spec herehttpsgithubcomclearbladecblib Note ipm packagejson spec is a superset of npms packagejson As a result any existing npm repo can be registered with ipm Example Package jstatstatisticstoolkit httpsgithubcomrreinoldjstatstatisticstoolkit This example repo contains packagejson packagejson required cblib spec system systemjson required codeservices optional codelibraries optional data optional devices optional edges optional portals optional roles optional users optional deployjson optional\"},{\"title\":\"package.json\",\"href\":\"/6-ipm/spec\",\"content\":\" Overview ipm packagejson spec is a superset of npms packagejson ipm spec adds metadata tailored for the Internet of Things such as gatewaysgateways cloudcloud protocolsprotocols thingsthings programminglangprogramminglang assettypesassettypes imageurlimageurl npm packagejson spec herehttpsdocsnpmjscomfilespackagejson Full Example javascript assettypes Code Libraries Code Services Portals Collections Triggers Adapters Roles Timers Plugins Users Edges Devices version100 homepagehttpsgooglecom license MIT keywords BLE edge adapter ML SalesForce Notifications Stepper Motor MQ Rules Engine Integration Building Management Blueprint admin administration monitoring anomaly aberration anomaly detection bayesian decision tree programminglangC cloudAWSGCloud thingsNXP MENPthunderboardallen bradley domains IIoTDevice ManagementBuilding ManagementFleet Management protocolsSMShttpRESTNFCBLECoAPSNMPbacnet gatewaysRaspberry Pi dependencies package1 package2 imageurlhttpsimagehostercomaHBV74b descriptionThis library accomplishes a goal authoremailrreinoldclearbladecom privatefalse Additions to npm spec The following keys belong to the superset of npms packagejson assettypes Types of assets contained in a package Ex A portal for 3D Map Rendering with some business logic will contain PortalCode Services Array of type string All available values javascript assettypes Code Libraries Code Services Portals Collections Triggers Adapters Roles Timers Plugins Users Edges Devices gateways Array of type string No restrictions on values some examples javascript gateways Raspberry Pi 3 cloud Array of type string No restrictions on values some examples javascript cloud AWS GCloud protocols Array of type string No restrictions on values some examples javascript protocols amqp zigbee things Array of type string No restrictions on values some examples javascript things watersensor pressuresensor programminglang Array of type string No restrictions on values some examples javascript programminglang python c imageurl String No restrictions on value an example imageurlhttpsiimgurcom9oluUP8png\"},{\"title\":\"Welcome to ClearBlade Platform Docs!\",\"href\":\"/\",\"content\":\" date 20160308T2107130100 title Welcome to ClearBlade Platform Docs type index weight 0 ClearBlade is the enterprise Internet of Things platform to rapidly engineer and run realtime scalable Industrial IoT applications ClearBlade enables companies to build IoT solutions that make streaming data actionable by combining business rules and machine learning with powerful visualizations and integrations to existing business systems Built from an enterprisefirst perspective the ClearBlade Platform runs securely in any vendor cloud onpremise or in hybrid environments Launch your project with one of our tutorials Integrate your applications with ClearBlade using our SDKs and Tools below \"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/cb-utils/services/docsIndex.json\n// module id = ./app/cb-utils/services/docsIndex.json\n// module chunks = 36"],"sourceRoot":""}